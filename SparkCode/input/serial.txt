     1	================= PROGRAMMING THE SERIAL PORT ==================
     2	
     3	     Here's some bits and pieces that might be of interest.
     4	
     5	----------------------------------------------------------------
     6	INT 14 - SERIAL I/O - INITIALIZE USART
     7	   REG AH = 0
     8	   REG AL = INITIALIZING PARAMETERS
     9	   BIT  7 - 6 - 5 4 - 3  2    1 - 0
    10	  -BAUD RATE-    PARITY  STOP    WORD
    11	           BITS  LENGTH
    12	  000  110 BD    00 NONE 0-1   10 - 7
    13	  001  150 BD    01 ODD 1-2   11 - 8
    14	  010  300 BD    11 EVEN
    15	  011  600 BD
    16	  100 1200 BD
    17	  101 2400 BD
    18	  110 4800 BD
    19	  111 9600 BD (4800 ON PCjr)
    20	       DX = PORT NUMBER
    21	----------------------------------------------------------------
    22	INT 14 - SERIAL I/O - TRANSMIT CHARACTER
    23	   REG AH = 1
    24	       AL = CHARACTER
    25	       DX = PORT NUMBER
    26	   ON RETURN:
    27	      REG AH = RS-232 STATUS CODE
    28	           BIT 0 = DATA READY
    29	               1 = OVERRUN ERROR
    30	               2 = PARITY ERROR
    31	               3 = FRAMING ERROR
    32	               4 = BREAK DETECTED
    33	               5 = TRANSMISSION BUFFER REG. EMPTY
    34	               6 = TRANSMISSION SHIFT REG. EMPTY
    35	               7 = TIME OUT
    36	          AL = MODEM STATUS
    37	           BIT 0 = DELTA CLEAR-TO-SEND
    38	               1 = DELTA DATA-SET-READY
    39	               2 = TRAILING EDGE RING DETECTED
    40	               3 = CHANGE, RECEIVE LINE SIGNAL DETECTED
    41	               4 = CLEAR-TO-SEND
    42	               5 = DATA-SET-READY
    43	               6 = RING DETECTED
    44	               7 = RECEIVE LINE SIGNAL DETECTED
    45	----------------------------------------------------------------
    46	INT 14 - SERIAL I/O - RECEIVE CHARACTER
    47	   REG AH = 2
    48	   ON RETURN:
    49	      REG AL = CHARACTER RECEIVED
    50	      REG AH = RS-232 STATUS CODE (SEE ABOVE)
    51	----------------------------------------------------------------
    52	INT 14 - SERIAL I/O - GET USART STATUS
    53	   REG AH = 3
    54	   ON RETURN:
    55	      REG AH = RS-232 STATUS CODE (SEE ABOVE)
    56	      REG AL = MODEM STATUS CODE (SEE ABOVE)
    57	
    58	----------------------------------------------------------------
    59	  The following applies to COM1 (COM2 addresses are different).
    60	----------------------------------------------------------------
    61	
    62	procedure SendChar(C: byte);
    63	begin
    64	  while (Port[$3FD] and $20)=0 do ;
    65	  Port[$3F8] := C;
    66	end;
    67	
    68	Function ReadChar: byte;
    69	begin
    70	  while not odd(Port[$3FD]) do ;
    71	  ReadChar:= Port[$3F8];
    72	end;
    73	
    74	procedure SetSerial(BaudRate: Integer);
    75	{ Set serial parameters on to COM1:BaudRate,N,8,1 }
    76	var
    77	  x  : integer;
    78	begin
    79	  x := trunc(115200.0 / BaudRate);
    80	  Port[$3FB] := 128;
    81	  Port[$3F8] := x and 255;
    82	  Port[$3F9] := x shr 8;
    83	  Port[$3FB] := 3;   {Line Control Register}
    84	  Port[$3FC] := 3;   {Modem Control Register}
    85	  Port[$3F9] := 0;   {Interupt Enable Register}
    86	end;
    87	
    88	----------------------------------------------------------------
    89	
    90	Port(hex)      Description
    91	
    92	3F8      I/O   Transmitter Holding Register / Receiver Data Register
    93	3F8/3F9   O    Baud Rate Divisor
    94	3F9      I/O   Interupt Enable Register
    95	3FA       I    Interupt Identification Register
    96	3FB      I/O   Line Control Register
    97	3FC       O    Modem Control Register
    98	3FD       I    Line Status Register  (see "RS-232 STATUS CODE" above)
    99	3FE       I    Modem Status Register (see above for bits)
   100	
   101	Programming the 8250 Serial Chip.
   102	
   103	1. Set Baud Rate.
   104	  x := trunc(115200.0 / BaudRate);
   105	  Port[$3FB] := 128;
   106	  Port[$3F8] := x and 255;
   107	  Port[$3F9] := x shr 8;
   108	
   109	  Take For example 2400 baud; the following would be needed
   110	  in Assembly Language:
   111	
   112	           mov   dx,3FBh
   113	           mov   al,128
   114	           out   dx,al
   115	           mov   dx,3F8h
   116	           mov   al,30H
   117	           out   dx,al
   118	           inc   dx
   119	           mov   al,0
   120	           out   dx,al
   121	
   122	
   123	- You might like to set up a table if more that one baud rate is used.
   124	
   125	
   126	2. Set LCR ($3FB)
   127	  Bit 7    Normally 0, set to 1 to change baud rate
   128	      6    Normally 0 (Break Disabled).
   129	      5    Normally 0, "Stick Parity" disabled
   130	      4    Parity: 0 = Odd, 1 = Even
   131	      3    Parity: 0 = No parity generated, 1 = Generate parity
   132	      2    Stop Bits: 0 = 1 bit, 1 = 2 bits (or 1.5 if Char len = 5 bits)
   133	    1+0    Character Length:
   134	           00 = 5 bits, 01 = 6 bits, 10 = 7 bits, 11 = 8 bits.
   135	
   136	  For 8 Data Bits, No Parity, 1 Stop Bit - value of LCR is 3
   137	
   138	3. Set MCR ($3FC)
   139	
   140	 Bit 7..5  Always  0
   141	        4  Loop Back (output goes straight to input)
   142	        3  Normally 0, set to 1 for serial interrupt.
   143	        2  Not Used
   144	        1  Activate RTS line
   145	        0  Activate DTR line
   146	
   147	  Value of MCR is normally 3.  I won't go into the details of interrupts
   148	  send me a message if you do need the info.
   149	
   150	
   151	4. Set up IER ($3F9)
   152	
   153	  This is normally 0.
   154	
   155	
   156	That's all that's needed to set it up.
   157	
   158	
   159	To receive a character:
   160	  A character is ready in the Receiver Data Register  when bit 0 ("Received
   161	  Data Ready") of line status register is 1. See ReadChar function.
   162	
   163	To send a character.
   164	  You must wait until the previous character has been sent.
   165	  Bit 5 ("Transmitter Holding Register Empty") will be zero when it is
   166	  O.K for you to send a character. See the SendChar procedure.
   167	
   168	                                                          ==== PY ====
   169	