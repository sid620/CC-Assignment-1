     1	_MAKING THE MOVE TO MODULA-2_
     2	by J.V. Auping and Chis Johnston
     3	
     4	[LISTING ONE]
     5	
     6	DEFINITION MODULE ModPlot;
     7	
     8	(* Title   : High level Modula-2 Graphics library interface
     9	Author  : Judy Auping
    10	System  : PC Graphics
    11	Compiler: LOGITECH MODULA-2/86
    12	*)
    13	
    14	  FROM DataDefs IMPORT
    15	    DeviceType,UnitsType,SizeType,AngleType,LineType,ColorType,
    16	    FontType,OriginType,SymbolType,ModeType,STRING80;
    17	
    18	  EXPORT QUALIFIED
    19	    GraphInit,SetPlotDevice,SetPlotArea,SetScaledArea,SetScale,SetUnits,
    20	    SetCharSize,SetLabelAngle,SetLineType,SetPenColor,SetBackgroundColor,
    21	    SetLabelOrigin,SetFixedDigits,ReturnRatio,SetFontType,
    22	    Draw,Move,IncDraw,IncMove,DrawXAxis,DrawYAxis,DrawAxes,DrawGrid,
    23	    DrawLabel,DrawLabelledAxes,DrawLabelledGrid,DrawFrame,DrawSymbol,
    24	    Where,NewScreen,CloseGraphics;
    25	
    26	  PROCEDURE GraphInit;
    27	     (* Initializes system-MUST be called before any output generated *)
    28	  PROCEDURE SetPlotDevice(GraphDevice: DeviceType);
    29	     (* Selects output device for subsequent graphics commands *)
    30	  PROCEDURE SetPlotArea(XMin,XMax,YMin,YMax: REAL);
    31	     (* Sets the 'clip' area in % of absolute device boundaries*)
    32	  PROCEDURE SetScaledArea(XMin,XMax,YMin,YMax: REAL);
    33	     (* Sets the area in % of absolute device boundaries to which
    34	        subsequent SetScale takes effect*)
    35	  PROCEDURE SetScale(XMin,XMax,YMin,YMax: REAL);
    36	     (* Sets the user scale *)
    37	  PROCEDURE SetUnits(GraphUnits: UnitsType);
    38	     (* Sets either User (Scaled units) or Device (absolute units) *)
    39	  PROCEDURE SetCharSize(CharSize: SizeType);
    40	     (* Sets character size for subsequent labels *)
    41	  PROCEDURE SetLabelAngle(LabelRotation: AngleType);
    42	     (* Sets the angle of rotation of subseqent labels *)
    43	  PROCEDURE SetLineType(LineTypeSelected: LineType);
    44	     (* Sets the line type for subsequent Draw commands *)
    45	  PROCEDURE SetPenColor(PenColor: ColorType);
    46	     (* Sets the pen color for subsequent output *)
    47	  PROCEDURE SetBackgroundColor(BackgroundColor: ColorType);
    48	     (* Sets the background color (screen only) *)
    49	  PROCEDURE SetLabelOrigin(LabelOrigin: OriginType);
    50	     (* Determines orientation relative to current position with
    51	        which subsequent labels will be drawn *)
    52	  PROCEDURE SetFixedDigits(XNumDigits,YNumDigits: CARDINAL);
    53	     (* Sets number of digits to right of decimal point for
    54	        subsequent DrawLabelledAxes or DrawLabelledGrid *)
    55	  PROCEDURE ReturnRatio(): REAL;
    56	     (* Returns the ratio of the physical dimensions of the
    57	        plotting area of the current device *)
    58	  PROCEDURE SetFontType(FontTypeSelected: FontType);
    59	     (* Sets the font type for subsequent label commands *)
    60	  PROCEDURE Draw(XCoord,YCoord: REAL);
    61	     (* Draw a line from the active position to the specified coords *)
    62	  PROCEDURE Move(XCoord,YCoord: REAL);
    63	     (* Move the active position to the specified coordinates *)
    64	  PROCEDURE IncDraw(XIncr,YIncr: REAL);
    65	     (* Do an incremental draw from the active position *)
    66	  PROCEDURE IncMove(XIncr,YIncr: REAL);
    67	     (* Do an incremental move to the new active position *)
    68	
    69	  (* In the following set of axis drawing and labelling procedures,
    70	     the variables XIntercept, YIntercept, XTicSpacing, YTicSpacing
    71	     XMin, XMax, YMin, and YMax are all interpreted according to the
    72	     most recent SetUnits, SetScaledArea, and Set Scale commands.
    73	     MajorCount is an integer that specifies the number of tic intervals
    74	     between major tic marks.  In DrawLabelledAxes and DrawLabelledGrid,
    75	     if MajorCount is positive, tic marks are drawn perpendicular to the
    76	     corresponding axis; if negative, tic marks are parallel.
    77	     MajorTicFrac specifies the size of the major tics as a percentage
    78	     of the length of the corresponding axis.*)
    79	
    80	  PROCEDURE DrawXAxis(YIntercept,TicSpacing,XMin,XMax: REAL;
    81	                  MajorCount: INTEGER;
    82	                  MajorTicFrac: REAL);
    83	     (* Draw an X-axis from XMin to XMax at the specified y-intercept*)
    84	  PROCEDURE DrawYAxis(XIntercept,TicSpacing,YMin,YMas: REAL;
    85	                  MajorCount: INTEGER;
    86	                  MajorTicFrac: REAL);
    87	     (* Draw a Y-axis from YMin to YMax at the specified x-intercept*)
    88	  PROCEDURE DrawAxes(XIntercept,YIntercept,XTicSpacing,YTicSpacing: REAL;
    89	                 XMajorCount,YMajorCount: INTEGER;
    90	                 XMajorTicFrac,YMajorTicFrac: REAL);
    91	     (* Draws full-scale axes intersecting at XIntercept and YIntercept*)
    92	  PROCEDURE DrawGrid(XIntercept,YIntercept,XTicSpacing,YTicSpacing: REAL;
    93	                 XMajorCount,YMajorCount: INTEGER;
    94	                 XMinorTicFrac,YMinorTicFrac: REAL);
    95	     (* Draws a full-scale grid, with lines spaced symmetrically
    96	        around XIntercept,YIntercept *)
    97	  PROCEDURE DrawLabel(LabelString: ARRAY OF CHAR);
    98	     (* Writes LabelString at the current active position according
    99	        to the current CharSize, LabelOrigin, and LabelRotation settings*)
   100	  PROCEDURE DrawLabelledAxes(XIntercept,YIntercept,XTicSpacing,
   101	                              YTicSpacing: REAL;
   102	                              XMajorCount,YMajorCount: INTEGER;
   103	                              XMajorTicFrac,YMajorTicFrac: REAL);
   104	      (* Draws a pair of axes in the same manner as DrawAxes.  Puts
   105	         labels at the major tic marks according to the current
   106	         CharSize, XNumDigits, and YNumDigits settings *)
   107	  PROCEDURE DrawLabelledGrid(XIntercept,YIntercept,XTicSpacing,
   108	                              YTicSpacing: REAL;
   109	                              XGridSpacing,YGridSpacing: INTEGER;
   110	                              XMajorTicFrac,YMajorTicFrac: REAL);
   111	      (* Draws a full-scale grid as in DrawGrid and labels the grid
   112	         lines as in DrawLabelledAxes *)
   113	  PROCEDURE DrawFrame;
   114	       (* Draws a box around the current plotting area *)
   115	  PROCEDURE DrawSymbol(XCoord,YCoord: REAL;
   116	                       Symbol: SymbolType;
   117	                       Size: REAL);
   118	       (* Draws the indicated symbol centered at XCoord,YCoord.
   119	          Size is specified in mm *)
   120	  PROCEDURE Where(VAR XCoord,YCoord: REAL);
   121	       (* Returns the coordinate values of the current active position*)
   122	  PROCEDURE NewScreen(Mode: ModeType);
   123	       (* Clears the screen and sets the mode. No cursor in Menu mode*)
   124	  PROCEDURE CloseGraphics;
   125	       (* Cleans up the interrupts and restores to normal *)
   126	END ModPlot.
   127	
   128	
   129	[LISTING TWO]
   130	
   131	DEFINITION MODULE GDriver;
   132	(* Title   : Low Level CRT and Plotter Draw module
   133	Author  : Chris Johnston
   134	System  : Modula-2 Plotting System
   135	Compiler: LOGITECH MODULA-2/86
   136	*)
   137	
   138	  FROM DataDefs IMPORT ModeType, STRING80, DevPresentType;
   139	
   140	    EXPORT QUALIFIED
   141	      ReadDevices, DrawAbs, MoveAbs, DrawString, SetMode, CleanUp;
   142	
   143	   PROCEDURE ReadDevices(VAR DevicesPresent : DevPresentType);
   144	     (* Finds out what devices are available: EGA/CGA and
   145	         IBM7372A/IBM7372B/IBM7371. An HP 7470 is reported
   146	         as an IBM7371 and the HP 7475 is reported as an
   147	         IBM7372A or B depending upon the paper size selected *)
   148	
   149	   PROCEDURE DrawAbs(XCoord, YCoord : CARDINAL);
   150	     (* Draw a line from the current location to XCoord, YCoord
   151	         on the selected device. Line type and color read from system
   152	         globals  *)
   153	
   154	   PROCEDURE MoveAbs(XCoord, YCoord : CARDINAL);
   155	     (* Move from the current location to XCoord, YCoord on the
   156	         selected device with the pen raised. *)
   157	
   158	   PROCEDURE DrawString(XCoord, YCoord : CARDINAL;
   159	                        LabelString    : ARRAY OF CHAR);
   160	     (* Draw the character string LabelString starting at XCoord, YCoord.
   161	         The font, color, size, and rotation are selected from system globals
   162	*)
   163	
   164	   PROCEDURE SetMode( Mode : ModeType);
   165	     (* Set the mode to text or graphics and clear the screen. This call has
   166	         ** NO EFFECT ** if the selected device is a plotter *)
   167	
   168	   PROCEDURE CleanUp;
   169	     (* clean up the interrupt drivers and the character set at the end. *)
   170	
   171	END GDriver.
   172	
   173	
   174	
   175	[LISTING THREE]
   176	
   177	DEFINITION MODULE DataDefs;
   178	
   179	(* Title   : Data Definitions
   180	Author  : Judy Auping
   181	System  : PC Graphics
   182	Compiler: LOGITECH MODULA-2/86
   183	*)
   184	
   185	  EXPORT QUALIFIED
   186	    DeviceType,UnitsType,SizeType,AngleType,LineType,ColorType,
   187	    FontType,OriginType,SymbolType,DevPresentType,ModeType,STRING80,
   188	    GraphDevice,LineTypeSelected,CharSize,FontTypeSelected,
   189	    PenColor,BackgroundColor,LabelRotation,DeviceXMax,DeviceYMax,
   190	    ErrorString, DriverError;
   191	
   192	  TYPE
   193	    DeviceType = (EGA,CGA,IBM7372A,IBM7372B,IBM7371);
   194	    UnitsType = (User,Device);
   195	    SizeType = (Small,Med,Large,XLarge);
   196	    AngleType = (Deg0,Deg45,Deg90,Deg135,Deg180,Deg225,Deg270,Deg315);
   197	    LineType = (Solid, EndPoint, Dotted, ShortDash, LongDash);
   198	    ColorType = (Black,Blue,Green,Cyan,Red,Magenta,Brown,White,
   199	                 DarkGray,LightBlue,LightGreen,LightCyan,
   200	                 LightRed,LightMagenta,Yellow,IntensifiedWhite);
   201	    FontType = (Standard,Italic);
   202	    OriginType = (UpperRight,CenterRight,LowerRight,UpperMiddle,
   203	                  CenterMiddle,LowerMiddle,UpperLeft,CenterLeft,
   204	                  LowerLeft);
   205	    SymbolType = (Circle,Square,Triangle,Asterisk,Cross,Plus);
   206	    DevPresentType = ARRAY DeviceType OF BOOLEAN;
   207	    ModeType = (Graphics,Text,Menu);
   208	    STRING80 = ARRAY[0..79] OF CHAR;
   209	
   210	  VAR
   211	    GraphDevice: DeviceType;
   212	    LineTypeSelected: LineType;
   213	    CharSize: SizeType;
   214	    FontTypeSelected: FontType;
   215	    PenColor: ColorType;
   216	    BackgroundColor: ColorType;
   217	    LabelRotation: AngleType;
   218	    DeviceXMax,DeviceYMax: CARDINAL;
   219	    DriverError: BOOLEAN;
   220	    ErrorString: STRING80;
   221	
   222	END DataDefs.
   223	
   224	
   225	
   226	[LISTING FOUR]
   227	
   228	MODULE Example;
   229	(* Title: Example of using the ModPlot graphics library
   230	Author: Judy Auping
   231	System: PC Graphics
   232	*)
   233	
   234	  FROM DataDefs IMPORT
   235	    DeviceType,SizeType,ColorType,OriginType;
   236	
   237	  FROM ModPlot IMPORT
   238	    GraphInit,SetPlotArea,SetScaledArea,SetScale,DrawAxes,SetPenColor,
   239	    Move,Draw,DrawFrame,NewScreen,CloseGraphics,SetLabelOrigin,DrawLabel,
   240	    SetCharSize,IncDraw,SetPlotDevice;
   241	
   242	  FROM MathLib0 IMPORT sin;
   243	
   244	  FROM InOut IMPORT Read,WriteString,WriteLn;
   245	
   246	TYPE
   247	  CornerType = (UpLeft,UpRight,LowLeft,LowRight);
   248	
   249	CONST
   250	  NPnts = 1000; pi = 3.14159;
   251	
   252	VAR
   253	  XValue: ARRAY[1..NPnts] OF REAL;
   254	  YValue: ARRAY [UpLeft..LowRight] OF ARRAY[1..NPnts] OF REAL;
   255	  NumTerms: ARRAY[UpLeft..LowRight] OF CARDINAL;
   256	  IPlot: CornerType;
   257	  IPnt,ITerm: CARDINAL;
   258	  x,NextTerm: REAL;
   259	  Input: CHAR;
   260	
   261	PROCEDURE GeneratePlotArrays;
   262	(* This procedure generates arrays of data points for the Fourier series
   263	   approximation of a sawtooth wave, where
   264	
   265	       y = 2 (sin x - sin(2x)/2 + sin(3x)/3 - sin(4x)/4 + ... )
   266	
   267	   The XValue array contains the x values for the plot in units of pi, where
   268	   the values vary from zero to  4pi.
   269	
   270	   The YValue array of arrays contains four arrays of y values for
   271	   different numbers of terms in the summation approximation. *)
   272	
   273	BEGIN
   274	  WriteString("Generating approximation functions"); (* Inform user *)
   275	  NumTerms[UpLeft] := 5;     NumTerms[UpRight] := 10;
   276	  NumTerms[LowLeft] := 20;  NumTerms[LowRight] := 100;
   277	
   278	  FOR IPnt := 1 TO NPnts DO
   279	
   280	    IF (IPnt MOD 100)=0 THEN
   281	      WriteString(" ."); (* Let the user know the progress of *)
   282	    END (* if *);        (* the calculations.*)
   283	
   284	    FOR IPlot := UpLeft TO LowRight DO
   285	      YValue[IPlot,IPnt] := 0.0;  (* Initialize the terms. *)
   286	    END (* for *);
   287	
   288	    x := FLOAT(IPnt) * (4.0 * pi)/FLOAT(NPnts);
   289	    XValue[IPnt] := x/pi;
   290	
   291	    FOR ITerm := 1 TO NumTerms[LowRight] DO
   292	      IF (ITerm MOD 2)=0 THEN (* even terms are negative *)
   293	        NextTerm := -2.0 * sin(FLOAT(ITerm)* x)/FLOAT(ITerm);
   294	      ELSE                    (* odd terms are positive,*)
   295	        NextTerm := 2.0 * sin(FLOAT(ITerm)* x)/FLOAT(ITerm);
   296	      END (* if *);
   297	
   298	      FOR IPlot := UpLeft TO LowRight DO
   299	        IF ITerm<=NumTerms[IPlot] THEN
   300	          YValue[IPlot,IPnt] := YValue[IPlot,IPnt] + NextTerm;
   301	        END (* if *);
   302	      END (* for *);
   303	    END (* for *);
   304	  END (* for *);
   305	END GeneratePlotArrays;
   306	
   307	BEGIN
   308	  GeneratePlotArrays;
   309	  GraphInit;
   310	  SetPlotDevice(IBM7372A);
   311	  WriteLn; WriteString("Drawing plot . . ."); (*Let user know where we are*)
   312	
   313	  FOR IPlot := UpLeft TO LowRight DO  (*Draw a plot for each array*)
   314	    CASE IPlot OF (* For each array, choose the appropriate plotting area*)
   315	      UpLeft:SetPlotArea(0.0,45.0,60.0,100.0);  (*Upper left corner *)
   316	           SetScaledArea(5.0,40.0,62.0,94.0);
   317	     |UpRight: SetPlotArea(55.0,100.0,60.0,100.0); (*Upper right corner*)
   318	           SetScaledArea(60.0,95.0,62.0,94.0);
   319	     |LowLeft:SetPlotArea(0.0,45.0,0.0,40.0); (*Lower left*)
   320	           SetScaledArea(5.0,40.0,2.0,34.0);
   321	     |LowRight:SetPlotArea(55.0,100.0,0.0,40.0); (*Lower right*)
   322	           SetScaledArea(60.0,95.0,2.0,34.0);
   323	    END (* case *);
   324	
   325	    SetScale(0.0,4.0,-4.0,4.0); (* remember, x is in units of pi *)
   326	    SetPenColor(Black);
   327	    DrawAxes(0.0,0.0,1.0,1.0,2,2,3.0,2.0); (* draw axes without labels *)
   328	    (* Labels are drawn separately so we can put 'pi' on x-axis labels*)
   329	    SetCharSize(Small); (* Label the axes *)
   330	    SetLabelOrigin(CenterLeft); (* First, the y-axis *)
   331	    Move(-0.05,4.0); DrawLabel("4");
   332	    Move(-0.05,2.0); DrawLabel("2");
   333	    Move(-0.05,0.0); DrawLabel("0");
   334	    Move(-0.05,-2.0); DrawLabel("-2");
   335	    Move(-0.05,-4.0); DrawLabel("-4");
   336	
   337	    SetLabelOrigin(LowerMiddle); (* Then the x-axis *)
   338	    Move(2.0,-0.5); DrawLabel("2pi");
   339	    Move(4.0,-0.5); DrawLabel("4pi");
   340	
   341	    CASE IPlot OF (*Set a new pen color for each plot *)
   342	      UpLeft: SetPenColor(Red);
   343	     |UpRight: SetPenColor(Green);
   344	     |LowLeft: SetPenColor(Blue);
   345	     |LowRight: SetPenColor(Magenta);
   346	    END (* case *);
   347	
   348	    Move(0.0,0.0); (* Start at the origin *)
   349	    FOR IPnt := 1 TO NPnts DO
   350	      Draw(XValue[IPnt],YValue[IPlot,IPnt]); (*Draw to each point*)
   351	    END (* for *);
   352	
   353	    SetPenColor(Black);
   354	    DrawFrame; (*Draw a box around the plot for this array *)
   355	
   356	    Move(0.75,4.7);
   357	    SetLabelOrigin(CenterRight);
   358	    SetCharSize(Small);
   359	    CASE IPlot OF  (*Put the appropriate title on each plot*)
   360	      UpLeft: DrawLabel("5 terms in series");
   361	     |UpRight: DrawLabel("10 terms in series");
   362	     |LowLeft:DrawLabel("20 terms in series");
   363	     |LowRight:DrawLabel("100 terms in series");
   364	    END (* case *);
   365	  END (* for *);
   366	
   367	  (*Now that all four plots have been drawn, put a title and
   368	    the formula in the middle area on the page *)
   369	  SetPlotArea(0.0,100.0,0.0,100.0); (* Set to full screen *);
   370	  SetScaledArea(0.0,100.0,0.0,100.0);
   371	  SetScale(0.0,100.0,0.0,100.0);
   372	
   373	  Move(9.0,53.0);
   374	  SetCharSize(Med);
   375	  SetLabelOrigin(CenterRight);
   376	  DrawLabel("FOURIER SERIES APPROXIMATION TO A SAWTOOTH WAVE");
   377	  Move(17.0,47.0);
   378	  SetCharSize(Small);
   379	  DrawLabel("y = 2 {sin(x) - sin(2x)/2 + sin(3x)/3 - sin(4x)/4 + ... }");
   380	
   381	  CloseGraphics; (* Clean up and restore the system *)
   382	END Example.
   383	
   384	