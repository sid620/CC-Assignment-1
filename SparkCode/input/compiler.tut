     1	Compilers and How They Work: An Overview
     2	
     3	                         Lou Morgan
     4	                Madison IBM-PC User's Group
     5	
     6	What  are compilers  and how  do  they work?  Many  computer
     7	users ask themselves this  question  after  the  programming
     8	bug  has  bitten  them.  To most people,  a  compiler  is  a
     9	"black box program" which takes source code  written in some
    10	high-level language,  such as FORTRAN, BASIC, Pascal,  or C,
    11	and translates (compiles)  it into a  language  the computer
    12	can understand and  execute.  Compilers take source code and
    13	transform  it into virtual machine  language.  With the  IBM
    14	PC, this virtual language is 8088 machine code.
    15	
    16	Compilers vs. Interpreters
    17	
    18	Computers  cannot  understand  English  words  and  grammar.
    19	Even  the   highly   structured   words  and  sentences   of
    20	programming languages  must be translated before  a computer
    21	can understand them.  The compiler  or interpreter must look
    22	up  each "word" of your  programming language  in a  kind of
    23	dictionary  (or  lexicon)  and,  in   a   series  of  steps,
    24	translate  it  into machine  code.  Each  word  initiates  a
    25	separate logical task.
    26	
    27	An interpreter translates one line of source code at  a time
    28	into  machine  code, and then  executes  it.  Debugging  and
    29	testing  is  relatively   fast  and  easy   in   interpreted
    30	languages,  since the entire  program  doesn't  have  to  be
    31	reprocessed each  time  a change is  made.  The BASIC(A).COM
    32	program is  an  interpreter.  Interpreted programs run  much
    33	slower  than   compiled  programs,   because  they  must  be
    34	translated each time they  are run.  Programmers  often test
    35	and  debug  their  programs  using an interpreter  and  then
    36	compile them for production use.
    37	
    38	How Compilers Work
    39	
    40	Most compilers convert programs in three  steps.  Each  step
    41	is  called a  pass.  A  particular  compiler  may  have  one
    42	program  per  pass, or may  combine two or  three steps in a
    43	single program.  For a very complex  language, a step may be
    44	so  difficult to  perform that it  is  broken up  into  many
    45	smaller  steps.  Regardless of how many passes  or  programs
    46	are  required,   the  compiler  performs  only   three  main
    47	functions:   first,   lexical   analysis;   second,   syntax
    48	analysis; and third, code generation.  During  each  pass of
    49	the  compiler,  the source code  moves  closer  to  becoming
    50	virtual machine  language (or whatever language the compiler
    51	is designed to generate).
    52	
    53	
    54	Lexical Analysis
    55	
    56	In the first  pass  of  the  compiler,  the  source  code is
    57	passed  through  a  lexical  analyzer,  which  converts  the
    58	source code  to a set  of  tokens.  A  token  is generally a
    59	number  representing   some  keyword   in  the  language.  A
    60	compiler  has  a  unique number for each keyword  (i.e.  IF,
    61	WHILE, END), and  each  arithmetic or logical operator (i.e.
    62	+,  -, *, AND, OR,  etc.).  Numbers  are  represented  by  a
    63	token  which  indicates  that  what  follows  it  should  be
    64	interpreted  as a number.  The  tokens  put  the programming
    65	language  into  a  form  that  can  be  checked  for  proper
    66	structure and order.
    67	
    68	The  other  important  task of the  lexical  analyzer  is to
    69	build  a  symbol  table.  This  is   a   table  of  all  the
    70	identifiers  (variable  names,  procedures,  and  constants)
    71	used   in   the   program.  When   an  identifier  is  first
    72	recognized by the analyzer,  it is inserted into  the symbol
    73	table, along  with information about  its type, where  it is
    74	to be stored, and so  forth.  This information  is  used  in
    75	subsequent passes of the compiler.
    76	
    77	Syntax Analysis
    78	
    79	After the lexical analyzer translates  a program into tokens
    80	of  keywords,  variables,  constants,  symbols  and  logical
    81	operators, the compiler  makes  its next  pass.  To describe
    82	what happens during  this  function, I will briefly  explain
    83	grammars.
    84	
    85	Grammars.  Like  any  language, programming languages have a
    86	set of  rules governing  the structure of the program.  Each
    87	different computer language  has its own grammar which makes
    88	it unique.  Some grammars are complex  (PL/I) and others are
    89	relatively  easy (Pascal).  The  programmer must observe all
    90	the structural rules of  a language to make logical sense to
    91	the computer.  The  next  step  of  the  compiling  process,
    92	parsing, checks to be sure all the rules were followed.
    93	
    94	Parsing.  The  parsing routines of a compiler check  to  see
    95	that  the  program  is  written  correctly (according to the
    96	language  rules).  The  parser reads in the tokens generated
    97	by  the  lexical  analyzer and  compares  them  to  the  set
    98	grammar  of  the  programming   language.  If   the  program
    99	follows the rules of  the language, then it is syntactically
   100	correct.  When the parser encounters  a mistake, it issues a
   101	warning  or  error  message  and  tries  to  continue.  Some
   102	
   103	parsers  try  to correct a faulty program,  others  do  not.
   104	When the parser  reaches  the  end of the  token  stream, it
   105	will  tell   the   compiler  that  either   the  program  is
   106	grammatically  correct  and  compiling can continue  or  the
   107	program  contains too  many errors  and  compiling  must  be
   108	aborted.  If  the  program  is  grammatically  correct,  the
   109	parser will call for semantic routines.
   110	
   111	Semantic Routines.  The  semantic  routines  of  a  compiler
   112	perform two tasks:  checking to make  sure that  each series
   113	of tokens  will  be understood  by the  computer when it  is
   114	fully translated to machine code, and converting the  series
   115	of tokens  one step closer to machine code.  The first  task
   116	takes a  series of tokens,  called  a production, and checks
   117	it to see if  it makes sense.  For example, a production may
   118	be  correct  as  far  as the  parser  is  concerned, but the
   119	semantic routines  check  whether  the variables  have  been
   120	declared,   and   are  of  the   right  type,  etc.  If  the
   121	production  makes sense, the semantic  routine  reduces  the
   122	production  for  the  next   phase   of  compilation,   code
   123	generation.  Most of the  code for the compiler lies here in
   124	the semantic  routines and thus takes  up  a majority of the
   125	compilation time.
   126	
   127	Summary.  Two major routines comprise  syntax analysis:  the
   128	parsing  routine  and  the  semantic   routine.  The  parser
   129	checks for the correct  order  of the tokens and then  calls
   130	the  semantic routines to check whether the series of tokens
   131	(a  production)  will   make  sense  to  the  computer.  The
   132	semantic routine  then reduces the production  another  step
   133	toward complete translation to machine code.
   134	
   135	Code Generation
   136	
   137	The  code generation process determines  how fast  the  code
   138	will run and  how large it will be.  The  first part of code
   139	generation involves  optimization, and  the  second involves
   140	actual machine code generation.
   141	
   142	Optimization.  In this step, the compiler  tries to make the
   143	intermediate code  generated by  the  semantic routines more
   144	efficient.  This  process  can be  very  slow and may not be
   145	able  to  improve  the code  much.  Because  of  this,  many
   146	compilers don't include optimizers, and, if  they  do,  they
   147	look only for areas that are easy to optimize.
   148	
   149	Code Generation.  This process takes  the intermediate  code
   150	produced  by  the  optimizer  (or semantic routines  if  the
   151	compiler  has no optimizer) and  generates  virtual  machine
   152	code, which in  our  case  is 8088 machine code.  It is this
   153	part  of  the compilation phase  that is machine  dependent.
   154	Each  type  of  computer  has  an   operating   system  that
   155	processes virtual machine code  differently; therefore,  the
   156	code  generator   must  be   different   for  each  type  of
   157	computer.  The  choice  of  instructions  for   the  fastest
   158	execution  and smallest  code  size  are made at this point,
   159	according  to  the  machine's operating  system.  Each  code
   160	generator  is  designed  specifically for  the  machine  and
   161	operating system the final code will run on.
   162	
   163	If  the  program  is  free  from  syntactical  errors,  code
   164	generation should take place without  any problem.  When the
   165	code generator  is finished, the  code produced will  be  in
   166	8088 machine code, but the format of  the  code  is  not yet
   167	executable.  It is in  a  format (an .OBJ file in our  case)
   168	that is  ready  to go  to  a  linker,  which  will create an
   169	executable  *.EXE or *.COM file  from the  machine  code the
   170	compiler has generated.
   171	