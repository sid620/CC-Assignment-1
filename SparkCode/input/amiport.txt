     1	The following is an excerpt from  an  article  scheduled  to  appear  in  the
     2	February  1991  issue of Amazing Computing.  Please refer to that article for
     3	more information about the I/O Board as well as ordering information. -JL
     4	
     5	Happy Holidays!
     6	=============================================================================
     7	
     8	12 December 1990
     9	
    10	                         More Ports for Your Amiga
    11	
    12	                          An I/O Expansion board
    13	
    14	by Jeff Lavin
    15	Copyright )1990 The Puzzle Factory
    16	
    17	Many of you in the Amiga community have built Brad Fowles' excellent  "LUCAS"
    18	accelerator board, which introduced the idea of "Public Domain Hardware".  In
    19	this  article  I  will present another public domain hardware project for the
    20	Amiga, which will enable you to add two parallel ports and two  serial  ports
    21	to  your  Amiga  500,  1000 or 2000 for $70.  Furthermore, you can easily and
    22	inexpensively upgrade to four parallel ports and/or four serial ports at  any
    23	time.
    24	
    25	The hardware consists of a small printed circuit board with a  40  pin  cable
    26	and  DIP jumper that plugs into the socket occupied by CIA B, and a small pcb
    27	that contains the serial interface.  CIA B is physically moved onto  the  I/O
    28	Expansion  board.
    29	
    30	This hardware supports 15 standard baud rates, from 50 to 38,400  baud,  plus
    31	MIDI  (31,250 baud).  It also supports full hardware handshaking.  Up to four
    32	units may be open at one time, although the cpu may not be able  to  keep  up
    33	with all four units running above 2400 baud.
    34	
    35	
    36	Raison d'etre
    37	=============
    38	As a hardware hacker of long standing, I have a  number  of  small  computers
    39	with  all sorts of hardware attached to them, from extra ports to EPROM prog-
    40	rammers, and longed to do the same with the Amiga.  Since the  Amiga  uses  a
    41	pair  of  8520's (actually 6526's) for its I/O, I figured it would be a piece
    42	of cake to add more 65/68XX family peripheral chips and be  up  and  running.
    43	The  only problem was that, because there is no obvious chip select decoding,
    44	I could never figure out how the 8520's were addressed.   One  day  a  friend
    45	came  by,  and  we  were  able  to  figure  out  that  the  I/O   chips   are
    46	"automatically" selected when certain addresses are generated by logic hidden
    47	in the PALS.  Now that the final piece of the puzzle was in place,  I  wasted
    48	no time and had a prototype in my Amiga in two weeks.
    49	
    50	
    51	How it works
    52	============
    53	This hardware hack is possible because of two things  the  designers  of  the
    54	Amiga did for us:
    55	
    56	  1. The address space where the CIAs live is incompletely decoded.  This
    57	     means the 16 CIA registers are echoed repeatedly over a large range.
    58	
    59	  2. The locations where software is supposed to address the CIA registers
    60	     is completely specified over a much smaller range.
    61	
    62	These two facts make it possible for us to take the chip select from one CIA,
    63	and divide it into four parts.  The addresses in the upper part are routed to
    64	the CIA normally, and we "steal" the addresses  from  the  remainder  of  the
    65	space for our own use.  Because the "hard" part, most of the address decoding
    66	and  the  bus timing, has been done for us, we can get away with nothing more
    67	complicated than an additional address decoder to split off our address space.
    68	
    69	Unfortunately, this hack is not possible on the A3000  for  the  same  reason
    70	that  it is possible on earlier Amigas.  The address decoding on the A3000 is
    71	complete; there are no "extra" incompletely decoded addresses to "steal".
    72	
    73	The VIA and ACIA registers are still echoed over a pretty wide address range.
    74	We have specified where to address them for the same  reason  that  Commodore
    75	has  specified addresses for the CIAs:  to ensure software compatibility.  We
    76	would very much like to see enough people build these  boards  to  create  an
    77	installed software base.  So programmers, please use these addresses when you
    78	are  writing  all  those  neat  multi-line  BBS   programs   and   multi-user
    79	applications, as well as process control programs, robotics demos, etc.
    80	
    81	
    82	Software
    83	========
    84	Of course, hardware is next to useless without software to  drive  it.   This
    85	section describes the software available for the I/O Expansion Board.
    86	
    87	The Serial Driver
    88	-----------------
    89	Almost all programs written for the Amiga that use the serial port (with  the
    90	notable  exception of some MIDI software) access it indirectly via a standard
    91	software module called "serial.device".  As a result, most existing  software
    92	will work fine with the I/O Board given a suitable driver, and we supply one,
    93	named  "newser.device".   Simply copy it to your "DEVS:" directory and you're
    94	in business.  Most programs will permit you to change the device  name  (from
    95	serial.device  to newser.device) as well as the unit number (indicating which
    96	port is to be used), or you may use the supplied IOpatch  utility,  described
    97	below  (see  "Support Programs").  It is worth noting that, as with all other
    98	programs relating to the I/O Board,  we  supply  complete  assembly  language
    99	source code of the driver.  If you encounter a problem - and all else fails -
   100	it's possible to fix it yourself.
   101	
   102	The Parallel Driver
   103	-------------------
   104	The four parallel ports on the I/O Expansion  Board  are  controlled  by  the
   105	eightbit.device.   There are no known differences between this device and the
   106	V1.3  parallel.device.   Applications  should  not  experience  any  problems
   107	communicating  with  the  eightbit.device on the device level.  Full assembly
   108	language source code of the driver is supplied with the I/O Expansion board.
   109	
   110	DOS-Level Support
   111	-----------------
   112	"DOS-level support" refers to the ability to get and send data via the serial
   113	and parallel ports with standard AmigaDOS commands, such as TYPE or LIST,  or
   114	with  any  program that does serial or parallel I/O via AmigaDOS, rather than
   115	directly via the Exec-level "newser.device"  or  "eightbit.device".  Although
   116	this  sort  of  capability  is not frequently used, it is useful from time to
   117	time.
   118	
   119	In a perfect world,  DOS-level  support  would  mean  nothing  more  than  an
   120	appropriate  MountList  entry, specifying a driver name of "newser.device" or
   121	"eightbit.device", and some unit number of your choosing, corresponding to  a
   122	DOS  name  such  as  "SER1"  or  "PAR2".  Unfortunately, Commodore supplied a
   123	version of the Port-Handler and Aux-Handler with Workbench V1.3 that  doesn't
   124	permit  this;  rather,  they're  hard-coded  to use either "serial.device" or
   125	"parallel.device".  The printer.device suffers from a similar limitation.  At
   126	the time of this writing, we don't have a solution, other than using IOpatch.
   127	However, we expect to have replacement handlers ready by the  time  you  read
   128	this.  In addition, the handlers in Workbench V2.0 have the capability to use
   129	any device and unit, so this whole problem is non-existent if you have V2.0.
   130	
   131	
   132	Support Programs
   133	----------------
   134	Several programs  are  available  for  use  with  the  I/O  Expansion  Board.
   135	
   136	SERprefs  functions  much  the same as the serial section of Preferences, but
   137	allows  you   to   set  and  save  parameters  for  all  four  units  of  the
   138	newser.device.  These are saved in "S:Serial-Preferences".
   139	
   140	Many programs allow you to specify the device name and unit number,  so  that
   141	using  an alternate device driver is no problem.  For those applications that
   142	insist on using a particular device, we  have  written  a  nice  little  hack
   143	called  IOpatch.   This program SetFunction()s the exec OpenDevice call.  The
   144	user puts this program in his  startup-sequence,  or  otherwise  invokes  it,
   145	before  he runs his application program.  This patch will make a small window
   146	appear, whenever OpenDevice() is called, with a choice of units; 0-4.  Unit 0
   147	will select the internal serial or parallel port, and units 1-4  will  select
   148	one  of  the  newser.device  or  eightbit.device units.  Please note that the
   149	names of both drivers have been selected to be the same length as  the  names
   150	of  the original devices.  This has been done to facilitate file-zapping as a
   151	last resort.  Of course, software may be written  for  the  newser.device  or
   152	eightbit.device initially.
   153	
   154	A suite of simple test programs to check the I/O Expansion Board Hardware can
   155	save you hours of hardware debugging time.  Chip selects, as well as read and
   156	write signals, are generated for all chips.   One program  simulates  a  very
   157	simple character-oriented terminal program for checking an ACIA.
   158	
   159	A nice little program to drive a real-time clock-calendar is also  available.
   160	The  clock  hardware,  based  on  the  OKI  MSM5832, is capable of generating
   161	interrupts at 1024 hz, once per second, once per minute, or hourly.  Software
   162	to take advantage of this feature is left as an  exercize  for  the  student.
   163	
   164	
   165	Credits
   166	=======
   167	I would like to thank Dan Babcock for the many hours he put  in  writing  and
   168	debugging  the  serial  device  driver.   This  was  surely  one  of the most
   169	difficult parts of this project.  Paul Coward, of DigiSoft, provided us  with
   170	the  parallel device driver, no small achievement either.  Jim Cooper, of The
   171	Software  Distillery,  made  many  helpful  suggestions  concerning  software
   172	issues,  and  especially  DOS  compatibility,  and helped us get up to speed.
   173	Bill Seymour provided invaluable help in layout  and  pre-production  of  the
   174	PCBs,  and  also provided design help.  Finally, this task was made easier by
   175	the help and encouragment of Doug Sears and Grace Lavin.
   176	
   177	
   178	Conclusion
   179	==========
   180	I think this is a pretty neat little hack.  I also feel  that  it  is  simple
   181	enough  that  if  I  hadn't  come  up  with  it, someone else would have.  It
   182	provides some much-needed additional I/O for the Amiga  1000  or  2000  at  a
   183	rock-bottom  price.   If  enough  software becomes available to warrant it, I
   184	will try to set up some sort of software clearing house  for  use  with  this
   185	board.   Keep  an  eye  on  BIX  or  my  BBS,  The  Symposium,  for any news.
   186	Meanwhile, I hope you enjoy using this board.  And don't let the  blue  smoke
   187	out!
   188	=============================================================================
   189	
   190	If you need to get in touch with me, here are some possibilities:
   191	
   192	    BIX                 jblavin
   193	    USENET              jlavin@cie.uoregon.edu
   194	    The Symposium       My own BBS, (503) 935-7883, 24hrs, F8N1
   195	
   196	    The Puzzle Factory
   197	    P.O. Box 986
   198	    Veneta, OR 97487
   199	    (503) 935-3709
   200	The Puzzle Factory, Inc.  | Jeff Lavin -- jlavin@cie.uoregon.edu
   201	Veneta, Oregon            |-------------------------------------
   202	Voice : (503) 935-3709    | Remainder of signature line
   203	Data  : (503) 935-7883    | under construction.
