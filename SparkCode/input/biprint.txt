     1	From: markb@tplrd.tpl.oz.au (Mark Bower)
     2	Newsgroups: comp.sys.ibm.pc.hardware
     3	Subject: Bi-directional I/O on printer port - Hardware mods
     4	Summary: make you old PC printer port bi-directional
     5	Keywords: printer port, bi-direcional
     6	Message-ID: <1991Jul10.034144.11106@tplrd.tpl.oz.au>
     7	Date: 10 Jul 91 03:41:44 GMT
     8	Sender: markb@tplrd.tpl.oz.au (Mark Bower)
     9	Organization: Telectronics Pacing Systems
    10	Lines: 250
    11	
    12	
    13	
    14			MAKING YOUR PC PARALLEL PORT BI-DIRECTIONAL
    15			~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    16	
    17				    By Mark F. Bower
    18	
    19	
    20	I have had a large number of requests for this information so here it is.
    21	
    22	Disclaimer: Doing this modification may void your warranty on your computer
    23	components, and I take no responsibility for any damage that may be caused
    24	by making this modification.
    25	
    26	Introduction:
    27	~~~~~~~~~~~~~
    28	
    29	This simple modification allows a standard IBM PC type parallel port to be
    30	used as a bi-directional 8 - 12 bit I/O port for use in applications
    31	such as control, sensing, monitoring, and high speed data trasfer.
    32	
    33	WARNING: Do NOT attempt to read data in from the parallel port using a (non
    34	modified) a standard printer port card. The LS373/374 octal buffer can sink
    35	current and may overheat if this is done. 
    36	
    37	The 4 handshake lines are also open collector outputs.
    38	
    39	Requirements:
    40	~~~~~~~~~~~~~
    41	
    42	o   1 piece of insulated copper wire (1 - 2 inches long).
    43	
    44	o   Soldering Iron.
    45	
    46	o   Solder, maybe some de-soldering wick.
    47	
    48	o   A sharp tool for cutting PCB tracks.
    49	
    50	o   A TTL data book is handy.
    51	
    52	o   A parallel printer port schematic helps.
    53	
    54	o   A digital multimeter for testing.
    55	
    56	o   An IBM type parallel printer card - either an original single card or multi-
    57	    function card. It may be possible to modify other types of parallel
    58	    ports since most are of similar design (in PC's). However, special
    59	    cards that use a single VLSI controller chip to perform the functions
    60	    of the entire multi-function card may not be modified (of course!).
    61	
    62	Note: Laptop computers generally have a bi-directional parallel printer
    63	port - note however that these bi-directional port use open-collector
    64	outputs on the parallel data bus which may require pull-up resistors
    65	if they are to be connected to a 'standard' modified port for data
    66	trasfer.
    67	
    68	
    69	Method: Hardware mods
    70	~~~~~~~~~~~~~~~~~~~~~
    71	
    72	The following step are meant as a guide to performing the modification.
    73	
    74	When handling circuit cards, be aware that static electicity and carelessness
    75	can easily cause damage - be extra careful and patient when working on them!
    76	
    77	NOTE: The LS abbreviation may be F, L, or HC in you printer card.
    78	
    79	1. Remove the parallel printer card/multi I/O card from the PC.
    80	
    81	2. Locate the IC named 74LS374 (on standard PC printer port cards) or
    82	   74LS373 (multi I/O cards). If there is more than one of these IC's,
    83	   select the one which connects to pins 9 to 2 of the 25 pin printer
    84	   port connector. On the IBM PC printer schematic this is U4.
    85	   This IC is an octal buffer.
    86	
    87	3. Pin 1 of this IC (the output enable pin) should be currently tied to
    88	   ground (on the underside of the board). Cut the track at pin 1 so that it
    89	   is now NOT connected to ground. (alternatively it my be possible to cut
    90	   pin 1 and bend it up - this is not recommended however).
    91	
    92	     This pin was originally connected to gound. In this configuration, the
    93	     LS373/374 was hard wired to OUTPUT mode.
    94	
    95	4. Now locate the IC named 74LS174. This IC (a hex latch) is connected to
    96	   pins 1,15,14, and 16 of the 25 pin printer connector through either
    97	   a 74LS05 (IBM PC printer card) or a 74LS06 (multi I/O card) invertor.
    98	
    99	     NOTE: Both the LS373 and LS174 IC's are also connected to the Address/
   100	     Data bus on the card through a LS243 IC.
   101	
   102	5. This IC (LS174) is a hex  latch. In the IBM printer port design, only
   103	   5 of the 6 available latches are used. The state of the sixth latch 
   104	   can be controlled in software, and by attaching its output to pin
   105	   1 of LS373, we can control the direction of data by toggling a single
   106	   bit.
   107	
   108	6. To determine which D flip flop is not used, trace the outputs from the LS174
   109	   (use a TTL/LS data book for a pinout of the chip) and see which
   110	   one does not connect to the 74LS05 or 74LS06. On the standard PC
   111	   printer adapter, pin 15 of the LS174 was not connected (the input from
   112	   the data bus should already be connected (on pin 14 in this case). If
   113	   it is not, then another wire jumper connected may be necessary).
   114	
   115	7. Now solder a piece of insulated wire from pin 1 of the LS374/373 to
   116	   the output of the unused D flip flop (e.g. pin 15 in this case).
   117	
   118	   The printer port should now be configurable to be readable and writeable.
   119	
   120	(Notes: This only works because the original printer port could read the data
   121	back that it just printed. When data was sent to the printer, it passed
   122	through LS373 and onto the connector pins and was also stored in the
   123	LS244 latch - this data was then re-read by the printer software to ensure
   124	that the data that appeared on the pins was correct. Unfortunately, you
   125	could not read data that came in from the printer port connector because
   126	the octal buffer was hard wired for output. Using this modification, the
   127	octal buffer can be read (rather than written) and the data that is latched
   128	from this printer port connector can be read by the system).
   129	
   130	
   131	Compatibility
   132	~~~~~~~~~~~~~
   133	
   134	When the computer is powered on as normal, the BIOS should initialise the
   135	printer port to be in output mode (0 in the direction register). Therefore,
   136	all software should work as normal - printing operations will work
   137	as before.
   138	
   139	If custom software alters the direction register, then some software
   140	may have problems printing (a printer not ready signal or paper out error
   141	may be generated). This can be resolved by either clearing the data direction
   142	register (use debug for example) or by resetting the computer.
   143	
   144	Software Interface:
   145	~~~~~~~~~~~~~~~~~~~
   146	
   147	To use this 8 bit I/O port for data trasfer the following software can be
   148	used.
   149	
   150	This assumes that the parallel printer port is located at 378 hex. If
   151	this os not the case, subtract the suitable value (e.g. 100h for a printer
   152	as 278 hex) from the register addresses.
   153	
   154	1. Setting the port for output mode (normal printer output):
   155	
   156		Clear bit 6 of the data direction register (formerly unused)
   157		at 37A (hex).
   158	
   159		e.g.         i = inportb(0x37A);	
   160			     outporb(0x371, i & 0xDF); /* output mode */
   161	
   162		or	     outporb(0x37A, 0);
   163	
   164	
   165	2. Setting the port for input mode:
   166	
   167		Set bit six of the data direction register at 37A (hex).
   168	
   169		e.g.         i = inportb(0x37A);
   170			     outportb(0x37A, i | 0x20;
   171	
   172		or	     outportb(0x37A, 0x20);
   173	
   174	
   175	3. Sending 8 bit bytes to the port (output):
   176	
   177		Send the data to 378 (hex)
   178	
   179		e.g.         outportb(0x378, 0xAE); /* send 0xAE over port */
   180	
   181	
   182	4. Reading 8 bit bytes from the port (input):
   183	
   184		Read data from 378 (hex)
   185	
   186		e.g.         x = inportb(0x378); /* read data from port */
   187	
   188	
   189	5. Hardware handshaking - essential for any communications:
   190	
   191	For successfull communiucations, some sort of hardware handshaking is
   192	required, This requires a couple of extra lines in you connection cable.
   193	For example, the ACK and STROBE lines can be used to signal data ready
   194	between two systems.
   195	
   196	An example is an A-D convertor on the port. To sample a value, send
   197	a pulse on the strobe line (or any oth spare line), wait for an
   198	interrupt (acknowledge/sample taken) from the A-D and then read it
   199	from the port.
   200	
   201		e.g. to send pin 14 of the connector high (and set input mode at
   202		     the same time):
   203	
   204			outportb(0x37A,0x28);
   205	
   206		e.g. wait until pin 14 of connector is low :
   207	
   208			while (inportb(0x37A) & 0x08) == 0)
   209				;
   210	
   211	Pinouts:
   212	~~~~~~~~
   213		 Name    		Pin
   214	
   215		-Strobe			1  <
   216		+Data 0			2  <>      \
   217		+Data 1			3  <>       |
   218		+Data 2			4  <>       |
   219		+Data 3			5  <>       |- now bidirectional
   220		+Data 4			6  <>       |
   221		+Data 5			7  <>       |
   222		+Data 6			8  <>       |
   223		+Data 7			9  <>       /
   224		-Acknowledge		10  >
   225		+Busy			12  >
   226		+Paper out		13  >
   227		+Select			14  >
   228		-Auto Feed		15 < 
   229		-Error			16  >
   230		-Initialize		17 < 
   231		-Select input		18 - 25
   232		 Ground			2
   233	
   234	- = active low, + = active high. > from printer/other computer
   235					 < from printer adapter
   236	
   237	
   238	Comments: 
   239	~~~~~~~~~
   240	
   241	People who wish to attempt to use this modification to construct
   242	a parallel port SCSI interface should have a look at the Tiny Tiger
   243	SCSI hard drive interface which is used on the Commodore Amiga 500 and 1000
   244	computers to provide a SCSI hard-drive interface. I am in no
   245	way connected with the manufacturers of Tiny Tiger.
   246	
   247	Any followups, extensions, or developments : email me any time.
   248	
   249	Please email me if you have success with this modification - I've done it
   250	and it works.
   251	
   252	Cheers,
   253	
   254	Mark                                                        | /\	
   255	------------------------------------------------------------|/  \  /-----------
   256	Mark F. Bower.  (markb@tplrd.tpl.oz.au)  ||                      \/         
   257	Design Engineer,                         || "Synchronize watches! - 11.45!"
   258	Telectronics Pacing Systems R & D.       || "2.33!"   
   259	7 Sirius Rd, Lane Cove 2066,             || "7.54!"             
   260	Australia | Phone (Voice) <aust> 413 6913|| "Perfect, lets go!" - Maxwell Smart
   261	-------------------------------------------------------------------------------
   262	
   263	
