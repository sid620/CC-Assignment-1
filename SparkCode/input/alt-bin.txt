     1	Notes on UUDECODEing .GIF pics etc.
     2	
     3	This file is intended to be a general introduction to the group 
     4	alt.binaries.pictures, answering some common questions concerning pictures 
     5	posted here, namely how to decode and view them.  It is not, of 
     6	course, possible to cover everything, but I will try to to get as much 
     7	as I can into this file.  If you feel something important has been 
     8	omitted and you know the subject well, please write me so I can 
     9	include the info for future releases.  I can be contacted via 
    10	internet at readdm@ccwf.cc.utexas.edu. 
    11	
    12	Before you miss an important detail contained in this file, let me
    13	"pre-repeat" that I have tried to make *all* programs mentioned in
    14	this document available for anonymous ftp at bongo.cc.utexas.edu
    15	(128.83.186.13), in the gifstuff directory.  If you think I've omitted
    16	something important in the viewers-only archive, feel free to let me
    17	know.  Also: there are NO GIF files of any kind at this site!  Save
    18	your time and don't bother looking for them!
    19	
    20	Ok...on to the real reason you're reading this document...
    21	
    22	
    23	TABLE OF CONTENTS
    24	   I.     DOWNLOADING AND DECODING FILES
    25	  II.     .GIF FILES AND .GIF VIEWERS
    26	 III.     .GL FILES
    27	  IV.     OTHER PICTURE TYPES
    28	   V.     ENCODING AND UPLOADING FILES
    29	  VI.     ALTERNATE SOURCES FOR PICTURES
    30	 VII.     A.B.P. and A.B.P.D.
    31	VIII.     COMMON PROBLEMS
    32	  IX.     APPENDICES: AWK, SED, & PERL SCRIPTS
    33	
    34	I. DOWNLOADING AND DECODING FILES
    35	
    36	By far the most common method of posting files to alt.binaries.pictures is 
    37	the UUENCODE standard.  This program, shipped standard with most 
    38	implementations of UNIX, converts binary files into plain-text ASCII 
    39	files which can be handled by the mail system.  You will need a 
    40	version of UUDECODE before anything else in order to view anything 
    41	downloaded from the net.  If your system does not have a version of 
    42	UUDECODE available, you can get one via anonymous ftp from
    43	bongo.cc.utexas.edu (128.83.186.13), in the gifstuff/uuxfer directory.
    44	 
    45	The first step is to save the file you want to view...in most versions
    46	of the newsreader, this is done by pressing s followed immediately (no
    47	spaces) [NOTE: my rn will allow spaces, though-SQ] by a file name.
    48	You will usually be asked if you want to save it in mailbox format;
    49	you should answer 'n'.
    50	
    51	In the case of a single-part file, you can now uudecode the file, 
    52	which will create whatever output file is encoded.  You can usually 
    53	tell if it's a single-part file by looking on the subject line; 
    54	standard nettiquette is to make somthing like (03/06) part of the 
    55	subjet line, which indicates you're on part 3 of a 6-part file.  If no
    56	numbers are there, you can usually assume it is a 1-part file.  If 
    57	not, feel free to write the poster (directly...please don't waste 
    58	bandwidth by posting) and request that he/she put this info in the 
    59	subject line.  Be nice about it!
    60	
    61	For multi-part files, life is a little more difficult.  If all you 
    62	have is a standard UUDECODE program, you will need to trim the headers 
    63	and trailers from all of the parts and concatenate the resulting files 
    64	together to make one big file, and then run that through UUDECODE.  
    65	Use your favorite text editor to strip the headers & trailers of each 
    66	file.  Then (on UNIX systems) use 
    67	  cat part1 part2 part3 ... partN | uudecode
    68	to concatenate them and pipe them through uudecode.
    69	If you downloaded the files to an MS-DOS system before concatenating 
    70	them, use
    71	  copy part1 + part2 + part3 + ... + partN file
    72	to concatenate them.
    73	
    74	There are several versions of UUDECODE out there that will do all of
    75	this for you, including UUEXE (an MS-DOS program written by Richard
    76	Marks) and my own UUXFER program.  
    77	
    78	Several people have written scripts in AWK, SED, or PERL which will strip 
    79	headers & trailers, concatenate the results and pipe them through 
    80	UUDECODE.  See section IX. (Appendix) if you want to run one of these.
    81	
    82	If you're going to download it to a home machine, or move it around a 
    83	network, remember that most outputs are going to be BINARY files, so 
    84	set your transfer protocol accordingly.
    85	
    86	
    87	II.  .GIF FILES AND GIF VIEWERS
    88	
    89	Ok.  Now you've got this great GIF file from downloading it and 
    90	running it through UUDECODE.  What is it, and what do you do with it?
    91	
    92	GIF stands for Graphic Interchange Format, and is a standard format 
    93	for images that was developed by Compuserve to be a device-independent 
    94	method of storing pictures.  It includes Lempel-Ziv-Welch (LZW) 
    95	compression, which makes the files fairly small.
    96	
    97	You will need a GIF viewer in order to view the file.  On X-Windows
    98	workstations the program you need is called xloadimage.  If your
    99	system does not have xloadimage, you can get it via anonymous ftp
   100	from bongo.cc.utexas.edu in the gifstuff/xwindows/xloadimage directory.
   101	[NOTE: There are some other good ones there too, like xv and xshowgif.-SQ]
   102	
   103	On the Macintosh, a good one is QuickGIF, but it only runs on color
   104	Macs.  If you have a monochrome Mac, you can use VisionLab.
   105	On MS-DOS systems, I personally use VPIC, but there exist 
   106	others, including CSHOW.  A nice bonus to using CSHOW is that it can
   107	also view several other common picture formats, including MacPAINT
   108	images.  Amiga users tell me that VirtGIF will display .GIF files
   109	directly, but that Hamsharp or GIFMachine will convert .GIF 
   110	files to other formats, the principle benefit being that the other 
   111	formats allow more than 256 colors to be displayed simultaneously.
   112	
   113	Other machines: On Sun workstations running SunView, Alan Sparks has
   114	made his 'artshow' program available, at the same archive mentioned
   115	earlier, at ix1.cc.utexas.edu and bongo at the same address.
   116	
   117	For the Atari ST, there exist several shareware or PD programs, including 
   118	BGIF & GIFSPEC, which will convert the GIF files to the Spectrum file type, 
   119	which can then be viewed with other software (sorry, I don't know what it's 
   120	called).  Finally, Apple ][+/e/c types are advised to use IIGIF to view gif 
   121	files on these computers, while the advice from a ][GS user is to use 
   122	SHRConvert.
   123	
   124	I have tried to make all of the above-mentioned GIF viewers available
   125	from bongo.cc.utexas.edu, in the gifstuff directory.  Hunt through the 
   126	0filelist file to see if something you need is available.  
   127	
   128	Other systems have other viewers.  Consult your sysytem administrator
   129	or a local users group for your machine before you post to the asking 
   130	if there is a GIF viewer for your specific machine.
   131	
   132	
   133	III.  .GL FILES
   134	
   135	Commonly people post files to the net with a .GL extension.  These 
   136	files are actually animated picture-shows that can be viewed on IBM-PC 
   137	machines with the GRASPRT program.  The GRASP (GRAphics System for 
   138	Professionals)  system was developed by Paul Mace as a PAY-WARE system 
   139	for transmitting these animated files.  The GRASPRT program (public 
   140	domain, I believe) is a run-time version for viewing the files.
   141	
   142	Unfortunately, GRASPRT exists only for the PC-Clone family.  Recently
   143	some wonderful net-people have written an X windows-based .GL viewer
   144	called xgl (there is also another called xgrasp, but I know little
   145	about it).  The source is available from export.lcs.mit.edu...look
   146	in the directory where they keep contributed X code.  I will also
   147	endeavor to maintain a copy on bongo.cc.utexas.edu, but I can't promise
   148	that it will be up-to-date.   Recently an Amiga version was written...
   149	you can find it in the amiga directory at bongo.
   150	
   151	There is another twist to GRASPRT.  An older version admitted only CGA 
   152	monitors, but a newer one allows VGA as well.  Unfortunately, the 
   153	older version doesn't even *recognize* the VGA standard, while the 
   154	newer version (which, BTW, is *much* faster than the old one) will not 
   155	let you display the VGA GRASP files on a CGA or EGA monitor.  Unlike 
   156	the .GIF standard, .GL files are not resoultion-independent!  
   157	
   158	Anyway, if you have a system other than a PC-Clone, an X system, or an
   159	Amiga, I'm afraid you may be out of luck.  Sorry!
   160	
   161	Usually, .GL files are huge, so people often compress them with one of
   162	several popular compression/archiving packages.  Perhaps the most
   163	common is the PC family's PKZIP package.  If a .GL file is posted with
   164	a .ZIP extension, you know it's been ZIP'ed.  Similarly, if it has a
   165	.Z extension, it's been compressed with the UNIX `compress' utility. 
   166	If you encounter a file which has been ZIPed, and you have a PC, you
   167	should go find a copy of PKUNZIP (simtel has one).  If you *don't*
   168	have a PC, you can get C source code for an UNZIPer from simtel, in
   169	pd1:<unix-c.file-mgmt> as unzip.tar-z (you'll have to decompress this
   170	with the UNIX compress utility).
   171	
   172	If the file has been compressed with the UNIX compress utility, and
   173	you're on a UNIX box, clearly you have no problem.  If, on the other
   174	hand, you're on some other box, you'll need a de-compressor.  You can
   175	find an msdos version of unix compress can be obtained from simtel in  
   176	pd1:<msdos.sq-usq> or wuarchive.wustl.edu in /mirrors/msdos/sq-usq as the
   177	file comp430d.zip.
   178	
   179	
   180	IV. OTHER PICTURE TYPES
   181	
   182	There are other types of single-picture files posted to the net, 
   183	although they are not as common as the .GIF files.  I suppose that the 
   184	next most common type of picture posted is the MacPaint picture.  
   185	These pictures, once decoded, are viewable on the Macintosh with the 
   186	standard MacPaint program.  On the PC-Clone family, the pictures are 
   187	viewable with (among other progams) CSHOW.  Other than the difference 
   188	in the viewing software, the downloading/decoding and encoding/uploading 
   189	procedures are identical as for other types of pictures.
   190	
   191	Another common form for pictures to take is the .IFF file, which is a 
   192	standard for pictures on the Amiga.  I do not know of many programs for 
   193	computers other than the Amiga which allow viewing of these files, but 
   194	there exist some programs on the Amiga which will convert .IFF files 
   195	to .GIF files so the rest of us can see them.  It has been pointed out
   196	to me that DeluxePaint on the IBM-PC family will work with .IFF files,
   197	but I have not verified this.
   198	
   199	Occasionally people get into an argument about which standard is best. 
   200	I think the answer is: WHO CARES?!?  The only thing I have to say 
   201	about this matter is that almost every machine under the sun already 
   202	has a program written for it to view .GIF files, and if yours doesn't, 
   203	shareware or PD source code is available almost everywhere.
   204	
   205	
   206	V. ENCODING AND UPLOADING FILES
   207	
   208	A common question that is asked is this one:  what should I post to the 
   209	net?  The basic answer is: anything you'd like to see here yourself!
   210	
   211	Before I get into the nitty-gritty of how to post, I should say 
   212	a few things about the loose etiquette of posting.
   213	
   214	[NOTE: this paragraph is more specific to alt.sex.pictures but still relevant]
   215	The first thing is this:  it's probably best to restrict yourself to 
   216	one or two images per day.  I know you've got 600 MB of XXX-rated GIF 
   217	files of your girlfriend engaged in various acts with yourself and a 
   218	host of small furry animals that you're dying to distribute all over 
   219	the world.  However, the net gets severely loaded down by these images, 
   220	since they are typically 100 - 300 Kb each.  When you post ten of 
   221	them at once, lots of people will be frantically downloading them, 
   222	which shows up in the weekly Arbitron ratings when alt.sex.pictures 
   223	accounts for something like 50% of the entire net traffic, and 75% of 
   224	the alt.* traffic.  We need to be self-policing if a.s.p is going to 
   225	avoid being axed by nervous sysadmins.
   226	
   227	
   228	Second, be sure to give subject lines that are informative, like:
   229	   CRASH&BURN.GIF: Plane crash at an air show, 800x600x256 (02/08)
   230	Notice that it includes everything: the file name, a short 
   231	description, the resolution, and what part of how many this one is.  
   232	If you insist on leaving everything *else* out, at least say which 
   233	part it is!
   234	
   235	Third, in the actual message you're posting, be sure to give at least 
   236	a brief description of what's in it, like:
   237	
   238	   CRASH&BURN.GIF   800x600x256 (in 8 parts)
   239	
   240	   This is 15th in the series of this plane crash at the Beruit Air Show
   241	   taken at every single conveivable angle.  This one was taken from a 
   242	   photograph by a guy who happened to be standing directly under the
   243	   plane as it came down.  Pulitzer Prize material.  At least the camera 
   244	   was saved.
   245	
   246	Also, checksums are nice, for people with access to sum programs.  It 
   247	helps people indentify erroneous transmissions.  Usually people say 
   248	things like 
   249	
   250	   Checksums: (obtained with 4.2 BSD 'sum' or SysV 'sum -r')
   251	   between 'CUT HERE lines':
   252	      part 1: 76663 9082
   253	      part 2: 78973 1234
   254	   etc...
   255	
   256	Finally, if you got the file from some FTP site that was announced 
   257	over the net, don't bother posting it.  5-to-1 odds say that everyone 
   258	and his dog already have it, and we *really* need to be careful about 
   259	wasting bandwidth!  If you're unsure of whether there's any interest 
   260	in it, just post a short message saying: "I have this file.  Mail me 
   261	if you want a copy."  If 500 people say they want one, post it...if 
   262	only one bozo from outer mongolia wants it, it's a sure bet that the 
   263	picture has already made the rounds!
   264	
   265	Ok...on to the how-to's of posting.
   266	
   267	First things first: if you have a GIF file, don't bother trying to
   268	run some compression routine on it...it *won't* work.  LZW compression
   269	(the kind used in GIF files) is a very efficient compression scheme,
   270	and happens to be the one used in many common compression routines
   271	(including the standard UNIX `compress' utility!). If you try to compress 
   272	a GIF file, it will usually just end up getting bigger. 
   273	
   274	Ok.  You need to UUENCODE the file.  Find an encoder and encode it!  
   275	If the output file is particularly large (i.e. more than 60 kB), it 
   276	would be wise to split up the encoded file into smaller parts (< 60 kB) 
   277	and then post those.  You can split the file with a text editor if you 
   278	like, or...use Richard Marks' UUEXE or my UUXFER programs, which will 
   279	do that for you.
   280	
   281	If you do post a multi-part file, be sure to add lines before and 
   282	after the data that say 'CUT HERE' so that people trimming the headers 
   283	& trailers by hand know where to cut.  A recent addition to the 
   284	etiquette also has you make the lines say 'BEGIN-----Cut Here' and
   285	'END-----Cut Here' at the obvious locations, so that simple AWK and 
   286	PERL scripts can handle multi-part files.  Another nice thing to do is 
   287	to put the part (02/06) numbers in each file.  Again, the afore-
   288	mentioned 'super' uuencode programs will do most of this for you.  It
   289	is important to make the "Cut Here" parts in mixed-case or lower-case
   290	letters; some decoders detect data based on the presence of characters
   291	which belong in the normal uuencoding character set, and they will
   292	choke on lines which are all upper-case, since these lines contain
   293	only characters which belong in the set.  If you mix the cases, these
   294	decoders will do fine...Remember (if you add "BEGIN" and "END"
   295	keywords) to make "BEGIN" and "END" all caps so exsting scripts won't
   296	miss them, and so uudecoders won't choke on them.
   297	
   298	Now post the files...and remember to include the neat info mentioned 
   299	earlier, like subject lines that mean something, descriptions, 
   300	checksums, etc...  One thing that has been pointed out to me recently
   301	is that certain newsreaders (NN, for example) sort the articles
   302	alphabetically by title, so subject lines with part numbers get 
   303	displayed & saved in order.  There is an obvious (and common) way to 
   304	torpedo this process: make subject lines which do not follow sequentially.  
   305	
   306	An example:
   307	        first article's subject: "plane crash GIF: CRASH&BURN (part 1 / 4)"
   308	  subsequent articles' subjects: "CRASH&BURN (part N / 4)"
   309	These subject lines will not be displayed & sorted correctly by NN.
   310	
   311	However, if you change the arrangement a little, like this:
   312	        first article's subject: "CRASH&BURN (part 1/4) plane crash GIF"
   313	  subsequent articles' subjects: "CRASH&BURN (part N/4)"
   314	you will please NN-users the world over.
   315	
   316	That's about it for posting!
   317	
   318	
   319	VI. ALTERNATE SOURCES FOR PICTURES
   320	
   321	
   322	Alt.binaries.pictures is certainly not the only source for pictures, nor 
   323	are .GIF files the only types available (see section IV.).  The most 
   324	likely place you are to find other pictures is in an archive that is 
   325	reachable via FTP.  FTP stands for File Transfer Protocol, and is a 
   326	program for transmitting files over the network.  To use FTP, you will 
   327	need access to a computer with the FTP program, and a network 
   328	connection.
   329	
   330	Most ftp programs will allow you to enter something like 
   331	  ftp wsmr-simtel20.army.mil
   332	which will connect you with the mighty SIMTEL-20 archives at the White 
   333	Sands Missile Range.  Occasionally, you will encounter an ftp program 
   334	that is old enough or slothful enough that it does not recognize 
   335	internet-style addresses like the one above.  In that case, you'll 
   336	need to know the computer's numeric address; for SIMTEL-20
   337	you would enter
   338	  ftp 192.88.110.20 
   339	
   340	Once you're connected, you'll have to tell the computer at the other 
   341	end that you want to log in, by entering USER (some machines save you 
   342	this step by *assuming* you want to log in.  What else would you want 
   343	to do?)  When you are prompted for an account name, enter
   344	  anonymous
   345	When it asks you for a password, enter *your* internet address.
   346	
   347	Often the machine to which you are trying to connect will be busy 
   348	(i.e. too many anonymous users), in which case the machine will inform 
   349	you of this and throw you off.  Try again later.
   350	
   351	Now you're in.  What do you do?  Well, you need to know where the 
   352	files are stored that you want.  If you know this, just 
   353	  cd directory-name
   354	to the directory in question.  Then you can do a DIR to find out
   355	what is in it.  
   356	
   357	So you see a file called CRASH&BURN.GIF and you want it for yourself.  
   358	What do you do?  Well, the first thing is to tell the computer on the 
   359	other end that you want it to transmit a binary file.  On most FTP 
   360	servers, entering the magic word TENEX will do this.  If the machine 
   361	doesn't recognize TENEX, try BINARY, or if all else fails, you can 
   362	enter  
   363	  TYPE L 8
   364	Be sure to do this for .GIF files or you'll get garbage when you try 
   365	to view them!
   366	
   367	Now you're ready to grab the files you want.  You have two options: 
   368	you can type 
   369	  get filename
   370	or
   371	  mget wildcard
   372	where wildcard is any UNIX-style wildcard.  MGET will get all files 
   373	that satisfy the specification.
   374	
   375	When you're done grabbing files, type QUIT or BYE to log off the remote 
   376	machine and return to yours.
   377	
   378	A word about anonymous FTP and .GIF files.  When you log onto a remote 
   379	machine via anonymous FTP, please try to restrict yourself to no more 
   380	then ten minutes of transmission time, or about five to ten files.  As 
   381	you can imagine, when people discover a new archive of .GIF files, 
   382	they are all hot to download every one they can, and often they jam up 
   383	the site for *days*  You'll notice this effect the first time some 
   384	bozo announces the name of a new .GIF archive.  You won't be able to 
   385	get through without persistent efforts over several hours or even a 
   386	day or two.  Then the system administrators of that site notice that 
   387	they have had about $5,000 worth of anonymous FTP over the last two 
   388	days, and revoke the anonymous FTP privilege.  Now every one is 
   389	screwed.
   390	
   391	Be considerate; grab only a few files and then let someone else have a 
   392	chance.  This probably won't solve the problem in the long term (still 
   393	everyone and his dog will be ftp'ing into that machine), but at least 
   394	it will spread the wealth a bit.
   395	
   396	A raging debate erupts on alt.sex.pictures every few weeks concerning
   397	whether to announce new anonymous FTP sites for GIF files, and the
   398	issue has never been settled to everyone's satisfaction.  Here I add
   399	my two cents to the discussion: if you discover a site and keep the
   400	name to yourself or pass it on to only a few friends, then the word
   401	will spread slowly, and the site will not have to bear an instantly
   402	heavy load.  However, if you announce to the world that you have found
   403	this site, then everyone will descend upon it like a flock of vultures
   404	on a rotting cow, and the site will invariably remove its GIF files.
   405	Which sounds like a better idea to you?
   406	
   407	The other most common method for obtaining files is from an archival 
   408	file server.  Most of these work in the following way: you send mail 
   409	to the server's address, with one-line commands in your message, like
   410	   help
   411	   directory \pictures\gif\family-oriented
   412	   send \pictures\gif\family-oriented\CRASH&BURN.GIF
   413	and the requested info is sent back to you at some later time, when 
   414	the server has time to get around to it.
   415	
   416	The first step when you discover a server system is to send a HELP
   417	command so you can learn what the commands are for that server.  
   418	However, most servers operate with commands basically similar to those 
   419	listed above.
   420	
   421	
   422	VII. ALT.BINARIES.PICTURES AND ALT.BINARIES.PICTURES.D
   423	
   424	These two newsgroups work basically like the comp.binaries.ibm.pc and
   425	c.b.i.p.d groups; one is for posting new material, and one is for 
   426	discussing posts and other issues.
   427	
   428	The basic idea is this:  if it is a picture, post it to a.b.p.  If it 
   429	is *ANYTHING ELSE* ANYTHING ANYTHING ANYTHING ELSE, post it to a.b.p.d 
   430	The truth is that I feel bad about posting *THIS FILE* to a.b.p, 
   431	because it is not a picture.  However, the benefits of restricting the 
   432	requests for info outweigh the detriment of breaking the until-
   433	recently-unwritten rule.
   434	
   435	PLEASE DO NOT POST ANYTHING TO ALT.BINARIES.PICTURES THAT IS NOT A PICTURE 
   436	OF SOME SORT!!!!
   437	
   438	
   439	VIII. COMMON PROBLEMS
   440	
   441	Well, you've downloaded the file, tried to view it, and got garbage.  
   442	What went wrong?
   443	
   444	The two most likely places for something to go wrong are both in the 
   445	transmission of the file.  The first is this:  when you downloaded the 
   446	file to your home computer, did you remember to tell the modem- 
   447	transfer software that you're sending a binary file?
   448	
   449	The second-most likely is that you forgot to say TENEX before you 
   450	grabbed the file via FTP.
   451	
   452	Either of these will result in mangled files that are unviewable by 
   453	anything known to man.
   454	
   455	Also: did you remember to trim off the header & trailer information if
   456	you are/were using a "simple" uudecoder?  The symptom of forgetting to
   457	do this is usually a message something like "short file" from your GIF
   458	viewer.
   459	[NOTE: I have also seen a problem where blank lines are left between
   460	parts (or anywhere for that matter) within the 'begin' and 'end' lines
   461	of the uuencoded file.  Uudecode will get through them fine, but some
   462	GIF viewers will choke on the results.  The only blank line I've seen
   463	get by is the one just before the 'end' statement.  Beware of taking
   464	too much or not enough off of the headers and trailers.-SQ]
   465	
   466	Another common problem is this one:  IBM mainframes often use the 
   467	EBCDIC character set instead of the ASCII set used by everyone else.  
   468	This wouldn't be a problem except that most ASCII-EBCDIC converters 
   469	have a bug which mungs the translation of several characters, 
   470	including ^ { } and a few others.  Even this wouldn't be a problem 
   471	except that the particular munging it does is to map several of these 
   472	characters onto the *same* wrong character.  Ooops.
   473	
   474	The way around this is not to use uuencode to transfer these files,
   475	but to use xx-encode, which produces files which look almost exactly
   476	like uu-encoded files, but they use a character set which is
   477	IBM-proof.  If you are using an IBM mainframe as your host computer
   478	and you're having trouble decoding files, this is most likely your
   479	problem.  Solution: 1) find a kind soul who is willing to uudecode the
   480	files, xxencode them and send them to you, 2) get the files via FTP,
   481	which should be EBCDIC-proof, or 3) get a better computer that uses
   482	everybody else's character set. :-) 
   483	
   484	The last and least likely problem is that some mailer somewhere 
   485	actually munged the file.  It happens.  Fortunately, it doesn't happen 
   486	all that often.  When it does (and please check all of the other 
   487	problems *FIRST*), post to a.b.p.d and request someone to send you 
   488	their (working) copy.  If enough people post requests of this sort, 
   489	eventually the original poster will usually re-post it.  If you're the 
   490	only person with a problem, someone is bound to send you the file, and 
   491	you'll save the net 'hundreds if not thousands of dollars.'
   492	
   493	
   494	IX. APPENDICES: AWK, SED, & PERL SCRIPTS
   495	
   496	Below are the scripts mentioned in section I.  I make no assurances as 
   497	to how well they work; I use one of the 'super' uudecodes instead.
   498	Not that the SED script will not work unless people follow this recent 
   499	trend of putting 'BEGIN' and 'END' in the 'cut here' lines.  The AWK & 
   500	PERL scripts will work on most files, but some uuencodes put out 
   501	nonstandard data, in which case these scripts will bomb and you'll 
   502	have to do the work by hand.
   503	
   504	-------------------------------------------------------------------------
   505	AWK script:
   506	
   507	#!/bin/sh
   508	
   509	if [ X$1 != X ] ; then cat $* ; else cat <& 0 ; fi              | \
   510	awk '/begin [0-9]/                              {ok = 1}
   511	     /^Message/                                 {ok = 0;next}
   512	     /^M/ && (length == 61 || length == 62)     {ok = 1}
   513	     /[cC]ut [hH]ere/                           {ok = 0;next}
   514	     /^END-----/                                {ok = 0;next}
   515	     /^Path:/                                   {ok = 0;next}
   516	     /^$/                                       {ok = 0;next}
   517	     /^-/                                       {ok = 0;next}
   518	     /^_/                                       {ok = 0;next}
   519	     {if (ok) print}
   520	     /^end/                                     {ok = 0}' $*    | \
   521	(cd $HOME/tmp; uudecode)
   522	
   523	--------------------------------------------------------------------------
   524	
   525	SED idea from Alan Sparks (asparks@viewlogic.com):
   526	
   527	cat $* | sed '/^END/, /^BEGIN/d' | uudecode
   528	
   529	
   530	Recall that this won't work except on files with BEGIN & END as part 
   531	of the 'CUT HERE' lines...
   532	
   533	-------------------------------------------------------------------------
   534	
   535	PERL script from Dave Mack (csu@alembic.acs.com):
   536	
   537	#! /usr/local/bin/perl
   538	#
   539	# Combine split uuencoded files into a single data stream with
   540	# e-mail garbage removed and pipe into uudecode. The uuencoded
   541	# files must be in the correct order on the command line - in
   542	# particular the first file must contain the "begin" line and
   543	# the last file must contain the "end" line.
   544	#
   545	# WARNING: this code relies on uuencode putting out all lines
   546	# of the form "M[61 ASCII characters]\n" for every line of the
   547	# file except the last few before the "end" line. If you come
   548	# across a uuencoded file that doesn't do this, you'll need to
   549	# modify the code to handle it.
   550	#
   551	# DISCLAIMER: You use this code at your own risk. Also, don't
   552	# take this is as a sterling example of Perl programming. Corrections
   553	# and improvements welcome. You may do whatever you like with this
   554	# code as long as you leave in some reminder of who the original
   555	# culprit^H^H^H^H^H^H^Hauthor was.
   556	#
   557	# Usage: uumerge filename [filename...]
   558	# Requires Perl 3.0 - my copy is at patchlevel 18
   559	#
   560	# Dave Mack csu@alembic.ACS.COM
   561	#
   562	# TODO: modify to allow more than one collection of files on
   563	#       command line.
   564	#
   565	# KNOWN BUGS: 
   566	#
   567	# If some bozo puts a line beginning with "M" in the body of one
   568	# of the intermediate/last chunks, uumerge will assume that uuencoded
   569	# part starts there.
   570	#
   571	# If the last chunk only contains the last two or three lines of
   572	# the uuencoded file (the ones that don't start with "M"), uumerge
   573	# will die.
   574	#
   575	# CHANGES
   576	#
   577	# PATCH 1:
   578	# It appears that some versions of uudecode are too stupid to skip
   579	# past the lines preceding the "begin" line, so feeding a one-part
   580	# uuencoded file to uumerge will bomb.
   581	#
   582	if ($#ARGV < 0 ) {
   583	        print "Usage: uumerge filename [filename...]\n";
   584	        exit 1;
   585	}
   586	
   587	$| = 1;
   588	# open a pipe into uudecode
   589	open(DECO,"|uudecode") || die "Can't pipe into uudecode\n";
   590	
   591	# if we only have one file, pump it straight into uudecode and die
   592	if ( $#ARGV == 0 ) {
   593	        open(FIRST,"<$ARGV[0]") || die "Can't open $ARGV[0] for input\n";
   594	
   595	        while ( <FIRST> ) {
   596	                # skip past everything before the "begin" line
   597	                next unless /^begin [0-9]/;
   598	                last;
   599	        }
   600	        die "$ARGV[0] doesn't contain \"begin\"\n" if eof(FIRST);
   601	        
   602	        print DECO $_; # the begin line
   603	
   604	        while ( <FIRST> ) {
   605	                print DECO $_ unless /^end/;
   606	                if ( /^end/ ) {
   607	                        print DECO $_;
   608	                        last;
   609	                }
   610	                die "$ARGV[0] doesn't contain \"end\"\n" if eof(FIRST);
   611	        }
   612	
   613	        # done with file
   614	        close(FIRST);
   615	        exit 0;
   616	}
   617	
   618	# process the first file - make sure we have a "begin" line
   619	
   620	open(FIRST,"<$ARGV[0]") || die "Can't open $ARGV[0] for input\n";
   621	
   622	while ( <FIRST> ) {
   623	        # skip past everything before the "begin" line
   624	        next unless /^begin [0-9]/;
   625	        last;
   626	}
   627	die "First file on command line doesn't contain \"begin\"\n" if eof(FIRST);
   628	        
   629	print DECO $_; # the begin line
   630	
   631	# the remaining "real" uuencoded lines in this file should begin with "M"
   632	while ( <FIRST> ) {
   633	        if ( /^M/ ) {
   634	                print DECO $_;
   635	        }
   636	        else {
   637	                last;
   638	        }
   639	}
   640	
   641	# done with the first file
   642	close(FIRST);
   643	
   644	# do all except the last file
   645	$maxindex = $#ARGV;
   646	$curr = 1;
   647	
   648	while ( $curr < $maxindex ) {
   649	        open(CURR,"<$ARGV[$curr]") || die "Can't open $ARGV[$curr]\n";
   650	        # skip the header junk
   651	        while ( <CURR> ) {
   652	                next unless /^$/;
   653	                last;
   654	        }
   655	        # at the body of the message - start looking for /^M/
   656	        while ( <CURR> ) {
   657	                next unless /^M/;
   658	                last;
   659	        }
   660	        die "$ARGV[$curr] isn't a uuencoded file\n" if eof(CURR);
   661	        # OK, we're at the start of the good stuff (probably)
   662	        print DECO $_;
   663	        while ( <CURR> ) {
   664	                if (/^M/) {
   665	                        print DECO $_;
   666	                }
   667	                else {
   668	                        last;
   669	                }
   670	        }
   671	        # done with current file
   672	        close(CURR);
   673	        $curr++;
   674	}
   675	
   676	# time to do the last file in the set
   677	$curr = $maxindex;
   678	open(CURR,"<$ARGV[$curr]") || die "Can't open $ARGV[$curr]\n";
   679	# skip the header junk
   680	while ( <CURR> ) {
   681	        next unless /^$/;
   682	        last;
   683	}
   684	# at the body of the message - start looking for /^M/
   685	while ( <CURR> ) {
   686	        next unless /^M/;
   687	        last;
   688	}
   689	# OK, we're at the start of the good stuff (probably)
   690	print DECO $_;
   691	while ( <CURR> ) {
   692	        print DECO $_ unless /^end/;
   693	        if ( /^end/ ) {
   694	                print DECO $_;
   695	                last;
   696	        }
   697	        die "Last file on command line doesn't contain \"end\"\n" if eof(CURR);
   698	}
   699	# done with final file
   700	close(CURR);
   701	# close the pipe to uudecode and exit
   702	close(DECO);
   703	exit(0);
   704	
   705	-------------------------------------------------------------------------------
   706	
   707	
   708	That's about it for this introduction.  If you have any suggestions 
   709	for things to include in future versions, don't hesitate to let me 
   710	know...
   711	
   712	readdm@ccwf.cc.utexas.edu
   713	-- 
   714	Dave Read  (readdm@ccwf.cc.utexas.edu)             |   In large, friendly 
   715	UT-Austin Nuclear Physics Graduate Student (Slave) | letters were the words
   716	Sometimes I wish life were a game of Asteroids...  |      Don't Panic.
   717	So I could hit the Hyperspace button.              |            
   718	
   719	
   720	
   721	
   722	The Stranger ;^{)
   723	------------
   724	If I sound opinionated, please remember that all opinions expressed
   725	here, though long winded, are strickly my own and are intended to
   726	offend and/or flame no one.  If I don't sound opinionated, then you
   727	may disregard this message. "It's either sadness or euphoria."-B. Joel
   728	**** USENET NEWS ****
   729	Group Name: alt.binaries.pictures
   730	Group No: 17
   731	Message: 1372
   732	Of: 1420
   733	Xref: kcbbs alt.binaries.pictures.d:641 alt.binaries.pictures:1372
   734	Path: kcbbs!aukuni.ac.nz!waikato.ac.nz!decwrl!mips!spool.mu.edu!news.nd.edu!mentor.cc.purdue.edu!mace.cc.purdue.edu!jewell
   735	Newsgroups: alt.binaries.pictures,alt.binaries.pictures.d
   736	Subject: MSDOS utilities available by ftp or e-mail
   737	Message-ID: <17716@mentor.cc.purdue.edu>
   738	From: jewell@mace.cc.purdue.edu (Larry Jewell)
   739	Date: 1 Sep 91 15:42:10 GMT
   740	Sender: news@mentor.cc.purdue.edu
   741	Followup-To: alt.binaries.pictures.d
   742	Lines: 277
   743	
   744	
   745	   Here is a list of utilities for MSDOS systems.  I'm posting it here due to
   746	   the fact that newer users often aren't aware of the ".d" group and this will
   747	   save (hopefully) a lot of unecessary traffic.  New Users! please note that
   748	   follow-ups to this posting are directed to alt.binaries.pictures.d.
   749	   Post discussion THERE! (Of course if your site doesn't get the ".d" group,
   750	   someone will still flame-on that you should post there anyway.  So ask
   751	   you siteadmin to pick it up.)
   752	
   753	   If you don't have an MSDOS system, and you post a message asking for help,
   754	   PLEASE tell us what kind of system you do have, else you might be answered
   755	   by a profound silence, or rude flames.
   756	
   757	   If you're testing your posting capabilities, set distribution to LOCAL please
   758	   so you don't clutter up the net with "errors".
   759	   .............................................................................
   760	
   761	   Following is several lists taken from simtel20's indexes (Thanks, Keith!).
   762	   The utilites are listed in the following order:
   763	   1. decoding a uuencoded file.
   764	   2. viewing .gifs on an msdos system
   765	   3. information on .gif formats
   766	   4. How to deal with .tar files on an msdos system.
   767	   5. CRC utilities (checks validity of file.)
   768	   6. Convert from one format to another.
   769	   7. Utilities for MSWindows
   770	   8. Utilities for MSWindows v3.0
   771	   9. TIFF format.
   772	   10. Everything else  ie. PCX, TIFF, GL, etc.
   773	   11. GIF Catalogers
   774	   12. Information about simtel20's files.
   775	If you don't know how to use anonymous ftp, ask your local consultants or site
   776	administrator, or read the articles posted on the 1st and 15th in 
   777	comp.binaries.ibm.pc (the article titled "Beginner's Guide to FTP" is the one 
   778	you want.)
   779	
   780	NOTE: This list was created on Mon, 29 Jul 91 .
   781	Some files may have been added or deleted since that date.
   782	See file PD1:<MSDOS.FILEDOCS>AAAREAD.ME for additional information.
   783	------------------------------DECODERS------------------------------------------NOTE: .gifs are posted to the net in uudecoded form.  You must put numbered
   784	files together without headers or footers and decode them to view.  The documentation in these packages should give you a lot of information on how to do this.
   785	
   786	
   787	   NOTE: Type B is Binary; Type A is ASCII
   788	
   789	   Directory PD1:<MSDOS.FILUTL>(at wsmr-simtel20.army.mil)
   790	   Directory /mirrors/msdos/filutl (at wuarchive.wustl.edu)
   791	    Filename   Type Length   Date   Description
   792	   ==============================================
   793	FIXUUE10.ZIP  B    4432  910625  Fixes translation problems on UUEncoded files
   794	QUX01_91.ZIP  B   11386  910116  Quick UUencode/UUdecode and XXencode/XXdecode
   795	REBUILD2.ZIP  B   14051  901108  Rebuild split uuencoded files, w/MSC 5.0 src
   796	TOADUU20.ZIP  B   25078  910312  Unix-compat. fast UUEncode/UUDecode, w/ASM src
   797	TOADXX11.ARC  B   41371  891029  XXEncode/XXDecode w/overwrite protection v1.1
   798	UUEXE413.ZIP  B   28070  901207  R.E.Marks' UUdecode/UUencode/XXdecode/XXencode
   799	UUSTRIP.ARC   B    4448  890407  Make uuencoded bin posting ready for uudecode
   800	UUXFER20.ZIP  B   29996  901106  Comprehensive UU/XX en/decoder with C source
   801	------------------------------VIEWERS-------------------------------------------
   802	
   803	NOTE: Type B is Binary; Type A is ASCII
   804	
   805	   Directory PD1:<MSDOS.GIF>(at wsmr-simtel20.army.mil)
   806	   Directory mirrors/msdos/gif (at wuarchive.wustl.edu)
   807	   Filename   Type Length   Date   Description
   808	   ==============================================
   809	CSHW832A.ZIP  B  119391  910616  GIF/MAC/RLE view/print, Herc/CGA/EGA/VGA/SVGA
   810	FASTGIF.ARC   B   37730  880306  View GIF format files. EGA/VGA only
   811	GDS109.ZIP    B  138029  910521  Displays GIFs with unlimited zooming, SVGA/VGA
   812	GIFDES40.ZIP  B   42124  910311  View several GIFs at once. Req. VGA w/>=512K
   813	GREY15.ARC    B   29793  880523  Grey scale GIF viewer v1.5 MCGA/CGA/VGA
   814	HERV131.ZIP   B   33312  910527  View any GIF file on Hercules. Many options
   815	PICVIEW.ARC   B  123251  900126  GIF/MAC viewer w/adjustable palette animation
   816	SHWGIF51.ZIP  B   27954  901216  View .GIFs while downloading, for EGA/VGA
   817	SNAPVS.ARC    B   64628  900120  View GIF files on VGA, print on STAR NX-1000
   818	TGIF11.ZIP    B    8568  910521  GIF cut/grayscale cvt/sharpen image. (VGA req)
   819	VGIF150.ARC   B   30380  880523  GIF picture viewer v1.50 CGA/EGA/VGA/HERC
   820	VPIC43.ZIP    B  102991  910506  GIF/MAC/PCX/ColorRix pics view/convrt, EGA/VGA
   821	VUIMG311.ZIP  B  105936  910709  GIF/GIF89a/TIFF view/print w/Zoom/Pan/Scale
   822	--------------------------INFORMATION------------------------------------------
   823	How the heck do they DO that? Here's descriptions of the .gif format and
   824	related material.
   825	
   826	   NOTE: Type B is Binary; Type A is ASCII
   827	
   828	   Directory PD1:<MSDOS.GIF>(at wsmr-simtel20.army.mil)
   829	   Directory mirrors/msdos/gif (at wuarchive.wustl.edu)
   830	   Filename   Type Length   Date   Description
   831	   ==============================================
   832	89AILLUS.GIF  B    2688  901215  Tiny file illustrates GIF89a-use VUIMG280.ZIP
   833	CG89A.GIF     B   26624  901109  GIF89a format pic-illustrates transparency etc
   834	EGIF035.ARC   B   33003  890625  Determine colors/resolution of GIF image file
   835	GIF.ARC       B   52853  880226  Interchange graphics formats
   836	GIF-CSRC.ZIP  B    5019  901218  C source code for a GIF decoder
   837	GIF-DOC.ZIP   B   35857  901218  Docs re new/old GIF formats & compression
   838	GIF-PAS.ZIP   B   59023  901218  Pascal source code for a GIF viewer
   839	GIF89A.ZIP    B   22805  901115  Specifications of GIF89A standard from CIS
   840	GIFDECOD.GIF  B    6912  890115  GIF drawing explains decoding of GIFs
   841	GIFDOC.ARC    B   89706  880801  Specification of GIF standard from CompuServe
   842	GIFENCOD.GIF  B    8320  890115  GIF drawing explains encoding of GIFs
   843	GIFLIB12.ZIP  B  245747  910809  Turbo C 2.0 library to manipulate GIF images
   844	GIFSRC.ZIP    B   41066  901218  Pascal and 8086 ASM source for a GIF viewer
   845	STRIPGIF.ARC  B    7214  880902  Strip unneeded characters from .GIF Files
   846	TEXTTST.GIF   B    1536  901109  New GIF89a format test picture
   847	
   848	------------------------------.TAR---------------------------------------------
   849	This extension on a file means it's been compressed, like .zip, .arc, etc.  
   850	Save down loading time and decompression them on your "home" machine.
   851	
   852	   NOTE: Type B is Binary; Type A is ASCII
   853	
   854	   Directory PD1:<MSDOS.FILUTL>(at wsmr-simtel20.army.mil)
   855	   Directory /mirrors/msdos/filutl (at wuarchive.wustl.edu)
   856	   Filename   Type Length   Date   Description
   857	   ==============================================
   858	DETAR11.ARC   B   20480  880125  Process a TAR file on PC
   859	EXTAR10.ZIP   B   10881  910608  Simple TAR unpacker; w/Unix to DOS name conv.
   860	PDTAR.ARC     B  117152  880614  Read/write TAR files on PC
   861	TAR.ZIP       B   29353  900823  Unix-compatible TAR archive maker/extractor
   862	-------------------------------CRC----------------------------------------------
   863	Cyclic Redundancy Check, which the poster calculated before he/she posted will
   864	be included in files posted by competent posters.  Use one of these utilities to
   865	check a .gif before screaming to the planet that it's "hammered".
   866	
   867	   NOTE: Type B is Binary; Type A is ASCII
   868	
   869	   Directory PD1:<MSDOS.FILUTL>(at wsmr-simtel20.army.mil)
   870	   Directory mirrors/msdos/filutl (at wuarchive.wustl.edu)  
   871	   Filename   Type Length   Date   Description
   872	   ==============================================
   873	BRIK.INF      A    2617  890731  Description of BRIK.ARC CRC-32 program v2.0
   874	BRIK2EXE.ARC  B   26645  890731  General-purpose CRC-32 program, v2.0
   875	BRIK2SRC.ARC  B   63549  890806  General-purpose CRC-32 pgm, v2.0, C source
   876	CHK4C350.ZIP  B   17311  910625  Identifies compressed EXE and COM files
   877	CHKSUM2.ARC   B   25228  890313  Compute checksum for 1 or more files
   878	CRC113.ARC    B   15098  900120  Displays 16 and 32-bit CRC's of files
   879	CRC2.PAS      A   22362  860221  File CRC utility
   880	CRC67.ARC     B    4733  860927  Calc. CRC value of files (opt'l. file output)
   881	CRCK.ASM      A    5279  850106  File CRC utility
   882	QCRC21.ARC    B   22815  880829  Calculate CRC for MS-DOS files
   883	SUM101.ARC    B   10020  890407  Unix-like file CRC generation program
   884	---------------------------CONVERTERS-------------------------------------------
   885	Change .gifs to another format, and vice versa.  
   886	
   887	   NOTE: Type B is Binary; Type A is ASCII
   888	
   889	   Directory PD1:<MSDOS.GIF>(at wsmr-simtel20.army.mil)
   890	   Directory mirrors/msdos/gif (at wuarchive.wustl.edu)
   891	   Filename   Type Length   Date   Description
   892	   ==============================================
   893	BLD2GIF.ARC   B   96415  880620  Converts Bsaved VGA screen images to GIFs
   894	CVT2GIF.ZIP   B   10046  900713  PIC or PCX to GIF conversion utility, v1.5
   895	CVTGIF15.ARC  B   12746  890910  PIC or PCX to GIF picture conversion utility
   896	GIF.ARC       B   52853  880226  Interchange graphics formats
   897	GIF2WP32.ARC  B   24897  890127  Convert GIF to WordPerfect Graf. v.3.2
   898	GIFEXE.ZIP    B   29498  910713  Creates .EXE versions of .GIF files
   899	GIFKIT11.ARC  B  133321  900223  Utilities for manipulating GIF graphics files
   900	GIFLEX12.ZIP  B  477425  910809  Manipulate GIF images. EXEs made from GIFLIB
   901	GIFLIB11.ZIP  B  219593  901115  Turbo C 2.0 library to manipulate GIF images
   902	GIFLT140.ZIP  B   46242  910810  GIF Lite 1.40 GIF file compression program
   903	GIFWARP1.ZIP  B   49584  910416  Reshapes any portion of a GIF
   904	GRABSC11.ZIP  B   38235  910112  Save graphics screens to disk, then cvt to GIF
   905	GRAFWK60.ZIP  B  328419  910831  View/cvt/print MAC/IMG/GIF/TIFF/EPS graphics
   906	MAC2GIF.ARC   B   77206  890801  Convert MAC graphics files to GIFs
   907	MSGIFSCN.ZIP  B   20700  910719  Displays info on GIF images, checks validity
   908	PICLB182.ZIP  B  152631  901009  24-bit disp.-independent graphics manipulation
   909	PIXIT.ARC     B   16143  900203  Converts GIFs to COM and EXE files, w/ASM src
   910	PSTGIF12.ARC  B   34039  890613  Convert GIF to EPS w/gray scale translation
   911	SCR2GIF2.ZIP  B   27520  900927  Capture EGA/VGA screens, then convert to GIF
   912	SQZGIF13.ZIP  B   69489  900807  Reduce large GIF files to 320x200 for printing
   913	TGIF11.ZIP    B    8568  910521  GIF cut/grayscale cvt/sharpen image. (VGA req)
   914	VGA2CGA2.ZIP  B   64734  900927  Convert VGA GIF files to CGA
   915	VGA2EGA4.ARC  B  100089  890421  Convert GIFs to 16-color EGA pictures
   916	VGA2GIF3.ARC  B   13788  880829  Capture VGA 256 color to GIF
   917	VPIC43.ZIP    B  102991  910506  GIF/MAC/PCX/ColorRix pics view/convrt, EGA/VGA
   918	
   919	   Directory PD1:<MSDOS.GRAPHICS>
   920	   Directory mirrors/msdos/graphics (at wuarchive.wustl.edu)
   921	EEDRAW22.ZIP  B  230115  910809  Electrical eng'g drawing, w/print & GIF output
   922	SCEDIT10.ZIP  B  116043  910809  View/change GIF,TGA,BMP,PCX on VESA VGA/TIGA
   923	----------------------------MSWindows------------------------------------------
   924	
   925	   NOTE: Type B is Binary; Type A is ASCII
   926	
   927	   Directory PD1:<MSDOS.MSWINDOWS>(at wsmr-simtel20.army.mil)
   928	   Directory /mirrors/msdos/mswindows (at wuarchive.wustl.edu)
   929	   Filename   Type Length   Date   Description
   930	   ==============================================
   931	GCP42S.ARC    B   50736  890628  New GIF, PCX, MAC viewer for MS Windows
   932	----------------------------MSWindows v 3.0------------------------------------- 
   933	   NOTE: Type B is Binary; Type A is ASCII
   934	
   935	   Directory PD1:<MSDOS.WINDOWS3>(at wsmr-simtel20.army.mil)
   936	   Directoyr /mirrors/msdos/windows3 (at wuarchive.wustl.edu)
   937	   Filename   Type Length   Date   Description
   938	   ==============================================
   939	PS112.ZIP     B   27688  901229  WIN3: Paint Shop, manipulate/cvt BMP, GIF, RLE
   940	UUCODE15.ZIP  B   22967  910726  Unix-compatible UUencode/UUdecode for Windows3
   941	WINGIF10.ZIP  B   58722  910331  GIF/PCX/RLE->BMP image converter for Windows 3
   942	
   943	----------------------------TIFF------------------------------------------------
   944	   NOTE: Type B is Binary; Type A is ASCII
   945	
   946	   Directory PD1:<MSDOS.TIFF>(at wsmr-simtel20.army.mil)
   947	   Directory /mirrors/msdos/tiff (at wuarchive.wustl.edu)  
   948	   Filename   Type Length   Date   Description
   949	   ==============================================
   950	DTIFF.ZIP     B  210880  900502  Displays TIFF files on screen, uses TACS
   951	DVTIF1.ZIP    B   15932  900416  TIFF reader:PACKBITS compr/uncomp C src, ALDUS
   952	TACS40.ZIP    B  126480  900425  TIFF Access/Create System - C source, TIFF 4.0
   953	TFTOOL.ZIP    B   65975  900416  TIFF toolkit developer package C source, ALDUS
   954	TIFF-50.ARC   B   71705  891209  Tagged Image File Format specs, v5.0
   955	TIFFAX.ZIP    B   45625  900416  TIFF FAX format definition/example, ALDUS
   956	----------------------------Everything else------------------------------------- 
   957	   NOTE: Type B is Binary; Type A is ASCII
   958	
   959	   Directory PD1:<MSDOS.GRAPHICS>(at wsmr-simtel20.army.mil)
   960	   Directory /mirrors/msdos/graphics (at wuarchive.wustl.edu)
   961	   Filename   Type Length   Date   Description
   962	   ==============================================
   963	ALCHMY14.ZIP  B  247389  910324  Targa/EPS/GIF/IFF/PICT/PCX/Sun/TIFF/BMP convrt
   964	DBWRENDR.ZIP  B  263680  900403  Ray tracing graphics pgm. v1.02 (MCGA/VGA req)
   965	DISPPIX.ARC   B   25076  890725  Viewer for Atari-ST Degas files, EGA/VGA req.
   966	FLILIB.ZIP    B  106309  910428  FLI graphics image manipulation library/player
   967	FLIMAKER.ZIP  B   50789  910428  Autodesk Animator FLImaker, converts to FLI
   968	GEMCAP40.ZIP  B   13254  901007  Saves graphics/text screens as GEM .IMG files
   969	GLFORMAT.ZIP  B   10586  910315  Info: Grasp .GL,.PIC,.CLP,.FNT,.SET formats
   970	GRAFWK52.ZIP  B  318169  910521  View/cvt/print MAC/IMG/GIF/TIFF/EPS graphics
   971	GRASP32C.ZIP  B   55088  910220  Grasp Art automation GL file viewer 3.2 Beta C
   972	HPGLVU10.ZIP  B   89457  910429  Viewer for HPGL files, with Turbo Pascal 5 src
   973	INT_70H.ARC   B   21755  881216  Fast graphics driver for Hercules (HGC)
   974	IW2GIF.ARC    B    9762  900108  Convert Imagewise pictures to GIF format
   975	PCX112.ZIP    B   58369  910124  PCX graphics image viewer
   976	PCXDMP30.ZIP  B  130517  910726  TSR dumps EGA, VGA & SVGA screens to PCX files
   977	PCXSHO.ZIP    B  151750  901223  PCX-Show:Presentation/slide show for PCX files
   978	PCXSHOW3.ZIP  B  192519  910724  PCX-Show:Presentation/slide show for PCX files
   979	PCXUT.ZIP     B   69410  901223  PCX screen capture & viewing programs
   980	PCX_C.ZIP     B   26890  910418  C source to handle PCX format graphics files
   981	PDGRASP.ZIP   B  209880  910318  PD Grasp: Creates/modifies .GL animation files
   982	PICEM21.ZIP   B   34904  901007  PICEM v2.1 GIF PCX PIC view & conversion
   983	PV13.ZIP      B  153087  910428  PicView 1.3 view GIF, MAC, RIX for VGA
   984	RON9PCX1.ZIP  B  206443  901014  Shows 9 pictures on screen in reduced format
   985	TGA2TIF.ZIP   B   21636  910329  Convert TARGA images to TIFF format
   986	TX2PCX.ZIP    B   10171  910124  Converts text screens to PCX files
   987	VESA-TSR.ZIP  B  222450  910124  TSR drivers for VESA SuperVGA graphics std.
   988	----------------------------Catalogers----------------------------------------
   989	   NOTE: Type B is Binary; Type A is ASCII
   990	
   991	   Directory PD1:<MSDOS.GIF>(at wsmr-simtel20.army.mil)
   992	   Directory /mirrors/msdos/gif (at wuarchive.wustl.edu)   
   993	   Filename   Type Length   Date   Description
   994	   ==============================================
   995	
   996	GLIST112.ARC  B   12974  890910  GIF listing utility, version 1.12
   997	
   998	   Directory PD1:<MSDOS.DATABASE>(at wsmr-simtel20.army.mil)
   999	   Directory /mirrors/msdos/database(at wuarchive.wustl.edu)   
  1000	   Filename   Type Length   Date   Description
  1001	   ==============================================
  1002	
  1003	GIFLG11A.ZIP  B   47608  910114  GIF file cataloging program
  1004	----------------------------Simtel20 information-------------------------------- 
  1005	   NOTE: Type B is Binary; Type A is ASCII
  1006	
  1007	   Directory PD1:<MSDOS.FILEDOCS>(at wsmr-simtel20.army.mil)
  1008	   Directory /mirrors/msdos/filedocs (at wuarchive.wustl.edu)   
  1009	   Filename   Type Length   Date   Description
  1010	   ==============================================
  1011	AAAREAD.ME    A    4543  910628  Information about the files in this directory
  1012	DOWNLOAD.INF  A     957  910619  How to get SIMTEL20 files via telephone modem
  1013	GREP.SIM      A    1747  901204  Script to view SIMIBM.IDX on Unix systems
  1014	QUICKREF.LST  A    2380  910629  Quick reference list to SIMTEL20's MSDOS dirs
  1015	SIMLIST.ARC   B  264189  910714  Text format list of all MSDOS files w/descrip.
  1016	-- 
  1017	##############################################################################
  1018	#Larry W. Jewell (ex-USN)  JEWELL@PURCCMACE   jewell@mace.cc.purdue.edu      #
  1019	#Primary-claimer:  I have not authorized Purdue to share my opinions.        #
  1020	#Maintainer of SOC.VETERANS faq, send me the "straight skinny" for inclusion.#
  1021	