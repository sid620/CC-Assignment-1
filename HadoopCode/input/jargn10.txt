     1	
     2	#========= THIS IS THE JARGON FILE, VERSION 2.9.10, 01 JUL 1992 =========#
     3	
     4	This is the Jargon File, a comprehensive compendium of hacker slang
     5	illuminating many aspects of hackish tradition, folklore, and humor.
     6	
     7	This document (the Jargon File) is in the public domain, to be freely
     8	used, shared, and modified.  There are (by intention) no legal
     9	restraints on what you can do with it, but there are traditions about
    10	its proper use to which many hackers are quite strongly attached.
    11	Please extend the courtesy of proper citation when you quote the File,
    12	ideally with a version number, as it will change and grow over time.
    13	(Examples of appropriate citation form: "Jargon File 2.9.10" or
    14	"The on-line hacker Jargon File, version 2.9.10, 01 JUL 1992".)
    15	
    16	The Jargon File is a common heritage of the hacker culture.
    17	Over the years a number of individuals have volunteered considerable
    18	time to maintaining the File and been recognized by the net at large
    19	as editors of it.  Editorial responsibilities include: to collate
    20	contributions and suggestions from others; to seek out corroborating
    21	information; to cross-reference related entries; to keep the file in a
    22	consistent format; and to announce and distribute updated versions
    23	periodically.  Current volunteer editors include:
    24	
    25	        Eric Raymond    eric@snark.thyrsus.com  (215)-296-5718
    26	
    27	Although there is no requirement that you do so, it is considered good
    28	form to check with an editor before quoting the File in a published work
    29	or commercial product.  We may have additional information that would be
    30	helpful to you and can assist you in framing your quote to reflect
    31	not only the letter of the File but its spirit as well.
    32	
    33	All contributions and suggestions about this file sent to a volunteer
    34	editor are gratefully received and will be regarded, unless otherwise
    35	labelled, as freely given donations for possible use as part of this
    36	public-domain file.
    37	
    38	From time to time a snapshot of this file has been polished, edited,
    39	and formatted for commercial publication with the cooperation of the
    40	volunteer editors and the hacker community at large.  If you wish to
    41	have a bound paper copy of this file, you may find it convenient to
    42	purchase one of these.  They often contain additional material not
    43	found in on-line versions.  The two `authorized' editions so far are
    44	described in the Revision History section; there may be more in the
    45	future.
    46	
    47	:Introduction:
    48	**************
    49	
    50	:About This File:
    51	=================
    52	
    53	This document is a collection of slang terms used by various subcultures
    54	of computer hackers.  Though some technical material is included for
    55	background and flavor, it is not a technical dictionary; what we
    56	describe here is the language hackers use among themselves for fun,
    57	social communication, and technical debate.
    58	
    59	The `hacker culture' is actually a loosely networked collection of
    60	subcultures that is nevertheless conscious of some important shared
    61	experiences, shared roots, and shared values.  It has its own myths,
    62	heroes, villains, folk epics, in-jokes, taboos, and dreams.  Because
    63	hackers as a group are particularly creative people who define
    64	themselves partly by rejection of `normal' values and working habits, it
    65	has unusually rich and conscious traditions for an intentional culture
    66	less than 35 years old.
    67	
    68	As usual with slang, the special vocabulary of hackers helps hold their
    69	culture together --- it helps hackers recognize each other's places in
    70	the community and expresses shared values and experiences.  Also as
    71	usual, *not* knowing the slang (or using it inappropriately) defines one
    72	as an outsider, a mundane, or (worst of all in hackish vocabulary)
    73	possibly even a {suit}.  All human cultures use slang in this threefold
    74	way --- as a tool of communication, and of inclusion, and of exclusion.
    75	
    76	Among hackers, though, slang has a subtler aspect, paralleled perhaps in
    77	the slang of jazz musicians and some kinds of fine artists but hard to
    78	detect in most technical or scientific cultures; parts of it are code
    79	for shared states of *consciousness*.  There is a whole range of altered
    80	states and problem-solving mental stances basic to high-level hacking
    81	which don't fit into conventional linguistic reality any better than a
    82	Coltrane solo or one of Maurits Escher's `trompe l'oeil' compositions
    83	(Escher is a favorite of hackers), and hacker slang encodes these
    84	subtleties in many unobvious ways.  As a simple example, take the
    85	distinction between a {kluge} and an {elegant} solution, and the
    86	differing connotations attached to each.  The distinction is not only of
    87	engineering significance; it reaches right back into the nature of the
    88	generative processes in program design and asserts something important
    89	about two different kinds of relationship between the hacker and the
    90	hack.  Hacker slang is unusually rich in implications of this kind, of
    91	overtones and undertones that illuminate the hackish psyche.
    92	
    93	But there is more.  Hackers, as a rule, love wordplay and are very
    94	conscious and inventive in their use of language.  These traits seem to
    95	be common in young children, but the conformity-enforcing machine we are
    96	pleased to call an educational system bludgeons them out of most of us
    97	before adolescence.  Thus, linguistic invention in most subcultures of
    98	the modern West is a halting and largely unconscious process.  Hackers,
    99	by contrast, regard slang formation and use as a game to be played for
   100	conscious pleasure.  Their inventions thus display an almost unique
   101	combination of the neotenous enjoyment of language-play with the
   102	discrimination of educated and powerful intelligence.  Further, the
   103	electronic media which knit them together are fluid, `hot' connections,
   104	well adapted to both the dissemination of new slang and the ruthless
   105	culling of weak and superannuated specimens.  The results of this
   106	process give us perhaps a uniquely intense and accelerated view of
   107	linguistic evolution in action.
   108	
   109	Hackish slang also challenges some common linguistic and
   110	anthropological assumptions.  For example, it has recently become
   111	fashionable to speak of `low-context' versus `high-context'
   112	communication, and to classify cultures by the preferred context level
   113	of their languages and art forms.  It is usually claimed that
   114	low-context communication (characterized by precision, clarity, and
   115	completeness of self-contained utterances) is typical in cultures
   116	which value logic, objectivity, individualism, and competition; by
   117	contrast, high-context communication (elliptical, emotive,
   118	nuance-filled, multi-modal, heavily coded) is associated with cultures
   119	which value subjectivity, consensus, cooperation, and tradition.  What
   120	then are we to make of hackerdom, which is themed around extremely
   121	low-context interaction with computers and exhibits primarily
   122	"low-context" values, but cultivates an almost absurdly high-context
   123	slang style?
   124	
   125	The intensity and consciousness of hackish invention make a compilation
   126	of hacker slang a particularly effective window into the surrounding
   127	culture --- and, in fact, this one is the latest version of an evolving
   128	compilation called the `Jargon File', maintained by hackers themselves
   129	for over 15 years.  This one (like its ancestors) is primarily a
   130	lexicon, but also includes `topic entries' which collect background or
   131	sidelight information on hacker culture that would be awkward to try to
   132	subsume under individual entries.
   133	
   134	Though the format is that of a reference volume, it is intended that the
   135	material be enjoyable to browse.  Even a complete outsider should find
   136	at least a chuckle on nearly every page, and much that is amusingly
   137	thought-provoking.  But it is also true that hackers use humorous
   138	wordplay to make strong, sometimes combative statements about what they
   139	feel.  Some of these entries reflect the views of opposing sides in
   140	disputes that have been genuinely passionate; this is deliberate.  We
   141	have not tried to moderate or pretty up these disputes; rather we have
   142	attempted to ensure that *everyone's* sacred cows get gored,
   143	impartially.  Compromise is not particularly a hackish virtue, but the
   144	honest presentation of divergent viewpoints is.
   145	
   146	The reader with minimal computer background who finds some references
   147	incomprehensibly technical can safely ignore them.  We have not felt it
   148	either necessary or desirable to eliminate all such; they, too,
   149	contribute flavor, and one of this document's major intended audiences
   150	--- fledgling hackers already partway inside the culture --- will
   151	benefit from them.
   152	
   153	A selection of longer items of hacker folklore and humor is included in
   154	{appendix A}.  The `outside' reader's attention is particularly directed
   155	to {appendix B}, "A Portrait of J. Random Hacker".  {Appendix C} is a
   156	bibliography of non-technical works which have either influenced or
   157	described the hacker culture.
   158	
   159	Because hackerdom is an intentional culture (one each individual must
   160	choose by action to join), one should not be surprised that the line
   161	between description and influence can become more than a little blurred.
   162	Earlier versions of the Jargon File have played a central role in
   163	spreading hacker language and the culture that goes with it to
   164	successively larger populations, and we hope and expect that this one
   165	will do likewise.
   166	
   167	:Of Slang, Jargon, and Techspeak:
   168	=================================
   169	
   170	Linguists usually refer to informal language as `slang' and reserve the
   171	term `jargon' for the technical vocabularies of various occupations.
   172	However, the ancestor of this collection was called the `Jargon File',
   173	and hackish slang is traditionally `the jargon'.  When talking about the
   174	jargon there is therefore no convenient way to distinguish what a
   175	*linguist* would call hackers' jargon --- the formal vocabulary they
   176	learn from textbooks, technical papers, and manuals.
   177	
   178	To make a confused situation worse, the line between hackish slang and
   179	the vocabulary of technical programming and computer science is fuzzy,
   180	and shifts over time.  Further, this vocabulary is shared with a wider
   181	technical culture of programmers, many of whom are not hackers and do
   182	not speak or recognize hackish slang.
   183	
   184	
   185	Accordingly, this lexicon will try to be as precise as the facts of
   186	usage permit about the distinctions among three categories:
   187	   *`slang': informal language from mainstream English or non-technicalsubcultures (bikers, rock fans, surfers, etc).
   188	   *`jargon': without qualifier, denotes informal `slangy' languagepeculiar to hackers --- the subject of this lexicon.
   189	   *`techspeak': the formal technical vocabulary of programming, computerscience, electronics, and other fields connected to hacking.
   190	
   191	This terminology will be consistently used throughout the remainder of
   192	this lexicon.
   193	
   194	The jargon/techspeak distinction is the delicate one.  A lot of
   195	techspeak originated as jargon, and there is a steady continuing uptake
   196	of jargon into techspeak.  On the other hand, a lot of jargon arises
   197	from overgeneralization of techspeak terms (there is more about this in
   198	the "Jargon Construction" section below).
   199	
   200	In general, we have considered techspeak any term that communicates
   201	primarily by a denotation well established in textbooks, technical
   202	dictionaries, or standards documents.
   203	
   204	A few obviously techspeak terms (names of operating systems, languages,
   205	or documents) are listed when they are tied to hacker folklore that
   206	isn't covered in formal sources, or sometimes to convey critical
   207	historical background necessary to understand other entries to which
   208	they are cross-referenced.  Some other techspeak senses of jargon words
   209	are listed in order to make the jargon senses clear; where the text does
   210	not specify that a straight technical sense is under discussion, these
   211	are marked with `[techspeak]' as an etymology.  Some entries have a
   212	primary sense marked this way, with subsequent jargon meanings explained
   213	in terms of it.
   214	
   215	We have also tried to indicate (where known) the apparent origins of
   216	terms.  The results are probably the least reliable information in the
   217	lexicon, for several reasons.  For one thing, it is well known that many
   218	hackish usages have been independently reinvented multiple times, even
   219	among the more obscure and intricate neologisms.  It often seems that
   220	the generative processes underlying hackish jargon formation have an
   221	internal logic so powerful as to create substantial parallelism across
   222	separate cultures and even in different languages!  For another, the
   223	networks tend to propagate innovations so quickly that `first use' is
   224	often impossible to pin down.  And, finally, compendia like this one
   225	alter what they observe by implicitly stamping cultural approval on
   226	terms and widening their use.
   227	
   228	:Revision History:
   229	==================
   230	
   231	The original Jargon File was a collection of hacker jargon from
   232	technical cultures including the MIT AI Lab, the Stanford AI lab (SAIL),
   233	and others of the old ARPANET AI/LISP/PDP-10 communities including Bolt,
   234	Beranek and Newman (BBN), Carnegie-Mellon University (CMU), and
   235	Worcester Polytechnic Institute (WPI).
   236	
   237	The Jargon File (hereafter referred to as `jargon-1' or `the File') was
   238	begun by Raphael Finkel at Stanford in 1975.  From this time until the
   239	plug was finally pulled on the SAIL computer in 1991, the File was named
   240	AIWORD.RF[UP,DOC] there.  Some terms in it date back considerably
   241	earlier ({frob} and some senses of {moby}, for instance, go back to the
   242	Tech Model Railroad Club at MIT and are believed to date at least back
   243	to the early 1960s).  The revisions of jargon-1 were all unnumbered and
   244	may be collectively considered `Version 1'.
   245	
   246	In 1976, Mark Crispin, having seen an announcement about the File on the
   247	SAIL computer, {FTP}ed a copy of the File to MIT.  He noticed that it
   248	was hardly restricted to `AI words' and so stored the file on his
   249	directory as AI:MRC;SAIL JARGON.
   250	
   251	The file was quickly renamed JARGON > (the `>' means numbered with a
   252	version number) as a flurry of enhancements were made by Mark Crispin
   253	and Guy L. Steele Jr.  Unfortunately, amidst all this activity, nobody
   254	thought of correcting the term `jargon' to `slang' until the compendium
   255	had already become widely known as the Jargon File.
   256	
   257	Raphael Finkel dropped out of active participation shortly thereafter
   258	and Don Woods became the SAIL contact for the File (which was
   259	subsequently kept in duplicate at SAIL and MIT, with periodic
   260	resynchronizations).
   261	
   262	The File expanded by fits and starts until about 1983; Richard Stallman
   263	was prominent among the contributors, adding many MIT and ITS-related
   264	coinages.
   265	
   266	In Spring 1981, a hacker named Charles Spurgeon got a large chunk of the
   267	File published in Russell Brand's `CoEvolution Quarterly' (pages 26-35)
   268	with illustrations by Phil Wadler and Guy Steele (including a couple of
   269	the Crunchly cartoons).  This appears to have been the File's first
   270	paper publication.
   271	
   272	A late version of jargon-1, expanded with commentary for the mass
   273	market, was edited by Guy Steele into a book published in 1983 as `The
   274	Hacker's Dictionary' (Harper & Row CN 1082, ISBN 0-06-091082-8).  The
   275	other jargon-1 editors (Raphael Finkel, Don Woods, and Mark Crispin)
   276	contributed to this revision, as did Richard M. Stallman and Geoff
   277	Goodfellow.  This book (now out of print) is hereafter referred to as
   278	`Steele-1983' and those six as the Steele-1983 coauthors.
   279	
   280	Shortly after the publication of Steele-1983, the File effectively
   281	stopped growing and changing.  Originally, this was due to a desire to
   282	freeze the file temporarily to facilitate the production of Steele-1983,
   283	but external conditions caused the `temporary' freeze to become
   284	permanent.
   285	
   286	The AI Lab culture had been hit hard in the late 1970s by funding cuts
   287	and the resulting administrative decision to use vendor-supported
   288	hardware and software instead of homebrew whenever possible.  At MIT,
   289	most AI work had turned to dedicated LISP Machines.  At the same time,
   290	the commercialization of AI technology lured some of the AI Lab's best
   291	and brightest away to startups along the Route 128 strip in
   292	Massachusetts and out West in Silicon Valley.  The startups built LISP
   293	machines for MIT; the central MIT-AI computer became a {TWENEX} system
   294	rather than a host for the AI hackers' beloved {ITS}.
   295	
   296	The Stanford AI Lab had effectively ceased to exist by 1980, although
   297	the SAIL computer continued as a Computer Science Department resource
   298	until 1991.  Stanford became a major {TWENEX} site, at one point
   299	operating more than a dozen TOPS-20 systems; but by the mid-1980s most
   300	of the interesting software work was being done on the emerging BSD UNIX
   301	standard.
   302	
   303	In April 1983, the PDP-10-centered cultures that had nourished the File
   304	were dealt a death-blow by the cancellation of the Jupiter project at
   305	Digital Equipment Corporation.  The File's compilers, already dispersed,
   306	moved on to other things.  Steele-1983 was partly a monument to what its
   307	authors thought was a dying tradition; no one involved realized at the
   308	time just how wide its influence was to be.
   309	
   310	By the mid-1980s the File's content was dated, but the legend that had
   311	grown up around it never quite died out.  The book, and softcopies
   312	obtained off the ARPANET, circulated even in cultures far removed from
   313	MIT and Stanford; the content exerted a strong and continuing influence
   314	on hackish language and humor.  Even as the advent of the microcomputer
   315	and other trends fueled a tremendous expansion of hackerdom, the File
   316	(and related materials such as the AI Koans in Appendix A) came to be
   317	seen as a sort of sacred epic, a hacker-culture Matter of Britain
   318	chronicling the heroic exploits of the Knights of the Lab.  The pace of
   319	change in hackerdom at large accelerated tremendously --- but the Jargon
   320	File, having passed from living document to icon, remained essentially
   321	untouched for seven years.
   322	
   323	This revision contains nearly the entire text of a late version of
   324	jargon-1 (a few obsolete PDP-10-related entries were dropped after
   325	careful consultation with the editors of Steele-1983).  It merges in
   326	about 80% of the Steele-1983 text, omitting some framing material and a
   327	very few entries introduced in Steele-1983 that are now also obsolete.
   328	
   329	This new version casts a wider net than the old Jargon File; its aim is
   330	to cover not just AI or PDP-10 hacker culture but all the technical
   331	computing cultures wherein the true hacker-nature is manifested.  More
   332	than half of the entries now derive from {USENET} and represent jargon
   333	now current in the C and UNIX communities, but special efforts have been
   334	made to collect jargon from other cultures including IBM PC programmers,
   335	Amiga fans, Mac enthusiasts, and even the IBM mainframe world.
   336	
   337	Eric S. Raymond <eric@snark.thyrsus.com> maintains the new File with
   338	assistance from Guy L. Steele Jr. <gls@think.com>; these are the persons
   339	primarily reflected in the File's editorial `we', though we take
   340	pleasure in acknowledging the special contribution of the other
   341	coauthors of Steele-1983.  Please email all additions, corrections, and
   342	correspondence relating to the Jargon File to jargon@thyrsus.com
   343	(UUCP-only sites without connections to an autorouting smart site can
   344	use ...!uunet!snark!jargon).
   345	
   346	(Warning: other email addresses appear in this file *but are not
   347	guaranteed to be correct* later than the revision date on the first
   348	line.  *Don't* email us if an attempt to reach your idol bounces --- we
   349	have no magic way of checking addresses or looking up people.)
   350	
   351	The 2.9.6 version became the main text of `The New Hacker's Dictionary',
   352	by Eric Raymond (ed.), MIT Press 1991, ISBN 0-262-68069-6.  The
   353	maintainers are committed to updating the on-line version of the Jargon
   354	File through and beyond paper publication, and will continue to make it
   355	available to archives and public-access sites as a trust of the hacker
   356	community.
   357	
   358	Here is a chronology of the high points in the recent on-line revisions:
   359	
   360	Version 2.1.1, Jun 12 1990: the Jargon File comes alive again after a
   361	seven-year hiatus.  Reorganization and massive additions were by Eric S.
   362	Raymond, approved by Guy Steele.  Many items of UNIX, C, USENET, and
   363	microcomputer-based jargon were added at that time (as well as The
   364	Untimely Demise of Mabel The Monkey).
   365	
   366	Version 2.9.6, Aug 16 1991: corresponds to reproduction copy for book.
   367	This version had 18952 lines, 148629 words, 975551 characters, and 1702
   368	entries.
   369	
   370	Version 2.9.8, Jan 01 1992: first public release since the book,
   371	including over fifty new entries and numerous corrections/additions to
   372	old ones.  Packaged with version 1.1 of vh(1) hypertext reader.  This
   373	version had 19509 lines, 153108 words, 1006023 characters, and 1760
   374	entries.
   375	
   376	Version 2.9.9, Apr 01 1992: folded in XEROX PARC lexicon.  This version
   377	had 20298 lines, 159651 words, 1048909 characters, and 1821 entries.
   378	
   379	Version 2.9.10, Jul 01 1992: lots of new historical material.  This
   380	version had 21349 lines, 168330 words, 1106991 characters, and 1891
   381	entries.
   382	
   383	Version numbering: Version numbers should be read as
   384	major.minor.revision.  Major version 1 is reserved for the `old' (ITS)
   385	Jargon File, jargon-1.  Major version 2 encompasses revisions by ESR
   386	(Eric S. Raymond) with assistance from GLS (Guy L.  Steele, Jr.).
   387	Someday, the next maintainer will take over and spawn `version 3'.
   388	Usually later versions will either completely supersede or incorporate
   389	earlier versions, so there is generally no point in keeping old versions
   390	around.
   391	
   392	Our thanks to the coauthors of Steele-1983 for oversight and assistance,
   393	and to the hundreds of USENETters (too many to name here) who
   394	contributed entries and encouragement.  More thanks go to several of the
   395	old-timers on the USENET group alt.folklore.computers, who contributed
   396	much useful commentary and many corrections and valuable historical
   397	perspective: Joseph M. Newcomer <jn11+@andrew.cmu.edu>, Bernie Cosell
   398	<cosell@bbn.com>, Earl Boebert <boebert@SCTC.com>, and Joe Morris
   399	<jcmorris@mwunix.mitre.org>.
   400	
   401	We were fortunate enough to have the aid of some accomplished linguists.
   402	David Stampe <stampe@uhunix.uhcc.hawaii.edu> and Charles Hoequist
   403	<hoequist@bnr.ca> contributed valuable criticism; Joe Keane
   404	<jgk@osc.osc.com> helped us improve the pronunciation guides.
   405	
   406	A few bits of this text quote previous works.  We are indebted to Brian
   407	A. LaMacchia <bal@zurich.ai.mit.edu> for obtaining permission for us to
   408	use material from the `TMRC Dictionary'; also, Don Libes
   409	<libes@cme.nist.gov> contributed some appropriate material from his
   410	excellent book `Life With UNIX'.  We thank Per Lindberg <per@front.se>,
   411	author of the remarkable Swedish-language 'zine `Hackerbladet', for
   412	bringing `FOO!' comics to our attention and smuggling one of the IBM
   413	hacker underground's own baby jargon files out to us.  Thanks also to
   414	Maarten Litmaath for generously allowing the inclusion of the ASCII
   415	pronunciation guide he formerly maintained.  And our gratitude to Marc
   416	Weiser of XEROX PARC <Marc_Weiser.PARC@xerox.com> for securing us
   417	permission to quote from PARC's own jargon lexicon and shipping us a
   418	copy.
   419	
   420	It is a particular pleasure to acknowledge the major contributions of
   421	Mark Brader <msb@sq.com> to the final manuscript; he read and reread
   422	many drafts, checked facts, caught typos, submitted an amazing number of
   423	thoughtful comments, and did yeoman service in catching typos and minor
   424	usage bobbles.  Mr. Brader's rare combination of enthusiasm,
   425	persistence, wide-ranging technical knowledge, and precisionism in
   426	matters of language made his help invaluable, and the sustained volume
   427	and quality of his input over many months only allowed him to escape
   428	co-editor credit by the slimmest of margins.
   429	
   430	Finally, George V.  Reilly <gvr@cs.brown.edu> helped with TeX arcana and
   431	painstakingly proofread some 2.7 and 2.8 versions; Steve Summit
   432	<scs@adam.mit.edu> contributed a number of excellent new entries and
   433	many small improvements to 2.9.10; and Eric Tiedemann <est@thyrsus.com>
   434	contributed sage advice throughout on rhetoric, amphigory, and
   435	philosophunculism.
   436	
   437	:How Jargon Works:
   438	******************
   439	
   440	:Jargon Construction:
   441	=====================
   442	
   443	There are some standard methods of jargonification that became
   444	established quite early (i.e., before 1970), spreading from such sources
   445	as the Tech Model Railroad Club, the PDP-1 SPACEWAR hackers, and John
   446	McCarthy's original crew of LISPers.  These include the following:
   447	
   448	
   449	:Verb Doubling: --------------- A standard construction in English is to
   450	double a verb and use it as an exclamation, such as "Bang, bang!" or
   451	"Quack, quack!".  Most of these are names for noises.  Hackers also
   452	double verbs as a concise, sometimes sarcastic comment on what the
   453	implied subject does.  Also, a doubled verb is often used to terminate a
   454	conversation, in the process remarking on the current state of affairs
   455	or what the speaker intends to do next.  Typical examples involve {win},
   456	{lose}, {hack}, {flame}, {barf}, {chomp}:
   457	
   458	     "The disk heads just crashed."  "Lose, lose."
   459	     "Mostly he talked about his latest crock.  Flame, flame."
   460	     "Boy, what a bagbiter!  Chomp, chomp!"
   461	
   462	Some verb-doubled constructions have special meanings not immediately
   463	obvious from the verb.  These have their own listings in the lexicon.
   464	
   465	The USENET culture has one *tripling* convention unrelated to this; the
   466	names of `joke' topic groups often have a tripled last element.  The
   467	first and paradigmatic example was alt.swedish.chef.bork.bork.bork (a
   468	"Muppet Show" reference); other classics include
   469	alt.french.captain.borg.borg.borg, alt.wesley.crusher.die.die.die,
   470	comp.unix.internals.system.calls.brk.brk.brk,
   471	sci.physics.edward.teller.boom.boom.boom, and
   472	alt.sadistic.dentists.drill.drill.drill.
   473	
   474	
   475	:Soundalike slang: ------------------ Hackers will often make rhymes or
   476	puns in order to convert an ordinary word or phrase into something more
   477	interesting.  It is considered particularly {flavorful} if the phrase is
   478	bent so as to include some other jargon word; thus the computer hobbyist
   479	magazine `Dr. Dobb's Journal' is almost always referred to among hackers
   480	as `Dr. Frob's Journal' or simply `Dr. Frob's'.  Terms of this kind that
   481	have been in fairly wide use include names for newspapers:
   482	
   483	     Boston Herald => Horrid (or Harried)
   484	     Boston Globe => Boston Glob
   485	     Houston (or San Francisco) Chronicle
   486	            => the Crocknicle (or the Comical)
   487	     New York Times => New York Slime
   488	
   489	However, terms like these are often made up on the spur of the moment.
   490	Standard examples include:
   491	
   492	     Data General => Dirty Genitals
   493	     IBM 360 => IBM Three-Sickly
   494	     Government Property --- Do Not Duplicate (on keys)
   495	            => Government Duplicity --- Do Not Propagate
   496	     for historical reasons => for hysterical raisins
   497	     Margaret Jacks Hall (the CS building at Stanford)
   498	            => Marginal Hacks Hall
   499	
   500	This is not really similar to the Cockney rhyming slang it has been
   501	compared to in the past, because Cockney substitutions are opaque
   502	whereas hacker punning jargon is intentionally transparent.
   503	
   504	
   505	:The `-P' convention: --------------------- Turning a word into a
   506	question by appending the syllable `P'; from the LISP convention of
   507	appending the letter `P' to denote a predicate (a boolean-valued
   508	function).  The question should expect a yes/no answer, though it
   509	needn't.  (See {T} and {NIL}.)
   510	
   511	     At dinnertime:
   512	           Q: "Foodp?"
   513	           A: "Yeah, I'm pretty hungry." or "T!"
   514	
   515	     At any time:
   516	           Q: "State-of-the-world-P?"
   517	           A: (Straight) "I'm about to go home."
   518	           A: (Humorous) "Yes, the world has a state."
   519	
   520	     On the phone to Florida:
   521	           Q: "State-p Florida?"
   522	           A: "Been reading JARGON.TXT again, eh?"
   523	
   524	[One of the best of these is a {Gosperism}.  Once, when we were at a
   525	Chinese restaurant, Bill Gosper wanted to know whether someone would
   526	like to share with him a two-person-sized bowl of soup.  His inquiry
   527	was: "Split-p soup?" --- GLS]
   528	
   529	
   530	:Overgeneralization: -------------------- A very conspicuous feature of
   531	jargon is the frequency with which techspeak items such as names of
   532	program tools, command language primitives, and even assembler opcodes
   533	are applied to contexts outside of computing wherever hackers find
   534	amusing analogies to them.  Thus (to cite one of the best-known
   535	examples) UNIX hackers often {grep} for things rather than searching for
   536	them.  Many of the lexicon entries are generalizations of exactly this
   537	kind.
   538	
   539	Hackers enjoy overgeneralization on the grammatical level as well.  Many
   540	hackers love to take various words and add the wrong endings to them to
   541	make nouns and verbs, often by extending a standard rule to nonuniform
   542	cases (or vice versa).  For example, because
   543	
   544	     porous => porosity
   545	     generous => generosity
   546	
   547	hackers happily generalize:
   548	
   549	     mysterious => mysteriosity
   550	     ferrous => ferrosity
   551	     obvious => obviosity
   552	     dubious => dubiosity
   553	
   554	Also, note that all nouns can be verbed.  E.g.: "All nouns can be
   555	verbed", "I'll mouse it up", "Hang on while I clipboard it over", "I'm
   556	grepping the files".  English as a whole is already heading in this
   557	direction (towards pure-positional grammar like Chinese); hackers are
   558	simply a bit ahead of the curve.
   559	
   560	However, note that hackers avoid the unimaginative verb-making
   561	techniques characteristic of marketroids, bean-counters, and the
   562	Pentagon; a hacker would never, for example, `productize', `prioritize',
   563	or `securitize' things.  Hackers have a strong aversion to bureaucratic
   564	bafflegab and regard those who use it with contempt.
   565	
   566	Similarly, all verbs can be nouned.  This is only a slight
   567	overgeneralization in modern English; in hackish, however, it is good
   568	form to mark them in some standard nonstandard way.  Thus:
   569	
   570	     win => winnitude, winnage
   571	     disgust => disgustitude
   572	     hack => hackification
   573	
   574	Further, note the prevalence of certain kinds of nonstandard plural
   575	forms.  Some of these go back quite a ways; the TMRC Dictionary noted
   576	that the defined plural of `caboose' is `cabeese', and includes an entry
   577	which implies that the plural of `mouse' is {meeces}.  On a similarly
   578	Anglo-Saxon note, almost anything ending in `x' may form plurals in
   579	`-xen' (see {VAXen} and {boxen} in the main text).  Even words ending in
   580	phonetic /k/ alone are sometimes treated this way; e.g., `soxen' for a
   581	bunch of socks.  Other funny plurals are `frobbotzim' for the plural of
   582	`frobbozz' (see {frobnitz}) and `Unices' and `Twenices' (rather than
   583	`Unixes' and `Twenexes'; see {UNIX}, {TWENEX} in main text).  But note
   584	that `Unixen' and `Twenexen' are never used; it has been suggested that
   585	this is because `-ix' and `-ex' are Latin singular endings that attract
   586	a Latinate plural.  Finally, it has been suggested to general approval
   587	that the plural of `mongoose' ought to be `polygoose'.
   588	
   589	The pattern here, as with other hackish grammatical quirks, is
   590	generalization of an inflectional rule that in English is either an
   591	import or a fossil (such as the Hebrew plural ending `-im', or the
   592	Anglo-Saxon plural suffix `-en') to cases where it isn't normally
   593	considered to apply.
   594	
   595	This is not `poor grammar', as hackers are generally quite well aware of
   596	what they are doing when they distort the language.  It is grammatical
   597	creativity, a form of playfulness.  It is done not to impress but to
   598	amuse, and never at the expense of clarity.
   599	
   600	
   601	:Spoken inarticulations: ------------------------ Words such as
   602	`mumble', `sigh', and `groan' are spoken in places where their referent
   603	might more naturally be used.  It has been suggested that this usage
   604	derives from the impossibility of representing such noises on a comm
   605	link or in electronic mail (interestingly, the same sorts of
   606	constructions have been showing up with increasing frequency in comic
   607	strips).  Another expression sometimes heard is "Complain!", meaning "I
   608	have a complaint!"
   609	
   610	
   611	:Anthromorphization: -------------------- Semantically, one rich source
   612	of jargon constructions is the hackish tendency to anthropomorphize
   613	hardware and software.  This isn't done in a na"ive way; hackers don't
   614	personalize their stuff in the sense of feeling empathy with it, nor do
   615	they mystically believe that the things they work on every day are
   616	`alive'.  What *is* common is to hear hardware or software talked about
   617	as though it has homunculi talking to each other inside it, with
   618	intentions and desires.  Thus, one hears "The protocol handler got
   619	confused", or that programs "are trying" to do things, or one may say of
   620	a routine that "its goal in life is to X".  One even hears explanations
   621	like "...  and its poor little brain couldn't understand X, and it
   622	died."  Sometimes modelling things this way actually seems to make them
   623	easier to understand, perhaps because it's instinctively natural to
   624	think of anything with a really complex behavioral repertoire as `like a
   625	person' rather than `like a thing'.
   626	
   627	
   628	
   629	Of the six listed constructions, verb doubling, peculiar noun
   630	formations, anthromorphization, and (especially) spoken inarticulations
   631	have become quite general; but punning jargon is still largely confined
   632	to MIT and other large universities, and the `-P' convention is found
   633	only where LISPers flourish.
   634	
   635	Finally, note that many words in hacker jargon have to be understood as
   636	members of sets of comparatives.  This is especially true of the
   637	adjectives and nouns used to describe the beauty and functional quality
   638	of code.  Here is an approximately correct spectrum:
   639	
   640	     monstrosity  brain-damage  screw  bug  lose  misfeature
   641	     crock  kluge  hack  win  feature  elegance  perfection
   642	
   643	The last is spoken of as a mythical absolute, approximated but never
   644	actually attained.  Another similar scale is used for describing the
   645	reliability of software:
   646	
   647	     broken  flaky  dodgy  fragile  brittle
   648	     solid  robust  bulletproof  armor-plated
   649	
   650	Note, however, that `dodgy' is primarily Commonwealth hackish (it is
   651	rare in the U.S.) and may change places with `flaky' for some speakers.
   652	
   653	Coinages for describing {lossage} seem to call forth the very finest in
   654	hackish linguistic inventiveness; it has been truly said that hackers
   655	have even more words for equipment failures than Yiddish has for
   656	obnoxious people.
   657	
   658	:Hacker Writing Style:
   659	======================
   660	
   661	We've already seen that hackers often coin jargon by overgeneralizing
   662	grammatical rules.  This is one aspect of a more general fondness for
   663	form-versus-content language jokes that shows up particularly in hackish
   664	writing.  One correspondent reports that he consistently misspells
   665	`wrong' as `worng'.  Others have been known to criticize glitches in
   666	Jargon File drafts by observing (in the mode of Douglas Hofstadter)
   667	"This sentence no verb", or "Bad speling", or "Incorrectspa cing."
   668	Similarly, intentional spoonerisms are often made of phrases relating to
   669	confusion or things that are confusing; `dain bramage' for `brain
   670	damage' is perhaps the most common (similarly, a hacker would be likely
   671	to write "Excuse me, I'm cixelsyd today", rather than "I'm dyslexic
   672	today").  This sort of thing is quite common and is enjoyed by all
   673	concerned.
   674	
   675	Hackers tend to use quotes as balanced delimiters like parentheses, much
   676	to the dismay of American editors.  Thus, if "Jim is going" is a phrase,
   677	and so are "Bill runs" and "Spock groks", then hackers generally prefer
   678	to write: "Jim is going", "Bill runs", and "Spock groks".  This is
   679	incorrect according to standard American usage (which would put the
   680	continuation commas and the final period inside the string quotes);
   681	however, it is counter-intuitive to hackers to mutilate literal strings
   682	with characters that don't belong in them.  Given the sorts of examples
   683	that can come up in discussions of programming, American-style quoting
   684	can even be grossly misleading.  When communicating command lines or
   685	small pieces of code, extra characters can be a real pain in the neck.
   686	
   687	Consider, for example, a sentence in a {vi} tutorial that looks like this:
   688	
   689	     Then delete a line from the file by typing "dd".
   690	
   691	Standard usage would make this
   692	
   693	     Then delete a line from the file by typing "dd."
   694	
   695	but that would be very bad -- because the reader would be prone to type
   696	the string d-d-dot, and it happens that in `vi(1)' dot repeats the last
   697	command accepted.  The net result would be to delete *two* lines!
   698	
   699	The Jargon File follows hackish usage throughout.
   700	
   701	Interestingly, a similar style is now preferred practice in Great
   702	Britain, though the older style (which became established for
   703	typographical reasons having to do with the aesthetics of comma and
   704	quotes in typeset text) is still accepted there.  `Hart's Rules' and the
   705	`Oxford Dictionary for Writers and Editors' call the hacker-like style
   706	`new' or `logical' quoting.
   707	
   708	Another hacker quirk is a tendency to distinguish between `scare' quotes
   709	and `speech' quotes; that is, to use British-style single quotes for
   710	marking and reserve American-style double quotes for actual reports of
   711	speech or text included from elsewhere.  Interestingly, some authorities
   712	describe this as correct general usage, but mainstream American English
   713	has gone to using double-quotes indiscriminately enough that hacker
   714	usage appears marked [and, in fact, I thought this was a personal quirk
   715	of mine until I checked with USENET --- ESR].  One further permutation
   716	that is definitely *not* standard is a hackish tendency to do marking
   717	quotes by using apostrophes (single quotes) in pairs; that is, 'like
   718	this'.  This is modelled on string and character literal syntax in some
   719	programming languages (reinforced by the fact that many character-only
   720	terminals display the apostrophe in typewriter style, as a vertical
   721	single quote).
   722	
   723	One quirk that shows up frequently in the {email} style of UNIX hackers
   724	in particular is a tendency for some things that are normally
   725	all-lowercase (including usernames and the names of commands and C
   726	routines) to remain uncapitalized even when they occur at the beginning
   727	of sentences.  It is clear that, for many hackers, the case of such
   728	identifiers becomes a part of their internal representation (the
   729	`spelling') and cannot be overridden without mental effort (an
   730	appropriate reflex because UNIX and C both distinguish cases and
   731	confusing them can lead to {lossage}).  A way of escaping this dilemma
   732	is simply to avoid using these constructions at the beginning of
   733	sentences.
   734	
   735	There seems to be a meta-rule behind these nonstandard hackerisms to the
   736	effect that precision of expression is more important than conformance
   737	to traditional rules; where the latter create ambiguity or lose
   738	information they can be discarded without a second thought.  It is
   739	notable in this respect that other hackish inventions (for example, in
   740	vocabulary) also tend to carry very precise shades of meaning even when
   741	constructed to appear slangy and loose.  In fact, to a hacker, the
   742	contrast between `loose' form and `tight' content in jargon is a
   743	substantial part of its humor!
   744	
   745	Hackers have also developed a number of punctuation and emphasis
   746	conventions adapted to single-font all-ASCII communications links, and
   747	these are occasionally carried over into written documents even when
   748	normal means of font changes, underlining, and the like are available.
   749	
   750	One of these is that TEXT IN ALL CAPS IS INTERPRETED AS `LOUD', and this
   751	becomes such an ingrained synesthetic reflex that a person who goes to
   752	caps-lock while in {talk mode} may be asked to "stop shouting, please,
   753	you're hurting my ears!".
   754	
   755	Also, it is common to use bracketing with unusual characters to signify
   756	emphasis.  The asterisk is most common, as in "What the *hell*?" even
   757	though this interferes with the common use of the asterisk suffix as a
   758	footnote mark.  The underscore is also common, suggesting underlining
   759	(this is particularly common with book titles; for example, "It is often
   760	alleged that Joe Haldeman wrote _The_Forever_War_ as a rebuttal to
   761	Robert Heinlein's earlier novel of the future military,
   762	_Starship_Troopers_.").  Other forms exemplified by "=hell=", "\hell/",
   763	or "/hell/" are occasionally seen (it's claimed that in the last example
   764	the first slash pushes the letters over to the right to make them
   765	italic, and the second keeps them from falling over).  Finally, words
   766	may also be emphasized L I K E T H I S, or by a series of carets (^)
   767	under them on the next line of the text.
   768	
   769	There is a semantic difference between *emphasis like this* (which
   770	emphasizes the phrase as a whole), and *emphasis* *like* *this* (which
   771	suggests the writer speaking very slowly and distinctly, as if to a
   772	very young child or a mentally impaired person).  Bracketing a word with
   773	the `*' character may also indicate that the writer wishes readers to
   774	consider that an action is taking place or that a sound is being made.
   775	Examples: *bang*, *hic*, *ring*, *grin*, *kick*, *stomp*, *mumble*.
   776	
   777	There is also an accepted convention for `writing under erasure'; the
   778	text
   779	
   780	     Be nice to this fool^H^H^H^Hgentleman, he's in from corporate HQ.
   781	
   782	would be read as "Be nice to this fool, I mean this gentleman...".  This
   783	comes from the fact that the digraph ^H is often used as a print
   784	representation for a backspace.  It parallels (and may have been
   785	influenced by) the ironic use of `slashouts' in science-fiction
   786	fanzines.
   787	
   788	In a formula, `*' signifies multiplication but two asterisks in a row
   789	are a shorthand for exponentiation (this derives from FORTRAN).  Thus,
   790	one might write 2 ** 8 = 256.
   791	
   792	Another notation for exponentiation one sees more frequently uses the
   793	caret (^, ASCII 1011110); one might write instead `2^8 = 256'.  This
   794	goes all the way back to Algol-60, which used the archaic ASCII
   795	`up-arrow' that later became the caret; this was picked up by Kemeny and
   796	Kurtz's original BASIC, which in turn influenced the design of the
   797	`bc(1)' and `dc(1)' UNIX tools, which have probably done most to
   798	reinforce the convention on USENET.  The notation is mildly confusing to
   799	C programmers, because `^' means bitwise {XOR} in C.  Despite this, it
   800	was favored 3:1 over ** in a late-1990 snapshot of USENET.  It is used
   801	consistently in this text.
   802	
   803	In on-line exchanges, hackers tend to use decimal forms or improper
   804	fractions (`3.5' or `7/2') rather than `typewriter style' mixed
   805	fractions (`3-1/2').  The major motive here is probably that the former
   806	are more readable in a monospaced font, together with a desire to avoid
   807	the risk that the latter might be read as `three minus one-half'.  The
   808	decimal form is definitely preferred for fractions with a terminating
   809	decimal representation; there may be some cultural influence here from
   810	the high status of scientific notation.
   811	
   812	Another on-line convention, used especially for very large or very small
   813	numbers, is taken from C (which derived it from FORTRAN).  This is a
   814	form of `scientific notation' using `e' to replace `*10^'; for example,
   815	one year is about 3e7 seconds long.
   816	
   817	The tilde (~) is commonly used in a quantifying sense of
   818	`approximately'; that is, `~50' means `about fifty'.
   819	
   820	On USENET and in the {MUD} world, common C boolean, logical, and
   821	relational operators such as `|', `&', `||', `&&', `!', `==', `!=', `>',
   822	and `<', `>=', and `=<' are often combined with English.  The Pascal
   823	not-equals, `<>', is also recognized, and occasionally one sees `/=' for
   824	not-equals (from Ada, Common Lisp, and Fortran 90).  The use of prefix
   825	`!' as a loose synonym for `not-' or `no-' is particularly common; thus,
   826	`!clue' is read `no-clue' or `clueless'.
   827	
   828	A related practice borrows syntax from preferred programming languages
   829	to express ideas in a natural-language text.  For example, one might
   830	see the following:
   831	
   832	     I resently had occasion to field-test the Snafu
   833	     Systems 2300E adaptive gonkulator.  The price was
   834	     right, and the racing stripe on the case looked kind
   835	     of neat, but its performance left something to be
   836	     desired.
   837	
   838	     #ifdef FLAME
   839	     Hasn't anyone told those idiots that you can't get
   840	     decent bogon suppression with AFJ filters at today's
   841	     net speeds?
   842	     #endif /* FLAME */
   843	
   844	     I guess they figured the price premium for true
   845	     frame-based semantic analysis was too high.
   846	     Unfortunately, it's also the only workable approach.
   847	     I wouldn't recommend purchase of this product unless
   848	     you're on a *very* tight budget.
   849	
   850	     #include <disclaimer.h>
   851	     --
   852	                           == Frank Foonly (Fubarco Systems)
   853	
   854	In the above, the `#ifdef'/`#endif' pair is a conditional
   855	compilation syntax from C; here, it implies that the text between
   856	(which is a {flame}) should be evaluated only if you have turned on
   857	(or defined on) the switch FLAME.  The `#include' at the end is C
   858	for "include standard disclaimer here"; the `standard disclaimer' is
   859	understood to read, roughly, "These are my personal opinions and not
   860	to be construed as the official position of my employer."
   861	
   862	Another habit is that of using angle-bracket enclosure to genericize a
   863	term; this derives from conventions used in {BNF}.  Uses like the
   864	following are common:
   865	
   866	     So this <ethnic> walks into a bar one day, and...
   867	
   868	Hackers also mix letters and numbers more freely than in mainstream
   869	usage.  In particular, it is good hackish style to write a digit
   870	sequence where you intend the reader to understand the text string that
   871	names that number in English.  So, hackers prefer to write `1970s'
   872	rather than `nineteen-seventies' or `1970's' (the latter looks like a
   873	possessive).
   874	
   875	It should also be noted that hackers exhibit much less reluctance to use
   876	multiply nested parentheses than is normal in English.  Part of this is
   877	almost certainly due to influence from LISP (which uses deeply nested
   878	parentheses (like this (see?)) in its syntax a lot), but it has also
   879	been suggested that a more basic hacker trait of enjoying playing with
   880	complexity and pushing systems to their limits is in operation.
   881	
   882	One area where hackish conventions for on-line writing are still in some
   883	flux is the marking of included material from earlier messages --- what
   884	would be called `block quotations' in ordinary English.  From the usual
   885	typographic convention employed for these (smaller font at an extra
   886	indent), there derived the notation of included text being indented by
   887	one ASCII TAB (0001001) character, which under UNIX and many other
   888	environments gives the appearance of an 8-space indent.
   889	
   890	Early mail and netnews readers had no facility for including messages
   891	this way, so people had to paste in copy manually.  BSD `Mail(1)' was
   892	the first message agent to support inclusion, and early USENETters
   893	emulated its style.  But the TAB character tended to push included text
   894	too far to the right (especially in multiply nested inclusions), leading
   895	to ugly wraparounds.  After a brief period of confusion (during which an
   896	inclusion leader consisting of three or four spaces became established
   897	in EMACS and a few mailers), the use of leading `>' or `> ' became
   898	standard, perhaps owing to its use in `ed(1)' to display tabs
   899	(alternatively, it may derive from the `>' that some early UNIX mailers
   900	used to quote lines starting with "From" in text, so they wouldn't look
   901	like the beginnings of new message headers).  Inclusions within
   902	inclusions keep their `>' leaders, so the `nesting level' of a quotation
   903	is visually apparent.
   904	
   905	A few other idiosyncratic quoting styles survive because they are
   906	automatically generated.  One particularly ugly one looks like this:
   907	
   908	     /* Written hh:mm pm  Mmm dd, yyyy by user@site in <group> */
   909	     /* ---------- "Article subject, chopped to 35 ch" ---------- */
   910	        <quoted text>
   911	     /* End of text from local:group */
   912	
   913	It is generated by an elderly, variant news-reading system called
   914	`notesfiles'.  The overall trend, however, is definitely away from such
   915	verbosity.
   916	
   917	The practice of including text from the parent article when posting a
   918	followup helped solve what had been a major nuisance on USENET: the fact
   919	that articles do not arrive at different sites in the same order.
   920	Careless posters used to post articles that would begin with, or even
   921	consist entirely of, "No, that's wrong" or "I agree" or the like.  It
   922	was hard to see who was responding to what.  Consequently, around 1984,
   923	new news-posting software evolved a facility to automatically include
   924	the text of a previous article, marked with "> " or whatever the poster
   925	chose.  The poster was expected to delete all but the relevant lines.
   926	The result has been that, now, careless posters post articles containing
   927	the *entire* text of a preceding article, *followed* only by "No, that's
   928	wrong" or "I agree".
   929	
   930	Many people feel that this cure is worse than the original disease, and
   931	there soon appeared newsreader software designed to let the reader skip
   932	over included text if desired.  Today, some posting software rejects
   933	articles containing too high a proportion of lines beginning with `>' --
   934	but this too has led to undesirable workarounds, such as the deliberate
   935	inclusion of zero-content filler lines which aren't quoted and thus pull
   936	the message below the rejection threshold.
   937	
   938	Because the default mailers supplied with UNIX and other operating
   939	systems haven't evolved as quickly as human usage, the older conventions
   940	using a leading TAB or three or four spaces are still alive; however,
   941	>-inclusion is now clearly the prevalent form in both netnews and mail.
   942	
   943	In 1991 practice is still evolving, and disputes over the `correct'
   944	inclusion style occasionally lead to {holy wars}.  One variant style
   945	reported uses the citation character `|' in place of `>' for extended
   946	quotations where original variations in indentation are being retained.
   947	One also sees different styles of quoting a number of authors in the
   948	same message: one (deprecated because it loses information) uses a
   949	leader of `> ' for everyone, another (the most common) is `> > > > ', `>
   950	> > ', etc. (or `>>>> ', `>>> ', etc., depending on line length and
   951	nesting depth) reflecting the original order of messages, and yet
   952	another is to use a different citation leader for each author, say `> ',
   953	`: ', `| ', `} ' (preserving nesting so that the inclusion order of
   954	messages is still apparent, or tagging the inclusions with authors'
   955	names).  Yet *another* style is to use each poster's initials (or login
   956	name) as a citation leader for that poster.  Occasionally one sees a `#
   957	' leader used for quotations from authoritative sources such as
   958	standards documents; the intended allusion is to the root prompt (the
   959	special UNIX command prompt issued when one is running as the privileged
   960	super-user).
   961	
   962	Finally, it is worth mentioning that many studies of on-line
   963	communication have shown that electronic links have a de-inhibiting
   964	effect on people.  Deprived of the body-language cues through which
   965	emotional state is expressed, people tend to forget everything about
   966	other parties except what is presented over that ASCII link.  This has
   967	both good and bad effects.  The good one is that it encourages honesty
   968	and tends to break down hierarchical authority relationships; the bad is
   969	that it may encourage depersonalization and gratuitous rudeness.
   970	Perhaps in response to this, experienced netters often display a sort of
   971	conscious formal politesse in their writing that has passed out of
   972	fashion in other spoken and written media (for example, the phrase "Well
   973	said, sir!" is not uncommon).
   974	
   975	Many introverted hackers who are next to inarticulate in person
   976	communicate with considerable fluency over the net, perhaps precisely
   977	because they can forget on an unconscious level that they are dealing
   978	with people and thus don't feel stressed and anxious as they would face
   979	to face.
   980	
   981	Though it is considered gauche to publicly criticize posters for poor
   982	spelling or grammar, the network places a premium on literacy and
   983	clarity of expression.  It may well be that future historians of
   984	literature will see in it a revival of the great tradition of personal
   985	letters as art.
   986	
   987	:Hacker Speech Style:
   988	=====================
   989	
   990	Hackish speech generally features extremely precise diction, careful
   991	word choice, a relatively large working vocabulary, and relatively
   992	little use of contractions or street slang.  Dry humor, irony, puns, and
   993	a mildly flippant attitude are highly valued --- but an underlying
   994	seriousness and intelligence are essential.  One should use just enough
   995	jargon to communicate precisely and identify oneself as a member of the
   996	culture; overuse of jargon or a breathless, excessively gung-ho attitude
   997	is considered tacky and the mark of a loser.
   998	
   999	This speech style is a variety of the precisionist English normally
  1000	spoken by scientists, design engineers, and academics in technical
  1001	fields.  In contrast with the methods of jargon construction, it is
  1002	fairly constant throughout hackerdom.
  1003	
  1004	It has been observed that many hackers are confused by negative
  1005	questions --- or, at least, that the people to whom they are talking are
  1006	often confused by the sense of their answers.  The problem is that they
  1007	have done so much programming that distinguishes between
  1008	
  1009	     if (going) {
  1010	
  1011	and
  1012	
  1013	     if (!going) {
  1014	
  1015	that when they parse the question "Aren't you going?" it seems to be
  1016	asking the opposite question from "Are you going?", and so merits an
  1017	answer in the opposite sense.  This confuses English-speaking
  1018	non-hackers because they were taught to answer as though the negative
  1019	part weren't there.  In some other languages (including Russian,
  1020	Chinese, and Japanese) the hackish interpretation is standard and the
  1021	problem wouldn't arise.  Hackers often find themselves wishing for a
  1022	word like French `si' or German `doch' with which one could
  1023	unambiguously answer `yes' to a negative question.
  1024	
  1025	For similar reasons, English-speaking hackers almost never use double
  1026	negatives, even if they live in a region where colloquial usage allows
  1027	them.  The thought of uttering something that logically ought to be an
  1028	affirmative knowing it will be misparsed as a negative tends to disturb
  1029	them.
  1030	
  1031	Here's a related quirk.  A non-hacker who is indelicate enough to ask
  1032	a question like "So, are you working on finding that bug *now*
  1033	or leaving it until later?"  is likely to get the perfectly correct
  1034	answer "Yes!" (that is, "Yes, I'm doing it either now or later, and
  1035	you didn't ask which!").
  1036	
  1037	:International Style:
  1038	=====================
  1039	
  1040	Although the Jargon File remains primarily a lexicon of hacker usage in
  1041	American English, we have made some effort to get input from abroad.
  1042	Though the hacker-speak of other languages often uses translations of
  1043	jargon from English (often as transmitted to them by earlier Jargon File
  1044	versions!), the local variations are interesting, and knowledge of them
  1045	may be of some use to travelling hackers.
  1046	
  1047	There are some references herein to `Commonwealth English'.  These are
  1048	intended to describe some variations in hacker usage as reported in the
  1049	English spoken in Great Britain and the Commonwealth (Canada, Australia,
  1050	India, etc. --- though Canada is heavily influenced by American usage).
  1051	There is also an entry on {{Commonwealth Hackish}} reporting some
  1052	general phonetic and vocabulary differences from U.S. hackish.
  1053	
  1054	Hackers in Western Europe and (especially) Scandinavia are reported to
  1055	often use a mixture of English and their native languages for technical
  1056	conversation.  Occasionally they develop idioms in their English usage
  1057	that are influenced by their native-language styles.  Some of these are
  1058	reported here.
  1059	
  1060	A few notes on hackish usages in Russian have been added where they are
  1061	parallel with English idioms and thus comprehensible to
  1062	English-speakers.
  1063	
  1064	:How to Use the Lexicon:
  1065	************************
  1066	
  1067	:Pronunciation Guide:
  1068	=====================
  1069	
  1070	Pronunciation keys are provided in the jargon listings for all entries
  1071	that are neither dictionary words pronounced as in standard English nor
  1072	obvious compounds thereof.  Slashes bracket phonetic pronunciations,
  1073	which are to be interpreted using the following conventions:
  1074	
  1075	  1. Syllables are hyphen-separated, except that an accent or back-accent
  1076	     follows each accented syllable (the back-accent marks a secondary
  1077	     accent in some words of four or more syllables).
  1078	
  1079	  2. Consonants are pronounced as in American English.  The letter `g' is
  1080	     always hard (as in "got" rather than "giant"); `ch' is soft
  1081	     ("church" rather than "chemist").  The letter `j' is the sound
  1082	     that occurs twice in "judge".  The letter `s' is always as in
  1083	     "pass", never a z sound.  The digraph `kh' is the guttural of
  1084	     "loch" or "l'chaim".
  1085	
  1086	  3. Uppercase letters are pronounced as their English letter names; thus
  1087	     (for example) /H-L-L/ is equivalent to /aitch el el/.  /Z/ may
  1088	     be pronounced /zee/ or /zed/ depending on your local dialect.
  1089	
  1090	  4. Vowels are represented as follows:
  1091	
  1092	     a
  1093	            back, that
  1094	     ar
  1095	            far, mark
  1096	     aw
  1097	            flaw, caught
  1098	     ay
  1099	            bake, rain
  1100	     e
  1101	            less, men
  1102	     ee
  1103	            easy, ski
  1104	     eir
  1105	            their, software
  1106	     i
  1107	            trip, hit
  1108	     i:
  1109	            life, sky
  1110	     o
  1111	            father, palm
  1112	     oh
  1113	            flow, sew
  1114	     oo
  1115	            loot, through
  1116	     or
  1117	            more, door
  1118	     ow
  1119	            out, how
  1120	     oy
  1121	            boy, coin
  1122	     uh
  1123	            but, some
  1124	     u
  1125	            put, foot
  1126	     y
  1127	            yet, young
  1128	     yoo
  1129	            few, chew
  1130	     [y]oo
  1131	            /oo/ with optional fronting as in `news' (/nooz/ or /nyooz/)
  1132	
  1133	A /*/ is used for the `schwa' sound of unstressed or occluded vowels
  1134	(the one that is often written with an upside-down `e').  The schwa
  1135	vowel is omitted in syllables containing vocalic r, l, m or n; that is,
  1136	`kitten' and `color' would be rendered /kit'n/ and /kuhl'r/, not
  1137	/kit'*n/ and /kuhl'*r/.
  1138	
  1139	Entries with a pronunciation of `//' are written-only usages.  (No, UNIX
  1140	weenies, this does *not* mean `pronounce like previous pronunciation'!)
  1141	
  1142	:Other Lexicon Conventions:
  1143	===========================
  1144	
  1145	Entries are sorted in case-blind ASCII collation order (rather than the
  1146	letter-by-letter order ignoring interword spacing common in mainstream
  1147	dictionaries), except that all entries beginning with nonalphabetic
  1148	characters are sorted after Z.  The case-blindness is a feature, not a
  1149	bug.
  1150	
  1151	The beginning of each entry is marked by a colon (`:') at the
  1152	left margin.  This convention helps out tools like hypertext browsers
  1153	that benefit from knowing where entry boundaries are, but aren't as
  1154	context-sensitive as humans.
  1155	
  1156	In pure ASCII renderings of the Jargon File, you will see {} used to
  1157	bracket words which themselves have entries in the File.  This isn't
  1158	done all the time for every such word, but it is done everywhere that a
  1159	reminder seems useful that the term has a jargon meaning and one might
  1160	wish to refer to its entry.
  1161	
  1162	In this all-ASCII version, headwords for topic entries are distinguished
  1163	from those for ordinary entries by being followed by "::" rather than
  1164	":"; similarly, references are surrounded by "{{" and "}}" rather than
  1165	"{" and "}".
  1166	
  1167	Defining instances of terms and phrases appear in `slanted type'.  A
  1168	defining instance is one which occurs near to or as part of an
  1169	explanation of it.
  1170	
  1171	Prefix * is used as linguists do; to mark examples of incorrect usage.
  1172	
  1173	We follow the `logical' quoting convention described in the Writing
  1174	Style section above.  In addition, we reserve double quotes for actual
  1175	excerpts of text or (sometimes invented) speech.  Scare quotes (which
  1176	mark a word being used in a nonstandard way), and philosopher's quotes
  1177	(which turn an utterance into the string of letters or words that name
  1178	it) are both rendered with single quotes.
  1179	
  1180	References such as `malloc(3)' and `patch(1)' are to UNIX facilities
  1181	(some of which, such as `patch(1)', are actually freeware distributed
  1182	over USENET).  The UNIX manuals use `foo(n)' to refer to item foo in
  1183	section (n) of the manual, where n=1 is utilities, n=2 is system calls,
  1184	n=3 is C library routines, n=6 is games, and n=8 (where present) is
  1185	system administration utilities.  Sections 4, 5, and 7 of the manuals
  1186	have changed roles frequently and in any case are not referred to in any
  1187	of the entries.
  1188	
  1189	Various abbreviations used frequently in the lexicon are summarized here:
  1190	
  1191	abbrev.
  1192	     abbreviation
  1193	adj.
  1194	     adjective
  1195	adv.
  1196	     adverb
  1197	alt.
  1198	     alternate
  1199	cav.
  1200	     caveat
  1201	esp.
  1202	     especially
  1203	excl.
  1204	     exclamation
  1205	imp.
  1206	     imperative
  1207	interj.
  1208	     interjection
  1209	n.
  1210	     noun
  1211	obs.
  1212	     obsolete
  1213	pl.
  1214	     plural
  1215	poss.
  1216	     possibly
  1217	pref.
  1218	     prefix
  1219	prob.
  1220	     probably
  1221	prov.
  1222	     proverbial
  1223	quant.
  1224	     quantifier
  1225	suff.
  1226	     suffix
  1227	syn.
  1228	     synonym (or synonymous with)
  1229	v.
  1230	     verb (may be transitive or intransitive)
  1231	var.
  1232	     variant
  1233	vi.
  1234	     intransitive verb
  1235	vt.
  1236	     transitive verb
  1237	
  1238	Where alternate spellings or pronunciations are given, alt.
  1239	separates two possibilities with nearly equal distribution, while
  1240	var. prefixes one that is markedly less common than the primary.
  1241	
  1242	Where a term can be attributed to a particular subculture or is known
  1243	to have originated there, we have tried to so indicate.  Here is a
  1244	list of abbreviations used in etymologies:
  1245	
  1246	Berkeley
  1247	     University of California at Berkeley
  1248	Cambridge
  1249	     the university in England (*not* the city in Massachusetts where
  1250	     MIT happens to be located!)
  1251	BBN
  1252	     Bolt, Beranek & Newman
  1253	CMU
  1254	     Carnegie-Mellon University
  1255	Commodore
  1256	     Commodore Business Machines
  1257	DEC
  1258	     The Digital Equipment Corporation
  1259	Fairchild
  1260	     The Fairchild Instruments Palo Alto development group
  1261	Fidonet
  1262	     See the {Fidonet} entry
  1263	IBM
  1264	     International Business Machines
  1265	MIT
  1266	     Massachusetts Institute of Technology; esp. the legendary MIT AI Lab
  1267	     culture of roughly 1971 to 1983 and its feeder groups, including the
  1268	     Tech Model Railroad Club
  1269	NRL
  1270	     Naval Research Laboratories
  1271	NYU
  1272	     New York University
  1273	OED
  1274	     The Oxford English Dictionary
  1275	Purdue
  1276	     Purdue University
  1277	SAIL
  1278	     Stanford Artificial Intelligence Laboratory (at Stanford
  1279	     University)
  1280	SI
  1281	     From Syst`eme International, the name for the standard
  1282	     conventions of metric nomenclature used in the sciences
  1283	Stanford
  1284	     Stanford University
  1285	Sun
  1286	     Sun Microsystems
  1287	TMRC
  1288	     Some MITisms go back as far as the Tech Model Railroad Club (TMRC) at
  1289	     MIT c. 1960.  Material marked TMRC is from `An Abridged Dictionary
  1290	     of the TMRC Language', originally compiled by Pete Samson in 1959
  1291	UCLA
  1292	     University of California at Los Angeles
  1293	UK
  1294	     the United Kingdom (England, Wales, Scotland, Northern Ireland)
  1295	USENET
  1296	     See the {USENET} entry
  1297	WPI
  1298	     Worcester Polytechnic Institute, site of a very active community of
  1299	     PDP-10 hackers during the 1970s
  1300	XEROX PARC
  1301	     XEROX's Palo Alto Research Center, site of much pioneering research in
  1302	     user interface design and networking
  1303	Yale
  1304	     Yale University
  1305	
  1306	
  1307	Some other etymology abbreviations such as {UNIX} and {PDP-10}
  1308	refer to technical cultures surrounding specific operating systems,
  1309	processors, or other environments.  The fact that a term is labelled
  1310	with any one of these abbreviations does not necessarily mean its use
  1311	is confined to that culture.  In particular, many terms labelled `MIT'
  1312	and `Stanford' are in quite general use.  We have tried to give some
  1313	indication of the distribution of speakers in the usage notes;
  1314	however, a number of factors mentioned in the introduction conspire to
  1315	make these indications less definite than might be desirable.
  1316	
  1317	A few new definitions attached to entries are marked [proposed].
  1318	These are usually generalizations suggested by editors or USENET
  1319	respondents in the process of commenting on previous definitions of
  1320	those entries.  These are *not* represented as established
  1321	jargon.
  1322	
  1323	:Format For New Entries:
  1324	========================
  1325	
  1326	All contributions and suggestions about the Jargon File will be
  1327	considered donations to be placed in the public domain as part of this
  1328	File, and may be used in subsequent paper editions.  Submissions may
  1329	be edited for accuracy, clarity and concision.
  1330	
  1331	Try to conform to the format already being used --- head-words
  1332	separated from text by a colon (double colon for topic entries),
  1333	cross-references in curly brackets (doubled for topic entries),
  1334	pronunciations in slashes, etymologies in square brackets,
  1335	single-space after definition numbers and word classes, etc.  Stick to
  1336	the standard ASCII character set (7-bit printable, no high-half
  1337	characters or [nt]roff/TeX/Scribe escapes), as one of the versions
  1338	generated from the master file is an info document that has to be
  1339	viewable on a character tty.
  1340	
  1341	We are looking to expand the file's range of technical specialties covered.
  1342	There are doubtless rich veins of jargon yet untapped in the scientific
  1343	computing, graphics, and networking hacker communities; also in numerical
  1344	analysis, computer architectures and VLSI design, language design, and many
  1345	other related fields.  Send us your jargon!
  1346	
  1347	We are *not* interested in straight technical terms explained by
  1348	textbooks or technical dictionaries unless an entry illuminates
  1349	`underground' meanings or aspects not covered by official histories.
  1350	We are also not interested in `joke' entries --- there is a lot of
  1351	humor in the file but it must flow naturally out of the explanations
  1352	of what hackers do and how they think.
  1353	
  1354	It is OK to submit items of jargon you have originated if they have spread
  1355	to the point of being used by people who are not personally acquainted with
  1356	you.  We prefer items to be attested by independent submission from two
  1357	different sites.
  1358	
  1359	The Jargon File will be regularly maintained and re-posted from now on
  1360	and will include a version number.  Read it, pass it around,
  1361	contribute --- this is *your* monument!
  1362	
  1363	The Jargon Lexicon
  1364	******************
  1365	
  1366	= A =
  1367	=====
  1368	
  1369	:abbrev: /*-breev'/, /*-brev'/ n. Common abbreviation for
  1370	   `abbreviation'.
  1371	
  1372	:ABEND: [ABnormal END] /ah'bend/, /*-bend'/ n. Abnormal
  1373	   termination (of software); {crash}; {lossage}.  Derives from an
  1374	   error message on the IBM 360; used jokingly by hackers but
  1375	   seriously mainly by {code grinder}s.  Usually capitalized, but may
  1376	   appear as `abend'.  Hackers will try to persuade you that ABEND is
  1377	   called `abend' because it is what system operators do to the
  1378	   machine late on Friday when they want to call it a day, and hence
  1379	   is from the German `Abend' = `Evening'.
  1380	
  1381	:accumulator: n. 1. Archaic term for a register.  On-line use of it
  1382	   as a synonym for `register' is a fairly reliable indication that
  1383	   the user has been around for quite a while and/or that the
  1384	   architecture under discussion is quite old.  The term in full is
  1385	   almost never used of microprocessor registers, for example, though
  1386	   symbolic names for arithmetic registers beginning in `A' derive
  1387	   from historical use of the term `accumulator' (and not, actually,
  1388	   from `arithmetic').  Confusingly, though, an `A' register name
  1389	   prefix may also stand for `address', as for example on the
  1390	   Motorola 680x0 family.  2. A register being used for arithmetic or
  1391	   logic (as opposed to addressing or a loop index), especially one
  1392	   being used to accumulate a sum or count of many items.  This use is
  1393	   in context of a particular routine or stretch of code.  "The
  1394	   FOOBAZ routine uses A3 as an accumulator."  3. One's in-basket
  1395	   (esp. among old-timers who might use sense 1).  "You want this
  1396	   reviewed?  Sure, just put it in the accumulator."  (See {stack}.)
  1397	
  1398	:ACK: /ak/ interj. 1. [from the ASCII mnemonic for 0000110]
  1399	   Acknowledge.  Used to register one's presence (compare mainstream
  1400	   *Yo!*).  An appropriate response to {ping} or {ENQ}.
  1401	   2. [from the comic strip "Bloom County"] An exclamation of
  1402	   surprised disgust, esp. in "Ack pffft!"  Semi-humorous.
  1403	   Generally this sense is not spelled in caps (ACK) and is
  1404	   distinguished by a following exclamation point.  3. Used to
  1405	   politely interrupt someone to tell them you understand their point
  1406	   (see {NAK}).  Thus, for example, you might cut off an overly
  1407	   long explanation with "Ack.  Ack.  Ack.  I get it now".
  1408	
  1409	   There is also a usage "ACK?" (from sense 1) meaning "Are you
  1410	   there?", often used in email when earlier mail has produced no
  1411	   reply, or during a lull in {talk mode} to see if the person has
  1412	   gone away (the standard humorous response is of course {NAK}
  1413	   (sense 2), i.e., "I'm not here").
  1414	
  1415	:ad-hockery: /ad-hok'*r-ee/ [Purdue] n. 1. Gratuitous assumptions
  1416	   made inside certain programs, esp. expert systems, which lead to
  1417	   the appearance of semi-intelligent behavior but are in fact
  1418	   entirely arbitrary.  For example, fuzzy-matching input tokens that
  1419	   might be typing errors against a symbol table can make it look as
  1420	   though a program knows how to spell.  2. Special-case code to cope
  1421	   with some awkward input that would otherwise cause a program to
  1422	   {choke}, presuming normal inputs are dealt with in some cleaner
  1423	   and more regular way.  Also called `ad-hackery', `ad-hocity'
  1424	   (/ad-hos'*-tee/), `ad-crockery'.  See also {ELIZA effect}.
  1425	
  1426	:Ada:: n. A {{Pascal}}-descended language that has been made
  1427	   mandatory for Department of Defense software projects by the
  1428	   Pentagon.  Hackers are nearly unanimous in observing that,
  1429	   technically, it is precisely what one might expect given that kind
  1430	   of endorsement by fiat; designed by committee, crockish, difficult
  1431	   to use, and overall a disastrous, multi-billion-dollar boondoggle
  1432	   (one common description is "The PL/I of the 1980s").  Hackers
  1433	   find Ada's exception-handling and inter-process communication
  1434	   features particularly hilarious.  Ada Lovelace (the daughter of
  1435	   Lord Byron who became the world's first programmer while
  1436	   cooperating with Charles Babbage on the design of his mechanical
  1437	   computing engines in the mid-1800s) would almost certainly blanch
  1438	   at the use to which her name has latterly been put; the kindest
  1439	   thing that has been said about it is that there is probably a good
  1440	   small language screaming to get out from inside its vast,
  1441	   {elephantine} bulk.
  1442	
  1443	:adger: /aj'r/ [UCLA] vt. To make a bonehead move with consequences
  1444	   that could have been foreseen with a slight amount of mental
  1445	   effort.  E.g., "He started removing files and promptly adgered the
  1446	   whole project".  Compare {dumbass attack}.
  1447	
  1448	:admin: /ad-min'/ n. Short for `administrator'; very commonly
  1449	   used in speech or on-line to refer to the systems person in charge
  1450	   on a computer.  Common constructions on this include `sysadmin'
  1451	   and `site admin' (emphasizing the administrator's role as a site
  1452	   contact for email and news) or `newsadmin' (focusing specifically
  1453	   on news).  Compare {postmaster}, {sysop}, {system
  1454	   mangler}.
  1455	
  1456	:ADVENT: /ad'vent/ n. The prototypical computer adventure game, first
  1457	   implemented on the {PDP-10} by Will Crowther as an attempt at
  1458	   computer-refereed fantasy gaming, and expanded into a
  1459	   puzzle-oriented game by Don Woods.  Now better known as Adventure,
  1460	   but the {{TOPS-10}} operating system permitted only 6-letter
  1461	   filenames.  See also {vadding}.
  1462	
  1463	   This game defined the terse, dryly humorous style now expected in
  1464	   text adventure games, and popularized several tag lines that have
  1465	   become fixtures of hacker-speak:  "A huge green fierce snake bars
  1466	   the way!"  "I see no X here" (for some noun X).  "You are in a
  1467	   maze of twisty little passages, all alike."  "You are in a little
  1468	   maze of twisty passages, all different."  The `magic words'
  1469	   {xyzzy} and {plugh} also derive from this game.
  1470	
  1471	   Crowther, by the way, participated in the exploration of the
  1472	   Mammoth & Flint Ridge cave system; it actually *has* a
  1473	   `Colossal Cave' and a `Bedquilt' as in the game, and the `Y2' that
  1474	   also turns up is cavers' jargon for a map reference to a secondary
  1475	   entrance.
  1476	
  1477	:AFJ: n. Written-only abbreviation for "April Fool's Joke".
  1478	   Elaborate April Fool's hoaxes are a hallowed tradition on USENET
  1479	   and Internet; see {kremvax} for an example.  In fact, April
  1480	   Fool's Day is the *only* seasonal holiday marked by customary
  1481	   observances on the hacker networks.
  1482	
  1483	:AI-complete: /A-I k*m-pleet'/ [MIT, Stanford: by analogy with
  1484	   `NP-complete' (see {NP-})] adj. Used to describe problems or
  1485	   subproblems in AI, to indicate that the solution presupposes a
  1486	   solution to the `strong AI problem' (that is, the synthesis of a
  1487	   human-level intelligence).  A problem that is AI-complete is, in
  1488	   other words, just too hard.
  1489	
  1490	   Examples of AI-complete problems are `The Vision Problem'
  1491	   (building a system that can see as well as a human) and `The
  1492	   Natural Language Problem' (building a system that can understand
  1493	   and speak a natural language as well as a human).  These may appear
  1494	   to be modular, but all attempts so far (1991) to solve them have
  1495	   foundered on the amount of context information and `intelligence'
  1496	   they seem to require. See also {gedanken}.
  1497	
  1498	:AI koans: /A-I koh'anz/ pl.n. A series of pastiches of Zen
  1499	   teaching riddles created by Danny Hillis at the MIT AI Lab around
  1500	   various major figures of the Lab's culture (several are included
  1501	   under "{A Selection of AI Koans}" in {appendix
  1502	   A}).  See also {ha ha only serious}, {mu}, and {{Humor,
  1503	   Hacker}}.
  1504	
  1505	:AIDS: /aydz/ n. Short for A* Infected Disk Syndrome (`A*' is a
  1506	   {glob} pattern that matches, but is not limited to, Apple),
  1507	   this condition is quite often the result of practicing unsafe
  1508	   {SEX}.  See {virus}, {worm}, {Trojan horse},
  1509	   {virgin}.
  1510	
  1511	:AIDX: n. /aydkz/ n. Derogatory term for IBM's perverted version
  1512	   of UNIX, AIX, especially for the AIX 3.? used in the IBM RS/6000
  1513	   series.  A victim of the dreaded "hybridism" disease, this
  1514	   attempt to combine the two main currents of the UNIX stream
  1515	   ({BSD} and {USG UNIX}) became a {monstrosity} to haunt
  1516	   system administrators' dreams.  For example, if new accounts are
  1517	   created while many users are logged on, the load average jumps
  1518	   quickly over 20 due to silly implementation of the user databases.
  1519	   For a quite similar disease, compare {HP-SUX}.  Also, compare
  1520	   {terminak}, {Macintrash} {Nominal Semidestructor},
  1521	   {Open DeathTrap}, {ScumOS}, {sun-stools}.
  1522	
  1523	:airplane rule: n. "Complexity increases the possibility of
  1524	   failure; a twin-engine airplane has twice as many engine problems
  1525	   as a single-engine airplane."  By analogy, in both software and
  1526	   electronics, the rule that simplicity increases robustness (see
  1527	   also {KISS Principle}).  It is correspondingly argued that the
  1528	   right way to build reliable systems is to put all your eggs in one
  1529	   basket, after making sure that you've built a really *good*
  1530	   basket.
  1531	
  1532	:aliasing bug: n. A class of subtle programming errors that can
  1533	   arise in code that does dynamic allocation, esp. via
  1534	   `malloc(3)' or equivalent.  If more than one pointer addresses
  1535	   (`aliases for') a given hunk of storage, it may happen that the
  1536	   storage is freed or reallocated (and thus moved) through one alias
  1537	   and then referenced through another, which may lead to subtle (and
  1538	   possibly intermittent) lossage depending on the state and the
  1539	   allocation history of the malloc {arena}.  Avoidable by use of
  1540	   allocation strategies that never alias allocated core.  Also
  1541	   avoidable by use of higher-level languages, such as {LISP},
  1542	   which employ a garbage collector (see {GC}).  Also called a
  1543	   {stale pointer bug}.  See also {precedence lossage},
  1544	   {smash the stack}, {fandango on core}, {memory leak},
  1545	   {memory smash}, {overrun screw}, {spam}.
  1546	
  1547	   Historical note: Though this term is nowadays associated with
  1548	   C programming, it was already in use in a very similar sense in the
  1549	   Algol-60 and FORTRAN communities in the 1960s.
  1550	
  1551	:all-elbows: adj. Of a TSR (terminate-and-stay-resident) IBM PC
  1552	   program, such as the N pop-up calendar and calculator utilities
  1553	   that circulate on {BBS} systems: unsociable.  Used to describe a
  1554	   program that rudely steals the resources that it needs without
  1555	   considering that other TSRs may also be resident.  One particularly
  1556	   common form of rudeness is lock-up due to programs fighting over
  1557	   the keyboard interrupt.  See {rude}, also {mess-dos}.
  1558	
  1559	:alpha particles: n. See {bit rot}.
  1560	
  1561	:alt: /awlt/ 1. n. The alt shift key on an IBM PC or {clone}.
  1562	   2. n. The `clover' or `Command' key on a Macintosh; use of this
  1563	   term usually reveals that the speaker hacked PCs before coming to
  1564	   the Mac (see also {feature key}).  Some Mac hackers,
  1565	   confusingly, reserve `alt' for the Option key.  3. n.obs.  [PDP-10;
  1566	   often capitalized to ALT] Alternate name for the ASCII
  1567	   ESC character (ASCII 0011011), after the keycap labeling on some
  1568	   older terminals.  Also `altmode' (/awlt'mohd/).  This character
  1569	   was almost never pronounced `escape' on an ITS system, in
  1570	   {TECO}, or under TOPS-10 --- always alt, as in "Type alt alt to
  1571	   end a TECO command" or "alt-U onto the system" (for "log onto
  1572	   the [ITS] system").  This was probably because alt is more
  1573	   convenient to say than `escape', especially when followed by
  1574	   another alt or a character (or another alt *and* a character,
  1575	   for that matter).
  1576	
  1577	:alt bit: /awlt bit/ [from alternate] adj. See {meta bit}.
  1578	
  1579	:altmode: n. Syn. {alt} sense 3.
  1580	
  1581	:Aluminum Book: [MIT] n. `Common LISP: The Language', by
  1582	   Guy L.  Steele Jr. (Digital Press, first edition 1984, second
  1583	   edition 1990).  Note that due to a technical screwup some printings
  1584	   of the second edition are actually of a color the author describes
  1585	   succinctly as "yucky green".  See also {{book titles}}.
  1586	
  1587	:amoeba: n. Humorous term for the Commodore Amiga personal computer.
  1588	
  1589	:amp off: [Purdue] vt. To run in {background}.  From the UNIX shell `&'
  1590	   operator.
  1591	
  1592	:amper: n. Common abbreviation for the name of the ampersand (`&',
  1593	   ASCII 0100110) character.  See {{ASCII}} for other synonyms.
  1594	
  1595	:angle brackets: n. Either of the characters `<' (ASCII
  1596	   0111100) and `>' (ASCII 0111110) (ASCII less-than or
  1597	   greater-than signs).  The {Real World} angle brackets used by
  1598	   typographers are actually taller than a less-than or greater-than
  1599	   sign.
  1600	   See {broket}, {{ASCII}}.
  1601	
  1602	:angry fruit salad: n. A bad visual-interface design that uses too
  1603	   many colors.  This derives, of course, from the bizarre day-glo
  1604	   colors found in canned fruit salad.  Too often one sees similar
  1605	   effects from interface designers using color window systems such as
  1606	   {X}; there is a tendency to create displays that are flashy and
  1607	   attention-getting but uncomfortable for long-term use.
  1608	
  1609	:annoybot: /*-noy-bot/ [IRC] n. See {robot}.
  1610	
  1611	:AOS: 1. /aws/ (East Coast), /ay-os/ (West Coast) [based on a
  1612	   PDP-10 increment instruction] vt.,obs. To increase the amount of
  1613	   something.  "AOS the campfire."  Usage: considered silly, and now
  1614	   obsolete.  Now largely supplanted by {bump}.  See {SOS}.  2. A
  1615	   {{Multics}}-derived OS supported at one time by Data General.  This
  1616	   was pronounced /A-O-S/ or /A-os/.  A spoof of the standard
  1617	   AOS system administrator's manual (`How to Load and Generate
  1618	   your AOS System') was created, issued a part number, and circulated
  1619	   as photocopy folklore.  It was called `How to Goad and
  1620	   Levitate your CHAOS System'.  3. Algebraic Operating System, in
  1621	   reference to those calculators which use infix instead of postfix
  1622	   (reverse Polish) notation.
  1623	
  1624	   Historical note: AOS in sense 1 was the name of a {PDP-10}
  1625	   instruction that took any memory location in the computer and added
  1626	   1 to it; AOS meant `Add One and do not Skip'.  Why, you may ask,
  1627	   does the `S' stand for `do not Skip' rather than for `Skip'?  Ah,
  1628	   here was a beloved piece of PDP-10 folklore.  There were eight such
  1629	   instructions: AOSE added 1 and then skipped the next instruction
  1630	   if the result was Equal to zero; AOSG added 1 and then skipped if
  1631	   the result was Greater than 0; AOSN added 1 and then skipped
  1632	   if the result was Not 0; AOSA added 1 and then skipped Always;
  1633	   and so on.  Just plain AOS didn't say when to skip, so it never
  1634	   skipped.
  1635	
  1636	   For similar reasons, AOJ meant `Add One and do not Jump'.  Even
  1637	   more bizarre, SKIP meant `do not SKIP'!  If you wanted to skip the
  1638	   next instruction, you had to say `SKIPA'.  Likewise, JUMP meant
  1639	   `do not JUMP'; the unconditional form was JUMPA.  However, hackers
  1640	   never did this.  By some quirk of the 10's design, the {JRST}
  1641	   (Jump and ReSTore flag with no flag specified) was actually faster
  1642	   and so was invariably used.  Such were the perverse mysteries of
  1643	   assembler programming.
  1644	
  1645	:app: /ap/ n. Short for `application program', as opposed to a
  1646	   systems program.  What systems vendors are forever chasing
  1647	   developers to create for their environments so they can sell more
  1648	   boxes.  Hackers tend not to think of the things they themselves run
  1649	   as apps; thus, in hacker parlance the term excludes compilers,
  1650	   program editors, games, and messaging systems, though a user would
  1651	   consider all those to be apps.  Oppose {tool}, {operating
  1652	   system}.
  1653	
  1654	:arc: [primarily MSDOS] vt. To create a compressed {archive} from a
  1655	   group of files using SEA ARC, PKWare PKARC, or a compatible
  1656	   program.  Rapidly becoming obsolete as the ARC compression method
  1657	   is falling into disuse, having been replaced by newer compression
  1658	   techniques.  See {tar and feather}, {zip}.
  1659	
  1660	:arc wars: [primarily MSDOS] n. {holy wars} over which archiving
  1661	   program one should use.  The first arc war was sparked when System
  1662	   Enhancement Associates (SEA) sued PKWare for copyright and
  1663	   trademark infringement on its ARC program.  PKWare's PKARC
  1664	   outperformed ARC on both compression and speed while largely
  1665	   retaining compatibility (it introduced a new compression type that
  1666	   could be disabled for backward-compatibility).  PKWare settled out
  1667	   of court to avoid enormous legal costs (both SEA and PKWare are
  1668	   small companies); as part of the settlement, the name of PKARC was
  1669	   changed to PKPAK.  The public backlash against SEA for bringing
  1670	   suit helped to hasten the demise of ARC as a standard when PKWare
  1671	   and others introduced new, incompatible archivers with better
  1672	   compression algorithms.
  1673	
  1674	:archive: n. 1. A collection of several files bundled into one file
  1675	   by a program such as `ar(1)', `tar(1)', `cpio(1)',
  1676	   or {arc} for shipment or archiving (sense 2).  See also {tar
  1677	   and feather}.  2. A collection of files or archives (sense 1) made
  1678	   available from an `archive site' via {FTP} or an email server.
  1679	
  1680	:arena: [UNIX] n. The area of memory attached to a process by
  1681	   `brk(2)' and `sbrk(2)' and used by `malloc(3)' as
  1682	   dynamic storage.  So named from a semi-mythical `malloc:
  1683	   corrupt arena' message supposedly emitted when some early versions
  1684	   became terminally confused.  See {overrun screw}, {aliasing
  1685	   bug}, {memory leak}, {memory smash}, {smash the stack}.
  1686	
  1687	:arg: /arg/ n. Abbreviation for `argument' (to a function),
  1688	   used so often as to have become a new word (like `piano' from
  1689	   `pianoforte').  "The sine function takes 1 arg, but the
  1690	   arc-tangent function can take either 1 or 2 args."  Compare
  1691	   {param}, {parm}, {var}.
  1692	
  1693	:armor-plated: n. Syn. for {bulletproof}.
  1694	
  1695	:asbestos: adj. Used as a modifier to anything intended to protect
  1696	   one from {flame}s.  Important cases of this include {asbestos
  1697	   longjohns} and {asbestos cork award}, but it is used more
  1698	   generally.
  1699	
  1700	:asbestos cork award: n. Once, long ago at MIT, there was a {flamer}
  1701	   so consistently obnoxious that another hacker designed, had made,
  1702	   and distributed posters announcing that said flamer had been
  1703	   nominated for the `asbestos cork award'.  Persons in any doubt as
  1704	   to the intended application of the cork should consult the
  1705	   etymology under {flame}.  Since then, it is agreed that only a
  1706	   select few have risen to the heights of bombast required to earn
  1707	   this dubious dignity --- but there is no agreement on *which*
  1708	   few.
  1709	
  1710	:asbestos longjohns: n. Notional garments often donned by {USENET}
  1711	   posters just before emitting a remark they expect will elicit
  1712	   {flamage}.  This is the most common of the {asbestos} coinages.
  1713	   Also `asbestos underwear', `asbestos overcoat', etc.
  1714	
  1715	:ASCII:: [American Standard Code for Information Interchange]
  1716	   /as'kee/ n. The predominant character set encoding of present-day
  1717	   computers.  Uses 7 bits for each character, whereas most earlier
  1718	   codes (including an early version of ASCII) used fewer.  This
  1719	   change allowed the inclusion of lowercase letters --- a major
  1720	   {win} --- but it did not provide for accented letters or any
  1721	   other letterforms not used in English (such as the German sharp-S
  1722	   and the ae-ligature
  1723	   which is a letter in, for example, Norwegian).  It could be worse,
  1724	   though.  It could be much worse.  See {{EBCDIC}} to understand how.
  1725	   
  1726	   Computers are much pickier and less flexible about spelling than
  1727	   humans; thus, hackers need to be very precise when talking about
  1728	   characters, and have developed a considerable amount of verbal
  1729	   shorthand for them.  Every character has one or more names --- some
  1730	   formal, some concise, some silly.  Common jargon names for ASCII
  1731	   characters are collected here.  See also individual entries for
  1732	   {bang}, {excl}, {open}, {ques}, {semi}, {shriek},
  1733	   {splat}, {twiddle}, and {Yu-Shiang Whole Fish}.
  1734	
  1735	   This list derives from revision 2.3 of the USENET ASCII
  1736	   pronunciation guide.  Single characters are listed in ASCII order;
  1737	   character pairs are sorted in by first member.  For each character,
  1738	   common names are given in rough order of popularity, followed by
  1739	   names that are reported but rarely seen; official ANSI/CCITT names
  1740	   are surrounded by brokets: <>.  Square brackets mark the
  1741	   particularly silly names introduced by {INTERCAL}.  Ordinary
  1742	   parentheticals provide some usage information.
  1743	
  1744	     !
  1745	          Common: {bang}; pling; excl; shriek; <exclamation mark>.
  1746	          Rare: factorial; exclam; smash; cuss; boing; yell; wow; hey;
  1747	          wham; eureka; [spark-spot]; soldier.
  1748	
  1749	     "
  1750	          Common: double quote; quote.  Rare: literal mark;
  1751	          double-glitch; <quotation marks>; <dieresis>; dirk;
  1752	          [rabbit-ears]; double prime.
  1753	
  1754	     #
  1755	          Common: <number sign>; pound; pound sign; hash; sharp;
  1756	          {crunch}; hex; [mesh]; octothorpe.  Rare: flash; crosshatch;
  1757	          grid; pig-pen; tictactoe; scratchmark; thud; thump; {splat}.
  1758	
  1759	     $
  1760	          Common: dollar; <dollar sign>.  Rare: currency symbol; buck;
  1761	          cash; string (from BASIC); escape (when used as the echo of
  1762	          ASCII ESC); ding; cache; [big money].
  1763	
  1764	     %
  1765	          Common: percent; <percent sign>; mod; grapes.  Rare:
  1766	          [double-oh-seven].
  1767	
  1768	     &
  1769	          Common: <ampersand>; amper; and.  Rare: address (from C);
  1770	          reference (from C++); andpersand; bitand; background (from
  1771	          `sh(1)'); pretzel; amp.  [INTERCAL called this `ampersand';
  1772	          what could be sillier?]
  1773	
  1774	     '
  1775	          Common: single quote; quote; <apostrophe>.  Rare: prime;
  1776	          glitch; tick; irk; pop; [spark]; <closing single quotation
  1777	          mark>; <acute accent>.
  1778	
  1779	     ()
  1780	          Common: left/right paren; left/right parenthesis; left/right;
  1781	          paren/thesis; open/close paren; open/close; open/close
  1782	          parenthesis; left/right banana.  Rare: so/al-ready;
  1783	          lparen/rparen; <opening/closing parenthesis>; open/close round
  1784	          bracket, parenthisey/unparenthisey; [wax/wane]; left/right
  1785	          ear.
  1786	
  1787	     *
  1788	          Common: star; [{splat}]; <asterisk>.  Rare: wildcard; gear;
  1789	          dingle; mult; spider; aster; times; twinkle; glob (see
  1790	          {glob}); {Nathan Hale}.
  1791	
  1792	     +
  1793	          Common: <plus>; add.  Rare: cross; [intersection].
  1794	
  1795	     ,
  1796	          Common: <comma>.  Rare: <cedilla>; [tail].
  1797	
  1798	     -
  1799	          Common: dash; <hyphen>; <minus>.  Rare: [worm]; option; dak;
  1800	          bithorpe.
  1801	
  1802	     .
  1803	          Common: dot; point; <period>; <decimal point>.  Rare: radix
  1804	          point; full stop; [spot].
  1805	
  1806	     /
  1807	          Common: slash; stroke; <slant>; forward slash.  Rare:
  1808	          diagonal; solidus; over; slak; virgule; [slat].
  1809	
  1810	     :
  1811	          Common: <colon>.  Rare: dots; [two-spot].
  1812	
  1813	     ;
  1814	          Common: <semicolon>; semi.  Rare: weenie; [hybrid],
  1815	          pit-thwong.
  1816	
  1817	     <>
  1818	          Common: <less/greater than>; left/right angle bracket;
  1819	          bra/ket; left/right broket.  Rare: from/{into, towards}; read
  1820	          from/write to; suck/blow; comes-from/gozinta; in/out;
  1821	          crunch/zap (all from UNIX); [angle/right angle].
  1822	
  1823	     =
  1824	          Common: <equals>; gets; takes.  Rare: quadrathorpe;
  1825	          [half-mesh].
  1826	
  1827	     ?
  1828	          Common: query; <question mark>; {ques}.  Rare: whatmark;
  1829	          [what]; wildchar; huh; hook; buttonhook; hunchback.
  1830	
  1831	     @
  1832	          Common: at sign; at; strudel.  Rare: each; vortex; whorl;
  1833	          [whirlpool]; cyclone; snail; ape; cat; rose; cabbage;
  1834	          <commercial at>.
  1835	
  1836	     V
  1837	          Rare: [book].
  1838	
  1839	     []
  1840	          Common: left/right square bracket; <opening/closing bracket>;
  1841	          bracket/unbracket; left/right bracket.  Rare: square/unsquare;
  1842	          [U turn/U turn back].
  1843	
  1844	     \
  1845	          Common: backslash; escape (from C/UNIX); reverse slash; slosh;
  1846	          backslant; backwhack.  Rare: bash; <reverse slant>; reversed
  1847	          virgule; [backslat].
  1848	
  1849	     ^
  1850	          Common: hat; control; uparrow; caret; <circumflex>.  Rare:
  1851	          chevron; [shark (or shark-fin)]; to the (`to the power of');
  1852	          fang; pointer (in Pascal).
  1853	
  1854	     _
  1855	          Common: <underline>; underscore; underbar; under.  Rare:
  1856	          score; backarrow; skid; [flatworm].
  1857	
  1858	     `
  1859	          Common: backquote; left quote; left single quote; open quote;
  1860	          <grave accent>; grave.  Rare: backprime; [backspark];
  1861	          unapostrophe; birk; blugle; back tick; back glitch; push;
  1862	          <opening single quotation mark>; quasiquote.
  1863	
  1864	     {}
  1865	          Common: open/close brace; left/right brace; left/right
  1866	          squiggly; left/right squiggly bracket/brace; left/right curly
  1867	          bracket/brace; <opening/closing brace>.  Rare: brace/unbrace;
  1868	          curly/uncurly; leftit/rytit; left/right squirrelly;
  1869	          [embrace/bracelet].
  1870	
  1871	     |
  1872	          Common: bar; or; or-bar; v-bar; pipe; vertical bar.  Rare:
  1873	          <vertical line>; gozinta; thru; pipesinta (last three from
  1874	          UNIX); [spike].
  1875	
  1876	     ~
  1877	          Common: <tilde>; squiggle; {twiddle}; not.  Rare: approx;
  1878	          wiggle; swung dash; enyay; [sqiggle (sic)].
  1879	
  1880	   The pronunciation of `#' as `pound' is common in the U.S.
  1881	   but a bad idea; {{Commonwealth Hackish}} has its own, rather more
  1882	   apposite use of `pound sign' (confusingly, on British keyboards
  1883	   the pound graphic
  1884	   happens to replace `#'; thus Britishers sometimes
  1885	   call `#' on a U.S.-ASCII keyboard `pound', compounding the
  1886	   American error).  The U.S. usage derives from an old-fashioned
  1887	   commercial practice of using a `#' suffix to tag pound weights
  1888	   on bills of lading.  The character is usually pronounced `hash'
  1889	   outside the U.S.
  1890	
  1891	   The `uparrow' name for circumflex and `leftarrow' name for
  1892	   underline are historical relics from archaic ASCII (the 1963
  1893	   version), which had these graphics in those character positions
  1894	   rather than the modern punctuation characters.
  1895	
  1896	   The `swung dash' or `approximation' sign is not quite the same
  1897	   as tilde in typeset material
  1898	   but the ASCII tilde serves for both (compare {angle
  1899	   brackets}).
  1900	
  1901	   Some other common usages cause odd overlaps.  The `#',
  1902	   `$', `>', and `&' characters, for example, are all
  1903	   pronounced "hex" in different communities because various
  1904	   assemblers use them as a prefix tag for hexadecimal constants (in
  1905	   particular, `#' in many assembler-programming cultures,
  1906	   `$' in the 6502 world, `>' at Texas Instruments, and
  1907	   `&' on the BBC Micro, Sinclair, and some Z80 machines).  See
  1908	   also {splat}.
  1909	
  1910	   The inability of ASCII text to correctly represent any of the
  1911	   world's other major languages makes the designers' choice of 7 bits
  1912	   look more and more like a serious {misfeature} as the use of
  1913	   international networks continues to increase (see {software
  1914	   rot}).  Hardware and software from the U.S. still tends to embody
  1915	   the assumption that ASCII is the universal character set; this is a
  1916	   a major irritant to people who want to use a character set suited
  1917	   to their own languages.  Perversely, though, efforts to solve this
  1918	   problem by proliferating `national' character sets produce an
  1919	   evolutionary pressure to use a *smaller* subset common to all
  1920	   those in use.
  1921	
  1922	:ASCII art: n. The fine art of drawing diagrams using the ASCII
  1923	   character set (mainly `|', `-', `/', `\', and
  1924	   `+').  Also known as `character graphics' or `ASCII
  1925	   graphics'; see also {boxology}.  Here is a serious example:
  1926	
  1927	
  1928	         o----)||(--+--|<----+   +---------o + D O
  1929	           L  )||(  |        |   |             C U
  1930	         A I  )||(  +-->|-+  |   +-\/\/-+--o -   T
  1931	         C N  )||(        |  |   |      |        P
  1932	           E  )||(  +-->|-+--)---+--)|--+-o      U
  1933	              )||(  |        |          | GND    T
  1934	         o----)||(--+--|<----+----------+     
  1935	
  1936	            A power supply consisting of a full
  1937	            wave rectifier circuit feeding a
  1938	            capacitor input filter circuit
  1939	
  1940	                               Figure 1.
  1941	
  1942	   And here are some very silly examples:
  1943	
  1944	
  1945	       |\/\/\/|     ____/|              ___    |\_/|    ___
  1946	       |      |     \ o.O|   ACK!      /   \_  |` '|  _/   \
  1947	       |      |      =(_)=  THPHTH!   /      \/     \/      \
  1948	       | (o)(o)        U             /                       \
  1949	       C      _)  (__)                \/\/\/\  _____  /\/\/\/
  1950	       | ,___|    (oo)                       \/     \/
  1951	       |   /       \/-------\         U                  (__)
  1952	      /____\        ||     | \    /---V  `v'-            oo )
  1953	     /      \       ||---W||  *  * |--|   || |`.         |_/\
  1954	
  1955	                               Figure 2.
  1956	
  1957	   There is an important subgenre of humorous ASCII art that takes
  1958	   advantage of the names of the various characters to tell a
  1959	   pun-based joke.
  1960	
  1961	     +--------------------------------------------------------+
  1962	     |      ^^^^^^^^^^^^                                      |
  1963	     | ^^^^^^^^^^^            ^^^^^^^^^                       |
  1964	     |                 ^^^^^^^^^^^^^            ^^^^^^^^^^^^^ |
  1965	     |        ^^^^^^^         B       ^^^^^^^^^               |
  1966	     |  ^^^^^^^^^          ^^^            ^^^^^^^^^^^^^^      |
  1967	     +--------------------------------------------------------+
  1968	                  " A Bee in the Carrot Patch "
  1969	
  1970	                               Figure 3.
  1971	
  1972	   Within humorous ASCII art, there is for some reason an entire
  1973	   flourishing subgenre of pictures of silly cows.  Four of these are
  1974	   reproduced in Figure 2; here are three more:
  1975	
  1976	
  1977	              (__)              (__)              (__)
  1978	              (\/)              ($$)              (**)
  1979	       /-------\/        /-------\/        /-------\/
  1980	      / | 666 ||        / |=====||        / |     ||
  1981	     *  ||----||       *  ||----||       *  ||----||
  1982	        ~~    ~~          ~~    ~~          ~~    ~~ 
  1983	     Satanic cow    This cow is a Yuppie   Cow in love
  1984	
  1985	                               Figure 4.
  1986	
  1987	:attoparsec: n. `atto-' is the standard SI prefix for
  1988	   multiplication by 10^(-18).  A parsec (parallax-second) is
  1989	   3.26 light-years; an attoparsec is thus 3.26 * 10^(-18) light
  1990	   years, or about 3.1 cm (thus, 1 attoparsec/{microfortnight}
  1991	   equals about 1 inch/sec).  This unit is reported to be in use
  1992	   (though probably not very seriously) among hackers in the U.K.  See
  1993	   {micro-}.
  1994	
  1995	:autobogotiphobia: /aw'to-boh-got`*-foh'bee-*/ n. See {bogotify}.
  1996	
  1997	:automagically: /aw-toh-maj'i-klee/ or /aw-toh-maj'i-k*l-ee/ adv.
  1998	   Automatically, but in a way that, for some reason (typically
  1999	   because it is too complicated, or too ugly, or perhaps even too
  2000	   trivial), the speaker doesn't feel like explaining to you.  See
  2001	   {magic}.  "The C-INTERCAL compiler generates C, then automagically
  2002	   invokes `cc(1)' to produce an executable."
  2003	
  2004	:avatar: [CMU, Tektronix] n. Syn. {root}, {superuser}.  There
  2005	   are quite a few UNIX machines on which the name of the superuser
  2006	   account is `avatar' rather than `root'.  This quirk was
  2007	   originated by a CMU hacker who disliked the term `superuser',
  2008	   and was propagated through an ex-CMU hacker at Tektronix.
  2009	
  2010	:awk: 1. n. [UNIX techspeak] An interpreted language for massaging
  2011	   text data developed by Alfred Aho, Peter Weinberger, and Brian
  2012	   Kernighan (the name is from their initials).  It is characterized
  2013	   by C-like syntax, a declaration-free approach to variable typing
  2014	   and declarations, associative arrays, and field-oriented text
  2015	   processing.  See also {Perl}.  2. n.  Editing term for an
  2016	   expression awkward to manipulate through normal {regexp}
  2017	   facilities (for example, one containing a {newline}).  3. vt. To
  2018	   process data using `awk(1)'.
  2019	
  2020	= B =
  2021	=====
  2022	
  2023	:back door: n. A hole in the security of a system deliberately left
  2024	   in place by designers or maintainers.  The motivation for this is
  2025	   not always sinister; some operating systems, for example, come out
  2026	   of the box with privileged accounts intended for use by field
  2027	   service technicians or the vendor's maintenance programmers.
  2028	
  2029	   Historically, back doors have often lurked in systems longer than
  2030	   anyone expected or planned, and a few have become widely known.
  2031	   The infamous {RTM} worm of late 1988, for example, used a back door
  2032	   in the {BSD} UNIX `sendmail(8)' utility.
  2033	
  2034	   Ken Thompson's 1983 Turing Award lecture to the ACM revealed the
  2035	   existence of a back door in early UNIX versions that may have
  2036	   qualified as the most fiendishly clever security hack of all time.
  2037	   The C compiler contained code that would recognize when the
  2038	   `login' command was being recompiled and insert some code
  2039	   recognizing a password chosen by Thompson, giving him entry to the
  2040	   system whether or not an account had been created for him.
  2041	
  2042	   Normally such a back door could be removed by removing it from the
  2043	   source code for the compiler and recompiling the compiler.  But to
  2044	   recompile the compiler, you have to *use* the compiler --- so
  2045	   Thompson also arranged that the compiler would *recognize when
  2046	   it was compiling a version of itself*, and insert into the
  2047	   recompiled compiler the code to insert into the recompiled `login'
  2048	   the code to allow Thompson entry --- and, of course, the code to
  2049	   recognize itself and do the whole thing again the next time around!
  2050	   And having done this once, he was then able to recompile the
  2051	   compiler from the original sources, leaving his back door in place
  2052	   and active but with no trace in the sources.
  2053	
  2054	   The talk that revealed this truly moby hack was published as
  2055	   "Reflections on Trusting Trust", `Communications of the
  2056	   ACM 27', 8 (August 1984), pp. 761--763.
  2057	
  2058	   Syn. {trap door}; may also be called a `wormhole'.  See also
  2059	   {iron box}, {cracker}, {worm}, {logic bomb}.
  2060	
  2061	:backbone cabal: n. A group of large-site administrators who pushed
  2062	   through the {Great Renaming} and reined in the chaos of {USENET}
  2063	   during most of the 1980s.  The cabal {mailing list} disbanded in
  2064	   late 1988 after a bitter internal catfight, but the net hardly
  2065	noticed.
  2066	
  2067	:backbone site: n. A key USENET and email site; one that processes
  2068	   a large amount of third-party traffic, especially if it is the home
  2069	   site of any of the regional coordinators for the USENET maps.
  2070	   Notable backbone sites as of early 1991 include uunet and the
  2071	   mail machines at Rutgers University, UC Berkeley, DEC's Western
  2072	   Research Laboratories, Ohio State University, and the University of
  2073	   Texas.  Compare {rib site}, {leaf site}.
  2074	
  2075	:backgammon:: See {bignum}, {moby}, and {pseudoprime}.
  2076	
  2077	:background: n.,adj.,vt.  To do a task `in background' is to do
  2078	   it whenever {foreground} matters are not claiming your undivided
  2079	   attention, and `to background' something means to relegate it to
  2080	   a lower priority.  "For now, we'll just print a list of nodes and
  2081	   links; I'm working on the graph-printing problem in background."
  2082	   Note that this implies ongoing activity but at a reduced level or
  2083	   in spare time, in contrast to mainstream `back burner' (which
  2084	   connotes benign neglect until some future resumption of activity).
  2085	   Some people prefer to use the term for processing that they have
  2086	   queued up for their unconscious minds (a tack that one can often
  2087	   fruitfully take upon encountering an obstacle in creative work).
  2088	   Compare {amp off}, {slopsucker}.
  2089	
  2090	   Technically, a task running in background is detached from the
  2091	   terminal where it was started (and often running at a lower
  2092	   priority); oppose {foreground}.  Nowadays this term is primarily
  2093	   associated with {{UNIX}}, but it appears to have been first used
  2094	   in this sense on OS/360.
  2095	
  2096	:backspace and overstrike: interj. Whoa!  Back up.  Used to suggest
  2097	   that someone just said or did something wrong.  Common among
  2098	   APL programmers.
  2099	
  2100	:backward combatability: /bak'w*rd k*m-bat'*-bil'*-tee/ [from
  2101	   `backward compatibility'] n. A property of hardware or software
  2102	   revisions in which previous protocols, formats, and layouts are
  2103	   discarded in favor of `new and improved' protocols, formats, and
  2104	   layouts.  Occurs usually when making the transition between major
  2105	   releases.  When the change is so drastic that the old formats are
  2106	   not retained in the new version, it is said to be `backward
  2107	   combatable'.  See {flag day}.
  2108	
  2109	:BAD: /B-A-D/ [IBM: acronym, `Broken As Designed'] adj.  Said
  2110	   of a program that is {bogus} because of bad design and misfeatures
  2111	   rather than because of bugginess.  See {working as designed}.
  2112	
  2113	:Bad Thing: [from the 1930 Sellar & Yeatman parody `1066 And
  2114	   All That'] n. Something that can't possibly result in improvement
  2115	   of the subject.  This term is always capitalized, as in "Replacing
  2116	   all of the 9600-baud modems with bicycle couriers would be a Bad
  2117	   Thing".  Oppose {Good Thing}.  British correspondents confirm
  2118	   that {Bad Thing} and {Good Thing} (and prob. therefore {Right
  2119	   Thing} and {Wrong Thing}) come from the book referenced in the
  2120	   etymology, which discusses rulers who were Good Kings but Bad
  2121	   Things.  This has apparently created a mainstream idiom on the
  2122	   British side of the pond.
  2123	
  2124	:bag on the side: n. An extension to an established hack that is
  2125	   supposed to add some functionality to the original.  Usually
  2126	   derogatory, implying that the original was being overextended and
  2127	   should have been thrown away, and the new product is ugly,
  2128	   inelegant, or bloated.  Also v. phrase, `to hang a bag on the side
  2129	   [of]'.  "C++?  That's just a bag on the side of C ...."
  2130	   "They want me to hang a bag on the side of the accounting
  2131	   system."
  2132	
  2133	:bagbiter: /bag'bi:t-*r/ n. 1. Something, such as a program or a
  2134	   computer, that fails to work, or works in a remarkably clumsy
  2135	   manner.  "This text editor won't let me make a file with a line
  2136	   longer than 80 characters!  What a bagbiter!"  2. A person who has
  2137	   caused you some trouble, inadvertently or otherwise, typically by
  2138	   failing to program the computer properly.  Synonyms: {loser},
  2139	   {cretin}, {chomper}.  3. adj. `bagbiting' Having the
  2140	   quality of a bagbiter.  "This bagbiting system won't let me
  2141	   compute the factorial of a negative number."  Compare {losing},
  2142	   {cretinous}, {bletcherous}, `barfucious' (under
  2143	   {barfulous}) and `chomping' (under {chomp}).  4. `bite
  2144	   the bag' vi. To fail in some manner.  "The computer keeps crashing
  2145	   every 5 minutes."  "Yes, the disk controller is really biting the
  2146	   bag."  The original loading of these terms was almost undoubtedly
  2147	   obscene, possibly referring to the scrotum, but in their current
  2148	   usage they have become almost completely sanitized.
  2149	
  2150	   A program called Lexiphage on the old MIT AI PDP-10 would draw on
  2151	   a selected victim's bitmapped terminal the words "THE BAG" in
  2152	   ornate letters, and then a pair of jaws biting pieces of it off.
  2153	   This is the first and to date only known example of a program
  2154	   *intended* to be a bagbiter.
  2155	
  2156	:bamf: /bamf/ 1. [from old X-Men comics] interj. Notional sound
  2157	   made by a person or object teleporting in or out of the hearer's
  2158	   vicinity.  Often used in {virtual reality} (esp. {MUD})
  2159	   electronic {fora} when a character wishes to make a dramatic
  2160	   entrance or exit.  2. The sound of magical transformation, used in
  2161	   virtual reality {fora} like sense 1.  3. [from `Don
  2162	   Washington's Survival Guide'] n. Acronym for `Bad-Ass Mother
  2163	   Fucker', used to refer to one of the handful of nastiest monsters
  2164	   on an LPMUD or other similar MUD.
  2165	
  2166	:banana label: n. The labels often used on the sides of {macrotape}
  2167	   reels, so called because they are shaped roughly like blunt-ended
  2168	   bananas.  This term, like macrotapes themselves, is still current
  2169	   but visibly headed for obsolescence.
  2170	
  2171	:banana problem: n. [from the story of the little girl who said "I
  2172	   know how to spell `banana', but I don't know when to stop"].  Not
  2173	   knowing where or when to bring a production to a close (compare
  2174	   {fencepost error}).  One may say `there is a banana problem' of an
  2175	   algorithm with poorly defined or incorrect termination conditions,
  2176	   or in discussing the evolution of a design that may be succumbing
  2177	   to featuritis (see also {creeping elegance}, {creeping
  2178	   featuritis}).  See item 176 under {HAKMEM}, which describes a
  2179	   banana problem in a {Dissociated Press} implementation.  Also,
  2180	   see {one-banana problem} for a superficially similar but
  2181	   unrelated usage.
  2182	
  2183	:bandwidth: n. 1. Used by hackers in a generalization of its
  2184	   technical meaning as the volume of information per unit time that a
  2185	   computer, person, or transmission medium can handle.  "Those are
  2186	   amazing graphics, but I missed some of the detail --- not enough
  2187	   bandwidth, I guess."  Compare {low-bandwidth}.  2. Attention
  2188	   span.  3. On {USENET}, a measure of network capacity that is
  2189	   often wasted by people complaining about how items posted by others
  2190	   are a waste of bandwidth.
  2191	
  2192	:bang: 1. n. Common spoken name for `!' (ASCII 0100001),
  2193	   especially when used in pronouncing a {bang path} in spoken
  2194	   hackish.  In {elder days} this was considered a CMUish usage,
  2195	   with MIT and Stanford hackers preferring {excl} or {shriek};
  2196	   but the spread of UNIX has carried `bang' with it (esp. via the
  2197	   term {bang path}) and it is now certainly the most common spoken
  2198	   name for `!'.  Note that it is used exclusively for
  2199	   non-emphatic written `!'; one would not say "Congratulations
  2200	   bang" (except possibly for humorous purposes), but if one wanted
  2201	   to specify the exact characters `foo!' one would speak "Eff oh oh
  2202	   bang".  See {shriek}, {{ASCII}}.  2. interj. An exclamation
  2203	   signifying roughly "I have achieved enlightenment!", or "The
  2204	   dynamite has cleared out my brain!"  Often used to acknowledge
  2205	   that one has perpetrated a {thinko} immediately after one has
  2206	   been called on it.
  2207	
  2208	:bang on: vt. To stress-test a piece of hardware or software: "I
  2209	   banged on the new version of the simulator all day yesterday and it
  2210	   didn't crash once.  I guess it is ready for release."  The term
  2211	   {pound on} is synonymous.
  2212	
  2213	:bang path: n. An old-style UUCP electronic-mail address specifying
  2214	   hops to get from some assumed-reachable location to the addressee,
  2215	   so called because each {hop} is signified by a {bang} sign.
  2216	   Thus, for example, the path ...!bigsite!foovax!barbox!me
  2217	   directs people to route their mail to machine bigsite (presumably
  2218	   a well-known location accessible to everybody) and from there
  2219	   through the machine foovax to the account of user me on
  2220	   barbox.
  2221	
  2222	   In the bad old days of not so long ago, before autorouting mailers
  2223	   became commonplace, people often published compound bang addresses
  2224	   using the { } convention (see {glob}) to give paths from
  2225	   *several* big machines, in the hopes that one's correspondent
  2226	   might be able to get mail to one of them reliably (example:
  2227	   ...!{seismo, ut-sally, ihnp4}!rice!beta!gamma!me).  Bang paths
  2228	   of 8 to 10 hops were not uncommon in 1981.  Late-night dial-up
  2229	   UUCP links would cause week-long transmission times.  Bang paths
  2230	   were often selected by both transmission time and reliability, as
  2231	   messages would often get lost.  See {{Internet address}},
  2232	   {network, the}, and {sitename}.
  2233	
  2234	:banner: n. 1. The title page added to printouts by most print
  2235	   spoolers (see {spool}).  Typically includes user or account ID
  2236	   information in very large character-graphics capitals.  Also called
  2237	   a `burst page', because it indicates where to burst (tear apart)
  2238	   fanfold paper to separate one user's printout from the next.  2. A
  2239	   similar printout generated (typically on multiple pages of fan-fold
  2240	   paper) from user-specified text, e.g., by a program such as UNIX's
  2241	   `banner({1,6})'.  3. On interactive software, a first screen
  2242	   containing a logo and/or author credits and/or a copyright notice.
  2243	
  2244	:bar: /bar/ n. 1. The second {metasyntactic variable}, after {foo}
  2245	   and before {baz}.  "Suppose we have two functions: FOO and BAR.
  2246	   FOO calls BAR...."  2. Often appended to {foo} to produce
  2247	   {foobar}.
  2248	
  2249	:bare metal: n. 1. New computer hardware, unadorned with such
  2250	   snares and delusions as an {operating system}, an {HLL}, or
  2251	   even assembler.  Commonly used in the phrase `programming on the
  2252	   bare metal', which refers to the arduous work of {bit bashing}
  2253	   needed to create these basic tools for a new machine.  Real
  2254	   bare-metal programming involves things like building boot proms and
  2255	   BIOS chips, implementing basic monitors used to test device
  2256	   drivers, and writing the assemblers that will be used to write the
  2257	   compiler back ends that will give the new machine a real
  2258	   development environment.  2. `Programming on the bare metal' is
  2259	   also used to describe a style of {hand-hacking} that relies on
  2260	   bit-level peculiarities of a particular hardware design, esp.
  2261	   tricks for speed and space optimization that rely on crocks such as
  2262	   overlapping instructions (or, as in the famous case described in
  2263	   {The Story of Mel, a Real Programmer} (in {appendix A}),
  2264	   interleaving of opcodes on a magnetic drum to minimize fetch delays
  2265	   due to the device's rotational latency).  This sort of thing has
  2266	   become less common as the relative costs of programming time and
  2267	   machine resources have changed, but is still found in heavily
  2268	   constrained environments such as industrial embedded systems.  See
  2269	   {real programmer}.
  2270	
  2271	   In the world of personal computing, bare metal programming
  2272	   (especially in sense 1 but sometimes also in sense 2) is often
  2273	   considered a {Good Thing}, or at least a necessary evil
  2274	   (because these machines have often been sufficiently slow and
  2275	   poorly designed to make it necessary; see {ill-behaved}).
  2276	   There, the term usually refers to bypassing the BIOS or OS
  2277	   interface and writing the application to directly access device
  2278	   registers and machine addresses.  "To get 19.2 kilobaud on the
  2279	   serial port, you need to get down to the bare metal."  People who
  2280	   can do this sort of thing are held in high regard.
  2281	
  2282	:barf: /barf/ [from mainstream slang meaning `vomit']
  2283	   1. interj.  Term of disgust.  This is the closest hackish
  2284	   equivalent of the Val\-speak "gag me with a spoon". (Like, euwww!)
  2285	   See {bletch}.  2. vi. To say "Barf!" or emit some similar
  2286	   expression of disgust.  "I showed him my latest hack and he
  2287	   barfed" means only that he complained about it, not that he
  2288	   literally vomited.  3. vi. To fail to work because of unacceptable
  2289	   input.  May mean to give an error message.  Examples: "The
  2290	   division operation barfs if you try to divide by 0."  (That is,
  2291	   the division operation checks for an attempt to divide by zero, and
  2292	   if one is encountered it causes the operation to fail in some
  2293	   unspecified, but generally obvious, manner.) "The text editor
  2294	   barfs if you try to read in a new file before writing out the old
  2295	   one."  See {choke}, {gag}.  In Commonwealth hackish,
  2296	   `barf' is generally replaced by `puke' or `vom'.  {barf}
  2297	   is sometimes also used as a {metasyntactic variable}, like {foo} or
  2298	   {bar}.
  2299	
  2300	:barfmail: n. Multiple {bounce message}s accumulating to the
  2301	   level of serious annoyance, or worse.  The sort of thing that
  2302	   happens when an inter-network mail gateway goes down or
  2303	   wonky.
  2304	
  2305	:barfulation: /bar`fyoo-lay'sh*n/ interj. Variation of {barf}
  2306	   used around the Stanford area.  An exclamation, expressing disgust.
  2307	   On seeing some particularly bad code one might exclaim,
  2308	   "Barfulation!  Who wrote this, Quux?"
  2309	
  2310	:barfulous: /bar'fyoo-l*s/ adj. (alt. `barfucious',
  2311	   /bar-fyoo-sh*s/) Said of something that would make anyone barf,
  2312	   if only for esthetic reasons.
  2313	
  2314	:barney: n. In Commonwealth hackish, `barney' is to {fred}
  2315	   (sense #1) as {bar} is to {foo}.  That is, people who
  2316	   commonly use `fred' as their first metasyntactic variable will
  2317	   often use `barney' second.  The reference is, of course, to Fred
  2318	   Flintstone and Barney Rubble in the Flintstones cartoons.
  2319	
  2320	:baroque: adj. Feature-encrusted; complex; gaudy; verging on
  2321	   excessive.  Said of hardware or (esp.) software designs, this has
  2322	   many of the connotations of {elephantine} or {monstrosity} but is
  2323	   less extreme and not pejorative in itself.  "Metafont even has 
  2324	   features to introduce random variations to its letterform output.
  2325	   Now *that* is baroque!"  See also {rococo}.
  2326	
  2327	:BartleMUD: /bar'tl-muhd/ n. Any of the MUDs derived from the
  2328	   original MUD game by Richard Bartle and Roy Trubshaw (see
  2329	   {MUD}).  BartleMUDs are noted for their (usually slightly
  2330	   offbeat) humor, dry but friendly syntax, and lack of adjectives in
  2331	   object descriptions, so a player is likely to come across
  2332	   `brand172', for instance (see {brand brand brand}).  Bartle has
  2333	   taken a bad rap in some MUDding circles for supposedly originating
  2334	   this term, but (like the story that MUD is a trademark) this
  2335	   appears to be a myth; he uses `MUD1'.
  2336	
  2337	:BASIC: n. A programming language, originally designed for
  2338	   Dartmouth's experimental timesharing system in the early 1960s,
  2339	   which has since become the leading cause of brain-damage in
  2340	   proto-hackers.  This is another case (like {Pascal}) of the bad
  2341	   things that happen when a language deliberately designed as an
  2342	   educational toy gets taken too seriously.  A novice can write short
  2343	   BASIC programs (on the order of 10--20 lines) very easily; writing
  2344	   anything longer is (a) very painful, and (b) encourages bad habits
  2345	   that will bite him/her later if he/she tries to hack in a real
  2346	   language.  This wouldn't be so bad if historical accidents hadn't
  2347	   made BASIC so common on low-end micros.  As it is, it ruins
  2348	   thousands of potential wizards a year.
  2349	
  2350	:batch: adj. 1. Non-interactive.  Hackers use this somewhat more
  2351	   loosely than the traditional technical definitions justify; in
  2352	   particular, switches on a normally interactive program that prepare
  2353	   it to receive non-interactive command input are often referred to
  2354	   as `batch mode' switches.  A `batch file' is a series of
  2355	   instructions written to be handed to an interactive program running
  2356	   in batch mode.  2. Performance of dreary tasks all at one sitting.
  2357	   "I finally sat down in batch mode and wrote out checks for all
  2358	   those bills; I guess they'll turn the electricity back on next
  2359	   week..." 3. Accumulation of a number of small tasks that can be
  2360	   lumped together for greater efficiency.  "I'm batching up those
  2361	   letters to send sometime"  "I'm batching up bottles to take to the
  2362	   recycling center."
  2363	
  2364	:bathtub curve: n. Common term for the curve (resembling an
  2365	   end-to-end section of one of those claw-footed antique bathtubs)
  2366	   that describes the expected failure rate of electronics with time:
  2367	   initially high, dropping to near 0 for most of the system's
  2368	   lifetime, then rising again as it `tires out'.  See also {burn-in
  2369	   period}, {infant mortality}.
  2370	
  2371	:baud: /bawd/ [simplified from its technical meaning] n. Bits per
  2372	   second.  Hence kilobaud or Kbaud, thousands of bits per second.
  2373	   The technical meaning is `level transitions per second'; this
  2374	   coincides with bps only for two-level modulation with no framing or
  2375	   stop bits.  Most hackers are aware of these nuances but blithely
  2376	   ignore them.
  2377	
  2378	   Histotical note: this was originally a unit of telegraph signalling
  2379	   speed, set at one pulse per second.  It was proposed at the
  2380	   International Telegraph Conference of 1927, and named after J.M.E.
  2381	   Baudot (1845-1903), the French engineer who constructed the first
  2382	   successful teleprinter.
  2383	
  2384	:baud barf: /bawd barf/ n. The garbage one gets on the monitor
  2385	   when using a modem connection with some protocol setting (esp.
  2386	   line speed) incorrect, or when someone picks up a voice extension
  2387	   on the same line, or when really bad line noise disrupts the
  2388	   connection.  Baud barf is not completely {random}, by the way;
  2389	   hackers with a lot of serial-line experience can usually tell
  2390	   whether the device at the other end is expecting a higher or lower
  2391	   speed than the terminal is set to.  *Really* experienced ones
  2392	   can identify particular speeds.
  2393	
  2394	:baz: /baz/ n. 1. The third {metasyntactic variable} "Suppose we
  2395	   have three functions: FOO, BAR, and BAZ.  FOO calls BAR, which
  2396	   calls BAZ...." (See also {fum}) 2. interj. A term of mild
  2397	   annoyance.  In this usage the term is often drawn out for 2 or 3
  2398	   seconds, producing an effect not unlike the bleating of a sheep;
  2399	   /baaaaaaz/.  3. Occasionally appended to {foo} to produce
  2400	   `foobaz'.
  2401	
  2402	   Earlier versions of this lexicon derived `baz' as a Stanford
  2403	   corruption of {bar}.  However, Pete Samson (compiler of the
  2404	   {TMRC} lexicon) reports it was already current when he joined TMRC
  2405	   in 1958.  He says "It came from `Pogo'.  Albert the Alligator,
  2406	   when vexed or outraged, would shout `Bazz Fazz!' or `Rowrbazzle!'
  2407	   The club layout was said to model the (mythical) New England
  2408	   counties of Rowrfolk and Bassex (Rowrbazzle mingled with
  2409	   (Norfolk/Suffolk/Middlesex/Essex)."
  2410	
  2411	:bboard: /bee'bord/ [contraction of `bulletin board'] n.
  2412	   1. Any electronic bulletin board; esp. used of {BBS} systems
  2413	   running on personal micros, less frequently of a USENET
  2414	   {newsgroup} (in fact, use of the term for a newsgroup generally
  2415	   marks one either as a {newbie} fresh in from the BBS world or as
  2416	   a real old-timer predating USENET).  2. At CMU and other colleges
  2417	   with similar facilities, refers to campus-wide electronic bulletin
  2418	   boards.  3. The term `physical bboard' is sometimes used to
  2419	   refer to a old-fashioned, non-electronic cork memo board.  At CMU,
  2420	   it refers to a particular one outside the CS Lounge.
  2421	
  2422	   In either of senses 1 or 2, the term is usually prefixed by the
  2423	   name of the intended board (`the Moonlight Casino bboard' or
  2424	   `market bboard'); however, if the context is clear, the better-read
  2425	   bboards may be referred to by name alone, as in (at CMU) "Don't
  2426	   post for-sale ads on general".
  2427	
  2428	:BBS: /B-B-S/ [abbreviation, `Bulletin Board System'] n. An electronic
  2429	   bulletin board system; that is, a message database where people can
  2430	   log in and leave broadcast messages for others grouped (typically)
  2431	   into {topic group}s.  Thousands of local BBS systems are in
  2432	   operation throughout the U.S., typically run by amateurs for fun
  2433	   out of their homes on MS-DOS boxes with a single modem line each.
  2434	   Fans of USENET and Internet or the big commercial timesharing
  2435	   bboards such as CompuServe and GEnie tend to consider local BBSes
  2436	   the low-rent district of the hacker culture, but they serve a
  2437	   valuable function by knitting together lots of hackers and users in
  2438	   the personal-micro world who would otherwise be unable to exchange
  2439	   code at all.
  2440	
  2441	:beam: [from Star Trek Classic's "Beam me up, Scotty!"] vt. To
  2442	   transfer {softcopy} of a file electronically; most often in
  2443	   combining forms such as `beam me a copy' or `beam that over to
  2444	   his site'.  Compare {blast}, {snarf}, {BLT}.
  2445	
  2446	:beanie key: [Mac users] n. See {command key}.
  2447	
  2448	:beep: n.,v. Syn. {feep}.  This term seems to be preferred among micro
  2449	   hobbyists.
  2450	
  2451	:beige toaster: n. A Macintosh. See {toaster}; compare
  2452	   {Macintrash}, {maggotbox}.
  2453	
  2454	:bells and whistles: [by analogy with the toyboxes on theater
  2455	   organs] n. Features added to a program or system to make it more
  2456	   {flavorful} from a hacker's point of view, without necessarily
  2457	   adding to its utility for its primary function.  Distinguished from
  2458	   {chrome}, which is intended to attract users.  "Now that we've
  2459	   got the basic program working, let's go back and add some bells and
  2460	   whistles."  No one seems to know what distinguishes a bell from a
  2461	   whistle.
  2462	
  2463	:bells, whistles, and gongs: n. A standard elaborated form of
  2464	   {bells and whistles}; typically said with a pronounced and ironic
  2465	   accent on the `gongs'.
  2466	
  2467	:benchmark: [techspeak] n. An inaccurate measure of computer
  2468	   performance.  "In the computer industry, there are three kinds of
  2469	   lies: lies, damn lies, and benchmarks."  Well-known ones include
  2470	   Whetstone, Dhrystone, Rhealstone (see {h}), the Gabriel LISP
  2471	   benchmarks (see {gabriel}), the SPECmark suite, and LINPACK.  See
  2472	   also {machoflops}, {MIPS}, {smoke and mirrors}.
  2473	
  2474	:Berkeley Quality Software: adj. (often abbreviated `BQS') Term used
  2475	   in a pejorative sense to refer to software that was apparently
  2476	   created by rather spaced-out hackers late at night to solve some
  2477	   unique problem.  It usually has nonexistent, incomplete, or
  2478	   incorrect documentation, has been tested on at least two examples,
  2479	   and core dumps when anyone else attempts to use it.  This term was
  2480	   frequently applied to early versions of the `dbx(1)' debugger.
  2481	   See also {Berzerkeley}.
  2482	
  2483	:berklix: /berk'liks/ n.,adj. [contraction of `Berkeley UNIX'] See
  2484	   {BSD}.  Not used at Berkeley itself.  May be more common among
  2485	   {suit}s attempting to sound like cognoscenti than among hackers,
  2486	   who usually just say `BSD'.
  2487	
  2488	:berserking: vi. A {MUD} term meaning to gain points *only*
  2489	   by killing other players and mobiles (non-player characters).
  2490	   Hence, a Berserker-Wizard is a player character that has achieved
  2491	   enough points to become a wizard, but only by killing other
  2492	   characters.  Berserking is sometimes frowned upon because of its
  2493	   inherently antisocial nature, but some MUDs have a `berserker
  2494	   mode' in which a player becomes *permanently* berserk, can
  2495	   never flee from a fight, cannot use magic, gets no score for
  2496	   treasure, but does get double kill points.  "Berserker
  2497	   wizards can seriously damage your elf!"
  2498	
  2499	:Berzerkeley: /b*r-zer'klee/ [from `berserk', via the name of a
  2500	   now-deceased record label] n. Humorous distortion of `Berkeley'
  2501	   used esp. to refer to the practices or products of the
  2502	   {BSD} UNIX hackers.  See {software bloat}, {Missed'em-five},
  2503	   {Berkeley Quality Software}.
  2504	
  2505	   Mainstream use of this term in reference to the cultural and
  2506	   political peculiarities of UC Berkeley as a whole has been reported
  2507	   from as far back as the 1960s.
  2508	
  2509	:beta: /bay't*/, /be't*/ or (Commonwealth) /bee't*/ n. 1. In
  2510	   the {Real World}, software often goes through two stages of
  2511	   testing: Alpha (in-house) and Beta (out-house?).  Software is said
  2512	   to be `in beta'.  2. Anything that is new and experimental is in
  2513	   beta. "His girlfriend is in beta" means that he is still testing
  2514	   for compatibility and reserving judgment.  3. Beta software is
  2515	   notoriously buggy, so `in beta' connotes flakiness.
  2516	
  2517	   Historical note: More formally, to beta-test is to test a
  2518	   pre-release (potentially unreliable) version of a piece of software
  2519	   by making it available to selected customers and users.  This term
  2520	   derives from early 1960s terminology for product cycle checkpoints,
  2521	   first used at IBM but later standard throughout the industry.
  2522	   `Alpha Test' was the unit, module, or component test phase; `Beta
  2523	   Test' was initial system test.  These themselves came from earlier
  2524	   A- and B-tests for hardware.  The A-test was a feasibility and
  2525	   manufacturability evaluation done before any commitment to design
  2526	   and development.  The B-test was a demonstration that the
  2527	   engineering model functioned as specified.  The C-test
  2528	   (corresponding to today's beta) was the B-test performed on early
  2529	   samples of the production design.
  2530	
  2531	:BFI: /B-F-I/ n. See {brute force and ignorance}.  Also
  2532	   encountered in the variants `BFMI', `brute force and
  2533	   *massive* ignorance' and `BFBI' `brute force and bloody
  2534	   ignorance'.
  2535	
  2536	:bible: n. 1. One of a small number of fundamental source books
  2537	   such as {Knuth} and {K&R}.  2. The most detailed and
  2538	   authoritative reference for a particular language, operating
  2539	   system, or other complex software system.
  2540	
  2541	:BiCapitalization: n. The act said to have been performed on
  2542	   trademarks (such as {PostScript}, NeXT, {NeWS}, VisiCalc,
  2543	   FrameMaker, TK!solver, EasyWriter) that have been raised above the
  2544	   ruck of common coinage by nonstandard capitalization.  Too many
  2545	   {marketroid} types think this sort of thing is really cute, even
  2546	   the 2,317th time they do it.  Compare {studlycaps}.
  2547	
  2548	:BIFF: /bif/ [USENET] n. The most famous {pseudo}, and the
  2549	   prototypical {newbie}.  Articles from BIFF are characterized by
  2550	   all uppercase letters sprinkled liberally with bangs, typos,
  2551	   `cute' misspellings (EVRY BUDY LUVS GOOD OLD BIFF CUZ HE"S A
  2552	   K00L DOOD AN HE RITES REEL AWESUM THINGZ IN CAPITULL LETTRS LIKE
  2553	   THIS!!!), use (and often misuse) of fragments of {talk mode}
  2554	   abbreviations, a long {sig block} (sometimes even a {doubled
  2555	   sig}), and unbounded na"ivet'e.  BIFF posts articles using his
  2556	   elder brother's VIC-20.  BIFF's location is a mystery, as his
  2557	   articles appear to come from a variety of sites.  However,
  2558	   {BITNET} seems to be the most frequent origin.  The theory that
  2559	   BIFF is a denizen of BITNET is supported by BIFF's (unfortunately
  2560	   invalid) electronic mail address: BIFF@BIT.NET.
  2561	
  2562	:biff: /bif/ vt. To notify someone of incoming mail.  From the
  2563	   BSD utility `biff(1)', which was in turn named after a
  2564	   friendly golden Labrador who used to chase frisbees in the halls at
  2565	   UCB while 4.2BSD was in development (it had a well-known habit of
  2566	   barking whenever the mailman came).  No relation to
  2567	   {BIFF}.
  2568	
  2569	:Big Gray Wall: n. What faces a {VMS} user searching for
  2570	   documentation.  A full VMS kit comes on a pallet, the documentation
  2571	   taking up around 15 feet of shelf space before the addition of
  2572	   layered products such as compilers, databases, multivendor
  2573	   networking, and programming tools.  Recent (since VMS version 5)
  2574	   DEC documentation comes with gray binders; under VMS version 4 the
  2575	   binders were orange (`big orange wall'), and under version 3 they
  2576	   were blue.  See {VMS}.  Often contracted to `Gray Wall'.
  2577	
  2578	:big iron: n. Large, expensive, ultra-fast computers.  Used generally
  2579	   of {number-crunching} supercomputers such as Crays, but can include
  2580	   more conventional big commercial IBMish mainframes.  Term of
  2581	   approval; compare {heavy metal}, oppose {dinosaur}.
  2582	
  2583	:Big Red Switch: [IBM] n. The power switch on a computer, esp. the
  2584	   `Emergency Pull' switch on an IBM {mainframe} or the power switch
  2585	   on an IBM PC where it really is large and red.  "This !@%$%
  2586	   {bitty box} is hung again; time to hit the Big Red Switch."
  2587	   Sources at IBM report that, in tune with the company's passion for
  2588	   {TLA}s, this is often abbreviated as `BRS' (this has also
  2589	   become established on FidoNet and in the PC {clone} world).  It
  2590	   is alleged that the emergency pull switch on an IBM 360/91 actually
  2591	   fired a non-conducting bolt into the main power feed; the BRSes on
  2592	   more recent machines physically drop a block into place so that
  2593	   they can't be pushed back in.  People get fired for pulling them,
  2594	   especially inappropriately (see also {molly-guard}).  Compare
  2595	   {power cycle}, {three-finger salute}, {120 reset}; see
  2596	   also {scram switch}.
  2597	
  2598	:Big Room, the: n. The extremely large room with the blue ceiling
  2599	   and intensely bright light (during the day) or black ceiling with
  2600	   lots of tiny night-lights (during the night) found outside all
  2601	   computer installations.  "He can't come to the phone right now,
  2602	   he's somewhere out in the Big Room."
  2603	
  2604	:big win: n. Serendipity.  "Yes, those two physicists discovered
  2605	   high-temperature superconductivity in a batch of ceramic that had
  2606	   been prepared incorrectly according to their experimental schedule.
  2607	   Small mistake; big win!" See {win big}.
  2608	
  2609	:big-endian: [From Swift's `Gulliver's Travels' via the famous
  2610	   paper `On Holy Wars and a Plea for Peace' by Danny Cohen,
  2611	   USC/ISI IEN 137, dated April 1, 1980] adj. 1. Describes a computer
  2612	   architecture in which, within a given multi-byte numeric
  2613	   representation, the most significant byte has the lowest address
  2614	   (the word is stored `big-end-first').  Most processors,
  2615	   including the IBM 370 family, the {PDP-10}, the Motorola
  2616	   microprocessor families, and most of the various RISC designs
  2617	   current in mid-1991, are big-endian.  See {little-endian},
  2618	   {middle-endian}, {NUXI problem}.  2. An {{Internet address}}
  2619	   the wrong way round.  Most of the world follows the Internet
  2620	   standard and writes email addresses starting with the name of the
  2621	   computer and ending up with the name of the country.  In the U.K.
  2622	   the Joint Networking Team had decided to do it the other way round
  2623	   before the Internet domain standard was established; e.g.,
  2624	   me@uk.ac.wigan.cs.  Most gateway sites have {ad-hockery} in
  2625	   their mailers to handle this, but can still be confused.  In
  2626	   particular, the address above could be in the U.K. (domain uk)
  2627	   or Czechoslovakia (domain cs).
  2628	
  2629	:bignum: /big'nuhm/ [orig. from MIT MacLISP] n. 1. [techspeak] A
  2630	   multiple-precision computer representation for very large integers.
  2631	   More generally, any very large number.  "Have you ever looked at
  2632	   the United States Budget?  There's bignums for you!"
  2633	   2. [Stanford] In backgammon, large numbers on the dice are called
  2634	   `bignums', especially a roll of double fives or double sixes
  2635	   (compare {moby}, sense 4).  See also {El Camino Bignum}.
  2636	
  2637	   Sense 1 may require some explanation.  Most computer languages
  2638	   provide a kind of data called `integer', but such computer
  2639	   integers are usually very limited in size; usually they must be
  2640	   smaller than than 2^(31) (2,147,483,648) or (on a losing
  2641	   {bitty box}) 2^(15) (32,768).  If you want to work with
  2642	   numbers larger than that, you have to use floating-point numbers,
  2643	   which are usually accurate to only six or seven decimal places.
  2644	   Computer languages that provide bignums can perform exact
  2645	   calculations on very large numbers, such as 1000!  (the factorial
  2646	   of 1000, which is 1000 times 999 times 998 times ... times 2
  2647	   times 1).  For example, this value for 1000!  was computed by the
  2648	   MacLISP system using bignums:
  2649	
  2650	     40238726007709377354370243392300398571937486421071
  2651	     46325437999104299385123986290205920442084869694048
  2652	     00479988610197196058631666872994808558901323829669
  2653	     94459099742450408707375991882362772718873251977950
  2654	     59509952761208749754624970436014182780946464962910
  2655	     56393887437886487337119181045825783647849977012476
  2656	     63288983595573543251318532395846307555740911426241
  2657	     74743493475534286465766116677973966688202912073791
  2658	     43853719588249808126867838374559731746136085379534
  2659	     52422158659320192809087829730843139284440328123155
  2660	     86110369768013573042161687476096758713483120254785
  2661	     89320767169132448426236131412508780208000261683151
  2662	     02734182797770478463586817016436502415369139828126
  2663	     48102130927612448963599287051149649754199093422215
  2664	     66832572080821333186116811553615836546984046708975
  2665	     60290095053761647584772842188967964624494516076535
  2666	     34081989013854424879849599533191017233555566021394
  2667	     50399736280750137837615307127761926849034352625200
  2668	     01588853514733161170210396817592151090778801939317
  2669	     81141945452572238655414610628921879602238389714760
  2670	     88506276862967146674697562911234082439208160153780
  2671	     88989396451826324367161676217916890977991190375403
  2672	     12746222899880051954444142820121873617459926429565
  2673	     81746628302955570299024324153181617210465832036786
  2674	     90611726015878352075151628422554026517048330422614
  2675	     39742869330616908979684825901254583271682264580665
  2676	     26769958652682272807075781391858178889652208164348
  2677	     34482599326604336766017699961283186078838615027946
  2678	     59551311565520360939881806121385586003014356945272
  2679	     24206344631797460594682573103790084024432438465657
  2680	     24501440282188525247093519062092902313649327349756
  2681	     55139587205596542287497740114133469627154228458623
  2682	     77387538230483865688976461927383814900140767310446
  2683	     64025989949022222176590433990188601856652648506179
  2684	     97023561938970178600408118897299183110211712298459
  2685	     01641921068884387121855646124960798722908519296819
  2686	     37238864261483965738229112312502418664935314397013
  2687	     74285319266498753372189406942814341185201580141233
  2688	     44828015051399694290153483077644569099073152433278
  2689	     28826986460278986432113908350621709500259738986355
  2690	     42771967428222487575867657523442202075736305694988
  2691	     25087968928162753848863396909959826280956121450994
  2692	     87170124451646126037902930912088908694202851064018
  2693	     21543994571568059418727489980942547421735824010636
  2694	     77404595741785160829230135358081840096996372524230
  2695	     56085590370062427124341690900415369010593398383577
  2696	     79394109700277534720000000000000000000000000000000
  2697	     00000000000000000000000000000000000000000000000000
  2698	     00000000000000000000000000000000000000000000000000
  2699	     00000000000000000000000000000000000000000000000000
  2700	     00000000000000000000000000000000000000000000000000
  2701	     000000000000000000.
  2702	
  2703	:bigot: n. A person who is religiously attached to a particular
  2704	   computer, language, operating system, editor, or other tool (see
  2705	   {religious issues}).  Usually found with a specifier; thus,
  2706	   `cray bigot', `ITS bigot', `APL bigot', `VMS bigot',
  2707	   `Berkeley bigot'.  True bigots can be distinguished from mere
  2708	   partisans or zealots by the fact that they refuse to learn
  2709	   alternatives even when the march of time and/or technology is
  2710	   threatening to obsolete the favored tool.  It is said "You can
  2711	   tell a bigot, but you can't tell him much."  Compare
  2712	   {weenie}.
  2713	
  2714	:bit: [from the mainstream meaning and `Binary digIT'] n.
  2715	   1. [techspeak] The unit of information; the amount of information
  2716	   obtained by asking a yes-or-no question for which the two outcomes
  2717	   are equally probable.  2. [techspeak] A computational quantity that
  2718	   can take on one of two values, such as true and false or 0 and 1.
  2719	   3. A mental flag: a reminder that something should be done
  2720	   eventually.  "I have a bit set for you."  (I haven't seen you for
  2721	   a while, and I'm supposed to tell or ask you something.)  4. More
  2722	   generally, a (possibly incorrect) mental state of belief.  "I have
  2723	   a bit set that says that you were the last guy to hack on EMACS."
  2724	   (Meaning "I think you were the last guy to hack on EMACS, and what
  2725	   I am about to say is predicated on this, so please stop me if this
  2726	   isn't true.")
  2727	
  2728	   "I just need one bit from you" is a polite way of indicating that
  2729	   you intend only a short interruption for a question that can
  2730	   presumably be answered yes or no.
  2731	
  2732	   A bit is said to be `set' if its value is true or 1, and
  2733	   `reset' or `clear' if its value is false or 0.  One speaks of
  2734	   setting and clearing bits.  To {toggle} or `invert' a bit is
  2735	   to change it, either from 0 to 1 or from 1 to 0.  See also
  2736	   {flag}, {trit}, {mode bit}.
  2737	
  2738	   The term `bit' first appeared in print in the computer-science
  2739	   sense in 1949, and seems to have been coined by early computer
  2740	   scientist John Tukey.  Tukey records that it evolved over a lunch
  2741	   table as a handier alternative to `bigit' or `binit'.
  2742	
  2743	:bit bang: n. Transmission of data on a serial line, when
  2744	   accomplished by rapidly tweaking a single output bit at the
  2745	   appropriate times.  The technique is a simple
  2746	   loop with eight OUT and SHIFT instruction pairs for each byte.
  2747	   Input is more interesting.  And full duplex (doing input and output
  2748	   at the same time) is one way to separate the real hackers from the
  2749	   {wannabee}s.
  2750	
  2751	   Bit bang was used on certain early models of Prime computers,
  2752	   presumably when UARTs were too expensive, and on archaic Z80 micros
  2753	   with a Zilog PIO but no SIO.  In an interesting instance of the
  2754	   {cycle of reincarnation}, this technique is now (1991) coming
  2755	   back into use on some RISC architectures because it consumes such
  2756	   an infinitesimal part of the processor that it actually makes sense
  2757	   not to have a UART.
  2758	
  2759	:bit bashing: n. (alt. `bit diddling' or {bit twiddling}) Term
  2760	   used to describe any of several kinds of low-level programming
  2761	   characterized by manipulation of {bit}, {flag}, {nybble},
  2762	   and other smaller-than-character-sized pieces of data; these
  2763	   include low-level device control, encryption algorithms, checksum
  2764	   and error-correcting codes, hash functions, some flavors of
  2765	   graphics programming (see {bitblt}), and assembler/compiler code
  2766	   generation.  May connote either tedium or a real technical
  2767	   challenge (more usually the former).  "The command decoding for
  2768	   the new tape driver looks pretty solid but the bit-bashing for the
  2769	   control registers still has bugs."  See also {bit bang},
  2770	   {mode bit}.
  2771	
  2772	:bit bucket: n. 1. The universal data sink (originally, the
  2773	   mythical receptacle used to catch bits when they fall off the end
  2774	   of a register during a shift instruction).  Discarded, lost, or
  2775	   destroyed data is said to have `gone to the bit bucket'.  On
  2776	   {{UNIX}}, often used for {/dev/null}.  Sometimes amplified as
  2777	   `the Great Bit Bucket in the Sky'.  2. The place where all lost
  2778	   mail and news messages eventually go.  The selection is performed
  2779	   according to {Finagle's Law}; important mail is much more likely
  2780	   to end up in the bit bucket than junk mail, which has an almost
  2781	   100% probability of getting delivered.  Routing to the bit bucket
  2782	   is automatically performed by mail-transfer agents, news systems,
  2783	   and the lower layers of the network.  3. The ideal location for all
  2784	   unwanted mail responses: "Flames about this article to the bit
  2785	   bucket."  Such a request is guaranteed to overflow one's mailbox
  2786	   with flames.  4. Excuse for all mail that has not been sent.  "I
  2787	   mailed you those figures last week; they must have ended in the bit
  2788	   bucket."  Compare {black hole}.
  2789	
  2790	   This term is used purely in jest.  It is based on the fanciful
  2791	   notion that bits are objects that are not destroyed but only
  2792	   misplaced.  This appears to have been a mutation of an earlier term
  2793	   `bit box', about which the same legend was current; old-time
  2794	   hackers also report that trainees used to be told that when the CPU
  2795	   stored bits into memory it was actually pulling them `out of the
  2796	   bit box'.  See also {chad box}.
  2797	
  2798	   Another variant of this legend has it that, as a consequence of the
  2799	   `parity preservation law', the number of 1 bits that go to the bit
  2800	   bucket must equal the number of 0 bits.  Any imbalance results in
  2801	   bits filling up the bit bucket.  A qualified computer technician
  2802	   can empty a full bit bucket as part of scheduled maintenance.
  2803	
  2804	:bit decay: n. See {bit rot}.  People with a physics background
  2805	   tend to prefer this one for the analogy with particle decay.  See
  2806	   also {computron}, {quantum bogodynamics}.
  2807	
  2808	:bit rot: n. Also {bit decay}.  Hypothetical disease the existence
  2809	   of which has been deduced from the observation that unused programs
  2810	   or features will often stop working after sufficient time has
  2811	   passed, even if `nothing has changed'.  The theory explains that
  2812	   bits decay as if they were radioactive.  As time passes, the
  2813	   contents of a file or the code in a program will become
  2814	   increasingly garbled.
  2815	
  2816	   There actually are physical processes that produce such effects
  2817	   (alpha particles generated by trace radionuclides in ceramic chip
  2818	   packages, for example, can change the contents of a computer memory
  2819	   unpredictably, and various kinds of subtle media failures can
  2820	   corrupt files in mass storage), but they are quite rare (and
  2821	   computers are built with error-detecting circuitry to compensate
  2822	   for them).  The notion long favored among hackers that cosmic
  2823	   rays are among the causes of such events turns out to be a myth;
  2824	   see the {cosmic rays} entry for details.
  2825	
  2826	   The term {software rot} is almost synonymous.  Software rot is
  2827	   the effect, bit rot the notional cause.
  2828	
  2829	:bit twiddling: n. 1. (pejorative) An exercise in tuning (see
  2830	   {tune}) in which incredible amounts of time and effort go to
  2831	   produce little noticeable improvement, often with the result that
  2832	   the code has become incomprehensible.  2. Aimless small
  2833	   modification to a program, esp. for some pointless goal.
  2834	   3. Approx. syn. for {bit bashing}; esp. used for the act of
  2835	   frobbing the device control register of a peripheral in an attempt
  2836	   to get it back to a known state.
  2837	
  2838	:bit-paired keyboard: n. obs. (alt. `bit-shift keyboard') A
  2839	   non-standard keyboard layout that seems to have originated with the
  2840	   Teletype ASR-33 and remained common for several years on early
  2841	   computer equipment.  The ASR-33 was a mechanical device (see
  2842	   {EOU}), so the only way to generate the character codes from
  2843	   keystrokes was by some physical linkage.  The design of the ASR-33
  2844	   assigned each character key a basic pattern that could be modified
  2845	   by flipping bits if the SHIFT or the CTRL key was pressed.  In
  2846	   order to avoid making the thing more of a Rube Goldberg kluge than
  2847	   it already was, the design had to group characters that shared the
  2848	   same basic bit pattern on one key.
  2849	
  2850	   Looking at the ASCII chart, we find:
  2851	
  2852	     high  low bits
  2853	     bits  0000 0001 0010 0011 0100 0101 0110 0111 1000 1001
  2854	      010        !    "    #    $    %    &    '    (    )
  2855	      011   0    1    2    3    4    5    6    7    8    9
  2856	
  2857	   This is why the characters !"#$%&'() appear where they do on a
  2858	   Teletype (thankfully, they didn't use shift-0 for space).  This was
  2859	   *not* the weirdest variant of the {QWERTY} layout widely
  2860	   seen, by the way; that prize should probably go to one of several
  2861	   (differing) arrangements on IBM's even clunkier 026 and 029 card
  2862	   punches.
  2863	
  2864	   When electronic terminals became popular, in the early 1970s, there
  2865	   was no agreement in the industry over how the keyboards should be
  2866	   laid out.  Some vendors opted to emulate the Teletype keyboard,
  2867	   while others used the flexibility of electronic circuitry to make
  2868	   their product look like an office typewriter.  These alternatives
  2869	   became known as `bit-paired' and `typewriter-paired' keyboards.  To
  2870	   a hacker, the bit-paired keyboard seemed far more logical --- and
  2871	   because most hackers in those days had never learned to touch-type,
  2872	   there was little pressure from the pioneering users to adapt
  2873	   keyboards to the typewriter standard.
  2874	
  2875	   The doom of the bit-paired keyboard was the large-scale
  2876	   introduction of the computer terminal into the normal office
  2877	   environment, where out-and-out technophobes were expected to use
  2878	   the equipment.  The `typewriter-paired' standard became universal,
  2879	   `bit-paired' hardware was quickly junked or relegated to dusty
  2880	   corners, and both terms passed into disuse.
  2881	
  2882	:bitblt: /bit'blit/ n. [from {BLT}, q.v.] 1. Any of a family
  2883	   of closely related algorithms for moving and copying rectangles of
  2884	   bits between main and display memory on a bit-mapped device, or
  2885	   between two areas of either main or display memory (the requirement
  2886	   to do the {Right Thing} in the case of overlapping source and
  2887	   destination rectangles is what makes BitBlt tricky).  2. Synonym
  2888	   for {blit} or {BLT}.  Both uses are borderline techspeak.
  2889	
  2890	:BITNET: /bit'net/ [acronym: Because It's Time NETwork] n.
  2891	   Everybody's least favorite piece of the network (see {network,
  2892	   the}).  The BITNET hosts are a collection of IBM dinosaurs and
  2893	   VAXen (the latter with lobotomized comm hardware) that communicate
  2894	   using 80-character {{EBCDIC}} card images (see {eighty-column
  2895	   mind}); thus, they tend to mangle the headers and text of
  2896	   third-party traffic from the rest of the ASCII/RFC-822 world with
  2897	   annoying regularity.  BITNET is also notorious as the apparent home
  2898	   of {BIFF}.
  2899	
  2900	:bits: n.pl. 1. Information.  Examples: "I need some bits about file
  2901	   formats."  ("I need to know about file formats.")  Compare {core
  2902	   dump}, sense 4.  2. Machine-readable representation of a document,
  2903	   specifically as contrasted with paper:  "I have only a photocopy
  2904	   of the Jargon File; does anyone know where I can get the bits?".
  2905	   See {softcopy}, {source of all good bits} See also {bit}.
  2906	
  2907	:bitty box: /bit'ee boks/ n. 1. A computer sufficiently small,
  2908	   primitive, or incapable as to cause a hacker acute claustrophobia
  2909	   at the thought of developing software on or for it.  Especially
  2910	   used of small, obsolescent, single-tasking-only personal machines
  2911	   such as the Atari 800, Osborne, Sinclair, VIC-20, TRS-80, or
  2912	   IBM PC.  2. [Pejorative] More generally, the opposite of `real
  2913	   computer' (see {Get a real computer!}).  See also {mess-dos},
  2914	   {toaster}, and {toy}.
  2915	
  2916	:bixie: /bik'see/ n. Variant {emoticon}s used on BIX (the Byte
  2917	   Information eXchange).  The {smiley} bixie is <@_@>, apparently
  2918	   intending to represent two cartoon eyes and a mouth.  A few others
  2919	   have been reported.
  2920	
  2921	:black art: n. A collection of arcane, unpublished, and (by
  2922	   implication) mostly ad-hoc techniques developed for a particular
  2923	   application or systems area (compare {black magic}).  VLSI design
  2924	   and compiler code optimization were (in their beginnings)
  2925	   considered classic examples of black art; as theory developed they
  2926	   became {deep magic}, and once standard textbooks had been written,
  2927	   became merely {heavy wizardry}.  The huge proliferation of formal
  2928	   and informal channels for spreading around new computer-related
  2929	   technologies during the last twenty years has made both the term
  2930	   `black art' and what it describes less common than formerly.  See
  2931	   also {voodoo programming}.
  2932	
  2933	:black hole: n. When a piece of email or netnews disappears
  2934	   mysteriously between its origin and destination sites (that is,
  2935	   without returning a {bounce message}) it is commonly said to have
  2936	   `fallen into a black hole'.  "I think there's a black hole at
  2937	   foovax!" conveys suspicion that site foovax has been dropping
  2938	   a lot of stuff on the floor lately (see {drop on the floor}).
  2939	   The implied metaphor of email as interstellar travel is interesting
  2940	   in itself.  Compare {bit bucket}.
  2941	
  2942	:black magic: n. A technique that works, though nobody really
  2943	   understands why.  More obscure than {voodoo programming}, which
  2944	   may be done by cookbook.  Compare also {black art}, {deep
  2945	   magic}, and {magic number} (sense 2).
  2946	
  2947	:blargh: /blarg/ [MIT] n. The opposite of {ping}, sense 5; an
  2948	   exclamation indicating that one has absorbed or is emitting a
  2949	   quantum of unhappiness.  Less common than {ping}.
  2950	
  2951	:blast: 1. vt.,n. Synonym for {BLT}, used esp. for large data
  2952	   sends over a network or comm line.  Opposite of {snarf}.  Usage:
  2953	   uncommon.  The variant `blat' has been reported.  2. vt.
  2954	   [HP/Apollo] Synonymous with {nuke} (sense 3).  Sometimes the
  2955	   message `Unable to kill all processes.  Blast them (y/n)?' would
  2956	   appear in the command window upon logout.
  2957	
  2958	:blat: n. 1. Syn. {blast}, sense 1.  2. See {thud}.
  2959	
  2960	:bletch: /blech/ [from Yiddish/German `brechen', to vomit, poss.
  2961	   via comic-strip exclamation `blech'] interj.  Term of disgust.
  2962	   Often used in "Ugh, bletch".  Compare {barf}.
  2963	
  2964	:bletcherous: /blech'*-r*s/ adj. Disgusting in design or function;
  2965	   esthetically unappealing.  This word is seldom used of people.
  2966	   "This keyboard is bletcherous!" (Perhaps the keys don't work very
  2967	   well, or are misplaced.)  See {losing}, {cretinous},
  2968	   {bagbiter}, {bogus}, and {random}.  The term {bletcherous}
  2969	   applies to the esthetics of the thing so described; similarly for
  2970	   {cretinous}.  By contrast, something that is `losing' or
  2971	   `bagbiting' may be failing to meet objective criteria.  See also
  2972	   {bogus} and {random}, which have richer and wider shades of
  2973	   meaning than any of the above.
  2974	
  2975	:blinkenlights: /blink'*n-li:tz/ n. Front-panel diagnostic lights
  2976	   on a computer, esp. a {dinosaur}.  Derives from the last word
  2977	   of the famous blackletter-Gothic sign in mangled pseudo-German that
  2978	   once graced about half the computer rooms in the English-speaking
  2979	   world.  One version ran in its entirety as follows:
  2980	
  2981	                   ACHTUNG!  ALLES LOOKENSPEEPERS!  Das
  2982	     computermachine ist nicht fuer gefingerpoken und mittengrabben.
  2983	     Ist easy schnappen der springenwerk, blowenfusen und poppencorken
  2984	     mit spitzensparken.  Ist nicht fuer gewerken bei das dumpkopfen.
  2985	     Das rubbernecken sichtseeren keepen das cotten-pickenen hans in das
  2986	     pockets muss; relaxen und watchen das blinkenlichten.
  2987	
  2988	
  2989	   This silliness dates back at least as far as 1959 at Stanford
  2990	   University and had already gone international by the early 1960s,
  2991	   when it was reported at London University's ATLAS computing site.
  2992	   There are several variants of it in circulation, some of which
  2993	   actually do end with the word `blinkenlights'.
  2994	
  2995	   In an amusing example of turnabout-is-fair-play, German hackers
  2996	   have developed their own versions of the blinkenlights poster in
  2997	   fractured English, one of which is reproduced here:
  2998	
  2999	                               ATTENTION
  3000	        This room is fullfilled mit special electronische equippment.
  3001	        Fingergrabbing and pressing the cnoeppkes from the computers is
  3002	        allowed for die experts only!  So all the "lefthanders" stay away
  3003	        and do not disturben the brainstorming von here working
  3004	        intelligencies.  Otherwise you will be out thrown and kicked
  3005	        anderswhere!  Also: please keep still and only watchen astaunished
  3006	        the blinkenlights.
  3007	
  3008	   See also {geef}.
  3009	
  3010	:blit: /blit/ vt. 1. To copy a large array of bits from one part
  3011	   of a computer's memory to another part, particularly when the
  3012	   memory is being used to determine what is shown on a display
  3013	   screen.  "The storage allocator picks through the table and copies
  3014	   the good parts up into high memory, and then blits it all back
  3015	   down again."  See {bitblt}, {BLT}, {dd}, {cat},
  3016	   {blast}, {snarf}.  More generally, to perform some operation
  3017	   (such as toggling) on a large array of bits while moving them.
  3018	   2. All-capitalized as `BLIT': an early experimental bit-mapped
  3019	   terminal designed by Rob Pike at Bell Labs, later commercialized as
  3020	   the AT&T 5620.  (The folk etymology from `Bell Labs Intelligent
  3021	   Terminal' is incorrect.)
  3022	
  3023	:blitter: /blit'r/ n. A special-purpose chip or hardware system
  3024	   built to perform {blit} operations, esp. used for fast
  3025	   implementation of bit-mapped graphics.  The Commodore Amiga and a
  3026	   few other micros have these, but in 1991 the trend is away from
  3027	   them (however, see {cycle of reincarnation}).  Syn. {raster
  3028	   blaster}.
  3029	
  3030	:blivet: /bliv'*t/ [allegedly from a World War II military term
  3031	   meaning "ten pounds of manure in a five-pound bag"] n. 1. An
  3032	   intractable problem.  2. A crucial piece of hardware that can't be
  3033	   fixed or replaced if it breaks.  3. A tool that has been hacked
  3034	   over by so many incompetent programmers that it has become an
  3035	   unmaintainable tissue of hacks.  4. An out-of-control but
  3036	   unkillable development effort.  5. An embarrassing bug that pops up
  3037	   during a customer demo.
  3038	
  3039	   This term has other meanings in other technical cultures; among
  3040	   experimental physicists and hardware engineers of various kinds it
  3041	   seems to mean any random object of unknown purpose (similar to
  3042	   hackish use of {frob}).  It has also been used to describe an
  3043	   amusing trick-the-eye drawing resembling a three-pronged fork that
  3044	   appears to depict a three-dimensional object until one realizes
  3045	   that the parts fit together in an impossible way.
  3046	
  3047	:BLOB: [acronym, Binary Large OBject] n. Used by database people to
  3048	   refer to any random large block of bits which needs to be stored in
  3049	   a database, such as a picture or sound file.  The essential point
  3050	   about a BLOB is that it's an object you can't interpret within the
  3051	   database itself.
  3052	
  3053	:block: [from process scheduling terminology in OS theory] 1. vi.
  3054	   To delay or sit idle while waiting for something.  "We're blocking
  3055	   until everyone gets here."  Compare {busy-wait}.  2. `block
  3056	   on' vt. To block, waiting for (something).  "Lunch is blocked on
  3057	   Phil's arrival."
  3058	
  3059	:block transfer computations: n. From the television series
  3060	   "Dr. Who", in which it referred to computations so fiendishly
  3061	   subtle and complex that they could not be performed by machines.
  3062	   Used to refer to any task that should be expressible as an
  3063	   algorithm in theory, but isn't.
  3064	
  3065	:blow an EPROM: /bloh *n ee'prom/ v. (alt. `blast an EPROM',
  3066	   `burn an EPROM') To program a read-only memory, e.g. for use
  3067	   with an embedded system.  This term arises because the programming
  3068	   process for the Programmable Read-Only Memories (PROMs) that
  3069	   preceded present-day Erasable Programmable Read-Only Memories
  3070	   (EPROMs) involved intentionally blowing tiny electrical fuses on
  3071	   the chip.  Thus, one was said to `blow' (or `blast') a PROM, and
  3072	   the terminology carried over even though the write process on
  3073	   EPROMs is nondestructive.
  3074	
  3075	:blow away: vt. To remove (files and directories) from permanent
  3076	   storage, generally by accident.  "He reformatted the wrong
  3077	   partition and blew away last night's netnews."  Oppose {nuke}.
  3078	
  3079	:blow out: vi. Of software, to fail spectacularly; almost as
  3080	   serious as {crash and burn}.  See {blow past}, {blow up},
  3081	   {die horribly}.
  3082	
  3083	:blow past: vt. To {blow out} despite a safeguard.  "The server blew
  3084	   past the 5K reserve buffer."
  3085	
  3086	:blow up: vi. 1. [scientific computation] To become unstable.  Suggests
  3087	   that the computation is diverging so rapidly that it will soon
  3088	   overflow or at least go {nonlinear}.  2.  Syn. {blow out}.
  3089	
  3090	:BLT: /B-L-T/, /bl*t/ or (rarely) /belt/ n.,vt. Synonym for
  3091	   {blit}.  This is the original form of {blit} and the ancestor
  3092	   of {bitblt}.  It referred to any large bit-field copy or move
  3093	   operation (one resource-intensive memory-shuffling operation done
  3094	   on pre-paged versions of ITS, WAITS, and TOPS-10 was sardonically
  3095	   referred to as `The Big BLT').  The jargon usage has outlasted the
  3096	   {PDP-10} BLock Transfer instruction from which {BLT} derives;
  3097	   nowadays, the assembler mnemonic {BLT} almost always means
  3098	   `Branch if Less Than zero'.
  3099	
  3100	:Blue Book: n. 1. Informal name for one of the three standard
  3101	   references on the page-layout and graphics-control language
  3102	   {PostScript} (`PostScript Language Tutorial and Cookbook',
  3103	   Adobe Systems, Addison-Wesley 1985, QA76.73.P67P68, ISBN
  3104	   0-201-10179-3); the other two official guides are known as the
  3105	   {Green Book}, the {Red Book}, and the {White Book} (sense
  3106	   2).  2. Informal name for one of the three standard references on
  3107	   Smalltalk: `Smalltalk-80: The Language and its
  3108	   Implementation', David Robson, Addison-Wesley 1983, QA76.8.S635G64,
  3109	   ISBN 0-201-11371-63 (this is also associated with green and red
  3110	   books).  3. Any of the 1988 standards issued by the CCITT's
  3111	   ninth plenary assembly.  Until now, they have changed color each
  3112	   review cycle (1984 was {Red Book}, 1992 would be {Green
  3113	   Book}); however, it is rumored that this convention is going to be
  3114	   dropped before 1992.  These include, among other things, the
  3115	   X.400 email spec and the Group 1 through 4 fax standards.  See also
  3116	   {{book titles}}.
  3117	
  3118	:Blue Glue: [IBM] n. IBM's SNA (Systems Network Architecture), an
  3119	   incredibly {losing} and {bletcherous} communications protocol
  3120	   widely favored at commercial shops that don't know any better.  The
  3121	   official IBM definition is "that which binds blue boxes
  3122	   together."  See {fear and loathing}.  It may not be irrelevant
  3123	   that {Blue Glue} is the trade name of a 3M product that is
  3124	   commonly used to hold down the carpet squares to the removable
  3125	   panel floors common in {dinosaur pen}s.  A correspondent at
  3126	   U. Minn. reports that the CS department there has about 80 bottles
  3127	   of the stuff hanging about, so they often refer to any messy work
  3128	   to be done as `using the blue glue'.
  3129	
  3130	:blue goo: n. Term for `police' {nanobot}s intended to prevent
  3131	   {gray goo}, denature hazardous waste, destroy pollution, put
  3132	   ozone back into the stratosphere, prevent halitosis, and promote
  3133	   truth, justice, and the American way, etc.  See
  3134	   {{nanotechnology}}.
  3135	
  3136	:blue wire: [IBM] n. Patch wires added to circuit boards at the factory to
  3137	   correct design or fabrication problems.  This may be necessary if
  3138	   there hasn't been time to design and qualify another board version.
  3139	   Compare {purple wire}, {red wire}, {yellow wire}.
  3140	
  3141	:blurgle: /bler'gl/ [Great Britain] n. Spoken {metasyntactic
  3142	   variable}, to indicate some text which is obvious from context, or
  3143	   which is already known. If several words are to be replaced,
  3144	   blurgle may well be doubled or trebled. "To look for something in
  3145	   several files use `grep string blurgle blurgle'."  In each case,
  3146	   "blurgle blurgle" would be understood to be replaced by the file
  3147	   you wished to search.  Compare {mumble}, sense 6.
  3148	
  3149	:BNF: /B-N-F/ n. 1. [techspeak] Acronym for `Backus-Naur Form', a
  3150	   metasyntactic notation used to specify the syntax of programming
  3151	   languages, command sets, and the like.  Widely used for language
  3152	   descriptions but seldom documented anywhere, so that it must
  3153	   usually be learned by osmosis from other hackers.  Consider this
  3154	   BNF for a U.S. postal address:
  3155	
  3156	      <postal-address> ::= <name-part> <street-address> <zip-part>
  3157	
  3158	      <personal-part> ::= <name> | <initial> "."
  3159	
  3160	      <name-part> ::= <personal-part> <last-name> [<jr-part>] <EOL>
  3161	                    | <personal-part> <name-part>
  3162	
  3163	      <street-address> ::= [<apt>] <house-num> <street-name> <EOL>
  3164	
  3165	      <zip-part> ::= <town-name> "," <state-code> <ZIP-code> <EOL>
  3166	
  3167	   This translates into English as: "A postal-address consists of a
  3168	   name-part, followed by a street-address part, followed by a
  3169	   zip-code part.  A personal-part consists of either a first name or
  3170	   an initial followed by a dot.  A name-part consists of either: a
  3171	   personal-part followed by a last name followed by an optional
  3172	   `jr-part' (Jr., Sr., or dynastic number) and end-of-line, or a
  3173	   personal part followed by a name part (this rule illustrates the
  3174	   use of recursion in BNFs, covering the case of people who use
  3175	   multiple first and middle names and/or initials).  A street address
  3176	   consists of an optional apartment specifier, followed by a street
  3177	   number, followed by a street name.  A zip-part consists of a
  3178	   town-name, followed by a comma, followed by a state code, followed
  3179	   by a ZIP-code followed by an end-of-line."  Note that many things
  3180	   (such as the format of a personal-part, apartment specifier, or
  3181	   ZIP-code) are left unspecified.  These are presumed to be obvious
  3182	   from context or detailed somewhere nearby.  See also {parse}.
  3183	   2. The term is also used loosely for any number of variants and
  3184	   extensions, possibly containing some or all of the {regexp}
  3185	   wildcards such as `*' or `+'.  In fact the example above
  3186	   isn't the pure form invented for the Algol-60 report; it uses
  3187	   `[]', which was introduced a few years later in IBM's PL/I
  3188	   definition but is now universally recognized.  3. In
  3189	   {{science-fiction fandom}}, BNF means `Big-Name Fan'
  3190	   (someone famous or notorious).  Years ago a fan started handing out
  3191	   black-on-green BNF buttons at SF conventions; this confused the
  3192	   hacker contingent terribly.
  3193	
  3194	:boa: [IBM] n. Any one of the fat cables that lurk under the floor
  3195	   in a {dinosaur pen}.  Possibly so called because they display a
  3196	   ferocious life of their own when you try to lay them straight and
  3197	   flat after they have been coiled for some time.  It is rumored
  3198	   within IBM that channel cables for the 370 are limited to 200 feet
  3199	   because beyond that length the boas get dangerous --- and it is
  3200	   worth noting that one of the major cable makers uses the trademark
  3201	   `Anaconda'.
  3202	
  3203	:board: n. 1. In-context synonym for {bboard}; sometimes used
  3204	   even for USENET newsgroups.  2. An electronic circuit board
  3205	   (compare {card}).
  3206	
  3207	:boat anchor: n. 1. Like {doorstop} but more severe; implies that
  3208	   the offending hardware is irreversibly dead or useless.  "That was
  3209	   a working motherboard once.  One lightning strike later, instant
  3210	   boat anchor!"  2. A person who just takes up space.
  3211	
  3212	:BOF: /B-O-F/ or /bof/ n. Abbreviation for the phrase "Birds
  3213	   Of a Feather" (flocking together), an informal discussion group
  3214	   and/or bull session scheduled on a conference program.  It is not
  3215	   clear where or when this term originated, but it is now associated
  3216	   with the USENIX conferences for UNIX techies and was already
  3217	   established there by 1984.  It was used earlier than that at DECUS
  3218	   conferences, and is reported to have been common at SHARE meetings
  3219	   as far back as the early 1960s.
  3220	
  3221	:bogo-sort: /boh`goh-sort'/ n. (var. `stupid-sort') The
  3222	   archetypical perversely awful algorithm (as opposed to {bubble
  3223	   sort}, which is merely the generic *bad* algorithm).
  3224	   Bogo-sort is equivalent to repeatedly throwing a deck of cards in
  3225	   the air, picking them up at random, and then testing whether they
  3226	   are in order.  It serves as a sort of canonical example of
  3227	   awfulness.  Looking at a program and seeing a dumb algorithm, one
  3228	   might say "Oh, I see, this program uses bogo-sort."  Compare
  3229	   {bogus}, {brute force}.
  3230	
  3231	:bogometer: /boh-gom'-*t-er/ n. See {bogosity}.  Compare the
  3232	   `wankometer' described in the {wank} entry; see also
  3233	   {bogus}.
  3234	
  3235	:bogon: /boh'gon/ [by analogy with proton/electron/neutron, but
  3236	   doubtless reinforced after 1980 by the similarity to Douglas
  3237	   Adams's `Vogons'; see the Bibliography in {appendix C}] n.
  3238	   1. The elementary particle of bogosity (see {quantum
  3239	   bogodynamics}).  For instance, "the Ethernet is emitting bogons
  3240	   again" means that it is broken or acting in an erratic or bogus
  3241	   fashion.  2. A query packet sent from a TCP/IP domain resolver to a
  3242	   root server, having the reply bit set instead of the query bit.
  3243	   3. Any bogus or incorrectly formed packet sent on a network.  4. By
  3244	   synecdoche, used to refer to any bogus thing, as in "I'd like to
  3245	   go to lunch with you but I've got to go to the weekly staff
  3246	   bogon".  5. A person who is bogus or who says bogus things.  This
  3247	   was historically the original usage, but has been overtaken by its
  3248	   derivative senses 1--4.  See also {bogosity}, {bogus};
  3249	   compare {psyton}, {fat electrons}, {magic smoke}.
  3250	
  3251	   The bogon has become the type case for a whole bestiary of nonce
  3252	   particle names, including the `clutron' or `cluon' (indivisible
  3253	   particle of cluefulness, obviously the antiparticle of the bogon)
  3254	   and the futon (elementary particle of {randomness}).  These are
  3255	   not so much live usages in themselves as examples of a live
  3256	   meta-usage: that is, it has become a standard joke or linguistic
  3257	   maneuver to "explain" otherwise mysterious circumstances by inventing
  3258	   nonce particle names.  And these imply nonce particle theories, with
  3259	   all their dignity or lack thereof (we might note *parenthetically* that
  3260	   this is a generalization from "(bogus particle) theories" to "bogus
  3261	   (particle theories)"!).  Perhaps such particles are the modern-day
  3262	   equivalents of trolls and wood-nymphs as standard starting-points
  3263	   around which to construct explanatory myths.  Of course, playing on
  3264	   an existing word (as in the `futon') yields additional flavor.
  3265	   Compare {magic smoke}.
  3266	
  3267	:bogon filter: /boh'gon fil'tr/ n. Any device, software or hardware,
  3268	   that limits or suppresses the flow and/or emission of bogons.
  3269	   "Engineering hacked a bogon filter between the Cray and
  3270	   the VAXen, and now we're getting fewer dropped packets."  See
  3271	   also {bogosity}, {bogus}.
  3272	
  3273	:bogon flux: /boh'gon fluhks/ n. A measure of a supposed field of
  3274	   {bogosity} emitted by a speaker, measured by a {bogometer};
  3275	   as a speaker starts to wander into increasing bogosity a listener
  3276	   might say "Warning, warning, bogon flux is rising".  See
  3277	   {quantum bogodynamics}.
  3278	
  3279	:bogosity: /boh-go's*-tee/ n. 1. The degree to which something is
  3280	   {bogus}.  At CMU, bogosity is measured with a {bogometer}; in
  3281	   a seminar, when a speaker says something bogus, a listener might
  3282	   raise his hand and say "My bogometer just triggered".  More
  3283	   extremely, "You just pinned my bogometer" means you just said or
  3284	   did something so outrageously bogus that it is off the scale,
  3285	   pinning the bogometer needle at the highest possible reading (one
  3286	   might also say "You just redlined my bogometer").  The
  3287	   agreed-upon unit of bogosity is the microLenat /mi:k`roh-len'*t/
  3288	   (uL).  The consensus is that this is the largest unit practical
  3289	   for everyday use.  2. The potential field generated by a {bogon
  3290	   flux}; see {quantum bogodynamics}.  See also {bogon flux},
  3291	   {bogon filter}, {bogus}.
  3292	
  3293	   Historical note: The microLenat was invented as an attack against
  3294	   noted computer scientist Doug Lenat by a {tenured graduate
  3295	   student}.  Doug had failed the student on an important exam for
  3296	   giving only "AI is bogus" as his answer to the questions.  The
  3297	   slur is generally considered unmerited, but it has become a running
  3298	   gag nevertheless.  Some of Doug's friends argue that *of
  3299	   course* a microLenat is bogus, since it is only one millionth of a
  3300	   Lenat.  Others have suggested that the unit should be redesignated
  3301	   after the grad student, as the microReid.
  3302	
  3303	:bogotify: /boh-go't*-fi:/ vt. To make or become bogus.  A
  3304	   program that has been changed so many times as to become completely
  3305	   disorganized has become bogotified.  If you tighten a nut too hard
  3306	   and strip the threads on the bolt, the bolt has become bogotified
  3307	   and you had better not use it any more.  This coinage led to the
  3308	   notional `autobogotiphobia' defined as `the fear of becoming
  3309	   bogotified'; but is not clear that the latter has ever been
  3310	   `live' jargon rather than a self-conscious joke in jargon about
  3311	   jargon.  See also {bogosity}, {bogus}.
  3312	
  3313	:bogue out: /bohg owt/ vi. To become bogus, suddenly and
  3314	   unexpectedly.  "His talk was relatively sane until somebody asked
  3315	   him a trick question; then he bogued out and did nothing but
  3316	   {flame} afterwards."  See also {bogosity}, {bogus}.
  3317	
  3318	:bogus: adj. 1. Non-functional.  "Your patches are bogus."
  3319	   2. Useless.  "OPCON is a bogus program."  3. False.  "Your
  3320	   arguments are bogus."  4. Incorrect.  "That algorithm is bogus."
  3321	   5. Unbelievable.  "You claim to have solved the halting problem
  3322	   for Turing Machines?  That's totally bogus."  6. Silly.  "Stop
  3323	   writing those bogus sagas."
  3324	
  3325	   Astrology is bogus.  So is a bolt that is obviously about to break.
  3326	   So is someone who makes blatantly false claims to have solved a
  3327	   scientific problem.  (This word seems to have some, but not all, of
  3328	   the connotations of {random} --- mostly the negative ones.)
  3329	
  3330	   It is claimed that `bogus' was originally used in the hackish sense
  3331	   at Princeton in the late 1960s.  It was spread to CMU and Yale by
  3332	   Michael Shamos, a migratory Princeton alumnus.  A glossary of bogus
  3333	   words was compiled at Yale when the word was first popularized (see
  3334	   {autobogotiphobia} under {bogotify}). The word spread into
  3335	   hackerdom from CMU and MIT.  By the early 1980s it was also
  3336	   current in something like the hackish sense in West Coast teen
  3337	   slang, and it had gone mainstream by 1985.  A correspondent from
  3338	   Cambridge reports, by contrast, that these uses of `bogus' grate on
  3339	   British nerves; in Britain the word means, rather specifically,
  3340	   `counterfeit', as in "a bogus 10-pound note".
  3341	
  3342	:Bohr bug: /bohr buhg/ [from quantum physics] n. A repeatable
  3343	   {bug}; one that manifests reliably under a possibly unknown but
  3344	   well-defined set of conditions.  Antonym of {heisenbug}; see also
  3345	   {mandelbug}, {schroedinbug}.
  3346	
  3347	:boink: /boynk/ [USENET: ascribed there to the TV series
  3348	   "Cheers" and "Moonlighting"] 1. To have sex with;
  3349	   compare {bounce}, sense 3. (This is mainstream slang.) In
  3350	   Commonwealth hackish the variant `bonk' is more common.  2. After
  3351	   the original Peter Korn `Boinkon' {USENET} parties, used for
  3352	   almost any net social gathering, e.g., Miniboink, a small boink
  3353	   held by Nancy Gillett in 1988; Minniboink, a Boinkcon in Minnesota
  3354	   in 1989; Humpdayboinks, Wednesday get-togethers held in the San
  3355	   Francisco Bay Area.  Compare {@-party}.  3. Var of `bonk';
  3356	   see {bonk/oif}.
  3357	
  3358	:bomb: 1. v. General synonym for {crash} (sense 1) except that
  3359	   it is not used as a noun; esp. used of software or OS failures.
  3360	   "Don't run Empire with less than 32K stack, it'll bomb."
  3361	   2. n.,v. Atari ST and Macintosh equivalents of a UNIX `panic' or
  3362	   Amiga {guru} (sense 2), where icons of little black-powder bombs
  3363	   or mushroom clouds are displayed, indicating that the system has
  3364	   died.  On the Mac, this may be accompanied by a decimal (or
  3365	   occasionally hexadecimal) number indicating what went wrong,
  3366	   similar to the Amiga {guru meditation} number.  {{MS-DOS}}
  3367	   machines tend to get {locked up} in this situation.
  3368	
  3369	:bondage-and-discipline language: A language (such as Pascal, Ada,
  3370	   APL, or Prolog) that, though ostensibly general-purpose, is
  3371	   designed so as to enforce an author's theory of `right
  3372	   programming' even though said theory is demonstrably inadequate for
  3373	   systems hacking or even vanilla general-purpose programming.  Often
  3374	   abbreviated `B&D'; thus, one may speak of things "having the
  3375	   B&D nature".  See {{Pascal}}; oppose {languages of choice}.
  3376	
  3377	:bonk/oif: /bonk/, /oyf/ interj. In the {MUD} community, it has
  3378	   become traditional to express pique or censure by `bonking' the
  3379	   offending person.  There is a convention that one should
  3380	   acknowledge a bonk by saying `oif!' and a myth to the effect that
  3381	   failing to do so upsets the cosmic bonk/oif balance, causing much
  3382	   trouble in the universe.  Some MUDs have implemented special
  3383	   commands for bonking and oifing.  See also {talk mode},
  3384	   {posing}.
  3385	
  3386	:book titles:: There is a tradition in hackerdom of informally
  3387	   tagging important textbooks and standards documents with the
  3388	   dominant color of their covers or with some other conspicuous
  3389	   feature of the cover.  Many of these are described in this lexicon
  3390	   under their own entries. See {Aluminum Book}, {Blue Book},
  3391	   {Cinderella Book}, {Devil Book}, {Dragon Book}, {Green
  3392	   Book}, {Orange Book}, {Pink-Shirt Book}, {Purple Book},
  3393	   {Red Book}, {Silver Book}, {White Book}, {Wizard Book},
  3394	   {Yellow Book}, and {bible}; see also {rainbow
  3395	   series}.
  3396	
  3397	:boot: [techspeak; from `by one's bootstraps'] v.,n. To load and
  3398	   initialize the operating system on a machine.  This usage is no
  3399	   longer jargon (having passed into techspeak) but has given rise to
  3400	   some derivatives that are still jargon.
  3401	
  3402	   The derivative `reboot' implies that the machine hasn't been
  3403	   down for long, or that the boot is a {bounce} intended to clear
  3404	   some state of {wedgitude}.  This is sometimes used of human
  3405	   thought processes, as in the following exchange: "You've lost
  3406	   me."  "OK, reboot.  Here's the theory...."
  3407	
  3408	   This term is also found in the variants `cold boot' (from
  3409	   power-off condition) and `warm boot' (with the CPU and all
  3410	   devices already powered up, as after a hardware reset or software
  3411	   crash).
  3412	
  3413	   Another variant: `soft boot', reinitialization of only part of a
  3414	   system, under control of other software still running: "If
  3415	   you're running the {mess-dos} emulator, control-alt-insert will
  3416	   cause a soft-boot of the emulator, while leaving the rest of the
  3417	   system running."
  3418	
  3419	   Opposed to this there is `hard boot', which connotes hostility
  3420	   towards or frustration with the machine being booted:  "I'll have
  3421	   to hard-boot this losing Sun."  "I recommend booting it
  3422	   hard."  One often hard-boots by performing a {power cycle}.
  3423	
  3424	   Historical note: this term derives from `bootstrap loader', a short
  3425	   program that was read in from cards or paper tape, or toggled in
  3426	   from the front panel switches.  This program was always very short
  3427	   (great efforts were expended on making it short in order to
  3428	   minimize the labor and chance of error involved in toggling it in),
  3429	   but was just smart enough to read in a slightly more complex
  3430	   program (usually from a card or paper tape reader), to which it
  3431	   handed control; this program in turn was smart enough to read the
  3432	   application or operating system from a magnetic tape drive or disk
  3433	   drive.  Thus, in successive steps, the computer `pulled itself up
  3434	   by its bootstraps' to a useful operating state.  Nowadays the
  3435	   bootstrap is usually found in ROM or EPROM, and reads the first
  3436	   stage in from a fixed location on the disk, called the `boot
  3437	   block'.  When this program gains control, it is powerful enough to
  3438	   load the actual OS and hand control over to it.
  3439	
  3440	:bottom feeder: n. syn. for {slopsucker} derived from the
  3441	   fisherman's and naturalist's term for finny creatures who subsist
  3442	   on the primordial ooze.
  3443	
  3444	:bottom-up implementation: n. Hackish opposite of the techspeak term
  3445	   `top-down design'.  It is now received wisdom in most
  3446	   programming cultures that it is best to design from higher levels
  3447	   of abstraction down to lower, specifying sequences of action in
  3448	   increasing detail until you get to actual code.  Hackers often find
  3449	   (especially in exploratory designs that cannot be closely
  3450	   specified in advance) that it works best to *build* things in
  3451	   the opposite order, by writing and testing a clean set of primitive
  3452	   operations and then knitting them together.
  3453	
  3454	:bounce: v. 1. [perhaps from the image of a thrown ball bouncing
  3455	   off a wall] An electronic mail message that is undeliverable and
  3456	   returns an error notification to the sender is said to `bounce'.
  3457	   See also {bounce message}.  2. [Stanford] To play volleyball.
  3458	   At the now-demolished {D. C. Power Lab} building used by the
  3459	   Stanford AI Lab in the 1970s, there was a volleyball court on the
  3460	   front lawn.  From 5 P.M. to 7 P.M. was the scheduled
  3461	   maintenance time for the computer, so every afternoon at 5 the
  3462	   computer would become unavailable, and over the intercom a voice
  3463	   would cry, "Now hear this: bounce, bounce!" followed by Brian
  3464	   McCune loudly bouncing a volleyball on the floor outside the
  3465	   offices of known volleyballers.  3. To engage in sexual
  3466	   intercourse; prob. from the expression `bouncing the mattress',
  3467	   but influenced by Roo's psychosexually loaded "Try bouncing me,
  3468	   Tigger!" from the "Winnie-the-Pooh" books.  Compare
  3469	   {boink}.  4. To casually reboot a system in order to clear up a
  3470	   transient problem.  Reported primarily among {VMS} users.
  3471	   5. [IBM] To {power cycle} a peripheral in order to reset it.
  3472	
  3473	:bounce message: [UNIX] n. Notification message returned to sender by
  3474	   a site unable to relay {email} to the intended {{Internet address}}
  3475	   recipient or the next link in a {bang path} (see {bounce}).
  3476	   Reasons might include a nonexistent or misspelled username or a
  3477	   {down} relay site.  Bounce messages can themselves fail, with
  3478	   occasionally ugly results; see {sorcerer's apprentice mode}.
  3479	   The terms `bounce mail' and `barfmail' are also common.
  3480	
  3481	:boustrophedon: [from a Greek word for turning like an ox while
  3482	   plowing] n. An ancient method of writing using alternate
  3483	   left-to-right and right-to-left lines.  This term is actually
  3484	   philologists' techspeak and typesetter's jargon.  Erudite hackers
  3485	   use it for an optimization performed by some computer typesetting
  3486	   software (notably UNIX `troff(1)').  The adverbial form
  3487	   `boustrophedonically' is also found (hackers purely love
  3488	   constructions like this).
  3489	
  3490	:box: n. 1. A computer; esp. in the construction `foo box'
  3491	   where foo is some functional qualifier, like `graphics', or
  3492	   the name of an OS (thus, `UNIX box', `MS-DOS box', etc.)  "We
  3493	   preprocess the data on UNIX boxes before handing it up to the
  3494	   mainframe."  2. [within IBM] Without qualification but within an
  3495	   SNA-using site, this refers specifically to an IBM front-end
  3496	   processor or FEP /F-E-P/.  An FEP is a small computer necessary
  3497	   to enable an IBM {mainframe} to communicate beyond the limits of
  3498	   the {dinosaur pen}.  Typically used in expressions like the cry
  3499	   that goes up when an SNA network goes down: "Looks like the
  3500	   {box} has fallen over." (See {fall over}.) See also
  3501	   {IBM}, {fear and loathing}, {fepped out}, {Blue
  3502	   Glue}.
  3503	
  3504	:boxed comments: n. Comments (explanatory notes attached to program
  3505	   instructions) that occupy several lines by themselves; so called
  3506	   because in assembler and C code they are often surrounded by a box
  3507	   in a style something like this:
  3508	
  3509	     /*************************************************
  3510	      *
  3511	      * This is a boxed comment in C style
  3512	      *
  3513	      *************************************************/
  3514	
  3515	   Common variants of this style omit the asterisks in column 2 or add
  3516	   a matching row of asterisks closing the right side of the box.  The
  3517	   sparest variant omits all but the comment delimiters themselves;
  3518	   the `box' is implied.  Oppose {winged comments}.
  3519	
  3520	:boxen: /bok'sn/ [by analogy with {VAXen}] pl.n. Fanciful
  3521	   plural of {box} often encountered in the phrase `UNIX boxen',
  3522	   used to describe commodity {{UNIX}} hardware.  The connotation is
  3523	   that any two UNIX boxen are interchangeable.
  3524	
  3525	:boxology: /bok-sol'*-jee/ n. Syn. {ASCII art}.  This term
  3526	   implies a more restricted domain, that of box-and-arrow drawings.
  3527	   "His report has a lot of boxology in it."  Compare
  3528	   {macrology}.
  3529	
  3530	:bozotic: /boh-zoh'tik/ or /boh-zo'tik/ [from the name of a TV
  3531	   clown even more losing than Ronald McDonald] adj. Resembling or
  3532	   having the quality of a bozo; that is, clownish, ludicrously wrong,
  3533	   unintentionally humorous.  Compare {wonky}, {demented}.  Note
  3534	   that the noun `bozo' occurs in slang, but the mainstream
  3535	   adjectival form would be `bozo-like' or (in New England)
  3536	   `bozoish'.
  3537	
  3538	:BQS: /B-Q-S/ adj. Syn. {Berkeley Quality Software}.
  3539	
  3540	:brain dump: n. The act of telling someone everything one knows
  3541	   about a particular topic or project.  Typically used when someone
  3542	   is going to let a new party maintain a piece of code.  Conceptually
  3543	   analogous to an operating system {core dump} in that it saves a
  3544	   lot of useful {state} before an exit.  "You'll have to
  3545	   give me a brain dump on FOOBAR before you start your new job at
  3546	   HackerCorp."  See {core dump} (sense 4).  At Sun, this is also
  3547	   known as `TOI' (transfer of information).
  3548	
  3549	:brain fart: n. The actual result of a {braino}, as opposed to
  3550	   the mental glitch which is the braino itself.  E.g. typing
  3551	   `dir' on a UNIX box after a session with DOS.
  3552	
  3553	:brain-damaged: 1. [generalization of `Honeywell Brain Damage'
  3554	   (HBD), a theoretical disease invented to explain certain utter
  3555	   cretinisms in Honeywell {{Multics}}] adj. Obviously wrong;
  3556	   {cretinous}; {demented}.  There is an implication that the
  3557	   person responsible must have suffered brain damage, because he
  3558	   should have known better.  Calling something brain-damaged is
  3559	   really bad; it also implies it is unusable, and that its failure to
  3560	   work is due to poor design rather than some accident.  "Only six
  3561	   monocase characters per file name?  Now *that's*
  3562	   brain-damaged!"  2. [esp. in the Mac world] May refer to free
  3563	   demonstration software that has been deliberately crippled in some
  3564	   way so as not to compete with the commercial product it is
  3565	   intended to sell.  Syn.  {crippleware}.
  3566	
  3567	:brain-dead: adj. Brain-damaged in the extreme.  It tends to imply
  3568	   terminal design failure rather than malfunction or simple
  3569	   stupidity.  "This comm program doesn't know how to send a break
  3570	   --- how brain-dead!"
  3571	
  3572	:braino: /bray'no/ n. Syn. for {thinko}. See also {brain
  3573	   fart}.
  3574	
  3575	:branch to Fishkill: [IBM: from the location of one of the
  3576	   corporation's facilities] n. Any unexpected jump in a program that
  3577	   produces catastrophic or just plain weird results.  See {jump
  3578	   off into never-never land}, {hyperspace}.
  3579	
  3580	:brand brand brand: n. Humorous catch-phrase from {BartleMUD}s, in
  3581	   which players were described carrying a list of objects, the most
  3582	   common of which would usually be a brand.  Often used as a joke in
  3583	   {talk mode} as in "Fred the wizard is here, carrying brand ruby
  3584	   brand brand brand kettle broadsword flamethrower".  A brand is a
  3585	   torch, of course; one burns up a lot of those exploring dungeons.
  3586	   Prob. influenced by the famous Monty Python "Spam" skit.
  3587	
  3588	:bread crumbs: n. Debugging statements inserted into a program that
  3589	   emit output or log indicators of the program's {state} to a file
  3590	   so you can see where it dies, or pin down the cause of surprising
  3591	   behavior. The term is probably a reference to the Hansel and Gretel
  3592	   story from the Brothers Grimm; in several variants, a character
  3593	   leaves a trail of breadcrumbs so as not to get lost in the
  3594	   woods.
  3595	
  3596	:break: 1. vt. To cause to be broken (in any sense).  "Your latest
  3597	   patch to the editor broke the paragraph commands."  2. v.  (of a
  3598	   program) To stop temporarily, so that it may debugged.  The place
  3599	   where it stops is a `breakpoint'.  3. [techspeak] vi. To send an
  3600	   RS-232 break (two character widths of line high) over a serial comm
  3601	   line.  4. [UNIX] vi. To strike whatever key currently causes the
  3602	   tty driver to send SIGINT to the current process.  Normally, break
  3603	   (sense 3) or delete does this.  5. `break break' may be said to
  3604	   interrupt a conversation (this is an example of verb doubling).
  3605	   This usage comes from radio communications, which in turn probably
  3606	   came from landline telegraph/teleprinter usage, as badly abused in
  3607	   the Citizen's Band craze a few years ago.
  3608	
  3609	:break-even point: n. in the process of implementing a new computer
  3610	   language, the point at which the language is sufficiently effective
  3611	   that one can implement the language in itself.  That is, for a new
  3612	   language called, hypothetically, FOOGOL, one has reached break-even
  3613	   when one can write a demonstration compiler for FOOGOL in FOOGOL,
  3614	   discard the original implementation language, and thereafter use
  3615	   older versions of FOOGOL to develop newer ones.  This is an
  3616	   important milestone; see {MFTL}.
  3617	
  3618	:breath-of-life packet: [XEROX PARC] n. An Ethernet packet that
  3619	   contained bootstrap (see {boot}) code, periodically sent out
  3620	   from a working computer to infuse the `breath of life' into any
  3621	   computer on the network that had happened to crash.  Machines
  3622	   depending on such packets have sufficient hardware or firmware code
  3623	   to wait for (or request) such a packet during the reboot process.
  3624	   See also {dickless workstation}.
  3625	
  3626	:breedle: n. See {feep}.
  3627	
  3628	:bring X to its knees: v. To present a machine, operating system,
  3629	   piece of software, or algorithm with a load so extreme or
  3630	   {pathological} that it grinds to a halt.  "To bring a MicroVAX
  3631	   to its knees, try twenty users running {vi} --- or four running
  3632	   {EMACS}."  Compare {hog}.
  3633	
  3634	:brittle: adj. Said of software that is functional but easily broken
  3635	   by changes in operating environment or configuration, or by any
  3636	   minor tweak to the software itself.  Also, any system that
  3637	   responds inappropriately and disastrously to expected external
  3638	   stimuli; e.g., a file system that is usually totally scrambled by a
  3639	   power failure is said to be brittle.  This term is often used to
  3640	   describe the results of a research effort that were never intended
  3641	   to be robust, but it can be applied to commercially developed
  3642	   software, which displays the quality far more often than it ought
  3643	   to.  Oppose {robust}.
  3644	
  3645	:broadcast storm: n. An incorrect packet broadcast on a network that
  3646	   causes most hosts to respond all at once, typically with wrong
  3647	   answers that start the process over again.  See {network
  3648	   meltdown}.
  3649	
  3650	:broken: adj. 1. Not working properly (of programs).  2. Behaving
  3651	   strangely; especially (when used of people) exhibiting extreme
  3652	   depression.
  3653	
  3654	:broken arrow: [IBM] n. The error code displayed on line 25 of a
  3655	   3270 terminal (or a PC emulating a 3270) for various kinds of
  3656	   protocol violations and "unexpected" error conditions (including
  3657	   connection to a {down} computer).  On a PC, simulated with
  3658	   `->/_', with the two center characters overstruck. In true
  3659	   {luser} fashion, the original documentation of these codes
  3660	   (visible on every 3270 terminal, and necessary for debugging
  3661	   network problems) was confined to an IBM customer engineering
  3662	   manual.
  3663	
  3664	   Note: to appreciate this term fully, it helps to know that `broken
  3665	   arrow' is also military jargon for an accident involving nuclear
  3666	   weapons.... 
  3667	
  3668	:broket: /broh'k*t/ or /broh'ket`/ [by analogy with `bracket': a
  3669	   `broken bracket'] n. Either of the characters `<' and `>',
  3670	   when used as paired enclosing delimiters.  This word
  3671	   originated as a contraction of the phrase `broken bracket', that
  3672	   is, a bracket that is bent in the middle.  (At MIT, and apparently
  3673	   in the {Real World} as well, these are usually called {angle
  3674	   brackets}.)
  3675	
  3676	:Brooks's Law: prov. "Adding manpower to a late software project
  3677	   makes it later" --- a result of the fact that the advantage from
  3678	   splitting work among N programmers is O(N) (that is,
  3679	   proportional to N), but the complexity and communications
  3680	   cost associated with coordinating and then merging their work
  3681	   is O(N^2) (that is, proportional to the square of N).
  3682	   The quote is from Fred Brooks, a manager of IBM's OS/360 project
  3683	   and author of `The Mythical Man-Month' (Addison-Wesley, 1975,
  3684	   ISBN 0-201-00650-2), an excellent early book on software
  3685	   engineering.  The myth in question has been most tersely expressed
  3686	   as "Programmer time is fungible" and Brooks established
  3687	   conclusively that it is not.  Hackers have never forgotten his
  3688	   advice; too often, {management} does.  See also
  3689	   {creationism}, {second-system effect}.
  3690	
  3691	:BRS: /B-R-S/ n. Syn. {Big Red Switch}.  This abbreviation is
  3692	   fairly common on-line.
  3693	
  3694	:brute force: adj. Describes a primitive programming style, one in
  3695	   which the programmer relies on the computer's processing power
  3696	   instead of using his or her own intelligence to simplify the
  3697	   problem, often ignoring problems of scale and applying na"ive
  3698	   methods suited to small problems directly to large ones.
  3699	
  3700	   The {canonical} example of a brute-force algorithm is associated
  3701	   with the `traveling salesman problem' (TSP), a classical {NP-}hard
  3702	   problem: Suppose a person is in, say, Boston, and wishes to drive
  3703	   to N other cities.  In what order should he or she visit
  3704	   them in order to minimize the distance travelled?  The brute-force
  3705	   method is to simply generate all possible routes and compare the
  3706	   distances; while guaranteed to work and simple to implement, this
  3707	   algorithm is clearly very stupid in that it considers even
  3708	   obviously absurd routes (like going from Boston to Houston via San
  3709	   Francisco and New York, in that order).  For very small N it
  3710	   works well, but it rapidly becomes absurdly inefficient when
  3711	   N increases (for N = 15, there are already
  3712	   1,307,674,368,000 possible routes to consider, and for
  3713	   N = 1000 --- well, see {bignum}).  See
  3714	   also {NP-}.
  3715	
  3716	   A more simple-minded example of brute-force programming is finding
  3717	   the smallest number in a large list by first using an existing
  3718	   program to sort the list in ascending order, and then picking the
  3719	   first number off the front.
  3720	
  3721	   Whether brute-force programming should be considered stupid or not
  3722	   depends on the context; if the problem isn't too big, the extra CPU
  3723	   time spent on a brute-force solution may cost less than the
  3724	   programmer time it would take to develop a more `intelligent'
  3725	   algorithm.  Additionally, a more intelligent algorithm may imply
  3726	   more long-term complexity cost and bug-chasing than are justified
  3727	   by the speed improvement.
  3728	
  3729	   Ken Thompson, co-inventor of UNIX, is reported to have uttered the
  3730	   epigram "When in doubt, use brute force".  He probably intended
  3731	   this as a {ha ha only serious}, but the original UNIX kernel's
  3732	   preference for simple, robust, and portable algorithms over
  3733	   {brittle} `smart' ones does seem to have been a significant
  3734	   factor in the success of that OS.  Like so many other tradeoffs in
  3735	   software design, the choice between brute force and complex,
  3736	   finely-tuned cleverness is often a difficult one that requires both
  3737	   engineering savvy and delicate esthetic judgment.
  3738	
  3739	:brute force and ignorance: n. A popular design technique at many
  3740	   software houses --- {brute force} coding unrelieved by any
  3741	   knowledge of how problems have been previously solved in elegant
  3742	   ways.  Dogmatic adherence to design methodologies tends to
  3743	   encourage it.  Characteristic of early {larval stage}
  3744	   programming; unfortunately, many never outgrow it.  Often
  3745	   abbreviated BFI: "Gak, they used a bubble sort!  That's strictly
  3746	   from BFI."  Compare {bogosity}.
  3747	
  3748	:BSD: /B-S-D/ n. [abbreviation for `Berkeley System Distribution'] a
  3749	   family of {{UNIX}} versions for the DEC {VAX} and PDP-11
  3750	   developed by Bill Joy and others at {Berzerkeley} starting
  3751	   around 1980, incorporating paged virtual memory, TCP/IP networking
  3752	   enhancements, and many other features.  The BSD versions (4.1, 4.2,
  3753	   and 4.3) and the commercial versions derived from them (SunOS,
  3754	   ULTRIX, and Mt. Xinu) held the technical lead in the UNIX world
  3755	   until AT&T's successful standardization efforts after about 1986,
  3756	   and are still widely popular.  See {{UNIX}}, {USG UNIX}.
  3757	
  3758	:BUAF: // [abbreviation, from the alt.fan.warlord] n.  Big
  3759	   Ugly ASCII Font --- a special form of {ASCII art}.  Various
  3760	   programs exist for rendering text strings into block, bloob, and
  3761	   pseudo-script fonts in cells between four and six character cells
  3762	   on a side; this is smaller than the letters generated by older
  3763	   {banner} (sense 2) programs.  These are sometimes used to render
  3764	   one's name in a {sig block}, and are critically referred to as
  3765	   `BUAF's.  See {warlording}.
  3766	
  3767	:BUAG: // [abbreviation, from the alt.fan.warlord] n.  Big
  3768	   Ugly ASCII Graphic.  Pejorative term for ugly {ASCII ART},
  3769	   especially as found in {sig block}s.  For some reason, mutations
  3770	   of the head of Bart Simpson are particularly common in the least
  3771	   imaginative {sig block}s. See {warlording}.
  3772	
  3773	:bubble sort: n. Techspeak for a particular sorting technique in
  3774	   which pairs of adjacent values in the list to be sorted are
  3775	   compared and interchanged if they are out of order; thus, list
  3776	   entries `bubble upward' in the list until they bump into one with a
  3777	   lower sort value.  Because it is not very good relative to other
  3778	   methods and is the one typically stumbled on by {na"ive} and
  3779	   untutored programmers, hackers consider it the {canonical}
  3780	   example of a na"ive algorithm.  The canonical example of a really
  3781	   *bad* algorithm is {bogo-sort}.  A bubble sort might be used
  3782	   out of ignorance, but any use of bogo-sort could issue only from
  3783	   brain damage or willful perversity.
  3784	
  3785	:bucky bits: /buh'kee bits/ n. 1. obs. The bits produced by the
  3786	   CONTROL and META shift keys on a SAIL keyboard (octal 200 and 400
  3787	   respectively), resulting in a 9-bit keyboard character set.  The
  3788	   MIT AI TV (Knight) keyboards extended this with TOP and separate
  3789	   left and right CONTROL and META keys, resulting in a 12-bit
  3790	   character set; later, LISP Machines added such keys as SUPER,
  3791	   HYPER, and GREEK (see {space-cadet keyboard}).  2. By extension,
  3792	   bits associated with `extra' shift keys on any keyboard, e.g.,
  3793	   the ALT on an IBM PC or command and option keys on a Macintosh.
  3794	
  3795	   It is rumored that `bucky bits' were named for Buckminster Fuller
  3796	   during a period when he was consulting at Stanford.  Actually,
  3797	   `Bucky' was Niklaus Wirth's nickname when *he* was at
  3798	   Stanford; he first suggested the idea of an EDIT key to set the
  3799	   8th bit of an otherwise 7-bit ASCII character.  This was used in a
  3800	   number of editors written at Stanford or in its environs (TV-EDIT
  3801	   and NLS being the best-known).  The term spread to MIT and CMU
  3802	   early and is now in general use.  See {double bucky},
  3803	   {quadruple bucky}.
  3804	
  3805	:buffer overflow: n. What happens when you try to stuff more data
  3806	   into a buffer (holding area) than it can handle.  This may be due
  3807	   to a mismatch in the processing rates of the producing and
  3808	   consuming processes (see {overrun} and {firehose syndrome}),
  3809	   or because the buffer is simply too small to hold all the data that
  3810	   must accumulate before a piece of it can be processed.  For example,
  3811	   in a text-processing tool that {crunch}es a line at a time, a
  3812	   short line buffer can result in {lossage} as input from a long
  3813	   line overflows the buffer and trashes data beyond it.  Good
  3814	   defensive programming would check for overflow on each character
  3815	   and stop accepting data when the buffer is full up.  The term is
  3816	   used of and by humans in a metaphorical sense.  "What time did I
  3817	   agree to meet you?  My buffer must have overflowed."  Or "If I
  3818	   answer that phone my buffer is going to overflow."  See also
  3819	   {spam}, {overrun screw}.
  3820	
  3821	:bug: n. An unwanted and unintended property of a program or piece
  3822	   of hardware, esp. one that causes it to malfunction.  Antonym of
  3823	   {feature}.  Examples: "There's a bug in the editor: it writes
  3824	   things out backwards."  "The system crashed because of a hardware
  3825	   bug."  "Fred is a winner, but he has a few bugs" (i.e., Fred is
  3826	   a good guy, but he has a few personality problems).
  3827	
  3828	   Historical note: Some have said this term came from telephone
  3829	   company usage, in which "bugs in a telephone cable" were blamed
  3830	   for noisy lines, but this appears to be an incorrect folk
  3831	   etymology.  Admiral Grace Hopper (an early computing pioneer better
  3832	   known for inventing {COBOL}) liked to tell a story in which a
  3833	   technician solved a persistent {glitch} in the Harvard Mark II
  3834	   machine by pulling an actual insect out from between the contacts
  3835	   of one of its relays, and she subsequently promulgated {bug} in
  3836	   its hackish sense as a joke about the incident (though, as she was
  3837	   careful to admit, she was not there when it happened).  For many
  3838	   years the logbook associated with the incident and the actual bug
  3839	   in question (a moth) sat in a display case at the Naval Surface
  3840	   Warfare Center.  The entire story, with a picture of the logbook
  3841	   and the moth taped into it, is recorded in the `Annals of the
  3842	   History of Computing', Vol. 3, No. 3 (July 1981), pp. 285--286.
  3843	
  3844	   The text of the log entry (from September 9, 1945), reads "1545
  3845	   Relay #70 Panel F (moth) in relay.  First actual case of bug being
  3846	   found".  This wording seems to establish that the term was already
  3847	   in use at the time in its current specific sense --- and Hopper
  3848	   herself reports that the term `bug' was regularly applied to
  3849	   problems in radar electronics during WWII.  Indeed, the use of
  3850	   `bug' to mean an industrial defect was already established in
  3851	   Thomas Edison's time, and `bug' in the sense of an disruptive
  3852	   event goes back to Shakespeare!  In the first edition of Samuel
  3853	   Johnson's dictionary one meaning of `bug' is "A frightful
  3854	   object; a walking spectre"; this is traced to `bugbear', a Welsh
  3855	   term for a variety of mythological monster which (to complete the
  3856	   circle) has recently been reintroduced into the popular lexicon
  3857	   through fantasy role-playing games.
  3858	
  3859	   In any case, in jargon the word almost never refers to insects.
  3860	   Here is a plausible conversation that never actually happened:
  3861	
  3862	   "There is a bug in this ant farm!"
  3863	
  3864	   "What do you mean?  I don't see any ants in it."
  3865	
  3866	   "That's the bug."
  3867	
  3868	   [There has been a widespread myth that the original bug was moved
  3869	   to the Smithsonian, and an earlier version of this entry so
  3870	   asserted.  A correspondent who thought to check discovered that the
  3871	   bug was not there.  While investigating this in late 1990, your
  3872	   editor discovered that the NSWC still had the bug, but had
  3873	   unsuccessfully tried to get the Smithsonian to accept it --- and
  3874	   that the present curator of their History of American Technology
  3875	   Museum didn't know this and agreed that it would make a worthwhile
  3876	   exhibit.  It was moved to the Smithsonian in mid-1991.  Thus, the
  3877	   process of investigating the original-computer-bug bug fixed it in
  3878	   an entirely unexpected way, by making the myth true!  --- ESR]
  3879	
  3880	   [1992 update: the plot thickens!  A usually reliable source reports
  3881	   having seen The Bug at the Smithsonian in 1978.  I am unable to
  3882	   reconcile the conflicting histories I have been offered, and merely
  3883	   report this fact here. --- ESR.]
  3884	
  3885	:bug-compatible: adj. Said of a design or revision that has been
  3886	   badly compromised by a requirement to be compatible with
  3887	   {fossil}s or {misfeature}s in other programs or (esp.)
  3888	   previous releases of itself. "MS-DOS 2.0 used \ as a path
  3889	   separator to be bug-compatible with some cretin's choice of / as an
  3890	   option character in 1.0."
  3891	
  3892	:bug-for-bug compatible: n. Same as {bug-compatible}, with the
  3893	   additional implication that much tedious effort went into ensuring
  3894	   that each (known) bug was replicated.
  3895	
  3896	:buglix: /buhg'liks/ n. Pejorative term referring to DEC's ULTRIX
  3897	   operating system in its earlier *severely* buggy versions.
  3898	   Still used to describe ULTRIX, but without venom.  Compare
  3899	   {AIDX}, {HP-SUX}, {Nominal Semidestructor}, {Telerat},
  3900	   {sun-stools}.
  3901	
  3902	:bulletproof: adj. Used of an algorithm or implementation considered
  3903	   extremely {robust}; lossage-resistant; capable of correctly
  3904	   recovering from any imaginable exception condition.  This is a rare
  3905	   and valued quality.  Syn. {armor-plated}.
  3906	
  3907	:bum: 1. vt. To make highly efficient, either in time or space,
  3908	   often at the expense of clarity.  "I managed to bum three more
  3909	   instructions out of that code."  "I spent half the night bumming
  3910	   the interrupt code."  In {elder days}, John McCarthy (inventor
  3911	   of {LISP}) used to compare some efficiency-obsessed hackers
  3912	   among his students to "ski bums"; thus, optimization became
  3913	   "program bumming", and eventually just "bumming".  2. To
  3914	   squeeze out excess; to remove something in order to improve
  3915	   whatever it was removed from (without changing function; this
  3916	   distinguishes the process from a {featurectomy}).  3. n. A small
  3917	   change to an algorithm, program, or hardware device to make it more
  3918	   efficient.  "This hardware bum makes the jump instruction
  3919	   faster."  Usage: now uncommon, largely superseded by v. {tune}
  3920	   (and n. {tweak}, {hack}), though none of these exactly
  3921	   capture sense 2.  All these uses are rare in Commonwealth hackish,
  3922	   because in the parent dialects of English `bum' is a rude synonym
  3923	   for `buttocks'.
  3924	
  3925	:bump: vt. Synonym for increment.  Has the same meaning as
  3926	   C's ++ operator.  Used esp. of counter variables, pointers, and
  3927	   index dummies in `for', `while', and `do-while'
  3928	   loops.
  3929	
  3930	:burble: [from Lewis Carroll's "Jabberwocky"] v. Like {flame},
  3931	   but connotes that the source is truly clueless and ineffectual
  3932	   (mere flamers can be competent).  A term of deep contempt.
  3933	   "There's some guy on the phone burbling about how he got a DISK
  3934	   FULL error and it's all our comm software's fault."
  3935	
  3936	:buried treasure: n. A surprising piece of code found in some
  3937	   program.  While usually not wrong, it tends to vary from {crufty}
  3938	   to {bletcherous}, and has lain undiscovered only because it was
  3939	   functionally correct, however horrible it is.  Used sarcastically,
  3940	   because what is found is anything *but* treasure.  Buried
  3941	   treasure almost always needs to be dug up and removed.  "I just
  3942	   found that the scheduler sorts its queue using {bubble sort}!
  3943	   Buried treasure!"
  3944	
  3945	:burn-in period: n. 1. A factory test designed to catch systems
  3946	   with {marginal} components before they get out the door; the
  3947	   theory is that burn-in will protect customers by outwaiting the
  3948	   steepest part of the {bathtub curve} (see {infant
  3949	   mortality}).  2. A period of indeterminate length in which a person
  3950	   using a computer is so intensely involved in his project that he
  3951	   forgets basic needs such as food, drink, sleep, etc.  Warning:
  3952	   Excessive burn-in can lead to burn-out.  See {hack mode},
  3953	   {larval stage}.
  3954	
  3955	:burst page: n. Syn. {banner}, sense 1.
  3956	
  3957	:busy-wait: vi. Used of human behavior, conveys that the subject is
  3958	   busy waiting for someone or something, intends to move instantly as
  3959	   soon as it shows up, and thus cannot do anything else at the
  3960	   moment.  "Can't talk now, I'm busy-waiting till Bill gets off the
  3961	   phone."
  3962	
  3963	   Technically, `busy-wait' means to wait on an event by
  3964	   {spin}ning through a tight or timed-delay loop that polls for
  3965	   the event on each pass, as opposed to setting up an interrupt
  3966	   handler and continuing execution on another part of the task.  This
  3967	   is a wasteful technique, best avoided on time-sharing systems where
  3968	   a busy-waiting program may {hog} the processor.
  3969	
  3970	:buzz: vi. 1. Of a program, to run with no indication of progress
  3971	   and perhaps without guarantee of ever finishing; esp. said of
  3972	   programs thought to be executing tight loops of code.  A program
  3973	   that is buzzing appears to be {catatonic}, but you never get out
  3974	   of catatonia, while a buzzing loop may eventually end of its own
  3975	   accord.  "The program buzzes for about 10 seconds trying to sort
  3976	   all the names into order."  See {spin}; see also {grovel}.
  3977	   2. [ETA Systems] To test a wire or printed circuit trace for
  3978	   continuity by applying an AC rather than DC signal.  Some wire
  3979	   faults will pass DC tests but fail a buzz test.  3. To process an
  3980	   array or list in sequence, doing the same thing to each element.
  3981	   "This loop buzzes through the tz array looking for a terminator
  3982	   type."
  3983	
  3984	:BWQ: /B-W-Q/ [IBM: abbreviation, `Buzz Word Quotient'] The
  3985	   percentage of buzzwords in a speech or documents.  Usually roughly
  3986	   proportional to {bogosity}.  See {TLA}.
  3987	
  3988	:by hand: adv. Said of an operation (especially a repetitive,
  3989	   trivial, and/or tedious one) that ought to be performed
  3990	   automatically by the computer, but which a hacker instead has to
  3991	   step tediously through.  "My mailer doesn't have a command to
  3992	   include the text of the message I'm replying to, so I have to do it
  3993	   by hand."  This does not necessarily mean the speaker has to
  3994	   retype a copy of the message; it might refer to, say, dropping into
  3995	   a {subshell} from the mailer, making a copy of one's mailbox file,
  3996	   reading that into an editor, locating the top and bottom of the
  3997	   message in question, deleting the rest of the file, inserting `>'
  3998	   characters on each line, writing the file, leaving the editor,
  3999	   returning to the mailer, reading the file in, and later remembering
  4000	   to delete the file.  Compare {eyeball search}.
  4001	
  4002	:byte:: /bi:t/ [techspeak] n. A unit of memory or data equal to
  4003	   the amount used to represent one character; on modern architectures
  4004	   this is usually 8 bits, but may be 9 on 36-bit machines.  Some
  4005	   older architectures used `byte' for quantities of 6 or 7 bits, and
  4006	   the PDP-10 supported `bytes' that were actually bitfields of
  4007	   1 to 36 bits!  These usages are now obsolete, and even 9-bit bytes
  4008	   have become rare in the general trend toward power-of-2 word sizes.
  4009	
  4010	   Historical note: The term originated in 1956 during the early
  4011	   design phase for the IBM Stretch computer; originally it was
  4012	   described as 1 to 6 bits (typical I/O equipment of the period
  4013	   used 6-bit chunks of information).  The move to an 8-bit byte
  4014	   happened in late 1956, and this size was later adopted and
  4015	   promulgated as a standard by the System/360.  The term `byte' was
  4016	   coined by mutating the word `bite' so it would not be accidentally
  4017	   misspelled as {bit}.  See also {nybble}.
  4018	
  4019	:bytesexual: /bi:t`sek'shu-*l/ adj. Said of hardware, denotes
  4020	   willingness to compute or pass data in either {big-endian} or
  4021	   {little-endian} format (depending, presumably, on a {mode bit}
  4022	   somewhere).  See also {NUXI problem}.
  4023	
  4024	:bzzzt, wrong: /bzt rong/ [USENET/Internet] From a Robin Williams
  4025	   routine in the movie "Dead Poets Society" spoofing radio or
  4026	   TV quiz programs, such as *Truth or Consequences*, where an
  4027	   incorrect answer earns one a blast from the buzzer and condolences
  4028	   from the interlocutor.  A way of expressing mock-rude disagreement,
  4029	   usually immediately following an included quote from another
  4030	   poster.  The less abbreviated "*Bzzzzt*, wrong, but thank you for
  4031	   playing" is also common; capitalization and emphasis of the
  4032	   buzzer sound varies.
  4033	
  4034	= C =
  4035	=====
  4036	
  4037	:C: n. 1. The third letter of the English alphabet.  2. ASCII
  4038	   1000011.  3. The name of a programming language designed by
  4039	   Dennis Ritchie during the early 1970s and immediately used to
  4040	   reimplement {{UNIX}}; so called because many features derived
  4041	   from an earlier compiler named `B' in commemoration of
  4042	   *its* parent, BCPL.  Before Bjarne Stroustrup settled the
  4043	   question by designing C++, there was a humorous debate over whether
  4044	   C's successor should be named `D' or `P'.  C became immensely
  4045	   popular outside Bell Labs after about 1980 and is now the dominant
  4046	   language in systems and microcomputer applications programming.
  4047	   See also {languages of choice}, {indent style}.
  4048	
  4049	   C is often described, with a mixture of fondness and disdain
  4050	   varying according to the speaker, as "a language that combines
  4051	   all the elegance and power of assembly language with all the
  4052	   readability and maintainability of assembly language".
  4053	
  4054	:C Programmer's Disease: n. The tendency of the undisciplined C
  4055	   programmer to set arbitrary but supposedly generous static limits
  4056	   on table sizes (defined, if you're lucky, by constants in header
  4057	   files) rather than taking the trouble to do proper dynamic storage
  4058	   allocation.  If an application user later needs to put 68 elements
  4059	   into a table of size 50, the afflicted programmer reasons that he
  4060	   can easily reset the table size to 68 (or even as much as 70, to
  4061	   allow for future expansion), and recompile.  This gives the
  4062	   programmer the comfortable feeling of having done his bit to
  4063	   satisfy the user's (unreasonable) demands, and often affords the
  4064	   user multiple opportunities to explore the marvelous consequences
  4065	   of {fandango on core}.  In severe cases of the disease, the
  4066	   programmer cannot comprehend why each fix of this kind seems only
  4067	   to further disgruntle the user.
  4068	
  4069	:calculator: [Cambridge] n. Syn. for {bitty box}.
  4070	
  4071	:can: vt. To abort a job on a time-sharing system.  Used esp. when the
  4072	   person doing the deed is an operator, as in "canned from the
  4073	   {{console}}".  Frequently used in an imperative sense, as in "Can
  4074	   that print job, the LPT just popped a sprocket!"  Synonymous with
  4075	   {gun}.  It is said that the ASCII character with mnemonic CAN
  4076	   (0011000) was used as a kill-job character on some early OSes.
  4077	
  4078	:can't happen: The traditional program comment for code executed
  4079	   under a condition that should never be true, for example a file
  4080	   size computed as negative.  Often, such a condition being true
  4081	   indicates data corruption or a faulty algorithm; it is almost
  4082	   always handled by emitting a fatal error message and terminating or
  4083	   crashing, since there is little else that can be done.  This is
  4084	   also often the text emitted if the `impossible' error actually
  4085	   happens!  Although "can't happen" events are genuinely infrequent
  4086	   in production code, programmers wise enough to check for them
  4087	   habitually are often surprised at how often they are triggered
  4088	   during development and how many headaches checking for them turns
  4089	   out to head off.
  4090	
  4091	:candygrammar: n. A programming-language grammar that is mostly
  4092	   {syntactic sugar}; the term is also a play on `candygram'.
  4093	   {COBOL}, Apple's Hypertalk language, and a lot of the so-called
  4094	   `4GL' database languages are like this.  The usual intent of such
  4095	   designs is that they be as English-like as possible, on the theory
  4096	   that they will then be easier for unskilled people to program.
  4097	   This intention comes to grief on the reality that syntax isn't what
  4098	   makes programming hard; it's the mental effort and organization
  4099	   required to specify an algorithm precisely that costs.  Thus the
  4100	   invariable result is that `candygrammar' languages are just as
  4101	   difficult to program in as terser ones, and far more painful for
  4102	   the experienced hacker.
  4103	
  4104	   [The overtones from the old Chevy Chase skit on Saturday Night Live
  4105	   should not be overlooked.  (This was a "Jaws" parody.
  4106	   Someone lurking outside an apartment door tries all kinds of bogus
  4107	   ways to get the occupant to open up, while ominous music plays in
  4108	   the background.  The last attempt is a half-hearted "Candygram!"
  4109	   When the door is opened, a shark bursts in and chomps the poor
  4110	   occupant.  There is a moral here for those attracted to
  4111	   candygrammars.  Note that, in many circles, pretty much the same
  4112	   ones who remember Monty Python sketches, all it takes is the word
  4113	   "Candygram!", suitably timed, to get people rolling on the
  4114	   floor.) --- GLS]
  4115	
  4116	:canonical: [historically, `according to religious law'] adj. The
  4117	   usual or standard state or manner of something.  This word has a
  4118	   somewhat more technical meaning in mathematics.  Two formulas such
  4119	   as 9 + x and x + 9 are said to be equivalent because
  4120	   they mean the same thing, but the second one is in `canonical
  4121	   form' because it is written in the usual way, with the highest
  4122	   power of x first.  Usually there are fixed rules you can use
  4123	   to decide whether something is in canonical form.  The jargon
  4124	   meaning, a relaxation of the technical meaning, acquired its
  4125	   present loading in computer-science culture largely through its
  4126	   prominence in Alonzo Church's work in computation theory and
  4127	   mathematical logic (see {Knights of the Lambda Calculus}).
  4128	   Compare {vanilla}.
  4129	
  4130	   This word has an interesting history.  Non-technical academics do
  4131	   not use the adjective `canonical' in any of the senses defined
  4132	   above with any regularity; they do however use the nouns `canon'
  4133	   and `canonicity' (not *canonicalness or *canonicality). The
  4134	   `canon' of a given author is the complete body of authentic works
  4135	   by that author (this usage is familiar to Sherlock Holmes fans as
  4136	   well as to literary scholars).  `*The* canon' is the body of
  4137	   works in a given field (e.g., works of literature, or of art, or of
  4138	   music) deemed worthwhile for students to study and for scholars to
  4139	   investigate.
  4140	
  4141	   The word `canon' derives ultimately from the Greek
  4142	   `kanon'
  4143	   (akin to the English `cane') referring to a reed.  Reeds were used
  4144	   for measurement, and in Latin and later Greek the word `canon'
  4145	   meant a rule or a standard.  The establishment of a canon of
  4146	   scriptures within Christianity was meant to define a standard or a
  4147	   rule for the religion.  The above non-techspeak academic usages
  4148	   stem from this instance of a defined and accepted body of work.
  4149	   Alongside this usage was the promulgation of `canons' (`rules')
  4150	   for the government of the Catholic Church.  The techspeak usages
  4151	   ("according to religious law") derive from this use of the Latin
  4152	   `canon'.
  4153	
  4154	   Hackers invest this term with a playfulness that makes an ironic
  4155	   contrast with its historical meaning.  A true story: One Bob
  4156	   Sjoberg, new at the MIT AI Lab, expressed some annoyance at the use
  4157	   of jargon.  Over his loud objections, GLS and RMS made a point of
  4158	   using it as much as possible in his presence, and eventually it
  4159	   began to sink in.  Finally, in one conversation, he used the word
  4160	   `canonical' in jargon-like fashion without thinking.  Steele:
  4161	   "Aha!  We've finally got you talking jargon too!"  Stallman:
  4162	   "What did he say?"  Steele: "Bob just used `canonical' in the
  4163	   canonical way."
  4164	
  4165	   Of course, canonicality depends on context, but it is implicitly
  4166	   defined as the way *hackers* normally expect things to be.
  4167	   Thus, a hacker may claim with a straight face that `according to
  4168	   religious law' is *not* the canonical meaning of `canonical'.
  4169	
  4170	:card: n. 1. An electronic printed-circuit board (see also {tall
  4171	   card}, {short card}.  2. obs. Syn. {{punched card}}.
  4172	
  4173	:card walloper: n. An EDP programmer who grinds out batch programs
  4174	   that do stupid things like print people's paychecks.  Compare
  4175	   {code grinder}.  See also {{punched card}}, {eighty-column
  4176	   mind}.
  4177	
  4178	:careware: /keir'weir/ n. {Shareware} for which either the
  4179	   author suggests that some payment be made to a nominated charity
  4180	   or a levy directed to charity is included on top of the
  4181	   distribution charge.  Syn. {charityware}; compare
  4182	   {crippleware}, sense 2.
  4183	
  4184	:cargo cult programming: n. A style of (incompetent) programming
  4185	   dominated by ritual inclusion of code or program structures that
  4186	   serve no real purpose.  A cargo cult programmer will usually
  4187	   explain the extra code as a way of working around some bug
  4188	   encountered in the past, but usually neither the bug nor the reason
  4189	   the code apparently avoided the bug was ever fully understood
  4190	   (compare {shotgun debugging}, {voodoo programming}).
  4191	
  4192	   The term `cargo cult' is a reference to aboriginal religions that
  4193	   grew up in the South Pacific after World War II.  The practices of
  4194	   these cults center on building elaborate mockups of airplanes and
  4195	   military style landing strips in the hope of bringing the return of
  4196	   the god-like airplanes that brought such marvelous cargo during the
  4197	   war.  Hackish usage probably derives from Richard Feynman's
  4198	   characterization of certain practices as "cargo cult science" in
  4199	   his book `Surely You're Joking, Mr. Feynman' (W. W. Norton
  4200	   & Co, New York 1985, ISBN 0-393-01921-7).
  4201	
  4202	:cascade: n. 1. A huge volume of spurious error-message output
  4203	   produced by a compiler with poor error recovery.  This can happen
  4204	   when one initial error throws the parser out of synch so that much
  4205	   of the remaining program text is interpreted as garbaged or
  4206	   ill-formed.  2. A chain of USENET followups each adding some
  4207	   trivial variation of riposte to the text of the previous one, all
  4208	   of which is reproduced in the new message; an {include war} in which
  4209	   the object is to create a sort of communal graffito.
  4210	
  4211	:case and paste: [from `cut and paste'] n. 1. The addition of a new
  4212	   {feature} to an existing system by selecting the code from an
  4213	   existing feature and pasting it in with minor changes.  Common in
  4214	   telephony circles because most operations in a telephone switch are
  4215	   selected using `case' statements.  Leads to {software bloat}.
  4216	
  4217	   In some circles of EMACS users this is called `programming by
  4218	   Meta-W', because Meta-W is the EMACS command for copying a block of
  4219	   text to a kill buffer in preparation to pasting it in elsewhere.
  4220	   The term is condescending, implying that the programmer is acting
  4221	   mindlessly rather than thinking carefully about what is required to
  4222	   integrate the code for two similar cases.
  4223	
  4224	:casters-up mode: [IBM] n. Yet another synonym for `broken' or
  4225	   `down'.  Usually connotes a major failure.  A system (hardware or
  4226	   software) which is `down' may be already being restarted before
  4227	   the failure is noticed, whereas one which is `casters up' is
  4228	   usually a good excuse to take the rest of the day off (as long as
  4229	   you're not responsible for fixing it).
  4230	
  4231	:casting the runes: n. What a {guru} does when you ask him or
  4232	   her to run a particular program and type at it because it never
  4233	   works for anyone else; esp. used when nobody can ever see what
  4234	   the guru is doing different from what J. Random Luser does.
  4235	   Compare {incantation}, {runes}, {examining the entrails};
  4236	   also see the AI koan about Tom Knight in "{A Selection
  4237	   of AI Koans}" ({appendix A}).
  4238	
  4239	:cat: [from `catenate' via {{UNIX}} `cat(1)'] vt.
  4240	   1. [techspeak] To spew an entire file to the screen or some other
  4241	   output sink without pause.  2. By extension, to dump large amounts
  4242	   of data at an unprepared target or with no intention of browsing it
  4243	   carefully.  Usage: considered silly.  Rare outside UNIX sites.  See
  4244	   also {dd}, {BLT}.
  4245	
  4246	   Among UNIX fans, `cat(1)' is considered an excellent example
  4247	   of user-interface design, because it outputs the file contents
  4248	   without such verbosity as spacing or headers between the files, and
  4249	   because it does not require the files to consist of lines of text,
  4250	   but works with any sort of data.
  4251	
  4252	   Among UNIX-haters, `cat(1)' is considered the {canonical}
  4253	   example of *bad* user-interface design.  This because it is more
  4254	   often used to {blast} a file to standard output than to
  4255	   concatenate two files.  The name `cat' for the former
  4256	   operation is just as unintuitive as, say, LISP's {cdr}.
  4257	
  4258	   Of such oppositions are {holy wars} made....
  4259	
  4260	:catatonic: adj. Describes a condition of suspended animation in
  4261	   which something is so {wedged} or {hung} that it makes no
  4262	   response.  If you are typing on a terminal and suddenly the
  4263	   computer doesn't even echo the letters back to the screen as you
  4264	   type, let alone do what you're asking it to do, then the computer
  4265	   is suffering from catatonia (possibly because it has crashed).
  4266	   "There I was in the middle of a winning game of {nethack} and it
  4267	   went catatonic on me!  Aaargh!" Compare {buzz}.
  4268	
  4269	:cd tilde: /see-dee til-d*/ vi.  To go home.  From the UNIX
  4270	   C-shell and Korn-shell command `cd ~', which takes
  4271	   one `$HOME'.  By extension, may be used with other arguments;
  4272	   thus, over an electronic chat link, `cd ~coffee'
  4273	   would mean "I'm going to the coffee machine."
  4274	
  4275	:cdr: /ku'dr/ or /kuh'dr/ [from LISP] vt. To skip past the
  4276	   first item from a list of things (generalized from the LISP
  4277	   operation on binary tree structures, which returns a list
  4278	   consisting of all but the first element of its argument).  In the
  4279	   form `cdr down', to trace down a list of elements:  "Shall we
  4280	   cdr down the agenda?"  Usage: silly.  See also {loop through}.
  4281	
  4282	   Historical note: The instruction format of the IBM 7090 that hosted
  4283	   the original LISP implementation featured two 15-bit fields called
  4284	   the `address' and `decrement' parts.  The term `cdr' was originally
  4285	   `Contents of Decrement part of Register'.  Similarly, `car' stood
  4286	   for `Contents of Address part of Register'.
  4287	
  4288	   The cdr and car operations have since become bases for
  4289	   formation of compound metaphors in non-LISP contexts.  GLS recalls,
  4290	   for example, a programming project in which strings were
  4291	   represented as linked lists; the get-character and skip-character
  4292	   operations were of course called CHAR and CHDR.
  4293	
  4294	:chad: /chad/ n. 1. The perforated edge strips on printer paper, after
  4295	   they have been separated from the printed portion.  Also called
  4296	   {selvage} and {perf}.  2. obs. The confetti-like paper bits punched
  4297	   out of cards or paper tape; this was also called `chaff', `computer
  4298	   confetti', and `keypunch droppings'.
  4299	
  4300	   Historical note: One correspondent believes `chad' (sense 2)
  4301	   derives from the Chadless keypunch (named for its inventor), which
  4302	   cut little u-shaped tabs in the card to make a hole when the tab
  4303	   folded back, rather than punching out a circle/rectangle; it was
  4304	   clear that if the Chadless keypunch didn't make them, then the
  4305	   stuff that other keypunches made had to be `chad'.
  4306	
  4307	:chad box: n. {Iron Age} card punches contained boxes inside them,
  4308	   about the size of a lunchbox (or in some models a large
  4309	   wastebasket), that held the {chad} (sense 2).  You had to open
  4310	   the covers of the card punch periodically and empty the chad box.
  4311	   The {bit bucket} was notionally the equivalent device in the CPU
  4312	   enclosure, which was typically across the room in another great
  4313	   gray-and-blue box.
  4314	
  4315	:chain: 1. [orig. from BASIC's `CHAIN' statement] vi. To hand
  4316	   off execution to a child or successor without going through the
  4317	   {OS} command interpreter that invoked it.  The state of the
  4318	   parent program is lost and there is no returning to it.  Though
  4319	   this facility used to be common on memory-limited micros and is
  4320	   still widely supported for backward compatibility, the jargon usage
  4321	   is semi-obsolescent; in particular, most UNIX programmers will
  4322	   think of this as an {exec}.  Oppose the more modern
  4323	   {subshell}.  2. A series of linked data areas within an
  4324	   operating system or application.  `Chain rattling' is the process
  4325	   of repeatedly running through the linked data areas searching for
  4326	   one which is of interest to the executing program.  The implication
  4327	   is that there is a very large number of links on the chain.
  4328	
  4329	:channel: [IRC] n.  The basic unit of discussion on {IRC}.  Once
  4330	   one joins a channel, everything one types is read by others on that
  4331	   channel.  Channels can either be named with numbers or with strings
  4332	   that begin with a `#' sign, and can have topic descriptions (which
  4333	   are generally irrelevant to the actual subject of discussion).
  4334	   Some notable channels are `#initgame', `#hottub', and
  4335	   `#report'.  At times of international crisis, `#report'
  4336	   has hundreds of members, some of whom take turns listening to
  4337	   various news services and summarizing the news, or in some cases,
  4338	   giving first-hand accounts of the action (e.g., Scud missile
  4339	   attacks in Tel Aviv during the Gulf War in 1991).
  4340	   
  4341	:channel hopping: [IRC, GEnie] n.  To rapidly switch channels on
  4342	   {IRC}, or GEnie chat board, just as a social butterfly might hop
  4343	   from one group to another at a party.  This may derive from the TV
  4344	   watcher's idiom `channel surfing'.
  4345	
  4346	:channel op: /chan'l op/ [IRC] n. Someone who is endowed with
  4347	   privileges on a particular {IRC} channel; commonly abbreviated
  4348	   `chanop' or `CHOP'.  These privileges include the right to
  4349	   {kick} users, to change various status bits, and to make others
  4350	   into CHOPs.
  4351	   
  4352	:chanop: /chan'-op/ [IRC] n. See {channel op}.
  4353	
  4354	:char: /keir/ or /char/; rarely, /kar/ n. Shorthand for
  4355	   `character'.  Esp. used by C programmers, as `char' is
  4356	   C's typename for character data.
  4357	
  4358	:charityware: /char'it-ee-weir`/ n. Syn. {careware}.
  4359	
  4360	:chase pointers: 1. vi. To go through multiple levels of
  4361	   indirection, as in traversing a linked list or graph structure.
  4362	   Used esp. by programmers in C, where explicit pointers are a very
  4363	   common data type.  This is techspeak, but it remains jargon when
  4364	   used of human networks.  "I'm chasing pointers.  Bob said you
  4365	   could tell me who to talk to about...." See {dangling
  4366	   pointer} and {snap}.  2. [Cambridge] `pointer chase' or
  4367	   `pointer hunt': The process of going through a dump
  4368	   (interactively or on a large piece of paper printed with hex
  4369	   {runes}) following dynamic data-structures.  Used only in a
  4370	   debugging context.
  4371	
  4372	:check: n. A hardware-detected error condition, most commonly used
  4373	   to refer to actual hardware failures rather than software-induced
  4374	   traps.  E.g., a `parity check' is the result of a
  4375	   hardware-detected parity error.  Recorded here because it's often
  4376	   humorously extended to non-technical problems. For example, the
  4377	   term `child check' has been used to refer to the problems caused
  4378	   by a small child who is curious to know what happens when s/he
  4379	   presses all the cute buttons on a computer's console (of course,
  4380	   this particular problem could have been prevented with
  4381	   {molly-guard}s).
  4382	
  4383	:chemist: [Cambridge] n. Someone who wastes computer time on
  4384	   {number-crunching} when you'd far rather the machine were doing
  4385	   something more productive, such as working out anagrams of your
  4386	   name or printing Snoopy calendars or running {life} patterns.
  4387	   May or may not refer to someone who actually studies chemistry.
  4388	
  4389	:Chernobyl chicken: n. See {laser chicken}.
  4390	
  4391	:Chernobyl packet: /cher-noh'b*l pak'*t/ n. A network packet that
  4392	   induces {network meltdown} (the result of a {broadcast
  4393	   storm}), in memory of the April 1986 nuclear accident at Chernobyl
  4394	   in Ukraine.  The typical scenario involves an IP Ethernet datagram
  4395	   that passes through a gateway with both source and destination
  4396	   Ether and IP address set as the respective broadcast addresses for
  4397	   the subnetworks being gated between.  Compare {Christmas tree
  4398	   packet}.
  4399	
  4400	:chicken head: [Commodore] n. The Commodore Business Machines logo,
  4401	   which strongly resembles a poultry part.  Rendered in ASCII as
  4402	   `C='.  With the arguable exception of the Amiga (see {amoeba}),
  4403	   Commodore's machines are notoriously crocky little {bitty box}es
  4404	   (see also {PETSCII}).  Thus, this usage may owe something to
  4405	   Philip K.  Dick's novel `Do Androids Dream of Electric Sheep?'
  4406	   (the basis for the movie `Blade Runner'), in which a
  4407	   `chickenhead' is a mutant with below-average intelligence.
  4408	
  4409	:chiclet keyboard: n. A keyboard with small rectangular or
  4410	   lozenge-shaped rubber or plastic keys that look like pieces of
  4411	   chewing gum.  (Chiclets is the brand name of a variety of chewing
  4412	   gum that does in fact resemble the keys of chiclet keyboards.)
  4413	   Used esp. to describe the original IBM PCjr keyboard.  Vendors
  4414	   unanimously liked these because they were cheap, and a lot of early
  4415	   portable and laptop products got launched using them.  Customers
  4416	   rejected the idea with almost equal unanimity, and chiclets are not
  4417	   often seen on anything larger than a digital watch any more.
  4418	
  4419	:chine nual: /sheen'yu-*l/ [MIT] n.,obs. The Lisp Machine Manual, so
  4420	   called because the title was wrapped around the cover so only those
  4421	   letters showed on the front.
  4422	
  4423	:Chinese Army technique: n. Syn. {Mongolian Hordes technique}.
  4424	
  4425	:choke: v. 1. To reject input, often ungracefully.  "NULs make System
  4426	   V's `lpr(1)' choke."  "I tried building an {EMACS} binary to
  4427	   use {X}, but `cpp(1)' choked on all those `#define's."
  4428	   See {barf}, {gag}, {vi}.   2. [MIT] More generally, to fail at any
  4429	   endeavor, but with some flair or bravado; the popular definition is
  4430	   "to snatch defeat from the jaws of victory."
  4431	
  4432	:chomp: vi. To {lose}; specifically, to chew on something of
  4433	   which more was bitten off than one can.  Probably related to
  4434	   gnashing of teeth.  See {bagbiter}.  A hand gesture commonly
  4435	   accompanies this.  To perform it, hold the four fingers together
  4436	   and place the thumb against their tips.  Now open and close your
  4437	   hand rapidly to suggest a biting action (much like what Pac-Man
  4438	   does in the classic video game, though this pantomime seems to
  4439	   predate that).  The gesture alone means `chomp chomp' (see
  4440	   "{Verb Doubling}" in the "{Jargon
  4441	   Construction}" section of the Prependices).  The hand may be
  4442	   pointed at the object of complaint, and for real emphasis you can
  4443	   use both hands at once.  Doing this to a person is equivalent to
  4444	   saying "You chomper!"  If you point the gesture at yourself, it
  4445	   is a humble but humorous admission of some failure.  You might do
  4446	   this if someone told you that a program you had written had failed
  4447	   in some surprising way and you felt dumb for not having anticipated
  4448	   it.
  4449	
  4450	:chomper: n. Someone or something that is chomping; a loser.  See
  4451	   {loser}, {bagbiter}, {chomp}.
  4452	
  4453	:CHOP: /chop/ [IRC] n. See {channel op}.
  4454	
  4455	:Christmas tree: n. A kind of RS-232 line tester or breakout box
  4456	   featuring rows of blinking red and green LEDs suggestive of
  4457	   Christmas lights.
  4458	
  4459	:Christmas tree packet: n. A packet with every single option set for
  4460	   whatever protocol is in use.  See {kamikaze packet}, {Chernobyl
  4461	   packet}.  (The term doubtless derives from a fanciful image of each
  4462	   little option bit being represented by a different-colored light
  4463	   bulb, all turned on.)
  4464	
  4465	:chrome: [from automotive slang via wargaming] n. Showy features
  4466	   added to attract users but contributing little or nothing to
  4467	   the power of a system.  "The 3D icons in Motif are just chrome,
  4468	   but they certainly are *pretty* chrome!"  Distinguished from
  4469	   {bells and whistles} by the fact that the latter are usually
  4470	   added to gratify developers' own desires for featurefulness. 
  4471	   Often used as a term of contempt.
  4472	
  4473	:chug: vi. To run slowly; to {grind} or {grovel}.  "The disk is
  4474	   chugging like crazy."
  4475	
  4476	:Church of the SubGenius: n. A mutant offshoot of
  4477	   {Discordianism} launched in 1981 as a spoof of fundamentalist
  4478	   Christianity by the `Reverend' Ivan Stang, a brilliant satirist
  4479	   with a gift for promotion.  Popular among hackers as a rich source
  4480	   of bizarre imagery and references such as "Bob" the divine
  4481	   drilling-equipment salesman, the Benevolent Space Xists, and the
  4482	   Stark Fist of Removal.  Much SubGenius theory is concerned with the
  4483	   acquisition of the mystical substance or quality of `slack'.
  4484	
  4485	:Cinderella Book: [CMU] n. `Introduction to Automata Theory,
  4486	   Languages, and Computation', by John Hopcroft and Jeffrey Ullman,
  4487	   (Addison-Wesley, 1979).  So called because the cover depicts a girl
  4488	   (putatively Cinderella) sitting in front of a Rube Goldberg device
  4489	   and holding a rope coming out of it.  The back cover depicts the
  4490	   girl with the device in shambles after she has pulled on the rope.
  4491	   See also {{book titles}}.
  4492	
  4493	:CI$: // n. Hackerism for `CIS', CompuServe Information Service.
  4494	   The dollar sign refers to CompuServe's rather steep line charges.
  4495	   Often used in {sig block}s just before a CompuServe address.
  4496	   Syn. {Compu$erve}.
  4497	
  4498	:Classic C: /klas'ik C/ [a play on `Coke Classic'] n. The
  4499	   C programming language as defined in the first edition of {K&R},
  4500	   with some small additions.  It is also known as `K&R C'.  The name
  4501	   came into use while C was being standardized by the ANSI X3J11
  4502	   committee.  Also `C Classic'.  This is sometimes applied
  4503	   elsewhere: thus, `X Classic', where X = Star Trek (referring to the
  4504	   original TV series) or X = PC (referring to IBM's ISA-bus machines
  4505	   as opposed to the PS/2 series).  This construction is especially
  4506	   used of product series in which the newer versions are considered
  4507	   serious losers relative to the older ones.
  4508	
  4509	:clean: 1. adj. Used of hardware or software designs, implies
  4510	   `elegance in the small', that is, a design or implementation that
  4511	   may not hold any surprises but does things in a way that is
  4512	   reasonably intuitive and relatively easy to comprehend from the
  4513	   outside.  The antonym is `grungy' or {crufty}.  2. v. To remove
  4514	   unneeded or undesired files in a effort to reduce clutter:  "I'm
  4515	   cleaning up my account."  "I cleaned up the garbage and now have
  4516	   100 Meg free on that partition."
  4517	
  4518	:CLM: /C-L-M/ [Sun: `Career Limiting Move'] 1. n. An action
  4519	   endangering one's future prospects of getting plum projects and
  4520	   raises, and possibly one's job:  "His Halloween costume was a
  4521	   parody of his manager.  He won the prize for `best CLM'."
  4522	   2. adj.  Denotes extreme severity of a bug, discovered by a
  4523	   customer and obviously missed earlier because of poor testing:
  4524	   "That's a CLM bug!"
  4525	
  4526	:clobber: vt. To overwrite, usually unintentionally: "I walked off
  4527	   the end of the array and clobbered the stack."  Compare {mung},
  4528	   {scribble}, {trash}, and {smash the stack}.
  4529	
  4530	:clocks: n. Processor logic cycles, so called because each
  4531	   generally corresponds to one clock pulse in the processor's timing.
  4532	   The relative execution times of instructions on a machine are
  4533	   usually discussed in clocks rather than absolute fractions of a
  4534	   second; one good reason for this is that clock speeds for various
  4535	   models of the machine may increase as technology improves, and it
  4536	   is usually the relative times one is interested in when discussing
  4537	   the instruction set.  Compare {cycle}.
  4538	
  4539	:clone: n. 1. An exact duplicate: "Our product is a clone of
  4540	   their product."  Implies a legal reimplementation from
  4541	   documentation or by reverse-engineering.  Also connotes lower
  4542	   price.  2. A shoddy, spurious copy: "Their product is a
  4543	   clone of our product."  3. A blatant ripoff, most likely violating
  4544	   copyright, patent, or trade secret protections: "Your
  4545	   product is a clone of my product."  This use implies legal
  4546	   action is pending.  4. A `PC clone'; a PC-BUS/ISA or
  4547	   EISA-compatible 80x86-based microcomputer (this use is sometimes
  4548	   spelled `klone' or `PClone').  These invariably have much
  4549	   more bang for the buck than the IBM archetypes they resemble.
  4550	   5. In the construction `UNIX clone': An OS designed to deliver
  4551	   a UNIX-lookalike environment without UNIX license fees, or with
  4552	   additional `mission-critical' features such as support for
  4553	   real-time programming.  6. v. To make an exact copy of something.
  4554	   "Let me clone that" might mean "I want to borrow that paper so I
  4555	   can make a photocopy" or "Let me get a copy of that file before
  4556	   you {mung} it".
  4557	
  4558	:clover key: [Mac users] n. See {feature key}.
  4559	
  4560	:clustergeeking: /kluh'st*r-gee`king/ [CMU] n.  Spending more time
  4561	   at a computer cluster doing CS homework than most people spend
  4562	   breathing.
  4563	
  4564	:COBOL: /koh'bol/ [COmmon Business-Oriented Language] n.
  4565	   (Synonymous with {evil}.)  A weak, verbose, and flabby language
  4566	   used by {card walloper}s to do boring mindless things on
  4567	   {dinosaur} mainframes.  Hackers believe that all COBOL
  4568	   programmers are {suit}s or {code grinder}s, and no
  4569	   self-respecting hacker will ever admit to having learned the
  4570	   language.  Its very name is seldom uttered without ritual
  4571	   expressions of disgust or horror.  See also {fear and loathing},
  4572	   {software rot}.
  4573	
  4574	:COBOL fingers: /koh'bol fing'grz/ n. Reported from Sweden, a
  4575	   (hypothetical) disease one might get from coding in COBOL.  The
  4576	   language requires code verbose beyond all reason; thus it is
  4577	   alleged that programming too much in COBOL causes one's fingers to
  4578	   wear down to stubs by the endless typing.  "I refuse to type in
  4579	   all that source code again; it would give me COBOL fingers!"
  4580	
  4581	:code grinder: n. 1. A {suit}-wearing minion of the sort hired in
  4582	   legion strength by banks and insurance companies to implement
  4583	   payroll packages in RPG and other such unspeakable horrors.  In its
  4584	   native habitat, the code grinder often removes the suit jacket to
  4585	   reveal an underplumage consisting of button-down shirt (starch
  4586	   optional) and a tie.  In times of dire stress, the sleeves (if
  4587	   long) may be rolled up and the tie loosened about half an inch.  It
  4588	   seldom helps.  The {code grinder}'s milieu is about as far from
  4589	   hackerdom as one can get and still touch a computer; the term
  4590	   connotes pity.  See {Real World}, {suit}.  2. Used of or to a
  4591	   hacker, a really serious slur on the person's creative ability;
  4592	   connotes a design style characterized by primitive technique,
  4593	   rule-boundedness, {brute force}, and utter lack of imagination.
  4594	   Compare {card walloper}; contrast {hacker}, {real
  4595	   programmer}.
  4596	
  4597	:code police: [by analogy with George Orwell's `thought police'] n.
  4598	   A mythical team of Gestapo-like storm troopers that might burst
  4599	   into one's office and arrest one for violating programming style
  4600	   rules.  May be used either seriously, to underline a claim that a
  4601	   particular style violation is dangerous, or ironically, to suggest
  4602	   that the practice under discussion is condemned mainly by
  4603	   anal-retentive {weenie}s.  "Dike out that goto or the code
  4604	   police will get you!"  The ironic usage is perhaps more common.
  4605	
  4606	:codewalker: n. A program component that traverses other programs for
  4607	   a living.  Compilers have codewalkers in their front ends; so do
  4608	   cross-reference generators and some database front ends.  Other
  4609	   utility programs that try to do too much with source code may turn
  4610	   into codewalkers.  As in "This new `vgrind' feature would require a
  4611	   codewalker to implement."
  4612	
  4613	:coefficient of X: n. Hackish speech makes rather heavy use of
  4614	   pseudo-mathematical metaphors.  Four particularly important ones
  4615	   involve the terms `coefficient', `factor', `index', and
  4616	   `quotient'.  They are often loosely applied to things you
  4617	   cannot really be quantitative about, but there are subtle
  4618	   distinctions among them that convey information about the way the
  4619	   speaker mentally models whatever he or she is describing.
  4620	
  4621	   `Foo factor' and `foo quotient' tend to describe something for
  4622	   which the issue is one of presence or absence.  The canonical
  4623	   example is {fudge factor}.  It's not important how much you're
  4624	   fudging; the term simply acknowledges that some fudging is needed.
  4625	   You might talk of liking a movie for its silliness factor.
  4626	   Quotient tends to imply that the property is a ratio of two
  4627	   opposing factors: "I would have won except for my luck quotient."
  4628	   This could also be "I would have won except for the luck factor",
  4629	   but using *quotient* emphasizes that it was bad luck
  4630	   overpowering good luck (or someone else's good luck overpowering
  4631	   your own).
  4632	
  4633	   `Foo index' and `coefficient of foo' both tend to imply
  4634	   that foo is, if not strictly measurable, at least something that
  4635	   can be larger or smaller.  Thus, you might refer to a paper or
  4636	   person as having a `high bogosity index', whereas you would be less
  4637	   likely to speak of a `high bogosity factor'.  `Foo index' suggests
  4638	   that foo is a condensation of many quantities, as in the mundane
  4639	   cost-of-living index; `coefficient of foo' suggests that foo is a
  4640	   fundamental quantity, as in a coefficient of friction.  The choice
  4641	   between these terms is often one of personal preference; e.g., some
  4642	   people might feel that bogosity is a fundamental attribute and thus
  4643	   say `coefficient of bogosity', whereas others might feel it is a
  4644	   combination of factors and thus say `bogosity index'.
  4645	
  4646	:cokebottle: /kohk'bot-l/ n. Any very unusual character,
  4647	   particularly one you can't type because it it isn't on your
  4648	   keyboard.  MIT people used to complain about the
  4649	   `control-meta-cokebottle' commands at SAIL, and SAIL people
  4650	   complained right back about the `{altmode}-altmode-cokebottle'
  4651	   commands at MIT.  After the demise of the {space-cadet
  4652	   keyboard}, `cokebottle' faded away as serious usage, but was
  4653	   often invoked humorously to describe an (unspecified) weird or
  4654	   non-intuitive keystroke command.  It may be due for a second
  4655	   inning, however.  The OSF/Motif window manager, `mwm(1)', has
  4656	   a reserved keystroke for switching to the default set of
  4657	   keybindings and behavior.  This keystroke is (believe it or not)
  4658	   `control-meta-bang' (see {bang}).  Since the exclamation point
  4659	   looks a lot like an upside down Coke bottle, Motif hackers have
  4660	   begun referring to this keystroke as `cokebottle'.  See also
  4661	   {quadruple bucky}.
  4662	
  4663	:cold boot: n. See {boot}.
  4664	
  4665	:COME FROM: n. A semi-mythical language construct dual to the `go
  4666	   to'; `COME FROM' <label> would cause the referenced label to
  4667	   act as a sort of trapdoor, so that if the program ever reached it
  4668	   control would quietly and {automagically} be transferred to the
  4669	   statement following the `COME FROM'.  `COME FROM' was
  4670	   first proposed in R.L. Clark's "A Linguistic Contribution to
  4671	   GOTO-less programming", which appeared in a 1973 {Datamation}
  4672	   issue (and was reprinted in the April 1984 issue of
  4673	   `Communications of the ACM').  This parodied the then-raging
  4674	   `structured programming' {holy wars} (see {considered
  4675	   harmful}).  Mythically, some variants are the `assigned COME
  4676	   FROM' and the `computed COME FROM' (parodying some nasty control
  4677	   constructs in FORTRAN and some extended BASICs).  Of course,
  4678	   multi-tasking (or non-determinism) could be implemented by having
  4679	   more than one `COME FROM' statement coming from the same
  4680	   label.
  4681	
  4682	   In some ways the FORTRAN `DO' looks like a `COME FROM'
  4683	   statement.  After the terminating statement number/`CONTINUE'
  4684	   is reached, control continues at the statement following the DO.
  4685	   Some generous FORTRANs would allow arbitrary statements (other than
  4686	   `CONTINUE') for the statement, leading to examples like:
  4687	
  4688	           DO 10 I=1,LIMIT
  4689	     C imagine many lines of code here, leaving the
  4690	     C original DO statement lost in the spaghetti...
  4691	           WRITE(6,10) I,FROB(I)
  4692	      10   FORMAT(1X,I5,G10.4)
  4693	
  4694	   in which the trapdoor is just after the statement labeled 10.
  4695	   (This is particularly surprising because the label doesn't appear
  4696	   to have anything to do with the flow of control at all!)
  4697	
  4698	   While sufficiently astonishing to the unsuspecting reader, this
  4699	   form of `COME FROM' statement isn't completely general.  After
  4700	   all, control will eventually pass to the following statement.  The
  4701	   implementation of the general form was left to Univac FORTRAN,
  4702	   ca. 1975 (though a roughly similar feature existed on the IBM 7040
  4703	   ten years earlier).  The statement `AT 100' would perform a
  4704	   `COME FROM 100'.  It was intended strictly as a debugging aid,
  4705	   with dire consequences promised to anyone so deranged as to use it
  4706	   in production code.  More horrible things had already been
  4707	   perpetrated in production languages, however; doubters need only
  4708	   contemplate the `ALTER' verb in {COBOL}.
  4709	
  4710	   `COME FROM' was supported under its own name for the first
  4711	   time 15 years later, in C-INTERCAL (see {INTERCAL},
  4712	   {retrocomputing}); knowledgeable observers are still reeling
  4713	   from the shock.
  4714	
  4715	:comm mode: /kom mohd/ [ITS: from the feature supporting on-line
  4716	   chat; the term may spelled with one or two m's] Syn. for {talk
  4717	   mode}.
  4718	
  4719	:command key: [Mac users] n. Syn. {feature key}.
  4720	
  4721	:comment out: vt. To surround a section of code with comment
  4722	   delimiters or to prefix every line in the section with a comment
  4723	   marker; this prevents it from being compiled or interpreted.  Often
  4724	   done when the code is redundant or obsolete, but you want to leave
  4725	   it in the source to make the intent of the active code clearer;
  4726	   also when the code in that section is broken and you want to bypass
  4727	   it in order to debug some other part of the code.  Compare
  4728	   {condition out}, usually the preferred technique in languages
  4729	   (such as {C}) that make it possible.
  4730	
  4731	:Commonwealth Hackish:: n. Hacker jargon as spoken outside
  4732	   the U.S., esp. in the British Commonwealth.  It is reported that
  4733	   Commonwealth speakers are more likely to pronounce truncations like
  4734	   `char' and `soc', etc., as spelled (/char/, /sok/), as
  4735	   opposed to American /keir/ and /sohsh/.  Dots in {newsgroup}
  4736	   names tend to be pronounced more often (so soc.wibble is /sok dot
  4737	   wib'l/ rather than /sohsh wib'l/).  The prefix {meta} may be
  4738	   pronounced /mee't*/; similarly, Greek letter beta is often
  4739	   /bee't*/, zeta is often /zee't*/, and so forth.  Preferred
  4740	   {metasyntactic variable}s include {blurgle}, `eek',
  4741	   `ook', `frodo', and `bilbo'; `wibble',
  4742	   `wobble', and in emergencies `wubble'; `banana',
  4743	   `wombat', `frog', {fish}, and so on and on (see
  4744	   {foo}, sense 4).
  4745	
  4746	   Alternatives to verb doubling include suffixes `-o-rama',
  4747	   `frenzy' (as in feeding frenzy), and `city' (examples: "barf
  4748	   city!"  "hack-o-rama!"  "core dump frenzy!").  Finally, note
  4749	   that the American terms `parens', `brackets', and `braces' for (),
  4750	   [], and {} are uncommon; Commonwealth hackish prefers
  4751	   `brackets', `square brackets', and `curly brackets'.  Also, the
  4752	   use of `pling' for {bang} is common outside the United States.
  4753	
  4754	   See also {attoparsec}, {calculator}, {chemist},
  4755	   {console jockey}, {fish}, {go-faster stripes},
  4756	   {grunge}, {hakspek}, {heavy metal}, {leaky heap},
  4757	   {lord high fixer}, {loose bytes}, {muddie}, {nadger},
  4758	   {noddy}, {psychedelicware}, {plingnet}, {raster
  4759	   blaster}, {RTBM}, {seggie}, {spod}, {sun lounge},
  4760	   {terminal junkie}, {tick-list features}, {weeble},
  4761	   {weasel}, {YABA}, and notes or definitions under {Bad
  4762	   Thing}, {barf}, {bogus}, {bum}, {chase pointers},
  4763	   {cosmic rays}, {crippleware}, {crunch}, {dodgy},
  4764	   {gonk}, {hamster}, {hardwarily}, {mess-dos},
  4765	   {nybble}, {proglet}, {root}, {SEX}, {tweak}, and
  4766	   {xyzzy}.
  4767	
  4768	:compact: adj. Of a design, describes the valuable property that it
  4769	   can all be apprehended at once in one's head.  This generally means
  4770	   the thing created from the design can be used with greater facility
  4771	   and fewer errors than an equivalent tool that is not compact.
  4772	   Compactness does not imply triviality or lack of power; for
  4773	   example, C is compact and FORTRAN is not, but C is more powerful
  4774	   than FORTRAN.  Designs become non-compact through accreting
  4775	   {feature}s and {cruft} that don't merge cleanly into the
  4776	   overall design scheme (thus, some fans of {Classic C} maintain
  4777	   that ANSI C is no longer compact).
  4778	
  4779	:compiler jock: n. See {jock} (sense 2).
  4780	
  4781	:compress: [UNIX] vt. When used without a qualifier, generally
  4782	   refers to {crunch}ing of a file using a particular
  4783	   C implementation of compression by James A. Woods et al. and
  4784	   widely circulated via {USENET}; use of {crunch} itself in
  4785	   this sense is rare among UNIX hackers.  Specifically, compress is
  4786	   built around the Lempel-Ziv-Welch algorithm as described in "A
  4787	   Technique for High Performance Data Compression", Terry A. Welch,
  4788	   `IEEE Computer', vol. 17, no. 6 (June 1984), pp. 8-19.
  4789	
  4790	:Compu$erve: n. See {CI$}.  The synonyms CompuSpend and
  4791	   Compu$pend are also reported.
  4792	
  4793	:computer confetti: n. Syn. {chad}.  Though this term is common,
  4794	   this use of punched-card chad is not a good idea, as the pieces are
  4795	   stiff and have sharp corners that could injure the eyes.  GLS
  4796	   reports that he once attended a wedding at MIT during which he and
  4797	   a few other guests enthusiastically threw chad instead of rice. The
  4798	   groom later grumbled that he and his bride had spent most of the
  4799	   evening trying to get the stuff out of their hair.
  4800	
  4801	:computer geek: n. One who eats (computer) bugs for a living.  One
  4802	   who fulfills all the dreariest negative stereotypes about hackers:
  4803	   an asocial, malodorous, pasty-faced monomaniac with all the
  4804	   personality of a cheese grater.  Cannot be used by outsiders
  4805	   without implied insult to all hackers; compare black-on-black usage
  4806	   of `nigger'.  A computer geek may be either a fundamentally
  4807	   clueless individual or a proto-hacker in {larval stage}.  Also
  4808	   called `turbo nerd', `turbo geek'.  See also {propeller head},
  4809	   {clustergeeking}, {geek out}, {wannabee}, {terminal
  4810	   junkie}, {spod}, {weenie}.
  4811	
  4812	:computron: /kom'pyoo-tron`/ n. 1. A notional unit of computing
  4813	   power combining instruction speed and storage capacity, dimensioned
  4814	   roughly in instructions-per-second times megabytes-of-main-store
  4815	   times megabytes-of-mass-storage.  "That machine can't run GNU
  4816	   EMACS, it doesn't have enough computrons!"  This usage is usually
  4817	   found in metaphors that treat computing power as a fungible
  4818	   commodity good, like a crop yield or diesel horsepower.  See
  4819	   {bitty box}, {Get a real computer!}, {toy}, {crank}.
  4820	   2. A mythical subatomic particle that bears the unit quantity of
  4821	   computation or information, in much the same way that an electron
  4822	   bears one unit of electric charge (see also {bogon}).  An
  4823	   elaborate pseudo-scientific theory of computrons has been developed
  4824	   based on the physical fact that the molecules in a solid object
  4825	   move more rapidly as it is heated.  It is argued that an object
  4826	   melts because the molecules have lost their information about where
  4827	   they are supposed to be (that is, they have emitted computrons).
  4828	   This explains why computers get so hot and require air
  4829	   conditioning; they use up computrons.  Conversely, it should be
  4830	   possible to cool down an object by placing it in the path of a
  4831	   computron beam.  It is believed that this may also explain why
  4832	   machines that work at the factory fail in the computer room: the
  4833	   computrons there have been all used up by the other hardware.
  4834	   (This theory probably owes something to the "Warlock" stories
  4835	   by Larry Niven, the best known being "What Good is a Glass
  4836	   Dagger?", in which magic is fueled by an exhaustible natural
  4837	   resource called `mana'.)
  4838	
  4839	:condition out: vt. To prevent a section of code from being compiled
  4840	   by surrounding it with a conditional-compilation directive whose
  4841	   condition is always false.  The {canonical} examples are `#if
  4842	   0' (or `#ifdef notdef', though some find this {bletcherous})
  4843	   and `#endif' in C.  Compare {comment out}.
  4844	
  4845	:condom: n. 1. The protective plastic bag that accompanies 3.5-inch
  4846	   microfloppy diskettes.  Rarely, also used of (paper) disk
  4847	   envelopes.  Unlike the write protect tab, the condom (when left on)
  4848	   not only impedes the practice of {SEX} but has also been shown
  4849	   to have a high failure rate as drive mechanisms attempt to access
  4850	   the disk --- and can even fatally frustrate insertion.  2. The
  4851	   protective cladding on a {light pipe}.
  4852	
  4853	:confuser: n. Common soundalike slang for `computer'.  Usually
  4854	   encountered in compounds such as `confuser room', `personal
  4855	   confuser', `confuser guru'.  Usage: silly.
  4856	
  4857	:connector conspiracy: [probably came into prominence with the
  4858	   appearance of the KL-10 (one model of the {PDP-10}), none of
  4859	   whose connectors matched anything else] n. The tendency of
  4860	   manufacturers (or, by extension, programmers or purveyors of
  4861	   anything) to come up with new products that don't fit together
  4862	   with the old stuff, thereby making you buy either all new stuff or
  4863	   expensive interface devices.  The KL-10 Massbus connector was
  4864	   actually *patented* by DEC, which reputedly refused to license
  4865	   the design and thus effectively locked third parties out of
  4866	   competition for the lucrative Massbus peripherals market.  This is
  4867	   a source of never-ending frustration for the diehards who maintain
  4868	   older PDP-10 or VAX systems.  Their CPUs work fine, but they are
  4869	   stuck with dying, obsolescent disk and tape drives with low
  4870	   capacity and high power requirements.
  4871	
  4872	   (A closely related phenomenon, with a slightly different intent, is
  4873	   the habit manufacturers have of inventing new screw heads so that
  4874	   only Designated Persons, possessing the magic screwdrivers, can
  4875	   remove covers and make repairs or install options.  The Apple
  4876	   Macintosh takes this one step further, requiring not only a hex
  4877	   wrench but a specialized case-cracking tool to open the box.)
  4878	
  4879	   In these latter days of open-systems computing this term has fallen
  4880	   somewhat into disuse, to be replaced by the observation that
  4881	   "Standards are great!  There are so *many* of them to choose
  4882	   from!"  Compare {backward combatability}.
  4883	
  4884	:cons: /konz/ or /kons/ [from LISP] 1. vt. To add a new element
  4885	   to a specified list, esp. at the top.  "OK, cons picking a
  4886	   replacement for the console TTY onto the agenda."  2. `cons up':
  4887	   vt. To synthesize from smaller pieces: "to cons up an example".
  4888	
  4889	   In LISP itself, `cons' is the most fundamental operation for
  4890	   building structures.  It takes any two objects and returns a
  4891	   `dot-pair' or two-branched tree with one object hanging from each
  4892	   branch.  Because the result of a cons is an object, it can be used
  4893	   to build binary trees of any shape and complexity.  Hackers think
  4894	   of it as a sort of universal constructor, and that is where the
  4895	   jargon meanings spring from.
  4896	
  4897	:considered harmful: adj. Edsger W. Dijkstra's note in the
  4898	   March 1968 `Communications of the ACM', "Goto Statement
  4899	   Considered Harmful", fired the first salvo in the structured
  4900	   programming wars.  Amusingly, the ACM considered the resulting
  4901	   acrimony sufficiently harmful that it will (by policy) no longer
  4902	   print an article taking so assertive a position against a coding
  4903	   practice.  In the ensuing decades, a large number of both serious
  4904	   papers and parodies have borne titles of the form "X
  4905	   considered Y".  The structured-programming wars eventually blew
  4906	   over with the realization that both sides were wrong, but use of
  4907	   such titles has remained as a persistent minor in-joke (the
  4908	   `considered silly' found at various places in this lexicon is
  4909	   related).
  4910	
  4911	:console:: n. 1. The operator's station of a {mainframe}.  In
  4912	   times past, this was a privileged location that conveyed godlike
  4913	   powers to anyone with fingers on its keys.  Under UNIX and other
  4914	   modern timesharing OSes, such privileges are guarded by passwords
  4915	   instead, and the console is just the {tty} the system was booted
  4916	   from.  Some of the mystique remains, however, and it is traditional
  4917	   for sysadmins to post urgent messages to all users from the console
  4918	   (on UNIX, /dev/console).  2. On microcomputer UNIX boxes, the main
  4919	   screen and keyboard (as opposed to character-only terminals talking
  4920	   to a serial port).  Typically only the console can do real graphics
  4921	   or run {X}.  See also {CTY}.
  4922	
  4923	:console jockey: n. See {terminal junkie}.
  4924	
  4925	:content-free: [by analogy with techspeak `context-free'] adj.
  4926	   Used of a message that adds nothing to the recipient's knowledge.
  4927	   Though this adjective is sometimes applied to {flamage}, it more
  4928	   usually connotes derision for communication styles that exalt form
  4929	   over substance or are centered on concerns irrelevant to the
  4930	   subject ostensibly at hand.  Perhaps most used with reference to
  4931	   speeches by company presidents and other professional manipulators.
  4932	   "Content-free?  Uh...that's anything printed on glossy
  4933	   paper."  See also {four-color glossies}.  "He gave a talk on
  4934	   the implications of electronic networks for postmodernism and the
  4935	   fin-de-siecle aesthetic.  It was content-free."
  4936	
  4937	:control-C: vi. 1. "Stop whatever you are doing."  From the
  4938	   interrupt character used on many operating systems to abort a
  4939	   running program.  Considered silly.  2. interj. Among BSD UNIX
  4940	   hackers, the canonical humorous response to "Give me a break!"
  4941	
  4942	:control-O: vi. "Stop talking."  From the character used on some
  4943	   operating systems to abort output but allow the program to keep on
  4944	   running.  Generally means that you are not interested in hearing
  4945	   anything more from that person, at least on that topic; a standard
  4946	   response to someone who is flaming.  Considered silly.  Compare
  4947	   {control-S}.
  4948	
  4949	:control-Q: vi. "Resume."  From the ASCII DC1 or {XON}
  4950	   character (the pronunciation /X-on/ is therefore also used), used
  4951	   to undo a previous {control-S}.
  4952	
  4953	:control-S: vi. "Stop talking for a second."  From the ASCII DC3
  4954	   or XOFF character (the pronunciation /X-of/ is therefore also
  4955	   used).  Control-S differs from {control-O} in that the person is
  4956	   asked to stop talking (perhaps because you are on the phone) but
  4957	   will be allowed to continue when you're ready to listen to him ---
  4958	   as opposed to control-O, which has more of the meaning of
  4959	   "Shut up."  Considered silly.
  4960	
  4961	:Conway's Law: prov. The rule that the organization of the software and
  4962	   the organization of the software team will be congruent; originally
  4963	   stated as "If you have four groups working on a compiler, you'll
  4964	   get a 4-pass compiler".
  4965	
  4966	   This was originally promulgated by Melvin Conway, an early
  4967	   proto-hacker who wrote an assembler for the Burroughs 220 called
  4968	   SAVE.  The name `SAVE' didn't stand for anything; it was just that
  4969	   you lost fewer card decks and listings because they all had SAVE
  4970	   written on them.
  4971	
  4972	:cookbook: [from amateur electronics and radio] n. A book of small
  4973	   code segments that the reader can use to do various {magic}
  4974	   things in programs.  One current example is the `{PostScript}
  4975	   Language Tutorial and Cookbook' by Adobe Systems, Inc
  4976	   (Addison-Wesley, ISBN 0-201-10179-3) which has recipes for things
  4977	   like wrapping text around arbitrary curves and making 3D fonts.
  4978	   Cookbooks, slavishly followed, can lead one into {voodoo
  4979	   programming}, but are useful for hackers trying to {monkey up}
  4980	   small programs in unknown languages.  This is analogous to the role
  4981	   of phrasebooks in human languages.
  4982	
  4983	:cooked mode: [UNIX] n. The normal character-input mode, with
  4984	   interrupts enabled and with erase, kill and other special-character
  4985	   interpretations done directly by the tty driver.  Oppose {raw
  4986	   mode}, {rare mode}.  This is techspeak under UNIX but jargon
  4987	   elsewhere; other operating systems often have similar mode
  4988	   distinctions, and the raw/rare/cooked way of describing them has
  4989	   spread widely along with the C language and other UNIX exports.
  4990	   Most generally, `cooked mode' may refer to any mode of a
  4991	   system that does extensive preprocessing before presenting data to
  4992	   a program.
  4993	
  4994	:cookie: n. A handle, transaction ID, or other token of agreement
  4995	   between cooperating programs.  "I give him a packet, he gives me
  4996	   back a cookie."  The claim check you get from a dry-cleaning shop
  4997	   is a perfect mundane example of a cookie; the only thing it's
  4998	   useful for is to relate a later transaction to this one (so you get
  4999	   the same clothes back).  Compare {magic cookie}; see also
  5000	   {fortune cookie}.
  5001	
  5002	:cookie bear: n. Syn. {cookie monster}.
  5003	
  5004	:cookie file: n. A collection of {fortune cookie}s in a format
  5005	   that facilitates retrieval by a fortune program.  There are several
  5006	   different ones in public distribution, and site admins often
  5007	   assemble their own from various sources including this lexicon.
  5008	
  5009	:cookie monster: [from "Sesame Street"] n. Any of a family of
  5010	   early (1970s) hacks reported on {{TOPS-10}}, {{ITS}}, {{Multics}},
  5011	   and elsewhere that would lock up either the victim's terminal (on a
  5012	   time-sharing machine) or the {{console}} (on a batch
  5013	   {mainframe}), repeatedly demanding "I WANT A COOKIE".  The
  5014	   required responses ranged in complexity from "COOKIE" through
  5015	   "HAVE A COOKIE" and upward.  See also {wabbit}.
  5016	
  5017	:copious free time: [Apple; orig. fr. the intro to Tom Lehrer's
  5018	   song "It Makes A Fellow Proud To Be A Soldier"] n. 1. [used
  5019	   ironically to indicate the speaker's lack of the quantity in
  5020	   question] A mythical schedule slot for accomplishing tasks held to
  5021	   be unlikely or impossible.  Sometimes used to indicate that the
  5022	   speaker is interested in accomplishing the task, but believes that
  5023	   the opportunity will not arise.  "I'll implement the automatic
  5024	   layout stuff in my copious free time."  2. [Archly] Time reserved
  5025	   for bogus or otherwise idiotic tasks, such as implementation of
  5026	   {chrome}, or the stroking of {suit}s.  "I'll get back to him
  5027	   on that feature in my copious free time."
  5028	
  5029	:copper: n. Conventional electron-carrying network cable with a
  5030	   core conductor of copper --- or aluminum!  Opposed to {light
  5031	   pipe} or, say, a short-range microwave link.
  5032	
  5033	:copy protection: n. A class of (occasionally clever) methods for
  5034	   preventing incompetent pirates from stealing software and
  5035	   legitimate customers from using it.  Considered silly.
  5036	
  5037	:copybroke: /ko'pee-brohk/ adj. 1. [play on `copyright'] Used
  5038	   to describe an instance of a copy-protected program that has been
  5039	   `broken'; that is, a copy with the copy-protection scheme
  5040	   disabled.  Syn.  {copywronged}.  2. Copy-protected software
  5041	   which is unusable because of some bit-rot or bug that has confused
  5042	   the anti-piracy check.
  5043	
  5044	:copyleft: /kop'ee-left/ [play on `copyright'] n. 1. The
  5045	   copyright notice (`General Public License') carried by {GNU}
  5046	   {EMACS} and other Free Software Foundation software, granting reuse
  5047	   and reproduction rights to all comers (but see also {General
  5048	   Public Virus}).  2. By extension, any copyright notice intended to
  5049	   achieve similar aims.
  5050	
  5051	:copywronged: /ko'pee-rongd/ [play on `copyright'] adj. Syn. for
  5052	   {copybroke}.
  5053	
  5054	:core: n. Main storage or RAM.  Dates from the days of ferrite-core
  5055	   memory; now archaic as techspeak most places outside IBM, but also
  5056	   still used in the UNIX community and by old-time hackers or those
  5057	   who would sound like them.  Some derived idioms are quite current;
  5058	   `in core', for example, means `in memory' (as opposed to `on
  5059	   disk'), and both {core dump} and the `core image' or `core
  5060	   file' produced by one are terms in favor.  Commonwealth hackish
  5061	   prefers {store}.
  5062	
  5063	:core cancer: n. A process which exhibits a slow but inexorable
  5064	   resource {leak} --- like a cancer, it kills by crowding out
  5065	   productive `tissue'.
  5066	
  5067	:core dump: n. [common {Iron Age} jargon, preserved by UNIX]
  5068	   1. [techspeak] A copy of the contents of {core}, produced when a
  5069	   process is aborted by certain kinds of internal error.  2. By
  5070	   extension, used for humans passing out, vomiting, or registering
  5071	   extreme shock.  "He dumped core.  All over the floor.  What a
  5072	   mess."  "He heard about X and dumped core."  3. Occasionally
  5073	   used for a human rambling on pointlessly at great length; esp. in
  5074	   apology: "Sorry, I dumped core on you".  4. A recapitulation of
  5075	   knowledge (compare {bits}, sense 1).  Hence, spewing all one
  5076	   knows about a topic (syn. {brain dump}), esp. in a lecture or
  5077	   answer to an exam question.  "Short, concise answers are better
  5078	   than core dumps" (from the instructions to an exam at Columbia).
  5079	   See {core}.
  5080	
  5081	:core leak: n. Syn. {memory leak}.
  5082	
  5083	:Core Wars: n. A game between `assembler' programs in a
  5084	   simulated machine, where the objective is to kill your opponent's
  5085	   program by overwriting it.  Popularized by A. K. Dewdney's column
  5086	   in `Scientific American' magazine, this was actually
  5087	   devised by Victor Vyssotsky, Robert Morris, and Dennis Ritchie in
  5088	   the early 1960s (their original game was called `Darwin' and ran on
  5089	   a PDP-1 at Bell Labs).  See {core}.
  5090	
  5091	:corge: /korj/ [originally, the name of a cat] n. Yet another
  5092	   {metasyntactic variable}, invented by Mike Gallaher and propagated
  5093	   by the {GOSMACS} documentation.  See {grault}.
  5094	
  5095	:cosmic rays: n. Notionally, the cause of {bit rot}.  However, this is
  5096	   a semi-independent usage that may be invoked as a humorous way to
  5097	   {handwave} away any minor {randomness} that doesn't seem worth the
  5098	   bother of investigating.  "Hey, Eric --- I just got a burst of
  5099	   garbage on my {tube}, where did that come from?"  "Cosmic rays, I
  5100	   guess."  Compare {sunspots}, {phase of the moon}.  The British seem
  5101	   to prefer the usage `cosmic showers'; `alpha particles' is also
  5102	   heard, because stray alpha particles passing through a memory chip
  5103	   can cause single-bit errors (this becomes increasingly more likely
  5104	   as memory sizes and densities increase).
  5105	
  5106	   Factual note: Alpha particles cause bit rot, cosmic rays do not
  5107	   (except occasionally in spaceborne computers).  Intel could not
  5108	   explain random bit drops in their early chips, and one hypothesis
  5109	   was cosmic rays.  So they created the World's Largest Lead Safe,
  5110	   using 25 tons of the stuff, and used two identical boards for
  5111	   testing.  One was placed in the safe, one outside.  The hypothesis
  5112	   was that if cosmic rays were causing the bit drops, they should see
  5113	   a statistically significant difference between the error rates on
  5114	   the two boards.  They did not observe such a difference.  Further
  5115	   investigation demonstrated conclusively that the bit drops were due
  5116	   to alpha particle emissions from thorium (and to a much lesser
  5117	   degree uranium) in the encapsulation material.  Since it is
  5118	   impossible to eliminate these radioactives (they are uniformly
  5119	   distributed through the earth's crust, with the statistically
  5120	   insignificant exception of uranium lodes) it became obvious that
  5121	   you have to design memories to withstand these hits.
  5122	
  5123	:cough and die: v. Syn. {barf}.  Connotes that the program is
  5124	   throwing its hands up by design rather than because of a bug or
  5125	   oversight.  "The parser saw a control-A in its input where it was
  5126	   looking for a printable, so it coughed and died."  Compare
  5127	   {die}, {die horribly}.
  5128	
  5129	:cowboy: [Sun, from William Gibson's {cyberpunk} SF] n. Synonym
  5130	   for {hacker}.  It is reported that at Sun this word is often
  5131	   said with reverence.
  5132	
  5133	:CP/M:: /C-P-M/ n. [Control Program for Microcomputers] An early
  5134	   microcomputer {OS} written by hacker Gary Kildall for 8080- and
  5135	   Z80-based machines, very popular in the late 1970s but virtually
  5136	   wiped out by MS-DOS after the release of the IBM PC in 1981.
  5137	   Legend has it that Kildall's company blew its chance to write the
  5138	   OS for the IBM PC because Kildall decided to spend a day IBM's reps
  5139	   wanted to meet with him enjoying the perfect flying weather in his
  5140	   private plane.  Many of CP/M's features and conventions strongly
  5141	   resemble those of early DEC operating systems such as
  5142	   {{TOPS-10}}, OS/8, RSTS, and RSX-11.  See {{MS-DOS}},
  5143	   {operating system}.
  5144	
  5145	:CPU Wars: /C-P-U worz/ n. A 1979 large-format comic by Chas
  5146	   Andres chronicling the attempts of the brainwashed androids of IPM
  5147	   (Impossible to Program Machines) to conquer and destroy the
  5148	   peaceful denizens of HEC (Human Engineered Computers).  This rather
  5149	   transparent allegory featured many references to {ADVENT} and
  5150	   the immortal line "Eat flaming death, minicomputer mongrels!"
  5151	   (uttered, of course, by an IPM stormtrooper).  It is alleged that
  5152	   the author subsequently received a letter of appreciation on IBM
  5153	   company stationery from the head of IBM's Thomas J. Watson Research
  5154	   Laboratories (then, as now, one of the few islands of true
  5155	   hackerdom in the IBM archipelago).  The lower loop of the B in the
  5156	   IBM logo, it is said, had been carefully whited out.  See {eat
  5157	   flaming death}.
  5158	
  5159	:crack root: v. To defeat the security system of a UNIX machine and
  5160	   gain {root} privileges thereby; see {cracking}.
  5161	
  5162	:cracker: n. One who breaks security on a system.  Coined ca. 1985
  5163	   by hackers in defense against journalistic misuse of {hacker}
  5164	   (q.v., sense 8).  An earlier attempt to establish `worm' in this
  5165	   sense around 1981--82 on USENET was largely a failure.
  5166	
  5167	   Both these neologisms reflected a strong revulsion against the
  5168	   theft and vandalism perpetrated by cracking rings.  While it is
  5169	   expected that any real hacker will have done some playful cracking
  5170	   and knows many of the basic techniques, anyone past {larval
  5171	   stage} is expected to have outgrown the desire to do so.
  5172	
  5173	   Thus, there is far less overlap between hackerdom and crackerdom
  5174	   than the {mundane} reader misled by sensationalistic journalism
  5175	   might expect.  Crackers tend to gather in small, tight-knit, very
  5176	   secretive groups that have little overlap with the huge, open
  5177	   poly-culture this lexicon describes; though crackers often like to
  5178	   describe *themselves* as hackers, most true hackers consider
  5179	   them a separate and lower form of life.
  5180	
  5181	   Ethical considerations aside, hackers figure that anyone who can't
  5182	   imagine a more interesting way to play with their computers than
  5183	   breaking into someone else's has to be pretty {losing}.  Some
  5184	   other reasons crackers are looked down on are discussed in the
  5185	   entries on {cracking} and {phreaking}.  See also
  5186	   {samurai}, {dark-side hacker}, and {hacker ethic,
  5187	   the}.
  5188	
  5189	:cracking: n. The act of breaking into a computer system; what a
  5190	   {cracker} does.  Contrary to widespread myth, this does not
  5191	   usually involve some mysterious leap of hackerly brilliance, but
  5192	   rather persistence and the dogged repetition of a handful of fairly
  5193	   well-known tricks that exploit common weaknesses in the security of
  5194	   target systems.  Accordingly, most crackers are only mediocre
  5195	   hackers.
  5196	
  5197	:crank: [from automotive slang] vt. Verb used to describe the
  5198	   performance of a machine, especially sustained performance.  "This
  5199	   box cranks (or, cranks at) about 6 megaflops, with a burst mode
  5200	   of twice that on vectorized operations."
  5201	
  5202	:crash: 1. n. A sudden, usually drastic failure.  Most often said
  5203	   of the {system} (q.v., sense 1), esp. of magnetic disk drives
  5204	   (the term originally described what happened when the air gap of a
  5205	   Winchester disk collapses).  "Three {luser}s lost their files
  5206	   in last night's disk crash."  A disk crash that involves the
  5207	   read/write heads dropping onto the surface of the disks and
  5208	   scraping off the oxide may also be referred to as a `head crash',
  5209	   whereas the term `system crash' usually, though not always,
  5210	   implies that the operating system or other software was at fault.
  5211	   2. v. To fail suddenly.  "Has the system just crashed?"
  5212	   "Something crashed the OS!" See {down}.  Also used
  5213	   transitively to indicate the cause of the crash (usually a person
  5214	   or a program, or both).  "Those idiots playing {SPACEWAR}
  5215	   crashed the system." 3. vi. Sometimes said of people hitting the
  5216	   sack after a long {hacking run}; see {gronk out}.
  5217	
  5218	:crash and burn: vi.,n. A spectacular crash, in the mode of the
  5219	   conclusion of the car-chase scene in the movie "Bullitt" and
  5220	   many subsequent imitators (compare {die horribly}).  Sun-3
  5221	   monitors losing the flyback transformer and lightning strikes on
  5222	   VAX-11/780 backplanes are notable crash and burn generators.  The
  5223	   construction `crash-and-burn machine' is reported for a computer
  5224	   used exclusively for alpha or {beta} testing, or reproducing
  5225	   bugs (i.e., not for development).  The implication is that it
  5226	   wouldn't be such a disaster if that machine crashed, since only the
  5227	   testers would be inconvenienced.
  5228	
  5229	:crawling horror: n. Ancient crufty hardware or software that is
  5230	   kept obstinately alive by forces beyond the control of the hackers
  5231	   at a site.  Like {dusty deck} or {gonkulator}, but connotes
  5232	   that the thing described is not just an irritation but an active
  5233	   menace to health and sanity.  "Mostly we code new stuff in C, but
  5234	   they pay us to maintain one big FORTRAN II application from
  5235	   nineteen-sixty-X that's a real crawling horror...."  Compare
  5236	   {WOMBAT}.
  5237	
  5238	:cray: /kray/ n. 1. (properly, capitalized) One of the line of
  5239	   supercomputers designed by Cray Research.  2. Any supercomputer at
  5240	   all.  3. The {canonical} {number-crunching} machine.
  5241	
  5242	   The term is actually the lowercased last name of Seymour Cray, a
  5243	   noted computer architect and co-founder of the company.  Numerous
  5244	   vivid legends surround him, some true and some admittedly invented
  5245	   by Cray Research brass to shape their corporate culture and image.
  5246	
  5247	:cray instability: n. A shortcoming of a program or algorithm that
  5248	   manifests itself only when a large problem is being run on a
  5249	   powerful machine (see {cray}).  Generally more subtle than bugs
  5250	   that can be detected in smaller problems running on a workstation
  5251	   or mini.
  5252	
  5253	:crayola: /kray-oh'l*/ n. A super-mini or -micro computer that
  5254	   provides some reasonable percentage of supercomputer performance
  5255	   for an unreasonably low price.  Might also be a {killer micro}.
  5256	
  5257	:crayon: n. 1. Someone who works on Cray supercomputers.  More
  5258	   specifically, it implies a programmer, probably of the CDC ilk,
  5259	   probably male, and almost certainly wearing a tie (irrespective of
  5260	   gender).  Systems types who have a UNIX background tend not to be
  5261	   described as crayons.  2. A {computron} (sense 2) that
  5262	   participates only in {number-crunching}.  3. A unit of
  5263	   computational power equal to that of a single Cray-1.  There is a
  5264	   standard joke about this that derives from an old Crayola crayon
  5265	   promotional gimmick: When you buy 64 crayons you get a free
  5266	   sharpener.
  5267	
  5268	:creationism: n. The (false) belief that large, innovative software
  5269	   designs can be completely specified in advance and then painlessly
  5270	   magicked out of the void by the normal efforts of a team of
  5271	   normally talented programmers.  In fact, experience has shown
  5272	   repeatedly that good designs arise only from evolutionary,
  5273	   exploratory interaction between one (or at most a small handful of)
  5274	   exceptionally able designer(s) and an active user population ---
  5275	   and that the first try at a big new idea is always wrong.
  5276	   Unfortunately, because these truths don't fit the planning models
  5277	   beloved of {management}, they are generally ignored.
  5278	
  5279	:creep: v. To advance, grow, or multiply inexorably.  In hackish usage
  5280	   this verb has overtones of menace and silliness, evoking the
  5281	   creeping horrors of low-budget monster movies.
  5282	
  5283	:creeping elegance: n. Describes a tendency for parts of a design to
  5284	   become {elegant} past the point of diminishing return.  This
  5285	   often happens at the expense of the less interesting parts of the
  5286	   design, the schedule, and other things deemed important in the
  5287	   {Real World}.  See also {creeping featurism}, {second-system
  5288	   effect}, {tense}.
  5289	
  5290	:creeping featurism: /kree'ping fee'chr-izm/ n. 1. Describes a
  5291	   systematic tendency to load more {chrome} and {feature}s onto
  5292	   systems at the expense of whatever elegance they may have possessed
  5293	   when originally designed.  See also {feeping creaturism}.  "You
  5294	   know, the main problem with {BSD} UNIX has always been creeping
  5295	   featurism."  2. More generally, the tendency for anything
  5296	   complicated to become even more complicated because people keep
  5297	   saying "Gee, it would be even better if it had this feature too".
  5298	   (See {feature}.)  The result is usually a patchwork because it
  5299	   grew one ad-hoc step at a time, rather than being planned.
  5300	   Planning is a lot of work, but it's easy to add just one extra
  5301	   little feature to help someone ... and then another ... and
  5302	   another.... When creeping featurism gets out of hand, it's
  5303	   like a cancer.  Usually this term is used to describe computer
  5304	   programs, but it could also be said of the federal government, the
  5305	   IRS 1040 form, and new cars.  A similar phenomenon sometimes
  5306	   afflicts conscious redesigns; see {second-system effect}.  See
  5307	   also {creeping elegance}.
  5308	
  5309	:creeping featuritis: /kree'ping fee'-chr-i:`t*s/ n. Variant of
  5310	   {creeping featurism}, with its own spoonerization: `feeping
  5311	   creaturitis'.  Some people like to reserve this form for the
  5312	   disease as it actually manifests in software or hardware, as
  5313	   opposed to the lurking general tendency in designers' minds.
  5314	   (After all, -ism means `condition' or `pursuit of', whereas
  5315	   -itis usually means `inflammation of'.)
  5316	
  5317	:cretin: /kret'n/ or /kree'tn/ n. Congenital {loser}; an obnoxious
  5318	   person; someone who can't do anything right.  It has been observed
  5319	   that many American hackers tend to favor the British pronunciation
  5320	   /kre'tn/ over standard American /kree'tn/; it is thought this may
  5321	   be due to the insidious phonetic influence of Monty Python's Flying
  5322	   Circus.
  5323	
  5324	:cretinous: /kret'n-*s/ or /kreet'n-*s/ adj. Wrong; stupid;
  5325	   non-functional; very poorly designed.  Also used pejoratively of
  5326	   people.  See {dread high-bit disease} for an example.
  5327	   Approximate synonyms: {bletcherous}, `bagbiting' (see
  5328	   {bagbiter}), {losing}, {brain-damaged}.
  5329	
  5330	:crippleware: n. 1. Software that has some important functionality
  5331	   deliberately removed, so as to entice potential users to pay for a
  5332	   working version.  2. [Cambridge] {Guiltware} that exhorts you to
  5333	   donate to some charity (compare {careware}).  3. Hardware
  5334	   deliberately crippled, which can be upgraded to a more expensive
  5335	   model by a trivial change (e.g., cutting a jumper).
  5336	
  5337	   An excellent example of crippleware (sense 3) is Intel's 486SX
  5338	   chip, which is a standard 486DX chip with the co-processor
  5339	   disabled.  To upgrade, you buy another 486 chip with everything
  5340	   *but* the co-processor disabled.  When you put them together
  5341	   you have two crippled chips doing the work of one.  Don't you love
  5342	   Intel?
  5343	
  5344	:critical mass: n. In physics, the minimum amount of fissionable
  5345	   material required to sustain a chain reaction.  Of a software
  5346	   product, describes a condition of the software such that fixing one
  5347	   bug introduces one plus {epsilon} bugs.  When software achieves
  5348	   critical mass, it can only be discarded and rewritten.
  5349	
  5350	:crlf: /ker'l*f/, sometimes /kru'l*f/ or /C-R-L-F/ n. (often
  5351	   capitalized as `CRLF') A carriage return (CR) followed by a line
  5352	   feed (LF).  More loosely, whatever it takes to get you from the
  5353	   end of one line of text to the beginning of the next line.  See
  5354	   {newline}, {terpri}.  Under {{UNIX}} influence this usage
  5355	   has become less common (UNIX uses a bare line feed as its `CRLF').
  5356	
  5357	:crock: [from the obvious mainstream scatologism] n. 1. An awkward
  5358	   feature or programming technique that ought to be made cleaner.
  5359	   Using small integers to represent error codes without the
  5360	   program interpreting them to the user (as in, for example, UNIX
  5361	   `make(1)', which returns code 139 for a process that dies due
  5362	   to {segfault}).  2. A technique that works acceptably, but which
  5363	   is quite prone to failure if disturbed in the least, for example
  5364	   depending on the machine opcodes having particular bit patterns so
  5365	   that you can use instructions as data words too; a tightly woven,
  5366	   almost completely unmodifiable structure.  See {kluge},
  5367	   {brittle}.  Also in the adjectives `crockish' and
  5368	   `crocky', and the nouns `crockishness' and `crockitude'.
  5369	
  5370	:cross-post: [USENET] vi. To post a single article simultaneously to
  5371	   several newsgroups.  Distinguished from posting the article
  5372	   repeatedly, once to each newsgroup, which causes people to see it
  5373	   multiple times (this is very bad form).  Gratuitous cross-posting
  5374	   without a Followup-To line directing responses to a single followup
  5375	   group is frowned upon, as it tends to cause {followup} articles
  5376	   to go to inappropriate newsgroups when people respond to only one
  5377	   part of the original posting.
  5378	
  5379	:crudware: /kruhd'weir/ n. Pejorative term for the hundreds of
  5380	   megabytes of low-quality {freeware} circulated by user's groups
  5381	   and BBS systems in the micro-hobbyist world.  "Yet *another*
  5382	   set of disk catalog utilities for {{MS-DOS}}?  What crudware!"
  5383	
  5384	:cruft: /kruhft/ [back-formation from {crufty}] 1. n. An
  5385	   unpleasant substance.  The dust that gathers under your bed is
  5386	   cruft; the TMRC Dictionary correctly noted that attacking it with a
  5387	   broom only produces more.  2. n. The results of shoddy
  5388	   construction.  3. vt. [from `hand cruft', pun on `hand craft']
  5389	   To write assembler code for something normally (and better) done by
  5390	   a compiler (see {hand-hacking}).  4. n. Excess; superfluous
  5391	   junk.  Esp. used of redundant or superseded code.
  5392	
  5393	   This term is one of the oldest in the jargon and no one is sure of
  5394	   its etymology, but it is suggestive that there is a Cruft Hall at
  5395	   Harvard University which is part of the old physics building; it's
  5396	   said to have been the physics department's radar lab during WWII.
  5397	   To this day (early 1992) the windows appear to be full of random
  5398	   techno-junk.  MIT or Lincoln Labs people may well have coined the
  5399	   term as a knock on the competition.
  5400	
  5401	:cruft together: vt. (also `cruft up') To throw together
  5402	   something ugly but temporarily workable.  Like vt. {kluge up},
  5403	   but more pejorative.  "There isn't any program now to reverse all
  5404	   the lines of a file, but I can probably cruft one together in about
  5405	   10 minutes."  See {hack together}, {hack up}, {kluge up},
  5406	   {crufty}.
  5407	
  5408	:cruftsmanship: /kruhfts'm*n-ship / n. [from {cruft}] The
  5409	   antithesis of craftsmanship.
  5410	
  5411	:crufty: /kruhf'tee/ [origin unknown; poss. from `crusty' or
  5412	   `cruddy'] adj. 1. Poorly built, possibly over-complex.  The
  5413	   {canonical} example is "This is standard old crufty DEC
  5414	   software".  In fact, one fanciful theory of the origin of
  5415	   `crufty' holds that was originally a mutation of `crusty'
  5416	   applied to DEC software so old that the `s' characters were tall
  5417	   and skinny, looking more like `f' characters.  2. Unpleasant,
  5418	   especially to the touch, often with encrusted junk.  Like spilled
  5419	   coffee smeared with peanut butter and catsup.  3. Generally
  5420	   unpleasant.  4. (sometimes spelled `cruftie') n. A small crufty
  5421	   object (see {frob}); often one that doesn't fit well into the
  5422	   scheme of things.  "A LISP property list is a good place to store
  5423	   crufties (or, collectively, {random} cruft)."
  5424	
  5425	:crumb: n. Two binary digits; a {quad}.  Larger than a {bit},
  5426	   smaller than a {nybble}.  Considered silly.  Syn. {tayste}.
  5427	
  5428	:crunch: 1. vi. To process, usually in a time-consuming or
  5429	   complicated way.  Connotes an essentially trivial operation that is
  5430	   nonetheless painful to perform.  The pain may be due to the
  5431	   triviality's being embedded in a loop from 1 to 1,000,000,000.
  5432	   "FORTRAN programs do mostly {number-crunching}."  2. vt. To
  5433	   reduce the size of a file by a complicated scheme that produces bit
  5434	   configurations completely unrelated to the original data, such as
  5435	   by a Huffman code.  (The file ends up looking like a paper document
  5436	   would if somebody crunched the paper into a wad.)  Since such
  5437	   compression usually takes more computations than simpler methods
  5438	   such as run-length encoding, the term is doubly appropriate.  (This
  5439	   meaning is usually used in the construction `file crunch(ing)' to
  5440	   distinguish it from {number-crunching}.)  See {compress}.
  5441	   3. n. The character `#'.  Used at XEROX and CMU, among other
  5442	   places.  See {{ASCII}}.  4. vt. To squeeze program source into a
  5443	   minimum-size representation that will still compile or execute.
  5444	   The term came into being specifically for a famous program on the
  5445	   BBC micro that crunched BASIC source in order to make it run more
  5446	   quickly (it was a wholly interpretive BASIC, so the number of
  5447	   characters mattered).  {Obfuscated C Contest} entries are often
  5448	   crunched; see the first example under that entry.
  5449	
  5450	:cruncha cruncha cruncha: /kruhn'ch* kruhn'ch* kruhn'ch*/ interj.
  5451	   An encouragement sometimes muttered to a machine bogged down in a
  5452	   serious {grovel}.  Also describes a notional sound made by
  5453	   groveling hardware.  See {wugga wugga}, {grind} (sense 3).
  5454	
  5455	:cryppie: /krip'ee/ n. A cryptographer.  One who hacks or implements
  5456	   cryptographic software or hardware.
  5457	
  5458	:CTSS: /C-T-S-S/ n. Compatible Time-Sharing System.  An early
  5459	   (1963) experiment in the design of interactive time-sharing
  5460	   operating systems, ancestral to {{Multics}}, {{UNIX}}, and
  5461	   {{ITS}}.  The name {{ITS}} (Incompatible Time-sharing System)
  5462	   was a hack on CTSS, meant both as a joke and to express some basic
  5463	   differences in philosophy about the way I/O services should be
  5464	   presented to user programs.
  5465	
  5466	:CTY: /sit'ee/ or /C-T-Y/ n. [MIT] The terminal physically
  5467	   associated with a computer's system {{console}}.  The term is a
  5468	   contraction of `Console {tty}', that is, `Console TeleTYpe'.
  5469	   This {{ITS}}- and {{TOPS-10}}-associated term has become less
  5470	   common, as most UNIX hackers simply refer to the CTY as `the
  5471	   console'.
  5472	
  5473	:cube: n. 1. [short for `cubicle'] A module in the open-plan
  5474	   offices used at many programming shops.  "I've got the manuals in
  5475	   my cube."  2. A NeXT machine (which resembles a matte-black cube).
  5476	
  5477	:cubing: [parallel with `tubing'] vi. 1. Hacking on an IPSC (Intel
  5478	   Personal SuperComputer) hypercube.  "Louella's gone cubing
  5479	   *again*!!"  2. Hacking Rubik's Cube or related puzzles,
  5480	   either physically or mathematically.  3. An indescribable form of
  5481	   self-torture (see sense 1 or 2).
  5482	
  5483	:cursor dipped in X: n. There are a couple of metaphors in English
  5484	   of the form `pen dipped in X' (perhaps the most common values of X
  5485	   are `acid', `bile', and `vitriol').  These map over neatly to this
  5486	   hackish usage (the cursor being what moves, leaving letters behind,
  5487	   when one is composing on-line).  "Talk about a {nastygram}!  He
  5488	   must've had his cursor dipped in acid when he wrote that one!"
  5489	
  5490	:cuspy: /kuhs'pee/ [WPI: from the DEC abbreviation CUSP, for `Commonly
  5491	   Used System Program', i.e., a utility program used by many people]
  5492	   adj. 1. (of a program) Well-written.  2. Functionally excellent.  A
  5493	   program that performs well and interfaces well to users is cuspy.
  5494	   See {rude}.  3. [NYU] Said of an attractive woman, especially one
  5495	   regarded as available.  Implies a certain curvaceousness.
  5496	
  5497	:cut a tape: vi. To write a software or document distribution on
  5498	   magnetic tape for shipment.  Has nothing to do with physically
  5499	   cutting the medium!  Early versions of this lexicon claimed that
  5500	   one never analogously speaks of `cutting a disk', but this has
  5501	   since been reported as live usage.  Related slang usages are
  5502	   mainstream business's `cut a check', the recording industry's
  5503	   `cut a record', and the military's `cut an order'.
  5504	
  5505	   All of these usages reflect physical processes in obsolete
  5506	   recording and duplication technologies.  The first stage in
  5507	   manufacturing an old-style vinyl record involved cutting grooves in
  5508	   a stamping die with a precision lathe.  More mundanely, the
  5509	   dominant technology for mass duplication of paper documents in
  5510	   pre-photocopying days involved "cutting a stencil", punching away
  5511	   portions of the wax overlay on a silk screen.  More directly,
  5512	   paper tape with holes punched in it was an inportant early storage
  5513	   medium.
  5514	
  5515	:cybercrud: /si:'ber-kruhd/ [coined by Ted Nelson] n. Obfuscatory
  5516	   tech-talk.  Verbiage with a high {MEGO} factor.  The computer
  5517	   equivalent of bureaucratese.
  5518	
  5519	:cyberpunk: /si:'ber-puhnk/ [orig. by SF writer Bruce Bethke
  5520	   and/or editor Gardner Dozois] n.,adj. A subgenre of SF launched
  5521	   in 1982 by William Gibson's epoch-making novel `Neuromancer'
  5522	   (though its roots go back through Vernor Vinge's `True Names'
  5523	   (see "{True Names ... and Other Dangers}" in
  5524	   appendix C) to John Brunner's 1975 novel `The Shockwave
  5525	   Rider').  Gibson's near-total ignorance of computers and the
  5526	   present-day hacker culture enabled him to speculate about the role
  5527	   of computers and hackers in the future in ways hackers have since
  5528	   found both irritatingly na"ive and tremendously stimulating.
  5529	   Gibson's work was widely imitated, in particular by the short-lived
  5530	   but innovative "Max Headroom" TV series.  See
  5531	   {cyberspace}, {ice}, {jack in}, {go flatline}.
  5532	
  5533	:cyberspace: /si:'ber-spays/ n. 1. Notional `information-space'
  5534	   loaded with visual cues and navigable with brain-computer
  5535	   interfaces called `cyberspace decks'; a characteristic prop of
  5536	   {cyberpunk} SF.  At the time of this writing (mid-1991),
  5537	   serious efforts to construct {virtual reality} interfaces
  5538	   modeled explicitly on Gibsonian cyberspace are already under way,
  5539	   using more conventional devices such as glove sensors and binocular
  5540	   TV headsets.  Few hackers are prepared to deny outright the
  5541	   possibility of a cyberspace someday evolving out of the network
  5542	   (see {network, the}).  2. Occasionally, the metaphoric location
  5543	   of the mind of a person in {hack mode}.  Some hackers report
  5544	   experiencing strong eidetic imagery when in hack mode;
  5545	   interestingly, independent reports from multiple sources suggest
  5546	   that there are common features to the experience.  In particular,
  5547	   the dominant colors of this subjective `cyberspace' are often
  5548	   gray and silver, and the imagery often involves constellations of
  5549	   marching dots, elaborate shifting patterns of lines and angles, or
  5550	   moire patterns.
  5551	
  5552	:cycle: 1. n. The basic unit of computation.  What every hacker
  5553	   wants more of (noted hacker Bill Gosper describes himself as a
  5554	   "cycle junkie"). One can describe an instruction as taking so
  5555	   many `clock cycles'.  Often the computer can access its
  5556	   memory once on every clock cycle, and so one speaks also of
  5557	   `memory cycles'.  These are technical meanings of {cycle}.  The
  5558	   jargon meaning comes from the observation that there are only so
  5559	   many cycles per second, and when you are sharing a computer the
  5560	   cycles get divided up among the users.  The more cycles the
  5561	   computer spends working on your program rather than someone else's,
  5562	   the faster your program will run.  That's why every hacker wants
  5563	   more cycles: so he can spend less time waiting for the computer to
  5564	   respond.  2. By extension, a notional unit of *human* thought
  5565	   power, emphasizing that lots of things compete for the typical
  5566	   hacker's think time.  "I refused to get involved with the Rubik's
  5567	   Cube back when it was big.  Knew I'd burn too many cycles on it if
  5568	   I let myself."  3. vt. Syn. {bounce}, {120 reset}; from the
  5569	   phrase `cycle power'. "Cycle the machine again, that serial port's
  5570	   still hung."
  5571	
  5572	:cycle crunch: n. A situation where the number of people trying to
  5573	   use the computer simultaneously has reached the point where no one
  5574	   can get enough cycles because they are spread too thin and the
  5575	   system has probably begun to {thrash}.  This is an inevitable
  5576	   result of Parkinson's Law applied to timesharing.  Usually the only
  5577	   solution is to buy more computer.  Happily, this has rapidly become
  5578	   easier in recent years, so much so that the very term `cycle
  5579	   crunch' now has a faintly archaic flavor; most hackers now use
  5580	   workstations or personal computers as opposed to traditional
  5581	   timesharing systems.
  5582	
  5583	:cycle drought: n. A scarcity of cycles.  It may be due to a {cycle
  5584	   crunch}, but it could also occur because part of the computer is
  5585	   temporarily not working, leaving fewer cycles to go around.
  5586	   "The {high moby} is {down}, so we're running with only
  5587	   half the usual amount of memory.  There will be a cycle drought
  5588	   until it's fixed."
  5589	
  5590	:cycle of reincarnation: [coined by Ivan Sutherland ca. 1970] n.
  5591	   Term used to refer to a well-known effect whereby function in a
  5592	   computing system family is migrated out to special-purpose
  5593	   peripheral hardware for speed, then the peripheral evolves toward
  5594	   more computing power as it does its job, then somebody notices that
  5595	   it is inefficient to support two asymmetrical processors in the
  5596	   architecture and folds the function back into the main CPU, at
  5597	   which point the cycle begins again.  Several iterations of this
  5598	   cycle have been observed in graphics-processor design, and at least
  5599	   one or two in communications and floating-point processors.  Also
  5600	   known as `the Wheel of Life', `the Wheel of Samsara', and other
  5601	   variations of the basic Hindu/Buddhist theological idea.
  5602	
  5603	:cycle server: n. A powerful machine that exists primarily for
  5604	   running large {batch} jobs.  Implies that interactive tasks such as
  5605	   editing are done on other machines on the network, such as
  5606	   workstations.
  5607	
  5608	= D =
  5609	=====
  5610	
  5611	:D. C. Power Lab: n. The former site of {{SAIL}}.  Hackers thought
  5612	   this was very funny because the obvious connection to electrical
  5613	   engineering was nonexistent --- the lab was named for a Donald C.
  5614	   Power.  Compare {Marginal Hacks}.
  5615	
  5616	:daemon: /day'mn/ or /dee'mn/ [from the mythological meaning,
  5617	   later rationalized as the acronym `Disk And Execution MONitor'] n.
  5618	   A program that is not invoked explicitly, but lies dormant waiting
  5619	   for some condition(s) to occur.  The idea is that the perpetrator
  5620	   of the condition need not be aware that a daemon is lurking (though
  5621	   often a program will commit an action only because it knows that it
  5622	   will implicitly invoke a daemon).  For example, under {{ITS}}
  5623	   writing a file on the {LPT} spooler's directory would invoke the
  5624	   spooling daemon, which would then print the file.  The advantage is
  5625	   that programs wanting (in this example) files printed need not
  5626	   compete for access to the {LPT}.  They simply enter their
  5627	   implicit requests and let the daemon decide what to do with them.
  5628	   Daemons are usually spawned automatically by the system, and may
  5629	   either live forever or be regenerated at intervals.  Daemon and
  5630	   {demon} are often used interchangeably, but seem to have
  5631	   distinct connotations.  The term `daemon' was introduced to
  5632	   computing by {CTSS} people (who pronounced it /dee'mon/) and
  5633	   used it to refer to what ITS called a {dragon}.  Although the
  5634	   meaning and the pronunciation have drifted, we think this glossary
  5635	   reflects current (1991) usage.
  5636	
  5637	:dangling pointer: n. A reference that doesn't actually lead
  5638	   anywhere (in C and some other languages, a pointer that doesn't
  5639	   actually point at anything valid).  Usually this is because it
  5640	   formerly pointed to something that has moved or disappeared.  Used
  5641	   as jargon in a generalization of its techspeak meaning; for
  5642	   example, a local phone number for a person who has since moved to
  5643	   the other coast is a dangling pointer.
  5644	
  5645	:dark-side hacker: n. A criminal or malicious hacker; a
  5646	   {cracker}.  From George Lucas's Darth Vader, "seduced by the
  5647	   dark side of the Force".  The implication that hackers form a
  5648	   sort of elite of technological Jedi Knights is intended.  Oppose
  5649	   {samurai}.
  5650	
  5651	:Datamation: /day`t*-may'sh*n/ n. A magazine that many hackers
  5652	   assume all {suit}s read.  Used to question an unbelieved quote,
  5653	   as in "Did you read that in `Datamation?'" It used to
  5654	   publish something hackishly funny every once in a while, like the
  5655	   original paper on {COME FROM} in 1973, but it has since become much
  5656	   more exclusively {suit}-oriented and boring.
  5657	
  5658	:day mode: n. See {phase} (sense 1).  Used of people only.
  5659	
  5660	:dd: /dee-dee/ [UNIX: from IBM {JCL}] vt. Equivalent to
  5661	   {cat} or {BLT}.  This was originally the name of a UNIX copy
  5662	   command with special options suitable for block-oriented devices.
  5663	   Often used in heavy-handed system maintenance, as in "Let's
  5664	   `dd' the root partition onto a tape, then use the boot PROM to
  5665	   load it back on to a new disk".  The UNIX `dd(1)' was
  5666	   designed with a weird, distinctly non-UNIXy keyword option syntax
  5667	   reminiscent of IBM System/360 JCL (which had an elaborate DD `Data
  5668	   Definition' specification for I/O devices); though the command
  5669	   filled a need, the interface design was clearly a prank.  The
  5670	   jargon usage is now very rare outside UNIX sites and now nearly
  5671	   obsolete even there, as `dd(1)' has been {deprecated} for a
  5672	   long time (though it has no exact replacement).  Replaced by
  5673	   {BLT} or simple English `copy'.
  5674	
  5675	:DDT: /D-D-T/ n. 1. Generic term for a program that assists in
  5676	   debugging other programs by showing individual machine instructions
  5677	   in a readable symbolic form and letting the user change them.  In
  5678	   this sense the term DDT is now archaic, having been widely
  5679	   displaced by `debugger' or names of individual programs like
  5680	   `dbx', `adb', `gdb', or `sdb'.  2. [ITS] Under
  5681	   MIT's fabled {{ITS}} operating system, DDT (running under the alias
  5682	   HACTRN) was also used as the {shell} or top level command
  5683	   language used to execute other programs.  3. Any one of several
  5684	   specific DDTs (sense 1) supported on early DEC hardware.  The DEC
  5685	   PDP-10 Reference Handbook (1969) contained a footnote on the first
  5686	   page of the documentation for DDT which illuminates the origin of
  5687	   the term:
  5688	
  5689	     Historical footnote: DDT was developed at MIT for the PDP-1
  5690	     computer in 1961.  At that time DDT stood for "DEC Debugging Tape".
  5691	     Since then, the idea of an on-line debugging program has propagated
  5692	     throughout the computer industry.  DDT programs are now available
  5693	     for all DEC computers.  Since media other than tape are now
  5694	     frequently used, the more descriptive name "Dynamic Debugging
  5695	     Technique" has been adopted, retaining the DDT abbreviation.
  5696	     Confusion between DDT-10 and another well known pesticide,
  5697	     dichloro-diphenyl-trichloroethane (C14-H9-Cl5) should be minimal
  5698	     since each attacks a different, and apparently mutually exclusive,
  5699	     class of bugs.
  5700	
  5701	   Sadly, this quotation was removed from later editions of the
  5702	   handbook after the {suit}s took over and DEC became much more
  5703	   `businesslike'.
  5704	
  5705	   The history above is known to many old-time hackers.  But there's
  5706	   more: Peter Samson, author of the {TMRC} lexicon, reports that
  5707	   he named `DDT' after a similar tool on the TX-0 computer, the
  5708	   direct ancestor of the PDP-1 built at MIT's Lincoln Lab in 1957.
  5709	   The debugger on that ground-breaking machine (the first
  5710	   transistorized computer) rejoiced in the name FLIT (FLexowriter
  5711	   Interrogation Tape).
  5712	
  5713	:de-rezz: /dee-rez'/ [from `de-resolve' via the movie "Tron"]
  5714	   (also `derez') 1. vi. To disappear or dissolve; the image that goes
  5715	   with it is of an object breaking up into raster lines and static
  5716	   and then dissolving.  Occasionally used of a person who seems to
  5717	   have suddenly `fuzzed out' mentally rather than physically.
  5718	   Usage: extremely silly, also rare.  This verb was actually invented
  5719	   as *fictional* hacker jargon, and adopted in a spirit of irony
  5720	   by real hackers years after the fact.  2. vt. On a Macintosh, many
  5721	   program structures (including the code itself) are managed in small
  5722	   segments of the program file known as `resources'. The standard
  5723	   resource compiler is Rez.  The standard resource decompiler is
  5724	   DeRez.  Thus, decompiling a resource is `derezzing'.  Usage: very
  5725	   common.
  5726	
  5727	:dead: adj. 1. Non-functional; {down}; {crash}ed.  Especially
  5728	   used of hardware.  2. At XEROX PARC, software that is working but
  5729	   not undergoing continued development and support.
  5730	
  5731	:dead code: n. Routines that can never be accessed because all calls
  5732	   to them have been removed, or code that cannot be reached because
  5733	   it is guarded by a control structure that provably must always
  5734	   transfer control somewhere else.  The presence of dead code may
  5735	   reveal either logical errors due to alterations in the program or
  5736	   significant changes in the assumptions and environment of the
  5737	   program (see also {software rot}); a good compiler should report
  5738	   dead code so a maintainer can think about what it means.  Syn.
  5739	   {grunge}.
  5740	
  5741	:DEADBEEF: /ded-beef/ n. The hexadecimal word-fill pattern for
  5742	   freshly allocated memory (decimal -21524111) under a number of
  5743	   IBM environments, including the RS/6000.  As in "Your program is
  5744	   DEADBEEF" (meaning gone, aborted, flushed from memory); if you
  5745	   start from an odd half-word boundary, of course, you have
  5746	   BEEFDEAD.
  5747	
  5748	:deadlock: n. 1. [techspeak] A situation wherein two or more
  5749	   processes are unable to proceed because each is waiting for one of
  5750	   the others to do something.  A common example is a program
  5751	   communicating to a server, which may find itself waiting for output
  5752	   from the server before sending anything more to it, while the
  5753	   server is similarly waiting for more input from the controlling
  5754	   program before outputting anything.  (It is reported that this
  5755	   particular flavor of deadlock is sometimes called a `starvation
  5756	   deadlock', though the term `starvation' is more properly used for
  5757	   situations where a program can never run simply because it never
  5758	   gets high enough priority.  Another common flavor is
  5759	   `constipation', where each process is trying to send stuff to
  5760	   the other but all buffers are full because nobody is reading
  5761	   anything.)  See {deadly embrace}.  2. Also used of
  5762	   deadlock-like interactions between humans, as when two people meet
  5763	   in a narrow corridor, and each tries to be polite by moving aside
  5764	   to let the other pass, but they end up swaying from side to side
  5765	   without making any progress because they always both move the same
  5766	   way at the same time.
  5767	
  5768	:deadly embrace: n. Same as {deadlock}, though usually used only when
  5769	   exactly 2 processes are involved.  This is the more popular term in
  5770	   Europe, while {deadlock} predominates in the United States.
  5771	
  5772	:death code: n. A routine whose job is to set everything in the
  5773	   computer --- registers, memory, flags, everything --- to zero,
  5774	   including that portion of memory where it is running; its last act
  5775	   is to stomp on its own "store zero" instruction.  Death code
  5776	   isn't very useful, but writing it is an interesting hacking
  5777	   challenge on architectures where the instruction set makes it
  5778	   possible, such as the PDP-8 (it has also been done on the DG Nova).
  5779	   Death code is much less common, and more anti-social, on modern
  5780	   multi-user machines.  It was very impressive on earlier hardware
  5781	   that provided front panel switches and displays to show register
  5782	   and memory contents, esp. when these were used to prod the corpse
  5783	   to see why it died.
  5784	
  5785	   Perhaps the ultimate death code is on the TI 990 series, where all
  5786	   registers are actually in RAM, and the instruction "store immediate
  5787	   0" has the opcode "0". The PC will immediately wrap around core as
  5788	   many times as it can until a user hits HALT.  Any empty memory
  5789	   location is death code.  Worse, the manufacturer recommended use of
  5790	   this instruction in startup code (which would be in ROM and
  5791	   therefore survive).
  5792	
  5793	:Death Star: [from the movie "Star Wars"] 1. The AT&T corporate
  5794	   logo, which appears on computers sold by AT&T and bears an uncanny
  5795	   resemblance to the `Death Star' in the movie.  This usage is
  5796	   particularly common among partisans of {BSD} UNIX, who tend to
  5797	   regard the AT&T versions as inferior and AT&T as a bad guy.  Copies
  5798	   still circulate of a poster printed by Mt. Xinu showing a starscape
  5799	   with a space fighter labeled 4.2 BSD streaking away from a broken
  5800	   AT&T logo wreathed in flames.  2. AT&T's internal magazine,
  5801	   `Focus', uses `death star' for an incorrectly done AT&T logo
  5802	   in which the inner circle in the top left is dark instead of light
  5803	   --- a frequent result of dark-on-light logo images.
  5804	
  5805	:DEC Wars: n. A 1983 {USENET} posting by Alan Hastings and Steve
  5806	   Tarr spoofing the "Star Wars" movies in hackish terms.  Some
  5807	   years later, ESR (disappointed by Hastings and Tarr's failure to
  5808	   exploit a great premise more thoroughly) posted a 3-times-longer
  5809	   complete rewrite called "UNIX WARS"; the two are often
  5810	   confused.
  5811	
  5812	:DEChead: /dek'hed/ n. 1. A DEC {field servoid}.  Not flattering.
  5813	   2. [from `deadhead'] A Grateful Dead fan working at DEC.
  5814	
  5815	:deckle: /dek'l/ [from dec- and {nybble}; the original
  5816	   spelling seems to have been `decle'] n. Two {nickle}s;
  5817	   10 bits.  Reported among developers for Mattel's GI 1600 (the
  5818	   Intellivision games processor), a chip with 16-bit-wide RAM but
  5819	   10-bit-wide ROM.
  5820	
  5821	:deep hack mode: n. See {hack mode}.
  5822	
  5823	:deep magic: [poss. from C. S. Lewis's "Narnia" books] n. An
  5824	   awesomely arcane technique central to a program or system, esp. one
  5825	   not generally published and available to hackers at large (compare
  5826	   {black art}); one that could only have been composed by a true
  5827	   {wizard}.  Compiler optimization techniques and many aspects of
  5828	   {OS} design used to be {deep magic}; many techniques in
  5829	   cryptography, signal processing, graphics, and AI still are.
  5830	   Compare {heavy wizardry}.  Esp. found in comments of the form
  5831	   "Deep magic begins here...".  Compare {voodoo programming}.
  5832	
  5833	:deep space: n. 1. Describes the notional location of any program
  5834	   that has gone {off the trolley}.  Esp. used of programs that
  5835	   just sit there silently grinding long after either failure or some
  5836	   output is expected.  "Uh oh.  I should have gotten a prompt ten
  5837	   seconds ago.  The program's in deep space somewhere." Compare
  5838	   {buzz}, {catatonic}, {hyperspace}.  2. The metaphorical
  5839	   location of a human so dazed and/or confused or caught up in some
  5840	   esoteric form of {bogosity} that he or she no longer responds
  5841	   coherently to normal communication.  Compare {page out}.
  5842	
  5843	:defenestration: [from the traditional Czechoslovak method of
  5844	   assassinating prime ministers, via SF fandom] n. 1. Proper karmic
  5845	   retribution for an incorrigible punster.  "Oh, ghod, that was
  5846	   *awful*!"  "Quick! Defenestrate him!"  2. The act of
  5847	   exiting a window system in order to get better response time from a
  5848	   full-screen program.  This comes from the dictionary meaning of
  5849	   `defenestrate', which is to throw something out a window.  3. The
  5850	   act of discarding something under the assumption that it will
  5851	   improve matters.  "I don't have any disk space left."  "Well,
  5852	   why don't you defenestrate that 100 megs worth of old core dumps?"
  5853	   4. [proposed] The requirement to support a command-line interface.
  5854	   "It has to run on a VT100."  "Curses!  I've been
  5855	   defenestrated!"
  5856	
  5857	:defined as: adj. In the role of, usually in an organization-chart
  5858	   sense.  "Pete is currently defined as bug prioritizer."  Compare
  5859	   {logical}.
  5860	
  5861	:dehose: /dee-hohz/ vt. To clear a {hosed} condition.
  5862	
  5863	:delint: /dee-lint/ v. To modify code to remove problems detected
  5864	   when {lint}ing.  Confusingly, this is also referred to as
  5865	   `linting' code.
  5866	
  5867	:delta: n. 1. [techspeak] A quantitative change, especially a small
  5868	   or incremental one (this use is general in physics and
  5869	   engineering).  "I just doubled the speed of my program!"  "What
  5870	   was the delta on program size?"  "About 30 percent."  (He
  5871	   doubled the speed of his program, but increased its size by only 30
  5872	   percent.)  2. [UNIX] A {diff}, especially a {diff} stored
  5873	   under the set of version-control tools called SCCS (Source Code
  5874	   Control System) or RCS (Revision Control System).  3. n. A small
  5875	   quantity, but not as small as {epsilon}.  The jargon usage of
  5876	   {delta} and {epsilon} stems from the traditional use of these
  5877	   letters in mathematics for very small numerical quantities,
  5878	   particularly in `epsilon-delta' proofs in limit theory (as in the
  5879	   differential calculus).  The term {delta} is often used, once
  5880	   {epsilon} has been mentioned, to mean a quantity that is
  5881	   slightly bigger than {epsilon} but still very small.  "The cost
  5882	   isn't epsilon, but it's delta" means that the cost isn't totally
  5883	   negligible, but it is nevertheless very small.  Common
  5884	   constructions include `within delta of ---', `within epsilon of
  5885	   ---': that is, close to and even closer to.
  5886	
  5887	:demented: adj. Yet another term of disgust used to describe a
  5888	   program.  The connotation in this case is that the program works as
  5889	   designed, but the design is bad.  Said, for example, of a program
  5890	   that generates large numbers of meaningless error messages,
  5891	   implying that it is on the brink of imminent collapse.  Compare
  5892	   {wonky}, {bozotic}.
  5893	
  5894	:demigod: n. A hacker with years of experience, a national reputation,
  5895	   and a major role in the development of at least one design, tool,
  5896	   or game used by or known to more than half of the hacker community.
  5897	   To qualify as a genuine demigod, the person must recognizably
  5898	   identify with the hacker community and have helped shape it.  Major
  5899	   demigods include Ken Thompson and Dennis Ritchie (co-inventors of
  5900	   {{UNIX}} and {C}) and Richard M. Stallman (inventor of
  5901	   {EMACS}).  In their hearts of hearts, most hackers dream of
  5902	   someday becoming demigods themselves, and more than one major
  5903	   software project has been driven to completion by the author's
  5904	   veiled hopes of apotheosis.  See also {net.god}, {true-hacker}.
  5905	
  5906	:demo: /de'moh/ [short for `demonstration'] 1. v. To
  5907	   demonstrate a product or prototype.  A far more effective way of
  5908	   inducing bugs to manifest than any number of {test} runs,
  5909	   especially when important people are watching.  2. n. The act of
  5910	   demoing.  3. n.  Esp. as `demo version', can refer to either a
  5911	   special version of a program (frequently with some features
  5912	   crippled) which is distributed at little or no cost to the user for
  5913	   demonstration purposes.
  5914	
  5915	:demo mode: [Sun] n. 1. The state of being {heads down} in order
  5916	   to finish code in time for a {demo}, usually due yesterday.
  5917	   2. A mode in which video games sit there by themselves running
  5918	   through a portion of the game, also known as `attract mode'.
  5919	   Some serious {app}s have a demo mode they use as a screen saver,
  5920	   or may go through a demo mode on startup (for example, the
  5921	   Microsoft Windows opening screen --- which lets you impress your
  5922	   neighbors without actually having to put up with {Microsloth
  5923	   Windows}).
  5924	
  5925	:demon: n. 1. [MIT] A portion of a program that is not invoked
  5926	   explicitly, but that lies dormant waiting for some condition(s) to
  5927	   occur.  See {daemon}.  The distinction is that demons are
  5928	   usually processes within a program, while daemons are usually
  5929	   programs running on an operating system.  Demons are particularly
  5930	   common in AI programs.  For example, a knowledge-manipulation
  5931	   program might implement inference rules as demons.  Whenever a new
  5932	   piece of knowledge was added, various demons would activate (which
  5933	   demons depends on the particular piece of data) and would create
  5934	   additional pieces of knowledge by applying their respective
  5935	   inference rules to the original piece.  These new pieces could in
  5936	   turn activate more demons as the inferences filtered down through
  5937	   chains of logic.  Meanwhile, the main program could continue with
  5938	   whatever its primary task was.  2. [outside MIT] Often used
  5939	   equivalently to {daemon} --- especially in the {{UNIX}} world,
  5940	   where the latter spelling and pronunciation is considered mildly
  5941	   archaic.
  5942	
  5943	:depeditate: /dee-ped'*-tayt/ [by (faulty) analogy with
  5944	   `decapitate'] vt.  Humorously, to cut off the feet of.  When one is
  5945	   using some computer-aided typesetting tools, careless placement of
  5946	   text blocks within a page or above a rule can result in chopped-off
  5947	   letter descenders.  Such letters are said to have been depeditated.
  5948	
  5949	:deprecated: adj. Said of a program or feature that is considered
  5950	   obsolescent and in the process of being phased out, usually in
  5951	   favor of a specified replacement.  Deprecated features can,
  5952	   unfortunately, linger on for many years.  This term appears with
  5953	   distressing frequency in standards documents when the committees
  5954	   which write them decide that a sufficient number of users have
  5955	   written code which depends on specific features which are out of
  5956	   favor.
  5957	
  5958	:deserves to lose: adj. Said of someone who willfully does the
  5959	   {Wrong Thing}; humorously, if one uses a feature known to be
  5960	   {marginal}.  What is meant is that one deserves the consequences
  5961	   of one's {losing} actions.  "Boy, anyone who tries to use
  5962	   {mess-dos} deserves to {lose}!" ({{ITS}} fans used to say this
  5963	   of {{UNIX}}; many still do.)  See also {screw}, {chomp},
  5964	   {bagbiter}.
  5965	
  5966	:desk check: n.,v. To {grovel} over hardcopy of source code,
  5967	   mentally simulating the control flow; a method of catching bugs.
  5968	   No longer common practice in this age of on-screen editing, fast
  5969	   compiles, and sophisticated debuggers --- though some maintain
  5970	   stoutly that it ought to be.  Compare {eyeball search},
  5971	   {vdiff}, {vgrep}.
  5972	
  5973	:Devil Book: n. `The Design and Implementation of the 4.3BSD
  5974	   UNIX Operating System', by Samuel J. Leffler, Marshall Kirk
  5975	   McKusick, Michael J. Karels, and John S. Quarterman (Addison-Wesley
  5976	   Publishers, 1989) --- the standard reference book on the internals
  5977	   of {BSD} UNIX.  So called because the cover has a picture
  5978	   depicting a little devil (a visual play on {daemon}) in
  5979	   sneakers, holding a pitchfork (referring to one of the
  5980	   characteristic features of UNIX, the `fork(2)' system call).
  5981	
  5982	:devo: /dee'voh/ [orig. in-house jargon at Symbolics] n. A person in a
  5983	   development group.  See also {doco} and {mango}.
  5984	
  5985	:dickless workstation: n. Extremely pejorative hackerism for
  5986	   `diskless workstation', a class of botches including the Sun 3/50
  5987	   and other machines designed exclusively to network with an
  5988	   expensive central disk server.  These combine all the disadvantages
  5989	   of time-sharing with all the disadvantages of distributed personal
  5990	   computers; typically, they cannot even {boot} themselves without
  5991	   help (in the form of some kind of {breath-of-life packet}) from
  5992	   the server.
  5993	
  5994	:dictionary flame: [USENET] n. An attempt to sidetrack a debate
  5995	   away from issues by insisting on meanings for key terms that
  5996	   presuppose a desired conclusion or smuggle in an implicit premise.
  5997	   A common tactic of people who prefer argument over definitions to
  5998	   disputes about reality.
  5999	
  6000	:diddle: 1. vt. To work with or modify in a not particularly
  6001	   serious manner.  "I diddled a copy of {ADVENT} so it didn't
  6002	   double-space all the time."  "Let's diddle this piece of code and
  6003	   see if the problem goes away."  See {tweak} and {twiddle}.
  6004	   2. n. The action or result of diddling.  See also {tweak},
  6005	   {twiddle}, {frob}.
  6006	
  6007	:die: v. Syn. {crash}.  Unlike {crash}, which is used
  6008	   primarily of hardware, this verb is used of both hardware and
  6009	   software.  See also {go flatline}, {casters-up mode}.
  6010	
  6011	:die horribly: v. The software equivalent of {crash and burn},
  6012	   and the preferred emphatic form of {die}.  "The converter
  6013	   choked on an FF in its input and died horribly".
  6014	
  6015	:diff: /dif/ n. 1. A change listing, especially giving differences
  6016	   between (and additions to) source code or documents (the term is
  6017	   often used in the plural `diffs').  "Send me your diffs for the
  6018	   Jargon File!"  Compare {vdiff}.  2. Specifically, such a listing
  6019	   produced by the `diff(1)' command, esp. when used as
  6020	   specification input to the `patch(1)' utility (which can
  6021	   actually perform the modifications; see {patch}).  This is a
  6022	   common method of distributing patches and source updates in the
  6023	   UNIX/C world.  See also {vdiff}, {mod}.
  6024	
  6025	:digit: n. An employee of Digital Equipment Corporation.  See also
  6026	   {VAX}, {VMS}, {PDP-10}, {{TOPS-10}}, {DEChead}, {double
  6027	   DECkers}, {field circus}.
  6028	
  6029	:dike: vt. To remove or disable a portion of something, as a wire
  6030	   from a computer or a subroutine from a program.  A standard slogan
  6031	   is "When in doubt, dike it out".  (The implication is that it is
  6032	   usually more effective to attack software problems by reducing
  6033	   complexity than by increasing it.)  The word `dikes' is widely
  6034	   used among mechanics and engineers to mean `diagonal cutters',
  6035	   esp.  a heavy-duty metal-cutting device, but may also refer to a
  6036	   kind of wire-cutters used by electronics techs.  To `dike
  6037	   something out' means to use such cutters to remove something.
  6038	   Indeed, the TMRC Dictionary defined dike as "to attack with
  6039	   dikes".  Among hackers this term has been metaphorically extended
  6040	   to informational objects such as sections of code.
  6041	
  6042	:ding: n.,vi. 1. Synonym for {feep}.  Usage: rare among hackers,
  6043	   but commoner in the {Real World}.  2. `dinged': What happens
  6044	   when someone in authority gives you a minor bitching about
  6045	   something, esp. something trivial.  "I was dinged for having a
  6046	   messy desk."
  6047	
  6048	:dink: /dink/ n. Said of a machine that has the {bitty box}
  6049	   nature; a machine too small to be worth bothering with ---
  6050	   sometimes the system you're currently forced to work on.  First
  6051	   heard from an MIT hacker working on a CP/M system with 64K, in
  6052	   reference to any 6502 system, then from fans of 32-bit
  6053	   architectures about 16-bit machines.  "GNUMACS will never work on
  6054	   that dink machine."  Probably derived from mainstream `dinky',
  6055	   which isn't sufficiently pejorative.
  6056	
  6057	:dinosaur: n. 1. Any hardware requiring raised flooring and special
  6058	   power.  Used especially of old minis and mainframes, in contrast
  6059	   with newer microprocessor-based machines.  In a famous quote from
  6060	   the 1988 UNIX EXPO, Bill Joy compared the mainframe in the massive
  6061	   IBM display with a grazing dinosaur "with a truck outside pumping
  6062	   its bodily fluids through it".  IBM was not amused.  Compare
  6063	   {big iron}; see also {mainframe}.  2. [IBM] A very conservative
  6064	   user; a {zipperhead}.
  6065	
  6066	:dinosaur pen: n. A traditional {mainframe} computer room complete with
  6067	   raised flooring, special power, its own ultra-heavy-duty air
  6068	   conditioning, and a side order of Halon fire extinguishers.  See
  6069	   {boa}.
  6070	
  6071	:dinosaurs mating: n. Said to occur when yet another {big iron}
  6072	   merger or buyout occurs; reflects a perception by hackers that
  6073	   these signal another stage in the long, slow dying of the
  6074	   {mainframe} industry.  In its glory days of the 1960s, it was
  6075	   `IBM and the Seven Dwarves': Burroughs, Control Data, General
  6076	   Electric, Honeywell, NCR, RCA, and Univac.  RCA and GE sold out
  6077	   early, and it was `IBM and the Bunch' (Burroughs, Univac, NCR,
  6078	   Control Data, and Honeywell) for a while.  Honeywell was bought out
  6079	   by Bull; Burroughs merged with Univac to form Unisys (in 1984 ---
  6080	   this was when the phrase `dinosaurs mating' was coined); and as
  6081	   this is written (early 1991) AT&T is attempting to recover from a
  6082	   disastrously bad first six years in the hardware industry by
  6083	   absorbing NCR.  More such earth-shaking unions of doomed giants
  6084	   seem inevitable.
  6085	
  6086	:dirtball: [XEROX PARC] n.  A small, perhaps struggling outsider;
  6087	   not in the major or even the minor leagues.  For example, "Xerox
  6088	   is not a dirtball company".
  6089	
  6090	   [Outsiders often observe in the PARC culture an institutional
  6091	   arrogance which usage of this term exemplifies.  The brilliance and
  6092	   scope of PARC's contributions to computer science have been such
  6093	   that this superior attitude is not much resented.  --- ESR]
  6094	
  6095	:dirty power: n. Electrical mains voltage that is unfriendly to
  6096	   the delicate innards of computers.  Spikes, {drop-outs}, average
  6097	   voltage significantly higher or lower than nominal, or just plain
  6098	   noise can all cause problems of varying subtlety and severity
  6099	   (these are collectively known as {power hit}s).
  6100	
  6101	:disclaimer: n. [USENET] n. Statement ritually appended to many USENET
  6102	   postings (sometimes automatically, by the posting software) reiterating
  6103	   the fact (which should be obvious, but is easily forgotten) that the
  6104	   article reflects its author's opinions and not necessarily those of
  6105	   the organization running the machine through which the article
  6106	   entered the network.
  6107	
  6108	:Discordianism: /dis-kor'di-*n-ism/ n. The veneration of
  6109	   {Eris}, a.k.a. Discordia; widely popular among hackers.
  6110	   Discordianism was popularized by Robert Shea and Robert Anton
  6111	   Wilson's `{Illuminatus!}' trilogy as a sort of
  6112	   self-subverting Dada-Zen for Westerners --- it should on no account
  6113	   be taken seriously but is far more serious than most jokes.
  6114	   Consider, for example, the Fifth Commandment of the Pentabarf, from
  6115	   `Principia Discordia': "A Discordian is Prohibited of
  6116	   Believing What he Reads."  Discordianism is usually connected with
  6117	   an elaborate conspiracy theory/joke involving millennia-long
  6118	   warfare between the anarcho-surrealist partisans of Eris and a
  6119	   malevolent, authoritarian secret society called the Illuminati.
  6120	   See {Religion} under {appendix B}, {Church of the
  6121	   SubGenius}, and {ha ha only serious}.
  6122	
  6123	:disk farm: n. (also {laundromat}) A large room or rooms filled
  6124	   with disk drives (esp. {washing machine}s).
  6125	
  6126	:display hack: n. A program with the same approximate purpose as a
  6127	   kaleidoscope: to make pretty pictures.  Famous display hacks
  6128	   include {munching squares}, {smoking clover}, the BSD UNIX
  6129	   `rain(6)' program, `worms(6)' on miscellaneous UNIXes,
  6130	   and the {X} `kaleid(1)' program.  Display hacks can also be
  6131	   implemented without programming by creating text files containing
  6132	   numerous escape sequences for interpretation by a video terminal;
  6133	   one notable example displayed, on any VT100, a Christmas tree with
  6134	   twinkling lights and a toy train circling its base.  The {hack
  6135	   value} of a display hack is proportional to the esthetic value of
  6136	   the images times the cleverness of the algorithm divided by the
  6137	   size of the code.  Syn. {psychedelicware}.
  6138	
  6139	:Dissociated Press: [play on `Associated Press'; perhaps inspired
  6140	   by a reference in the 1949 Bugs Bunny cartoon "What's Up,
  6141	   Doc?"] n.  An algorithm for transforming any text into potentially
  6142	   humorous garbage even more efficiently than by passing it through a
  6143	   {marketroid}.  You start by printing any N consecutive
  6144	   words (or letters) in the text.  Then at every step you search for
  6145	   any random occurrence in the original text of the last N
  6146	   words (or letters) already printed and then print the next word or
  6147	   letter.  {EMACS} has a handy command for this.  Here is a short
  6148	   example of word-based Dissociated Press applied to an earlier
  6149	   version of this Jargon File:
  6150	
  6151	     wart: n. A small, crocky {feature} that sticks out of
  6152	     an array (C has no checks for this).  This is relatively
  6153	     benign and easy to spot if the phrase is bent so as to be
  6154	     not worth paying attention to the medium in question.
  6155	
  6156	   Here is a short example of letter-based Dissociated Press applied
  6157	   to the same source:
  6158	
  6159	     window sysIWYG: n. A bit was named aften /bee't*/ prefer
  6160	     to use the other guy's re, especially in every cast a
  6161	     chuckle on neithout getting into useful informash speech
  6162	     makes removing a featuring a move or usage actual
  6163	     abstractionsidered interj. Indeed spectace logic or problem!
  6164	
  6165	   A hackish idle pastime is to apply letter-based Dissociated Press
  6166	   to a random body of text and {vgrep} the output in hopes of finding
  6167	   an interesting new word.  (In the preceding example, `window
  6168	   sysIWYG' and `informash' show some promise.)  Iterated applications
  6169	   of Dissociated Press usually yield better results.  Similar
  6170	   techniques called `travesty generators' have been employed with
  6171	   considerable satirical effect to the utterances of USENET flamers;
  6172	   see {pseudo}.
  6173	
  6174	:distribution: n. 1. A software source tree packaged for
  6175	   distribution; but see {kit}.  2. A vague term encompassing
  6176	   mailing lists and USENET newsgroups (but not {BBS} {fora}); any
  6177	   topic-oriented message channel with multiple recipients.  3. An
  6178	   information-space domain (usually loosely correlated with
  6179	   geography) to which propagation of a USENET message is restricted;
  6180	   a much-underutilized feature.
  6181	
  6182	:do protocol: [from network protocol programming] vi. To perform an
  6183	   interaction with somebody or something that follows a clearly
  6184	   defined procedure.  For example, "Let's do protocol with the
  6185	   check" at a restaurant means to ask for the check, calculate the
  6186	   tip and everybody's share, collect money from everybody, generate
  6187	   change as necessary, and pay the bill.  See {protocol}.
  6188	
  6189	:doc: /dok/ n. Common spoken and written shorthand for
  6190	   `documentation'.  Often used in the plural `docs' and in the
  6191	   construction `doc file' (documentation available on-line).
  6192	
  6193	:doco: /do'koh/ [orig. in-house jargon at Symbolics] n. A
  6194	   documentation writer.  See also {devo} and {mango}.
  6195	
  6196	:documentation:: n. The multiple kilograms of macerated, pounded,
  6197	   steamed, bleached, and pressed trees that accompany most modern
  6198	   software or hardware products (see also {tree-killer}).  Hackers
  6199	   seldom read paper documentation and (too) often resist writing it;
  6200	   they prefer theirs to be terse and on-line.  A common comment on
  6201	   this is "You can't {grep} dead trees".  See {drool-proof
  6202	   paper}, {verbiage}.
  6203	
  6204	:dodgy: adj. Syn. with {flaky}.  Preferred outside the U.S.
  6205	
  6206	:dogcow: /dog'kow/ n. See {Moof}.
  6207	
  6208	:dogwash: /dog'wosh/ [From a quip in the `urgency' field of a very
  6209	   optional software change request, ca. 1982.  It was something like
  6210	   "Urgency: Wash your dog first".] 1. n. A project of minimal
  6211	   priority, undertaken as an escape from more serious work.  2. v.
  6212	   To engage in such a project.  Many games and much {freeware} get
  6213	   written this way.
  6214	
  6215	:domainist: /doh-mayn'ist/ adj. 1. Said of an {{Internet
  6216	   address}} (as opposed to a {bang path}) because the part to the
  6217	   right of the `@' specifies a nested series of `domains';
  6218	   for example, eric@snark.thyrsus.com specifies the machine
  6219	   called snark in the subdomain called thyrsus within the
  6220	   top-level domain called com.  See also {big-endian}, sense 2.
  6221	   2. Said of a site, mailer, or routing program which knows how to
  6222	   handle domainist addresses.  3. Said of a person (esp. a site
  6223	   admin) who prefers domain addressing, supports a domainist mailer,
  6224	   or prosyletizes for domainist addressing and disdains {bang
  6225	   path}s.  This is now (1991) semi-obsolete, as most sites have
  6226	   converted.
  6227	
  6228	:Don't do that, then!: [from an old doctor's office joke about a
  6229	   patient with a trivial complaint] Stock response to a user
  6230	   complaint.  "When I type control-S, the whole system comes to a
  6231	   halt for thirty seconds."  "Don't do that, then!" (or "So don't
  6232	   do that!").  Compare {RTFM}.
  6233	
  6234	:dongle: /dong'gl/ n. 1. A security or {copy protection}
  6235	   device for commercial microcomputer programs consisting of a
  6236	   serialized EPROM and some drivers in a D-25 connector shell, which
  6237	   must be connected to an I/O port of the computer while the program
  6238	   is run.  Programs that use a dongle query the port at startup and
  6239	   at programmed intervals thereafter, and terminate if it does not
  6240	   respond with the dongle's programmed validation code.  Thus, users
  6241	   can make as many copies of the program as they want but must pay
  6242	   for each dongle.  The idea was clever, but it was initially a
  6243	   failure, as users disliked tying up a serial port this way.  Most
  6244	   dongles on the market today (1991) will pass data through the port
  6245	   and monitor for {magic} codes (and combinations of status lines)
  6246	   with minimal if any interference with devices further down the line
  6247	   --- this innovation was necessary to allow daisy-chained dongles
  6248	   for multiple pieces of software.  The devices are still not widely
  6249	   used, as the industry has moved away from copy-protection schemes
  6250	   in general.  2. By extension, any physical electronic key or
  6251	   transferrable ID required for a program to function.  See
  6252	   {dongle-disk}.
  6253	
  6254	   [Note: in early 1992, advertising copy from Rainbow Technologies (a
  6255	   manufacturer of dongles) included a claim that the word derived from
  6256	   "Don Gall", allegedly the inventor of the device.  The company's
  6257	   receptionist will cheerfully tell you that the story is a myth
  6258	   invented for the ad copy.  Nevertheless, I expect it to haunt my
  6259	   life as a lexicographer for at least the next ten years. ---ESR]
  6260	
  6261	:dongle-disk: /don'gl disk/ n. See {dongle}; a `dongle-disk'
  6262	   is a floppy disk which is required in order to perform some task.
  6263	   Some contain special coding that allows an application to identify
  6264	   it uniquely, others *are* special code that does something
  6265	   that normally-resident programs don't or can't.  (For example,
  6266	   AT&T's "Unix PC" would only come up in {root mode} with a
  6267	   special boot disk.)  Also called a `key disk'.
  6268	
  6269	:donuts: n.obs. A collective noun for any set of memory bits.  This
  6270	   is extremely archaic and may no longer be live jargon; it dates
  6271	   from the days of ferrite-{core} memories in which each bit was
  6272	   implemented by a doughnut-shaped magnetic flip-flop.
  6273	
  6274	:doorstop: n. Used to describe equipment that is non-functional and
  6275	   halfway expected to remain so, especially obsolete equipment kept
  6276	   around for political reasons or ostensibly as a backup.  "When we
  6277	   get another Wyse-50 in here, that ADM 3 will turn into a doorstop."
  6278	   Compare {boat anchor}.
  6279	
  6280	:dot file: [UNIX] n. A file which is not visible by default to
  6281	   normal directory-browsing tools (on UNIX, files named with a
  6282	   leading dot are, by convention, not normally presented in directory
  6283	   listings).  Many programs define one or more dot files in which
  6284	   startup or configuration information may be optionally recorded; a
  6285	   user can customize the program's behavior by creating the
  6286	   appropriate file in the current or home directory.  (Therefore, dot
  6287	   files tend to {creep} --- with every nontrivial application
  6288	   program defining at least one, a user's home directory can be
  6289	   filled with scores of dot files, of course without the user's
  6290	   really being aware of it.)  See also {rc file}.
  6291	
  6292	:double bucky: adj. Using both the CTRL and META keys.  "The
  6293	   command to burn all LEDs is double bucky F."
  6294	
  6295	   This term originated on the Stanford extended-ASCII keyboard, and
  6296	   was later taken up by users of the {space-cadet keyboard} at
  6297	   MIT.  A typical MIT comment was that the Stanford {bucky bits}
  6298	   (control and meta shifting keys) were nice, but there weren't
  6299	   enough of them; you could type only 512 different characters on a
  6300	   Stanford keyboard.  An obvious way to address this was simply to
  6301	   add more shifting keys, and this was eventually done; but a
  6302	   keyboard with that many shifting keys is hard on touch-typists, who
  6303	   don't like to move their hands away from the home position on the
  6304	   keyboard.  It was half-seriously suggested that the extra shifting
  6305	   keys be implemented as pedals; typing on such a keyboard would be
  6306	   very much like playing a full pipe organ.  This idea is mentioned
  6307	   in a parody of a very fine song by Jeffrey Moss called
  6308	   "Rubber Duckie", which was published in `The Sesame
  6309	   Street Songbook' (Simon and Schuster 1971, ISBN 0-671-21036-X).
  6310	   These lyrics were written on May 27, 1978, in celebration of the
  6311	   Stanford keyboard:
  6312	
  6313	                        Double Bucky
  6314	
  6315	        Double bucky, you're the one!
  6316	        You make my keyboard lots of fun.
  6317	            Double bucky, an additional bit or two:
  6318	        (Vo-vo-de-o!)
  6319	        Control and meta, side by side,
  6320	        Augmented ASCII, nine bits wide!
  6321	            Double bucky!  Half a thousand glyphs, plus a few!
  6322	                Oh,
  6323	                I sure wish that I
  6324	                Had a couple of
  6325	                    Bits more!
  6326	                Perhaps a
  6327	                Set of pedals to
  6328	                Make the number of
  6329	                    Bits four:
  6330	                Double double bucky!
  6331	        Double bucky, left and right
  6332	        OR'd together, outta sight!
  6333	            Double bucky, I'd like a whole word of
  6334	            Double bucky, I'm happy I heard of
  6335	            Double bucky, I'd like a whole word of you!
  6336	
  6337	        --- The Great Quux (with apologies to Jeffrey Moss)
  6338	
  6339	   [This, by the way, is an excellent example of computer {filk}
  6340	   --- ESR] See also {meta bit}, {cokebottle}, and {quadruple
  6341	   bucky}.
  6342	
  6343	:double DECkers: n. Used to describe married couples in which both
  6344	   partners work for Digital Equipment Corporation.
  6345	
  6346	:doubled sig: [USENET] n. A {sig block} that has been included
  6347	   twice in a {USENET} article or, less commonly, in an electronic
  6348	   mail message.  An article or message with a doubled sig can be
  6349	   caused by improperly configured software.  More often, however, it
  6350	   reveals the author's lack of experience in electronic
  6351	   communication.  See {BIFF}, {pseudo}.
  6352	
  6353	:down: 1. adj. Not operating.  "The up escalator is down" is
  6354	   considered a humorous thing to say, and "The elevator is down"
  6355	   always means "The elevator isn't working" and never refers to
  6356	   what floor the elevator is on.  With respect to computers, this
  6357	   usage has passed into the mainstream; the extension to other kinds
  6358	   of machine is still hackish.  2. `go down' vi. To stop
  6359	   functioning; usually said of the {system}.  The message from the
  6360	   {console} that every hacker hates to hear from the operator is
  6361	   "The system will go down in 5 minutes".  3. `take down',
  6362	   `bring down' vt. To deactivate purposely, usually for repair work
  6363	   or {PM}.  "I'm taking the system down to work on that bug in the
  6364	   tape drive."  Occasionally one hears the word `down' by itself
  6365	   used as a verb in this vt. sense.  See {crash}; oppose {up}.
  6366	
  6367	:download: vt. To transfer data or (esp.) code from a larger `host'
  6368	   system (esp. a {mainframe}) over a digital comm link to a smaller
  6369	   `client' system, esp. a microcomputer or specialized peripheral.
  6370	   Oppose {upload}.
  6371	
  6372	   However, note that ground-to-space communications has its own usage
  6373	   rule for this term.  Space-to-earth transmission is always download
  6374	   and the reverse upload regardless of the relative size of the
  6375	   computers involved.  So far the in-space machines have invariably
  6376	   been smaller; thus the upload/download distinction has been
  6377	   reversed from its usual sense.
  6378	
  6379	:DP: /D-P/ n. 1. Data Processing.  Listed here because,
  6380	   according to hackers, use of the term marks one immediately as a
  6381	   {suit}.  See {DPer}.  2. Common abbrev for {Dissociated
  6382	   Press}.
  6383	
  6384	:DPB: /d*-pib'/ [from the PDP-10 instruction set] vt. To plop
  6385	   something down in the middle.  Usage: silly.  "DPB
  6386	   yourself into that couch there."  The connotation would be that
  6387	   the couch is full except for one slot just big enough for you to
  6388	   sit in.  DPB means `DePosit Byte', and was the name of a PDP-10
  6389	   instruction that inserts some bits into the middle of some other
  6390	   bits.  This usage has been kept alive by the Common LISP function
  6391	   of the same name.
  6392	
  6393	:DPer: /dee-pee-er/ n. Data Processor.  Hackers are absolutely
  6394	   amazed that {suit}s use this term self-referentially.
  6395	   "*Computers* process data, not people!"  See {DP}.
  6396	
  6397	:dragon: n. [MIT] A program similar to a {daemon}, except that
  6398	   it is not invoked at all, but is instead used by the system to
  6399	   perform various secondary tasks.  A typical example would be an
  6400	   accounting program, which keeps track of who is logged in,
  6401	   accumulates load-average statistics, etc.  Under ITS, many
  6402	   terminals displayed a list of people logged in, where they were,
  6403	   what they were running, etc., along with some random picture (such
  6404	   as a unicorn, Snoopy, or the Enterprise), which was generated by
  6405	   the `name dragon'.  Usage: rare outside MIT --- under UNIX and most
  6406	   other OSes this would be called a `background demon' or
  6407	   {daemon}.  The best-known UNIX example of a dragon is
  6408	   `cron(1)'.  At SAIL, they called this sort of thing a
  6409	   `phantom'.
  6410	
  6411	:Dragon Book: n. The classic text `Compilers: Principles,
  6412	   Techniques and Tools', by Alfred V. Aho, Ravi Sethi, and Jeffrey D.
  6413	   Ullman (Addison-Wesley 1986; ISBN 0-201-10088-6), so called because
  6414	   of the cover design featuring a dragon labeled `complexity of
  6415	   compiler design' and a knight bearing the lance `LALR parser
  6416	   generator' among his other trappings.  This one is more
  6417	   specifically known as the `Red Dragon Book' (1986); an earlier
  6418	   edition, sans Sethi and titled `Principles Of Compiler Design'
  6419	   (Alfred V. Aho and Jeffrey D. Ullman; Addison-Wesley, 1977; ISBN
  6420	   0-201-00022-9), was the `Green Dragon Book' (1977).  (Also `New
  6421	   Dragon Book', `Old Dragon Book'.)  The horsed knight and the
  6422	   Green Dragon were warily eying each other at a distance; now the
  6423	   knight is typing (wearing gauntlets!) at a terminal showing a
  6424	   video-game representation of the Red Dragon's head while the rest
  6425	   of the beast extends back in normal space.  See also {{book
  6426	   titles}}.
  6427	
  6428	:drain: [IBM] v. Syn. for {flush} (sense 2).  Has a connotation
  6429	   of finality about it; one speaks of draining a device before taking
  6430	   it offline.
  6431	
  6432	:dread high-bit disease: n. A condition endemic to PRIME (a.k.a.
  6433	   PR1ME) minicomputers that results in all the characters having
  6434	   their high (0x80) bit ON rather than OFF.  This of course makes
  6435	   transporting files to other systems much more difficult, not to
  6436	   mention talking to true 8-bit devices.  Folklore had it that PRIME
  6437	   adopted the reversed-8-bit convention in order to save 25 cents per
  6438	   serial line per machine; PRIME old-timers, on the other hand, claim
  6439	   they inherited the disease from Honeywell via customer NASA's
  6440	   compatibility requirements and struggled manfully to cure it.
  6441	   Whoever was responsible, this probably qualifies as one of the
  6442	   most {cretinous} design tradeoffs ever made.  See {meta bit}.
  6443	   A few other machines have exhibited similar brain damage.
  6444	
  6445	:DRECNET: /drek'net/ [from Yiddish/German `dreck', meaning
  6446	   dirt] n. Deliberate distortion of DECNET, a networking protocol
  6447	   used in the {VMS} community.  So called because DEC helped write
  6448	   the Ethernet specification and then (either stupidly or as a
  6449	   malignant customer-control tactic) violated that spec in the design
  6450	   of DRECNET in a way that made it incompatible.  See also
  6451	   {connector conspiracy}.
  6452	
  6453	:driver: n. 1. The {main loop} of an event-processing program;
  6454	   the code that gets commands and dispatches them for execution.
  6455	   2. [techspeak] In `device driver', code designed to handle a
  6456	   particular peripheral device such as a magnetic disk or tape unit.
  6457	   3. In the TeX world and the computerized typesetting world in
  6458	   general, `driver' also means a program that translates some
  6459	   device-independent or other common format to something a real
  6460	   device can actually understand.
  6461	
  6462	:droid: n. A person (esp. a low-level bureaucrat or
  6463	   service-business employee) exhibiting most of the following
  6464	   characteristics: (a) na"ive trust in the wisdom of the parent
  6465	   organization or `the system'; (b) a propensity to believe
  6466	   obvious nonsense emitted by authority figures (or computers!);
  6467	   blind faith; (c) a rule-governed mentality, one unwilling or unable
  6468	   to look beyond the `letter of the law' in exceptional
  6469	   situations; and (d) no interest in fixing that which is broken; an
  6470	   "It's not my job, man" attitude.
  6471	
  6472	   Typical droid positions include supermarket checkout assistant and
  6473	   bank clerk; the syndrome is also endemic in low-level government
  6474	   employees.  The implication is that the rules and official
  6475	   procedures constitute software that the droid is executing.  This
  6476	   becomes a problem when the software has not been properly debugged.
  6477	   The term `droid mentality' is also used to describe the mindset
  6478	   behind this behavior. Compare {suit}, {marketroid}; see
  6479	   {-oid}.
  6480	
  6481	:drool-proof paper: n. Documentation that has been obsessively {dumbed
  6482	   down}, to the point where only a {cretin} could bear to read it, is
  6483	   said to have succumbed to the `drool-proof paper syndrome' or to
  6484	   have been `written on drool-proof paper'.  For example, this is
  6485	   an actual quote from Apple's LaserWriter manual: "Do not expose
  6486	   your LaserWriter to open fire or flame."
  6487	
  6488	:drop on the floor: vt. To react to an error condition by silently
  6489	   discarding messages or other valuable data.  "The gateway
  6490	   ran out of memory, so it just started dropping packets on the
  6491	   floor."  Also frequently used of faulty mail and netnews relay
  6492	   sites that lose messages.  See also {black hole}, {bit bucket}.
  6493	
  6494	:drop-ins: [prob. by analogy with {drop-outs}] n. Spurious
  6495	   characters appearing on a terminal or console as a result of line
  6496	   noise or a system malfunction of some sort.  Esp. used when these
  6497	   are interspersed with one's own typed input.  Compare
  6498	   {drop-outs}.
  6499	
  6500	:drop-outs: n. 1. A variety of `power glitch' (see {glitch});
  6501	   momentary 0 voltage on the electrical mains.  2. Missing characters
  6502	   in typed input due to software malfunction or system saturation
  6503	   (this can happen under UNIX when a bad connection to a modem swamps
  6504	   the processor with spurious character interrupts).  3. Mental
  6505	   glitches; used as a way of describing those occasions when the mind
  6506	   just seems to shut down for a couple of beats.  See {glitch},
  6507	   {fried}.
  6508	
  6509	:drugged: adj. (also `on drugs') 1. Conspicuously stupid,
  6510	   heading toward {brain-damaged}.  Often accompanied by a
  6511	   pantomime of toking a joint (but see {appendix B}).  2. Of hardware,
  6512	   very slow relative to normal performance.
  6513	
  6514	:drum: adj,n.  Ancient techspeak term referring to slow,
  6515	   cylindrical magnetic media which were once state-of-the-art
  6516	   mass-storage devices.  Under BSD UNIX the disk partition used for
  6517	   swapping is still called `/dev/drum'; this has led to
  6518	   considerable humor and not a few straight-faced but utterly bogus
  6519	   `explanations' getting foisted on {newbie}s.  See also "{The
  6520	   Story of Mel, a Real Programmer}" in {appendix A}.
  6521	
  6522	:drunk mouse syndrome: (also `mouse on drugs') n. A malady
  6523	   exhibited by the mouse pointing device of some computers.  The
  6524	   typical symptom is for the mouse cursor on the screen to move in
  6525	   random directions and not in sync with the motion of the actual
  6526	   mouse.  Can usually be corrected by unplugging the mouse and
  6527	   plugging it back again.  Another recommended fix for optical mice
  6528	   is to rotate your mouse pad 90 degrees.
  6529	
  6530	   At Xerox PARC in the 1970s, most people kept a can of copier
  6531	   cleaner (isopropyl alcohol) at their desks.  When the steel ball on
  6532	   the mouse had picked up enough {cruft} to be unreliable, the
  6533	   mouse was doused in cleaner, which restored it for a while.
  6534	   However, this operation left a fine residue that accelerated the
  6535	   accumulation of cruft, so the dousings became more and more
  6536	   frequent.  Finally, the mouse was declared `alcoholic' and sent
  6537	   to the clinic to be dried out in a CFC ultrasonic bath.
  6538	
  6539	:Duff's device: n. The most dramatic use yet seen of {fall
  6540	   through} in C, invented by Tom Duff when he was at Lucasfilm.
  6541	   Trying to {bum} all the instructions he could out of an inner
  6542	   loop that copied data serially onto an output port, he decided to
  6543	   {unroll} it.  He then realized that the unrolled version could
  6544	   be implemented by *interlacing* the structures of a switch and
  6545	   a loop:
  6546	
  6547	        register n = (count + 7) / 8;       /* count > 0 assumed */
  6548	
  6549	        switch (count % 8)
  6550	        {
  6551	        case 0: do {    *to = *from++;
  6552	        case 7:         *to = *from++;
  6553	        case 6:         *to = *from++;
  6554	        case 5:         *to = *from++;
  6555	        case 4:         *to = *from++;
  6556	        case 3:         *to = *from++;
  6557	        case 2:         *to = *from++;
  6558	        case 1:         *to = *from++;
  6559	             } while (--n > 0);
  6560	        }
  6561	
  6562	   Having verified that the device is valid portable C, Duff announced
  6563	   it.  C's default {fall through} in case statements has long been
  6564	   its most controversial single feature; Duff observed that "This
  6565	   code forms some sort of argument in that debate, but I'm not sure
  6566	   whether it's for or against."
  6567	
  6568	:dumb terminal: n. A terminal which is one step above a {glass tty},
  6569	   having a minimally-addressable cursor but no on-screen editing or
  6570	   other features which are claimed by a {smart terminal}.  Once upon a
  6571	   time, when glass ttys were common and addressable cursors were
  6572	   something special, what is now called a dumb terminal could pass for
  6573	   a smart terminal.
  6574	
  6575	:dumbass attack: /duhm'as *-tak'/ [Purdue] n. Notional cause of a
  6576	   novice's mistake made by the experienced, especially one made while
  6577	   running as {root} under UNIX, e.g., typing `rm -r *' or
  6578	   `mkfs' on a mounted file system.  Compare {adger}.
  6579	
  6580	:dumbed down: adj. Simplified, with a strong connotation of
  6581	   *over*simplified.  Often, a {marketroid} will insist that
  6582	   the interfaces and documentation of software be dumbed down after
  6583	   the designer has burned untold gallons of midnight oil making it
  6584	   smart.  This creates friction.  See {user-friendly}.
  6585	
  6586	:dump: n. 1. An undigested and voluminous mass of information about
  6587	   a problem or the state of a system, especially one routed to the
  6588	   slowest available output device (compare {core dump}), and most
  6589	   especially one consisting of hex or octal {runes} describing the
  6590	   byte-by-byte state of memory, mass storage, or some file.  In
  6591	   {elder days}, debugging was generally done by `groveling over'
  6592	   a dump (see {grovel}); increasing use of high-level languages
  6593	   and interactive debuggers has made this uncommon, and the term
  6594	   `dump' now has a faintly archaic flavor.  2. A backup.  This
  6595	   usage is typical only at large timesharing installations.
  6596	
  6597	:dumpster diving: /dump'-ster di:'-ving/ n. 1. The practice of
  6598	   sifting refuse from an office or technical installation to extract
  6599	   confidential data, especially security-compromising information
  6600	   (`dumpster' is an Americanism for what is elsewhere called a
  6601	   `skip').  Back in AT&T's monopoly days, before paper shredders
  6602	   became common office equipment, phone phreaks (see {phreaking})
  6603	   used to organize regular dumpster runs against phone company plants
  6604	   and offices.  Discarded and damaged copies of AT&T internal manuals
  6605	   taught them much.  The technique is still rumored to be a favorite
  6606	   of crackers operating against careless targets.  2. The practice of
  6607	   raiding the dumpsters behind buildings where producers and/or
  6608	   consumers of high-tech equipment are located, with the expectation
  6609	   (usually justified) of finding discarded but still-valuable
  6610	   equipment to be nursed back to health in some hacker's den.
  6611	   Experienced dumpster-divers not infrequently accumulate basements
  6612	   full of moldering (but still potentially useful) {cruft}.
  6613	
  6614	:dup killer: /d[y]oop kill'r/ [FidoNet] n. Software that is
  6615	   supposed to detect and delete duplicates of a message that may
  6616	   have reached the FidoNet system via different routes.
  6617	
  6618	:dup loop: /d[y]oop loop/ (also `dupe loop') [FidoNet] n. An
  6619	   incorrectly configured system or network gateway may propagate
  6620	   duplicate messages on one or more {echo}es, with different
  6621	   identification information that renders {dup killer}s
  6622	   ineffective.  If such a duplicate message eventually reaches a
  6623	   system through which it has already passed (with the original
  6624	   identification information), all systems passed on the way back to
  6625	   that system are said to be involved in a {dup loop}.
  6626	
  6627	:dusty deck: n. Old software (especially applications) which one is
  6628	   obliged to remain compatible with (or to maintain).  The term
  6629	   implies that the software in question is a holdover from card-punch
  6630	   days.  Used esp. when referring to old scientific and
  6631	   {number-crunching} software, much of which was written in FORTRAN
  6632	   and very poorly documented but is believed to be too expensive to
  6633	   replace.  See {fossil}.
  6634	
  6635	:DWIM: /dwim/ [acronym, `Do What I Mean'] 1. adj. Able to guess,
  6636	   sometimes even correctly, the result intended when bogus input was
  6637	   provided.  2. n.,obs. The BBNLISP/INTERLISP function that attempted
  6638	   to accomplish this feat by correcting many of the more common
  6639	   errors.  See {hairy}.  3. Occasionally, an interjection hurled
  6640	   at a balky computer, esp. when one senses one might be tripping
  6641	   over legalisms (see {legalese}).
  6642	
  6643	   Warren Teitelman originally wrote DWIM to fix his typos and
  6644	   spelling errors, so it was somewhat idiosyncratic to his style, and
  6645	   would often make hash of anyone else's typos if they were
  6646	   stylistically different.  This led a number of victims of DWIM to
  6647	   claim the acronym stood for `Damn Warren's Infernal
  6648	   Machine!'.
  6649	
  6650	   In one notorious incident, Warren added a DWIM feature to the
  6651	   command interpreter used at Xerox PARC.  One day another hacker
  6652	   there typed `delete *$' to free up some disk space.  (The
  6653	   editor there named backup files by appending `$' to the
  6654	   original file name, so he was trying to delete any backup files
  6655	   left over from old editing sessions.)  It happened that there
  6656	   weren't any editor backup files, so DWIM helpfully reported
  6657	   `*$ not found, assuming you meant 'delete *'.' It then started
  6658	   to delete all the files on the disk!  The hacker managed to stop it
  6659	   with a {Vulcan nerve pinch} after only a half dozen or so files
  6660	   were lost.
  6661	   
  6662	   The hacker later said he had been sorely tempted to go to Warren's
  6663	   office, tie Warren down in his chair in front of his workstation,
  6664	   and then type `delete *$' twice.
  6665	
  6666	   DWIM is often suggested in jest as a desired feature for a complex
  6667	   program; it is also occasionally described as the single
  6668	   instruction the ideal computer would have.  Back when proofs of
  6669	   program correctness were in vogue, there were also jokes about
  6670	   `DWIMC' (Do What I Mean, Correctly).  A related term, more often
  6671	   seen as a verb, is DTRT (Do The Right Thing); see {Right
  6672	   Thing}.
  6673	
  6674	:dynner: /din'r/ 32 bits, by analogy with {nybble} and
  6675	   {{byte}}.  Usage: rare and extremely silly.  See also {playte},
  6676	   {tayste}, {crumb}.
  6677	
  6678	= E =
  6679	=====
  6680	
  6681	:earthquake: [IBM] n. The ultimate real-world shock test for
  6682	   computer hardware.  Hackish sources at IBM deny the rumor that the
  6683	   Bay Area quake of 1989 was initiated by the company to test
  6684	   quality-assurance procedures at its California plants.
  6685	
  6686	:Easter egg: [from the custom of the Easter Egg hunt observed in
  6687	   the U.S. and many psparts of Europe] n. 1. A message hidden in the
  6688	   object code of a program as a joke, intended to be found by persons
  6689	   disassembling or browsing the code.  2. A message, graphic, or
  6690	   sound effect emitted by a program (or, on a PC, the BIOS ROM) in
  6691	   response to some undocumented set of commands or keystrokes,
  6692	   intended as a joke or to display program credits.  One well-known
  6693	   early Easter egg found in a couple of OSes caused them to respond
  6694	   to the command `make love' with `not war?'.  Many
  6695	   personal computers have much more elaborate eggs hidden in ROM,
  6696	   including lists of the developers' names, political exhortations,
  6697	   snatches of music, and (in one case) graphics images of the entire
  6698	   development team.
  6699	
  6700	:Easter egging: [IBM] n. The act of replacing unrelated parts more or
  6701	   less at random in hopes that a malfunction will go away.  Hackers
  6702	   consider this the normal operating mode of {field circus} techs and
  6703	   do not love them for it.  Compare {shotgun debugging}.
  6704	
  6705	:eat flaming death: imp. A construction popularized among hackers by
  6706	   the infamous {CPU Wars} comic; supposed to derive from a famously
  6707	   turgid line in a WWII-era anti-Nazi propaganda comic that ran
  6708	   "Eat flaming death, non-Aryan mongrels!" or something of the sort
  6709	   (however, it is also reported that the Firesign Theater's
  6710	   1975 album "In The Next World, You're On Your Own" included the
  6711	   phrase "Eat flaming death, fascist media pigs"; this may have been
  6712	   an influence).  Used in humorously overblown expressions of
  6713	   hostility. "Eat flaming death, {{EBCDIC}} users!"
  6714	
  6715	:EBCDIC:: /eb's*-dik/, /eb'see`dik/, or /eb'k*-dik/ [abbreviation,
  6716	   Extended Binary Coded Decimal Interchange Code] n. An alleged
  6717	   character set used on IBM {dinosaur}s.  It exists in at least six
  6718	   mutually incompatible versions, all featuring such delights as
  6719	   non-contiguous letter sequences and the absence of several ASCII
  6720	   punctuation characters fairly important for modern computer
  6721	   languages (exactly which characters are absent varies according to
  6722	   which version of EBCDIC you're looking at).  IBM adapted EBCDIC
  6723	   from {{punched card}} code in the early 1960s and promulgated it
  6724	   as a customer-control tactic (see {connector conspiracy}),
  6725	   spurning the already established ASCII standard.  Today, IBM claims
  6726	   to be an open-systems company, but IBM's own description of the
  6727	   EBCDIC variants and how to convert between them is still internally
  6728	   classified top-secret, burn-before-reading.  Hackers blanch at the
  6729	   very *name* of EBCDIC and consider it a manifestation of
  6730	   purest {evil}.  See also {fear and loathing}.
  6731	
  6732	:echo: [FidoNet] n. A {topic group} on {FidoNet}'s echomail
  6733	   system.  Compare {newsgroup}.
  6734	
  6735	:eighty-column mind: [IBM] n. The sort said to be possessed by
  6736	   persons for whom the transition from {punched card} to tape was
  6737	   traumatic (nobody has dared tell them about disks yet).  It is said
  6738	   that these people, including (according to an old joke) the founder
  6739	   of IBM, will be buried `face down, 9-edge first' (the 9-edge being
  6740	   the bottom of the card).  This directive is inscribed on IBM's
  6741	   1402 and 1622 card readers and is referenced in a famous bit of
  6742	   doggerel called "The Last Bug", the climactic lines of which
  6743	   are as follows:
  6744	
  6745	        He died at the console
  6746	        Of hunger and thirst.
  6747	        Next day he was buried,
  6748	        Face down, 9-edge first.
  6749	
  6750	   The eighty-column mind is thought by most hackers to dominate IBM's
  6751	   customer base and its thinking.  See {IBM}, {fear and
  6752	   loathing}, {card walloper}.
  6753	
  6754	:El Camino Bignum: /el' k*-mee'noh big'nuhm/ n. The road
  6755	   mundanely called El Camino Real, a road through the San Francisco
  6756	   peninsula that originally extended all the way down to Mexico City
  6757	   and many portions of which are still intact.  Navigation on the San
  6758	   Francisco peninsula is usually done relative to El Camino Real,
  6759	   which defines {logical} north and south even though it isn't
  6760	   really north-south many places.  El Camino Real runs right past
  6761	   Stanford University and so is familiar to hackers.
  6762	
  6763	   The Spanish word `real' (which has two syllables: /ray-ahl'/)
  6764	   means `royal'; El Camino Real is `the royal road'.  In the FORTRAN
  6765	   language, a `real' quantity is a number typically precise to 7
  6766	   significant digits, and a `double precision' quantity is a larger
  6767	   floating-point number, precise to perhaps fourteen significant
  6768	   digits (other languages have similar `real' types).
  6769	
  6770	   When a hacker from MIT visited Stanford in 1976, he remarked what a
  6771	   long road El Camino Real was.  Making a pun on `real', he started
  6772	   calling it `El Camino Double Precision' --- but when the hacker
  6773	   was told that the road was hundreds of miles long, he renamed it
  6774	   `El Camino Bignum', and that name has stuck.  (See {bignum}.)
  6775	
  6776	:elder days: n. The heroic age of hackerdom (roughly, pre-1980); the
  6777	   era of the {PDP-10}, {TECO}, {{ITS}}, and the ARPANET.  This
  6778	   term has been rather consciously adopted from J. R. R. Tolkien's
  6779	   fantasy epic `The Lord of the Rings'.  Compare {Iron Age};
  6780	   see also {elvish}.
  6781	
  6782	:elegant: [from mathematical usage] adj. Combining simplicity,
  6783	   power, and a certain ineffable grace of design.  Higher praise than
  6784	   `clever', `winning', or even {cuspy}.
  6785	
  6786	:elephantine: adj. Used of programs or systems that are both
  6787	   conspicuous {hog}s (owing perhaps to poor design founded on
  6788	   {brute force and ignorance}) and exceedingly {hairy} in source
  6789	   form.  An elephantine program may be functional and even friendly,
  6790	   but (as in the old joke about being in bed with an elephant) it's
  6791	   tough to have around all the same (and, like a pachyderm, difficult
  6792	   to maintain).  In extreme cases, hackers have been known to make
  6793	   trumpeting sounds or perform expressive proboscatory mime at the
  6794	   mention of the offending program.  Usage: semi-humorous.  Compare
  6795	   `has the elephant nature' and the somewhat more pejorative
  6796	   {monstrosity}.  See also {second-system effect} and
  6797	   {baroque}.
  6798	
  6799	:elevator controller: n. Another archetypal dumb embedded-systems
  6800	   application, like {toaster} (which superseded it).  During one
  6801	   period (1983--84) in the deliberations of ANSI X3J11 (the
  6802	   C standardization committee) this was the canonical example of a
  6803	   really stupid, memory-limited computation environment.  "You can't
  6804	   require `printf(3)' to be part of the default runtime library
  6805	   --- what if you're targeting an elevator controller?"  Elevator
  6806	   controllers became important rhetorical weapons on both sides of
  6807	   several {holy wars}.
  6808	
  6809	:ELIZA effect: /*-li:'z* *-fekt'/ [AI community] n. The tendency of 
  6810	   humans to attach associations to terms from prior experience.
  6811	   For example, there is nothing magic about the symbol `+' that 
  6812	   makes it well-suited to indicate addition; it's just that people
  6813	   associate it with addition.  Using `+' or `plus' to mean addition
  6814	   in a computer language is taking advantage of the ELIZA effect.
  6815	
  6816	   This term comes from the famous ELIZA program by Joseph Weizenbaum,
  6817	   which simulated a Rogerian psychoanalyst by rephrasing many of the
  6818	   patient's statements as questions and posing them to the patient.
  6819	   It worked by simple pattern recognition and substitution of key
  6820	   words into canned phrases.  It was so convincing, however, that
  6821	   there are many anecdotes about people becoming very emotionally
  6822	   caught up in dealing with ELIZA.  All this was due to people's
  6823	   tendency to attach to words meanings which the computer never put
  6824	   there.  The ELIZA effect is a {Good Thing} when writing a
  6825	   programming language, but it can blind you to serious shortcomings
  6826	   when analyzing an Artificial Intelligence system.  Compare
  6827	   {ad-hockery}; see also {AI-complete}.
  6828	
  6829	:elvish: n. 1. The Tengwar of Feanor, a table of letterforms
  6830	   resembling the beautiful Celtic half-uncial hand of the `Book
  6831	   of Kells'.  Invented and described by J. R. R. Tolkien
  6832	   in `The Lord of The Rings' as an orthography for his fictional
  6833	   `elvish' languages, this system (which is both visually and
  6834	   phonetically elegant) has long fascinated hackers (who tend to be
  6835	   interested by artificial languages in general).  It is traditional
  6836	   for graphics printers, plotters, window systems, and the like to
  6837	   support a Feanorian typeface as one of their demo items.  See also
  6838	   {elder days}.  2. By extension, any odd or unreadable typeface
  6839	   produced by a graphics device.  3. The typeface mundanely called
  6840	   `B"ocklin', an art-decoish display font.
  6841	
  6842	:EMACS: /ee'maks/ [from Editing MACroS] n. The ne plus ultra of
  6843	   hacker editors, a programmable text editor with an entire LISP
  6844	   system inside it.  It was originally written by Richard Stallman in
  6845	   {TECO} under {{ITS}} at the MIT AI lab; AI Memo 554 described
  6846	   it as "an advanced, self-documenting, customizable, extensible
  6847	   real-time display editor".  It has since been reimplemented any
  6848	   number of times, by various hackers, and versions exist which run
  6849	   under most major operating systems.  Perhaps the most widely used
  6850	   version, also written by Stallman and now called "{GNU} EMACS"
  6851	   or {GNUMACS}, runs principally under UNIX.  It includes
  6852	   facilities to run compilation subprocesses and send and receive
  6853	   mail; many hackers spend up to 80% of their {tube time} inside
  6854	   it.  Other variants include {GOSMACS}, CCA EMACS, UniPress
  6855	   EMACS, Montgomery EMACS, jove, epsilon, and MicroEMACS.
  6856	
  6857	   Some EMACS versions running under window managers iconify as an
  6858	   overflowing kitchen sink, perhaps to suggest the one feature the
  6859	   editor does not (yet) include.  Indeed, some hackers find EMACS too
  6860	   heavyweight and {baroque} for their taste, and expand the name as
  6861	   `Escape Meta Alt Control Shift' to spoof its heavy reliance on
  6862	   keystrokes decorated with {bucky bits}.  Other spoof expansions
  6863	   include `Eight Megabytes And Constantly Swapping', `Eventually
  6864	   `malloc()'s All Computer Storage', and `EMACS Makes A Computer
  6865	   Slow' (see {{recursive acronym}}).  See also {vi}.
  6866	
  6867	:email: /ee'mayl/ 1. n. Electronic mail automatically passed
  6868	   through computer networks and/or via modems over common-carrier
  6869	   lines.  Contrast {snail-mail}, {paper-net}, {voice-net}.  See
  6870	   {network address}.  2. vt. To send electronic mail.
  6871	
  6872	   Oddly enough, the word `emailed' is actually listed in the OED; it
  6873	   means "embossed (with a raised pattern) or arranged in a net work".
  6874	   A use from 1480 is given. The word is derived from French
  6875	   `emmailleure', network.
  6876	
  6877	:emoticon: /ee-moh'ti-kon/ n. An ASCII glyph used to indicate an
  6878	   emotional state in email or news.  Although originally intended
  6879	   mostly as jokes, emoticons (or some other explicit humor
  6880	   indication) are virtually required under certain circumstances in
  6881	   high-volume text-only communication forums such as USENET; the lack
  6882	   of verbal and visual cues can otherwise cause what were intended to
  6883	   be humorous, sarcastic, ironic, or otherwise non-100%-serious
  6884	   comments to be badly misinterpreted (not always even by
  6885	   {newbie}s), resulting in arguments and {flame war}s.
  6886	
  6887	   Hundreds of emoticons have been proposed, but only a few are in
  6888	   common use.  These include:
  6889	
  6890	     :-)
  6891	          `smiley face' (for humor, laughter, friendliness,
  6892	          occasionally sarcasm)
  6893	
  6894	     :-(
  6895	          `frowney face' (for sadness, anger, or upset)
  6896	
  6897	     ;-)
  6898	          `half-smiley' ({ha ha only serious});
  6899	          also known as `semi-smiley' or `winkey face'.
  6900	
  6901	     :-/
  6902	          `wry face'
  6903	
  6904	   (These may become more comprehensible if you tilt your head
  6905	   sideways, to the left.)
  6906	
  6907	   The first two listed are by far the most frequently encountered.
  6908	   Hyphenless forms of them are common on CompuServe, GEnie, and BIX;
  6909	   see also {bixie}.  On {USENET}, `smiley' is often used as a
  6910	   generic term synonymous with {emoticon}, as well as specifically
  6911	   for the happy-face emoticon.
  6912	
  6913	   It appears that the emoticon was invented by one Scott Fahlman on
  6914	   the CMU {bboard} systems around 1980.  He later wrote: "I wish I
  6915	   had saved the original post, or at least recorded the date for
  6916	   posterity, but I had no idea that I was starting something that
  6917	   would soon pollute all the world's communication channels."  [GLS
  6918	   confirms that he remembers this original posting].
  6919	
  6920	   Note for the {newbie}: Overuse of the smiley is a mark of
  6921	   loserhood!  More than one per paragraph is a fairly sure sign that
  6922	   you've gone over the line.
  6923	
  6924	:empire: n. Any of a family of military simulations derived from a
  6925	   game written by Peter Langston many years ago.  There are five or
  6926	   six multi-player variants of varying degrees of sophistication, and
  6927	   one single-player version implemented for both UNIX and VMS; the
  6928	   latter is even available as MS-DOS freeware.  All are notoriously
  6929	   addictive.
  6930	
  6931	:engine: n. 1. A piece of hardware that encapsulates some function
  6932	   but can't be used without some kind of {front end}.  Today we
  6933	   have, especially, `print engine': the guts of a laser printer.
  6934	   2. An analogous piece of software; notionally, one that does a lot
  6935	   of noisy crunching, such as a `database engine'.
  6936	
  6937	   The hackish senses of `engine' are actually close to its original,
  6938	   pre-Industrial-Revolution sense of a skill, clever device, or
  6939	   instrument (the word is cognate to `ingenuity').  This sense had
  6940	   not been completely eclipsed by the modern connotation of
  6941	   power-transducing machinery in Charles Babbage's time, which
  6942	   explains why he named the stored-program computer that
  6943	   he designed in 1844 the `Analytical Engine'.
  6944	
  6945	:English: 1. n.,obs. The source code for a program, which may be in
  6946	   any language, as opposed to the linkable or executable binary
  6947	   produced from it by a compiler.  The idea behind the term is that
  6948	   to a real hacker, a program written in his favorite programming
  6949	   language is at least as readable as English.  Usage: used mostly by
  6950	   old-time hackers, though recognizable in context.  2. The official
  6951	   name of the database language used by the Pick Operating System,
  6952	   actually a sort of crufty, brain-damaged SQL with delusions of
  6953	   grandeur.  The name permits {marketroid}s to say "Yes, and you
  6954	   can program our computers in English!" to ignorant {suit}s
  6955	   without quite running afoul of the truth-in-advertising laws.
  6956	
  6957	:enhancement: n. {Marketroid}-speak for a bug {fix}.  This abuse
  6958	   of language is a popular and time-tested way to turn incompetence
  6959	   into increased revenue.  A hacker being ironic would instead call
  6960	   the fix a {feature} --- or perhaps save some effort by declaring
  6961	   the bug itself to be a feature.
  6962	
  6963	:ENQ: /enkw/ or /enk/ [from the ASCII mnemonic ENQuire for
  6964	   0000101] An on-line convention for querying someone's availability.
  6965	   After opening a {talk mode} connection to someone apparently in
  6966	   heavy hack mode, one might type `SYN SYN ENQ?' (the SYNs
  6967	   representing notional synchronization bytes), and expect a return
  6968	   of {ACK} or {NAK} depending on whether or not the person felt
  6969	   interruptible.  Compare {ping}, {finger}, and the usage of
  6970	   `FOO?' listed under {talk mode}.
  6971	
  6972	:EOF: /E-O-F/ [abbreviation, `End Of File'] n. 1. [techspeak]
  6973	   Refers esp. to whatever {out-of-band} value is returned by
  6974	   C's sequential character-input functions (and their equivalents in
  6975	   other environments) when end of file has been reached.  This value
  6976	   is -1 under C libraries postdating V6 UNIX, but was
  6977	   originally 0.  2. [UNIX] The keyboard character (usually control-D,
  6978	   the ASCII EOT (End Of Transmission) character) which is mapped by
  6979	   the terminal driver into an end-of-file condition.  3. Used by
  6980	   extension in non-computer contexts when a human is doing something
  6981	   that can be modeled as a sequential read and can't go further.
  6982	   "Yeah, I looked for a list of 360 mnemonics to post as a joke, but
  6983	   I hit EOF pretty fast; all the library had was a {JCL} manual."
  6984	   See also {EOL}.
  6985	
  6986	:EOL: /E-O-L/ [End Of Line] n. Syn. for {newline}, derived
  6987	   perhaps from the original CDC6600 Pascal.  Now rare, but widely
  6988	   recognized and occasionally used for brevity.  Used in the
  6989	   example entry under {BNF}.  See also {EOF}.
  6990	
  6991	:EOU: /E-O-U/ n. The mnemonic of a mythical ASCII control
  6992	   character (End Of User) that could make an ASR-33 Teletype explode
  6993	   on receipt.  This parodied the numerous obscure delimiter and
  6994	   control characters left in ASCII from the days when it was
  6995	   associated more with wire-service teletypes than computers (e.g.,
  6996	   FS, GS, RS, US, EM, SUB, ETX, and esp. EOT).  It is worth
  6997	   remembering that ASR-33s were big, noisy mechanical beasts with a
  6998	   lot of clattering parts; the notion that one might explode was
  6999	   nowhere near as ridiculous as it might seem to someone sitting in
  7000	   front of a {tube} or flatscreen today.
  7001	
  7002	:epoch: [UNIX: prob. from astronomical timekeeping] n. The time
  7003	   and date corresponding to 0 in an operating system's clock and
  7004	   timestamp values.  Under most UNIX versions the epoch is 00:00:00
  7005	   GMT, January 1, 1970; under VMS, it's 00:00:00 GMT of November 17,
  7006	   1858 (base date of the U.S. Naval Observatory's ephemerides).
  7007	   System time is measured in seconds or {tick}s past the epoch.
  7008	   Weird problems may ensue when the clock wraps around (see {wrap
  7009	   around}), which is not necessarily a rare event; on systems
  7010	   counting 10 ticks per second, a signed 32-bit count of ticks is
  7011	   good only for 6.8 years.  The 1-tick-per-second clock of UNIX is
  7012	   good only until January 18, 2038, assuming at least some software
  7013	   continues to consider it signed and that word lengths don't
  7014	   increase by then.  See also {wall time}.
  7015	
  7016	:epsilon: [see {delta}] 1. n. A small quantity of anything.  "The
  7017	   cost is epsilon."  2. adj. Very small, negligible; less than
  7018	   {marginal}.  "We can get this feature for epsilon cost."
  7019	   3. `within epsilon of': close enough to be indistinguishable for
  7020	   all practical purposes.  This is even closer than being `within
  7021	   delta of'.  "That's not what I asked for, but it's within
  7022	   epsilon of what I wanted."  Alternatively, it may mean not close
  7023	   enough, but very little is required to get it there: "My program
  7024	   is within epsilon of working."
  7025	
  7026	:epsilon squared: n. A quantity even smaller than {epsilon}, as
  7027	   small in comparison to epsilon as epsilon is to something normal;
  7028	   completely negligible.  If you buy a supercomputer for a million
  7029	   dollars, the cost of the thousand-dollar terminal to go with it is
  7030	   {epsilon}, and the cost of the ten-dollar cable to connect them
  7031	   is epsilon squared.  Compare {lost in the underflow}, {lost
  7032	   in the noise}.
  7033	
  7034	:era, the: Syn. {epoch}.  Webster's Unabridged makes these words
  7035	   almost synonymous, but `era' usually connotes a span of time rather
  7036	   than a point in time.  The {epoch} usage is recommended.
  7037	
  7038	:Eric Conspiracy: n. A shadowy group of mustachioed hackers named
  7039	   Eric first pinpointed as a sinister conspiracy by an infamous
  7040	   talk.bizarre posting ca. 1986; this was doubtless influenced by the
  7041	   numerous `Eric' jokes in the Monty Python oeuvre.  There do indeed
  7042	   seem to be considerably more mustachioed Erics in hackerdom than
  7043	   the frequency of these three traits can account for unless they are
  7044	   correlated in some arcane way.  Well-known examples include Eric
  7045	   Allman (he of the `Allman style' described under {indent style})
  7046	   and Erik Fair (co-author of NNTP); your editor has heard from about
  7047	   fourteen others by email, and the organization line `Eric
  7048	   Conspiracy Secret Laboratories' now emanates regularly from more
  7049	   than one site.
  7050	
  7051	:Eris: /e'ris/ n. The Greek goddess of Chaos, Discord, Confusion,
  7052	   and Things You Know Not Of; her name was latinized to Discordia and
  7053	   she was worshiped by that name in Rome.  Not a very friendly deity
  7054	   in the Classical original, she was reinvented as a more benign
  7055	   personification of creative anarchy starting in 1959 by the
  7056	   adherents of {Discordianism} and has since been a semi-serious
  7057	   subject of veneration in several `fringe' cultures, including
  7058	   hackerdom.  See {Discordianism}, {Church of the SubGenius}.
  7059	
  7060	:erotics: /ee-ro'tiks/ n. [Helsinki University of Technology,
  7061	   Finland] n. English-language university slang for electronics.
  7062	   Often used by hackers in Helsinki, maybe because good electronics
  7063	   excites them and makes them warm.
  7064	
  7065	:error 33: [XEROX PARC] n. 1. Predicating one research effort upon
  7066	   the success of another.  2. Allowing your own research effort to be
  7067	   placed on the critical path of some other project (be it a research
  7068	   effort or not).
  7069	
  7070	:essentials: n. Things necessary to maintain a productive and secure
  7071	   hacking environment.  "A jug of wine, a loaf of bread, a
  7072	   20-megahertz 80386 box with 8 meg of core and a 300-megabyte disk
  7073	   supporting full UNIX with source and X windows and EMACS and UUCP
  7074	   via a 'blazer to a friendly Internet site, and thou."
  7075	
  7076	:evil: adj. As used by hackers, implies that some system, program,
  7077	   person, or institution is sufficiently maldesigned as to be not
  7078	   worth the bother of dealing with.  Unlike the adjectives in the
  7079	   {cretinous}/{losing}/{brain-damaged} series, `evil' does not
  7080	   imply incompetence or bad design, but rather a set of goals or
  7081	   design criteria fatally incompatible with the speaker's.  This is
  7082	   more an esthetic and engineering judgment than a moral one in the
  7083	   mainstream sense.  "We thought about adding a {Blue Glue}
  7084	   interface but decided it was too evil to deal with."  "{TECO}
  7085	   is neat, but it can be pretty evil if you're prone to typos."
  7086	   Often pronounced with the first syllable lengthened, as /eeee'vil/.
  7087	
  7088	:exa-: /ek's*/ [SI] pref. See {{quantifiers}}.
  7089	
  7090	:examining the entrails: n. The process of {grovel}ling through
  7091	   a core dump or hex image in the attempt to discover the bug that
  7092	   brought a program or system down.  The reference is to divination
  7093	   from the entrails of a sacrified animal.  Compare {runes},
  7094	   {incantation}, {black art}, {desk check}.
  7095	
  7096	:EXCH: /eks'ch*/ or /eksch/ vt. To exchange two things, each for the
  7097	   other; to swap places.  If you point to two people sitting down and
  7098	   say "Exch!", you are asking them to trade places.  EXCH,
  7099	   meaning EXCHange, was originally the name of a PDP-10 instruction
  7100	   that exchanged the contents of a register and a memory location.
  7101	   Many newer hackers tend to be thinking instead of the {PostScript}
  7102	   exchange operator (which is usually written in lowercase).
  7103	
  7104	:excl: /eks'kl/ n. Abbreviation for `exclamation point'.  See
  7105	   {bang}, {shriek}, {{ASCII}}.
  7106	
  7107	:EXE: /eks'ee/ or /eek'see/ or /E-X-E/ n. An executable
  7108	   binary file.  Some operating systems (notably MS-DOS, VMS, and
  7109	   TWENEX) use the extension .EXE to mark such files.  This usage is
  7110	   also occasionally found among UNIX programmers even though UNIX
  7111	   executables don't have any required suffix.
  7112	
  7113	:exec: /eg-zek'/ vt.,n.  1. [UNIX: from `execute'] Synonym for
  7114	   {chain}, derives from the `exec(2)' call.  2. [from
  7115	   `executive'] obs. The command interpreter for an {OS} (see
  7116	   {shell}); term esp. used around mainframes, and prob.
  7117	   derived from UNIVAC's archaic EXEC 2 and EXEC 8 operating systems.
  7118	   3. At IBM and VM/CMS shops, the equivalent of a shell command file
  7119	   (among VM/CMS users).
  7120	
  7121	   The mainstream `exec' as an abbreviation for (human) executive is
  7122	   *not* used.  To a hacker, an `exec' is a always a program,
  7123	   never a person.
  7124	
  7125	:exercise, left as an: [from technical books] Used to complete a
  7126	   proof when one doesn't mind a {handwave}, or to avoid one
  7127	   entirely.  The complete phrase is: "The proof (or the rest) is
  7128	   left as an exercise for the reader."  This comment *has*
  7129	   occasionally been attached to unsolved research problems by authors
  7130	   possessed of either an evil sense of humor or a vast faith in the
  7131	   capabilities of their audiences.
  7132	
  7133	:eyeball search: n. To look for something in a mass of code or data
  7134	   with one's own native optical sensors, as opposed to using some
  7135	   sort of pattern matching software like {grep} or any other
  7136	   automated search tool.  Also called a {vgrep}; compare
  7137	   {vdiff}, {desk check}.
  7138	
  7139	= F =
  7140	=====
  7141	
  7142	:fab: /fab/ [from `fabricate'] v. 1. To produce chips from a
  7143	   design that may have been created by someone at another company.
  7144	   Fabbing chips based on the designs of others is the activity of a
  7145	   {silicon foundry}.  To a hacker, `fab' is practically never short
  7146	   for `fabulous'.  2. `fab line': the production system
  7147	   (lithography, diffusion, etching, etc.) for chips at a chip
  7148	   manufacturer.  Different `fab lines' are run with different
  7149	   process parameters, die sizes, or technologies, or simply to
  7150	   provide more manufacturing volume.
  7151	
  7152	:face time: n. Time spent interacting with somebody face-to-face (as
  7153	   opposed to via electronic links).  "Oh, yeah, I spent some face
  7154	   time with him at the last Usenix."
  7155	
  7156	:factor: n. See {coefficient of X}.
  7157	
  7158	:fall over: [IBM] vi. Yet another synonym for {crash} or {lose}.
  7159	   `Fall over hard' equates to {crash and burn}.
  7160	
  7161	:fall through: v. (n. `fallthrough', var. `fall-through')
  7162	   1. To exit a loop by exhaustion, i.e., by having fulfilled its exit
  7163	   condition rather than via a break or exception condition that exits
  7164	   from the middle of it.  This usage appears to be *really* old,
  7165	   dating from the 1940s and 1950s.  2. To fail a test that would have
  7166	   passed control to a subroutine or some other distant portion of
  7167	   code.  3. In C, `fall-through' occurs when the flow of execution in
  7168	   a switch statement reaches a `case' label other than by
  7169	   jumping there from the switch header, passing a point where one
  7170	   would normally expect to find a `break'.  A trivial example:
  7171	
  7172	     switch (color)
  7173	     {
  7174	     case GREEN:
  7175	        do_green();
  7176	        break;
  7177	     case PINK:
  7178	        do_pink();
  7179	        /* FALL THROUGH */
  7180	     case RED:
  7181	        do_red();
  7182	        break;
  7183	     default:
  7184	        do_blue();
  7185	        break;
  7186	     }
  7187	
  7188	   The variant spelling `/* FALL THRU */' is also common.
  7189	
  7190	   The effect of this code is to `do_green()' when color is
  7191	   `GREEN', `do_red()' when color is `RED',
  7192	   `do_blue()' on any other color other than `PINK', and
  7193	   (and this is the important part) `do_pink()' *and then*
  7194	   `do_red()' when color is `PINK'.  Fall-through is
  7195	   {considered harmful} by some, though there are contexts (such as
  7196	   the coding of state machines) in which it is natural; it is
  7197	   generally considered good practice to include a comment
  7198	   highlighting the fall-through where one would normally expect a
  7199	   break.
  7200	
  7201	:fandango on core: [UNIX/C hackers, from the Mexican dance] n.
  7202	   In C, a wild pointer that runs out of bounds, causing a {core
  7203	   dump}, or corrupts the `malloc(3)' {arena} in such a way as
  7204	   to cause mysterious failures later on, is sometimes said to have
  7205	   `done a fandango on core'.  On low-end personal machines without an
  7206	   MMU, this can corrupt the OS itself, causing massive lossage.
  7207	   Other frenetic dances such as the rhumba, cha-cha, or watusi, may
  7208	   be substituted.  See {aliasing bug}, {precedence lossage},
  7209	   {smash the stack}, {memory leak}, {memory smash},
  7210	   {overrun screw}, {core}.
  7211	
  7212	:FAQ list: /F-A-Q list/ or /fak list/ [USENET] n. A compendium
  7213	   of accumulated lore, posted periodically to high-volume newsgroups
  7214	   in an attempt to forestall Frequently Asked Questions.  This
  7215	   lexicon itself serves as a good example of a collection of one kind
  7216	   of lore, although it is far too big for a regular posting.
  7217	   Examples: "What is the proper type of NULL?"  and "What's that
  7218	   funny name for the `#' character?" are both Frequently Asked
  7219	   Questions.  Several extant FAQ lists do (or should) make reference
  7220	   to the Jargon File (the on-line version of this lexicon).
  7221	
  7222	:FAQL: /fa'kl/ n. Syn. {FAQ list}.
  7223	
  7224	:farming: [Adelaide University, Australia] n. What the heads of a
  7225	   disk drive are said to do when they plow little furrows in the
  7226	   magnetic media.  Associated with a {crash}.  Typically used as
  7227	   follows: "Oh no, the machine has just crashed; I hope the hard
  7228	   drive hasn't gone {farming} again."
  7229	
  7230	:fascist: adj. 1. Said of a computer system with excessive or
  7231	   annoying security barriers, usage limits, or access policies.  The
  7232	   implication is that said policies are preventing hackers from
  7233	   getting interesting work done.  The variant `fascistic' seems
  7234	   to have been preferred at MIT, poss. by analogy with
  7235	   `touristic' (see {tourist}).  2. In the design of languages
  7236	   and other software tools, `the fascist alternative' is the most
  7237	   restrictive and structured way of capturing a particular function;
  7238	   the implication is that this may be desirable in order to simplify
  7239	   the implementation or provide tighter error checking.  Compare
  7240	   {bondage-and-discipline language}, but that term is global rather
  7241	   than local.
  7242	
  7243	:fat electrons: n. Old-time hacker David Cargill's theory on the
  7244	   causation of computer glitches.  Your typical electric utility
  7245	   draws its line current out of the big generators with a pair of
  7246	   coil taps located near the top of the dynamo.  When the normal tap
  7247	   brushes get dirty, they take them off line to clean up, and use
  7248	   special auxiliary taps on the *bottom* of the coil.  Now,
  7249	   this is a problem, because when they do that they get not ordinary
  7250	   or `thin' electrons, but the fat'n'sloppy electrons that are
  7251	   heavier and so settle to the bottom of the generator.  These flow
  7252	   down ordinary wires just fine, but when they have to turn a sharp
  7253	   corner (as in an integrated-circuit via) they're apt to get stuck.
  7254	   This is what causes computer glitches.  [Fascinating.  Obviously,
  7255	   fat electrons must gain mass by {bogon} absorption --- ESR]
  7256	   Compare {bogon}, {magic smoke}.
  7257	
  7258	:faulty: adj. Non-functional; buggy.  Same denotation as
  7259	   {bletcherous}, {losing}, q.v., but the connotation is much
  7260	   milder.
  7261	
  7262	:fd leak: /F-D leek/ n. A kind of programming bug analogous to a
  7263	   {core leak}, in which a program fails to close file descriptors
  7264	   (`fd's) after file operations are completed, and thus eventually
  7265	   runs out of them.  See {leak}.
  7266	
  7267	:fear and loathing: [from Hunter Thompson] n. A state inspired by the
  7268	   prospect of dealing with certain real-world systems and standards
  7269	   that are totally {brain-damaged} but ubiquitous --- Intel 8086s,
  7270	   or {COBOL}, or {{EBCDIC}}, or any {IBM} machine except the
  7271	   Rios (a.k.a.  the RS/6000).  "Ack!  They want PCs to be able to
  7272	   talk to the AI machine.  Fear and loathing time!"
  7273	
  7274	:feature: n. 1. A good property or behavior (as of a program).
  7275	   Whether it was intended or not is immaterial.  2. An intended
  7276	   property or behavior (as of a program).  Whether it is good or not
  7277	   is immaterial (but if bad, it is also a {misfeature}).  3. A
  7278	   surprising property or behavior; in particular, one that is
  7279	   purposely inconsistent because it works better that way --- such an
  7280	   inconsistency is therefore a {feature} and not a {bug}.  This
  7281	   kind of feature is sometimes called a {miswart}; see that entry
  7282	   for a classic example.  4. A property or behavior that is
  7283	   gratuitous or unnecessary, though perhaps also impressive or cute.
  7284	   For example, one feature of Common LISP's `format' function is
  7285	   the ability to print numbers in two different Roman-numeral formats
  7286	   (see {bells, whistles, and gongs}).  5. A property or behavior
  7287	   that was put in to help someone else but that happens to be in your
  7288	   way.  6. A bug that has been documented.  To call something a
  7289	   feature sometimes means the author of the program did not consider
  7290	   the particular case, and that the program responded in a way that
  7291	   was unexpected but not strictly incorrect.  A standard joke is that
  7292	   a bug can be turned into a {feature} simply by documenting it
  7293	   (then theoretically no one can complain about it because it's in
  7294	   the manual), or even by simply declaring it to be good.  "That's
  7295	   not a bug, that's a feature!" is a common catchphrase.  See also
  7296	   {feetch feetch}, {creeping featurism}, {wart}, {green
  7297	   lightning}.
  7298	
  7299	   The relationship among bugs, features, misfeatures, warts, and
  7300	   miswarts might be clarified by the following hypothetical exchange
  7301	   between two hackers on an airliner:
  7302	
  7303	   A: "This seat doesn't recline."
  7304	
  7305	   B: "That's not a bug, that's a feature.  There is an emergency
  7306	   exit door built around the window behind you, and the route has to
  7307	   be kept clear."
  7308	
  7309	   A: "Oh.  Then it's a misfeature; they should have increased the
  7310	   spacing between rows here."
  7311	
  7312	   B: "Yes.  But if they'd increased spacing in only one section it
  7313	   would have been a wart --- they would've had to make
  7314	   nonstandard-length ceiling panels to fit over the displaced
  7315	   seats."
  7316	
  7317	   A: "A miswart, actually.  If they increased spacing throughout
  7318	   they'd lose several rows and a chunk out of the profit margin.  So
  7319	   unequal spacing would actually be the Right Thing."
  7320	
  7321	   B: "Indeed."
  7322	
  7323	   `Undocumented feature' is a common, allegedly humorous euphemism
  7324	   for a {bug}.
  7325	
  7326	:feature creature: [poss. fr. slang `creature feature' for a
  7327	   horror movie] n. 1. One who loves to add features to designs or
  7328	   programs, perhaps at the expense of coherence, concision, or
  7329	   {taste}.  2. Alternately, a semi-mythical being that induces
  7330	   otherwise rational programmers to perpetrate such crocks.  See also
  7331	   {feeping creaturism}, {creeping featurism}.
  7332	
  7333	:feature key: n. The Macintosh key with the cloverleaf graphic on
  7334	   its keytop; sometimes referred to as `flower', `pretzel',
  7335	   `clover', `propeller', `beanie' (an apparent reference to the
  7336	   major feature of a propeller beanie), {splat}, or the `command
  7337	   key'.  The Mac's equivalent of an {alt} key.  The proliferation
  7338	   of terms for this creature may illustrate one subtle peril of
  7339	   iconic interfaces.
  7340	
  7341	   Many people have been mystified by the cloverleaf-like symbol that
  7342	   appears on the feature key.  Its oldest name is `cross of St.
  7343	   Hannes', but it occurs in pre-Christian Viking art as a decorative
  7344	   motif.  Throughout Scandinavia today the road agencies use it to
  7345	   mark sites of historical interest.  Many of these are old churches;
  7346	   hence, the Swedish idiom for the symbol is `kyrka', cognate to
  7347	   English `church' and Scots-dialect `kirk' but pronounced
  7348	   /shir'k*/ in modern Swedish.  This is in fact where Apple got the
  7349	   symbol; they give the translation "interesting feature"!
  7350	
  7351	:feature shock: [from Alvin Toffler's book title `Future
  7352	   Shock'] n.  A user's (or programmer's!) confusion when confronted
  7353	   with a package that has too many features and poor introductory
  7354	   material.
  7355	
  7356	:featurectomy: /fee`ch*r-ek't*-mee/ n. The act of removing a
  7357	   feature from a program.  Featurectomies come in two flavors, the
  7358	   `righteous' and the `reluctant'.  Righteous featurectomies are
  7359	   performed because the remover believes the program would be more
  7360	   elegant without the feature, or there is already an equivalent and
  7361	   better way to achieve the same end.  (This is not quite the same
  7362	   thing as removing a {misfeature}.)  Reluctant featurectomies are
  7363	   performed to satisfy some external constraint such as code size or
  7364	   execution speed.
  7365	
  7366	:feep: /feep/ 1. n. The soft electronic `bell' sound of a
  7367	   display terminal (except for a VT-52); a beep (in fact, the
  7368	   microcomputer world seems to prefer {beep}).  2. vi. To cause
  7369	   the display to make a feep sound.  ASR-33s (the original TTYs) do
  7370	   not feep; they have mechanical bells that ring.  Alternate forms:
  7371	   {beep}, `bleep', or just about anything suitably
  7372	   onomatopoeic.  (Jeff MacNelly, in his comic strip "Shoe", uses
  7373	   the word `eep' for sounds made by computer terminals and video
  7374	   games; this is perhaps the closest written approximation yet.)  The
  7375	   term `breedle' was sometimes heard at SAIL, where the terminal
  7376	   bleepers are not particularly soft (they sound more like the
  7377	   musical equivalent of a raspberry or Bronx cheer; for a close
  7378	   approximation, imagine the sound of a Star Trek communicator's beep
  7379	   lasting for 5 seconds).  The `feeper' on a VT-52 has been
  7380	   compared to the sound of a '52 Chevy stripping its gears.  See also
  7381	   {ding}.
  7382	
  7383	:feeper: /fee'pr/ n. The device in a terminal or workstation (usually
  7384	   a loudspeaker of some kind) that makes the {feep} sound.
  7385	
  7386	:feeping creature: [from {feeping creaturism}] n. An unnecessary
  7387	   feature; a bit of {chrome} that, in the speaker's judgment, is
  7388	   the camel's nose for a whole horde of new features.
  7389	
  7390	:feeping creaturism: /fee'ping kree`ch*r-izm/ n. A deliberate
  7391	   spoonerism for {creeping featurism}, meant to imply that the
  7392	   system or program in question has become a misshapen creature of
  7393	   hacks.  This term isn't really well defined, but it sounds so neat
  7394	   that most hackers have said or heard it.  It is probably reinforced
  7395	   by an image of terminals prowling about in the dark making their
  7396	   customary noises.
  7397	
  7398	:feetch feetch: /feech feech/ interj. If someone tells you about
  7399	   some new improvement to a program, you might respond: "Feetch,
  7400	   feetch!"  The meaning of this depends critically on vocal
  7401	   inflection.  With enthusiasm, it means something like "Boy, that's
  7402	   great!  What a great hack!"  Grudgingly or with obvious doubt, it
  7403	   means "I don't know; it sounds like just one more unnecessary and
  7404	   complicated thing".  With a tone of resignation, it means, "Well,
  7405	   I'd rather keep it simple, but I suppose it has to be done".
  7406	
  7407	:fence: n. 1. A sequence of one or more distinguished
  7408	   ({out-of-band}) characters (or other data items), used to
  7409	   delimit a piece of data intended to be treated as a unit (the
  7410	   computer-science literature calls this a `sentinel').  The NUL
  7411	   (ASCII 0000000) character that terminates strings in C is a fence.
  7412	   Hex FF is also (though slightly less frequently) used this way.
  7413	   See {zigamorph}.  2. [among users of optimizing compilers] Any
  7414	   technique, usually exploiting knowledge about the compiler, that
  7415	   blocks certain optimizations.  Used when explicit mechanisms are
  7416	   not available or are overkill.  Typically a hack: "I call a dummy
  7417	   procedure there to force a flush of the optimizer's
  7418	   register-coloring info" can be expressed by the shorter "That's a
  7419	   fence procedure".
  7420	
  7421	:fencepost error: n. 1. A problem with the discrete equivalent of a
  7422	   boundary condition.  Often exhibited in programs by iterative
  7423	   loops.  From the following problem: "If you build a fence 100 feet
  7424	   long with posts 10 feet apart, how many posts do you need?"
  7425	   Either 9 or 11 is a better answer than the obvious 10.  For
  7426	   example, suppose you have a long list or array of items, and want
  7427	   to process items m through n; how many items are there?  The
  7428	   obvious answer is n - m, but that is off by one; the right
  7429	   answer is n - m + 1.  A program that used the `obvious'
  7430	   formula would have a fencepost error in it.  See also {zeroth}
  7431	   and {off-by-one error}, and note that not all off-by-one errors
  7432	   are fencepost errors.  The game of Musical Chairs involves a
  7433	   catastrophic off-by-one error where N people try to sit in
  7434	   N - 1 chairs, but it's not a fencepost error.  Fencepost
  7435	   errors come from counting things rather than the spaces between
  7436	   them, or vice versa, or by neglecting to consider whether one
  7437	   should count one or both ends of a row.  2. Occasionally, an error
  7438	   induced by unexpectedly regular spacing of inputs, which can (for
  7439	   instance) screw up your hash table.
  7440	
  7441	:fepped out: /fept owt/ adj. The Symbolics 3600 Lisp Machine has a
  7442	   Front-End Processor called a `FEP' (compare sense 2 of {box}).
  7443	   When the main processor gets {wedged}, the FEP takes control of
  7444	   the keyboard and screen.  Such a machine is said to have
  7445	   `fepped out'.
  7446	
  7447	:FidoNet: n. A worldwide hobbyist network of personal computers
  7448	   which exchange mail, discussion groups, and files.  Founded in 1984
  7449	   and originally consisting only of IBM PCs and compatibles, FidoNet
  7450	   now includes such diverse machines as Apple ][s, Ataris, Amigas,
  7451	   and UNIX systems.  Though it is much younger than {USENET},
  7452	   FidoNet is already (in early 1991) a significant fraction of
  7453	   USENET's size at some 8000 systems.
  7454	
  7455	:field circus: [a derogatory pun on `field service'] n. The field
  7456	   service organization of any hardware manufacturer, but especially
  7457	   DEC.  There is an entire genre of jokes about DEC field circus
  7458	   engineers:
  7459	
  7460	     Q: How can you recognize a DEC field circus engineer
  7461	        with a flat tire?
  7462	     A: He's changing one tire at a time to see which one is flat.
  7463	
  7464	     Q: How can you recognize a DEC field circus engineer
  7465	        who is out of gas?
  7466	     A: He's changing one tire at a time to see which one is flat.
  7467	
  7468	   [See {Easter egging} for additional insight on these jokes.]
  7469	 
  7470	   There is also the `Field Circus Cheer' (from the {plan file} for
  7471	   DEC on MIT-AI):
  7472	
  7473	     Maynard! Maynard!
  7474	     Don't mess with us!
  7475	     We're mean and we're tough!
  7476	     If you get us confused
  7477	     We'll screw up your stuff.
  7478	
  7479	   (DEC's service HQ is located in Maynard, Massachusetts.)
  7480	
  7481	:field servoid: [play on `android'] /fee'ld ser'voyd/ n.
  7482	   Representative of a field service organization (see {field
  7483	   circus}).  This has many of the implications of {droid}.
  7484	
  7485	:Fight-o-net: [FidoNet] n. Deliberate distortion of {FidoNet},
  7486	   often applied after a flurry of {flamage} in a particular
  7487	   {echo}, especially the SYSOP echo or Fidonews (see {'Snooze}).
  7488	
  7489	:File Attach: [FidoNet] 1. n. A file sent along with a mail message
  7490	   from one BBS to another.  2. vt. Sending someone a file by using
  7491	   the File Attach option in a BBS mailer.
  7492	
  7493	:File Request: [FidoNet] 1. n. The {FidoNet} equivalent of
  7494	   {FTP}, in which one BBS system automatically dials another and
  7495	   {snarf}s one or more files.  Often abbreviated `FReq'; files
  7496	   are often announced as being "available for FReq" in the same way
  7497	   that files are announced as being "available for/by anonymous
  7498	   FTP" on the Internet.  2. vt. The act of getting a copy of a file
  7499	   by using the File Request option of the BBS mailer.
  7500	
  7501	:file signature: n. A {magic number} sense 3.
  7502	
  7503	:filk: /filk/ [from SF fandom, where a typo for `folk' was
  7504	   adopted as a new word] n.,v. A `filk' is a popular or folk song
  7505	   with lyrics revised or completely new lyrics, intended for humorous
  7506	   effect when read and/or to be sung late at night at SF conventions.
  7507	   There is a flourishing subgenre of these called `computer filks',
  7508	   written by hackers and often containing rather sophisticated
  7509	   technical humor.  See {double bucky} for an example.  Compare
  7510	   {hing} and {newsfroup}.
  7511	
  7512	:film at 11: [MIT: in parody of TV newscasters] 1. Used in
  7513	   conversation to announce ordinary events, with a sarcastic
  7514	   implication that these events are earth-shattering.  "{{ITS}}
  7515	   crashes; film at 11."  "Bug found in scheduler; film at 11."
  7516	   2. Also widely used outside MIT to indicate that additional
  7517	   information will be available at some future time, *without*
  7518	   the implication of anything particularly ordinary about the
  7519	   referenced event.  For example, "The mail file server died this
  7520	   morning; we found garbage all over the root directory.  Film at
  7521	   11." would indicate that a major failure had occurred but the
  7522	   people working on it have no additional information about it.  Use
  7523	   of the phrase in this way suggests gently people would appreciate
  7524	   it if users would quit bothering them and wait for the 11:00 news
  7525	   for additional information.
  7526	
  7527	:filter: [orig. {{UNIX}}, now also in {{MS-DOS}}] n. A program that
  7528	   processes an input data stream into an output data stream in some
  7529	   well-defined way, and does no I/O to anywhere else except possibly
  7530	   on error conditions; one designed to be used as a stage in a
  7531	   `pipeline' (see {plumbing}).
  7532	
  7533	:Finagle's Law: n. The generalized or `folk' version of
  7534	   {Murphy's Law}, fully named "Finagle's Law of Dynamic
  7535	   Negatives" and usually rendered "Anything that can go wrong,
  7536	   will".  One variant favored among hackers is "The perversity of
  7537	   the Universe tends towards a maximum" (but see also {Hanlon's
  7538	   Razor}).  The label `Finagle's Law' was popularized by SF author
  7539	   Larry Niven in several stories depicting a frontier culture of
  7540	   asteroid miners; this `Belter' culture professed a religion
  7541	   and/or running joke involving the worship of the dread god Finagle
  7542	   and his mad prophet Murphy.
  7543	
  7544	:fine: [WPI] adj. Good, but not good enough to be {cuspy}.  The word
  7545	   `fine' is used elsewhere, of course, but without the implicit
  7546	   comparison to the higher level implied by {cuspy}.
  7547	
  7548	:finger: [WAITS, via BSD UNIX] 1. n. A program that displays a
  7549	   particular user or all users logged on the system or a remote
  7550	   system.  Typically shows full name, last login time, idle time,
  7551	   terminal line, and terminal location (where applicable).  May also
  7552	   display a {plan file} left by the user.  2. vt. To apply finger
  7553	   to a username.  3. vt. By extension, to check a human's current
  7554	   state by any means.  "Foodp?"  "T!"  "OK, finger Lisa and see
  7555	   if she's idle."  4. Any picture (composed of ASCII characters)
  7556	   depicting `the finger'.  Originally a humorous component of one's
  7557	   plan file to deter the curious fingerer (sense 2), it has entered
  7558	   the arsenal of some {flamer}s.
  7559	
  7560	:finger-pointing syndrome: n. All-too-frequent result of bugs, esp.
  7561	   in new or experimental configurations.  The hardware vendor points
  7562	   a finger at the software.  The software vendor points a finger
  7563	   at the hardware.  All the poor users get is the finger.
  7564	
  7565	:finn: [IRC] v.  To pull rank on somebody based on the amount of
  7566	   time one has spent on {IRC}.  The term derives from the fact
  7567	   that IRC was originally written in Finland in 1987.
  7568	   
  7569	:firebottle: n. A large, primitive, power-hungry active electrical
  7570	   device, similar in function to a FET but constructed out of glass,
  7571	   metal, and vacuum.  Characterized by high cost, low density, low
  7572	   reliability, high-temperature operation, and high power
  7573	   dissipation.  Sometimes mistakenly called a `tube' in the U.S.
  7574	   or a `valve' in England; another hackish term is {glassfet}.
  7575	
  7576	:firefighting: n. 1. What sysadmins have to do to correct sudden
  7577	   operational problems.  An opposite of hacking.  "Been hacking your
  7578	   new newsreader?"  "No, a power glitch hosed the network and I spent
  7579	   the whole afternoon fighting fires."  2. The act of throwing lots
  7580	   of manpower and late nights at a project, esp. to get it out
  7581	   before deadline.  See also {gang bang}, {Mongolian Hordes
  7582	   technique}; however, the term `firefighting' connotes that the
  7583	   effort is going into chasing bugs rather than adding features.
  7584	
  7585	:firehose syndrome: n. In mainstream folklore it is observed that
  7586	   trying to drink from a firehose can be a good way to rip your lips
  7587	   off.  On computer networks, the absence or failure of flow control
  7588	   mechanisms can lead to situations in which the sending system
  7589	   sprays a massive flood of packets at an unfortunate receiving
  7590	   system; more than it can handle.  Compare {overrun}, {buffer
  7591	   overflow}.
  7592	
  7593	:firewall code: n. The code you put in a system (say, a telephone
  7594	   switch) to make sure that the users can't do any damage. Since
  7595	   users always want to be able to do everything but never want to
  7596	   suffer for any mistakes, the construction of a firewall is a
  7597	   question not only of defensive coding but also of interface
  7598	   presentation, so that users don't even get curious about those
  7599	   corners of a system where they can burn themselves.
  7600	
  7601	:firewall machine: n. A dedicated gateway machine with special
  7602	   security precautions on it, used to service outside network
  7603	   connections and dial-in lines.  The idea is to protect a cluster of
  7604	   more loosely administered machines hidden behind it from
  7605	   {cracker}s.  The typical firewall is an inexpensive micro-based
  7606	   UNIX box kept clean of critical data, with a bunch of modems and
  7607	   public network ports on it but just one carefully watched
  7608	   connection back to the rest of the cluster.  The special
  7609	   precautions may include threat monitoring, callback, and even a
  7610	   complete {iron box} keyable to particular incoming IDs or
  7611	   activity patterns.  Syn. {flytrap}, {Venus flytrap}.
  7612	
  7613	:fireworks mode: n. The mode a machine is sometimes said to be in when
  7614	   it is performing a {crash and burn} operation.
  7615	
  7616	:firmy: /fer'mee/ Syn. {stiffy} (a 3.5-inch floppy disk).
  7617	
  7618	:fish: [Adelaide University, Australia] n. 1. Another {metasyntactic
  7619	   variable}.  See {foo}.  Derived originally from the Monty Python
  7620	   skit in the middle of "The Meaning of Life" entitled
  7621	   "Find the Fish".  2. A pun for `microfiche'.  A microfiche
  7622	   file cabinet may be referred to as a `fish tank'.
  7623	
  7624	:FISH queue: [acronym, by analogy with FIFO (First In, First Out)]
  7625	   n. `First In, Still Here'.  A joking way of pointing out that
  7626	   processing of a particular sequence of events or requests has
  7627	   stopped dead.  Also `FISH mode' and `FISHnet'; the latter
  7628	   may be applied to any network that is running really slowly or
  7629	   exhibiting extreme flakiness.
  7630	
  7631	:FITNR: // [Thinking Machines, Inc.] Fixed In the Next Release.
  7632	   A written-only notation attached to bug reports.  Often wishful
  7633	   thinking.
  7634	
  7635	:fix: n.,v. What one does when a problem has been reported too many
  7636	   times to be ignored.
  7637	
  7638	:flag: n. A variable or quantity that can take on one of two
  7639	   values; a bit, particularly one that is used to indicate one of two
  7640	   outcomes or is used to control which of two things is to be done.
  7641	   "This flag controls whether to clear the screen before printing
  7642	   the message."  "The program status word contains several flag
  7643	   bits."  Used of humans analogously to {bit}.  See also
  7644	   {hidden flag}, {mode bit}.
  7645	
  7646	:flag day: n. A software change that is neither forward- nor
  7647	   backward-compatible, and which is costly to make and costly to
  7648	   reverse.  "Can we install that without causing a flag day for all
  7649	   users?"  This term has nothing to do with the use of the word
  7650	   {flag} to mean a variable that has two values.  It came into use
  7651	   when a massive change was made to the {{Multics}} timesharing
  7652	   system to convert from the old ASCII code to the new one; this was
  7653	   scheduled for Flag Day (a U.S. holiday), June 14, 1966.  See also
  7654	   {backward combatability}.
  7655	
  7656	:flaky: adj. (var sp. `flakey') Subject to frequent {lossage}.
  7657	   This use is of course related to the common slang use of the word
  7658	   to describe a person as eccentric, crazy, or just unreliable.  A
  7659	   system that is flaky is working, sort of --- enough that you are
  7660	   tempted to try to use it --- but fails frequently enough that the
  7661	   odds in favor of finishing what you start are low.  Commonwealth
  7662	   hackish prefers {dodgy} or {wonky}.
  7663	
  7664	:flamage: /flay'm*j/ n. Flaming verbiage, esp. high-noise,
  7665	   low-signal postings to {USENET} or other electronic {fora}.
  7666	   Often in the phrase `the usual flamage'.  `Flaming' is the act
  7667	   itself; `flamage' the content; a `flame' is a single flaming
  7668	   message.  See {flame}.
  7669	
  7670	:flame: 1. vi. To post an email message intended to insult and
  7671	   provoke.  2. vi. To speak incessantly and/or rabidly on some
  7672	   relatively uninteresting subject or with a patently ridiculous
  7673	   attitude.  3. vt. Either of senses 1 or 2, directed with
  7674	   hostility at a particular person or people.  4. n. An instance of
  7675	   flaming.  When a discussion degenerates into useless controversy,
  7676	   one might tell the participants "Now you're just flaming" or
  7677	   "Stop all that flamage!" to try to get them to cool down (so to
  7678	   speak).
  7679	
  7680	   USENETter Marc Ramsey, who was at WPI from 1972 to 1976, adds: "I
  7681	   am 99% certain that the use of `flame' originated at WPI.  Those
  7682	   who made a nuisance of themselves insisting that they needed to use
  7683	   a TTY for `real work' came to be known as `flaming asshole lusers'.
  7684	   Other particularly annoying people became `flaming asshole ravers',
  7685	   which shortened to `flaming ravers', and ultimately `flamers'.  I
  7686	   remember someone picking up on the Human Torch pun, but I don't
  7687	   think `flame on/off' was ever much used at WPI."  See also
  7688	   {asbestos}.
  7689	
  7690	   The term may have been independently invented at several different
  7691	   places; it is also reported that `flaming' was in use to mean
  7692	   something like `interminably drawn-out semi-serious discussions'
  7693	   (late-night bull sessions) at Carleton College during 1968--1971.
  7694	
  7695	   It's possible that the hackish sense of `flame' is much older than
  7696	   that.  The poet Chaucer was also what passed for a wizard hacker in
  7697	   his time; he wrote a treatise on the astrolabe, the most advanced
  7698	   computing device of the day.  In Chaucer's `Troilus and
  7699	   Cressida', Cressida laments her inability to grasp the proof of a
  7700	   particular mathematical theorem; her uncle Pandarus then observes
  7701	   that it's called "the fleminge of wrecches."  This phrase seems
  7702	   to have been intended in context as "that which puts the wretches
  7703	   to flight" but was probably just as ambiguous in Middle English as
  7704	   "the flaming of wretches" would be today.  One suspects that
  7705	   Chaucer would be right at home on USENET.
  7706	
  7707	:flame bait: n. A posting intended to trigger a {flame war}, or one
  7708	   that invites flames in reply.
  7709	
  7710	:flame on: vi.,interj.  1. To begin to {flame}.  The punning
  7711	   reference to Marvel Comics's Human Torch is no longer widely
  7712	   recognized.  2. To continue to flame.  See {rave}, {burble}.
  7713	
  7714	:flame war: n. (var. `flamewar') An acrimonious dispute,
  7715	   especially when conducted on a public electronic forum such as
  7716	   {USENET}.
  7717	
  7718	:flamer: n. One who habitually {flame}s.  Said esp. of obnoxious
  7719	   {USENET} personalities.
  7720	
  7721	:flap: vt. 1. To unload a DECtape (so it goes flap, flap,
  7722	   flap...).  Old-time hackers at MIT tell of the days when the
  7723	   disk was device 0 and {microtape}s were 1, 2,... and
  7724	   attempting to flap device 0 would instead start a motor banging
  7725	   inside a cabinet near the disk.  2. By extension, to unload any
  7726	   magnetic tape.  See also {macrotape}.  Modern cartridge tapes no
  7727	   longer actually flap, but the usage has remained.  (The term could
  7728	   well be re-applied to DEC's TK50 cartridge tape drive, a
  7729	   spectacularly misengineered contraption which makes a loud flapping
  7730	   sound, almost like an old reel-type lawnmower, in one of its many
  7731	   tape-eating failure modes.)
  7732	
  7733	:flarp: /flarp/ [Rutgers University] n. Yet another {metasyntactic
  7734	   variable} (see {foo}).  Among those who use it, it is associated
  7735	   with a legend that any program not containing the word `flarp'
  7736	   somewhere will not work.  The legend is discreetly silent on the
  7737	   reliability of programs which *do* contain the magic word.
  7738	
  7739	:flat: adj. 1. Lacking any complex internal structure.  "That
  7740	   {bitty box} has only a flat filesystem, not a hierarchical
  7741	   one."  The verb form is {flatten}.  2. Said of a memory
  7742	   architecture (like that of the VAX or 680x0) that is one big linear
  7743	   address space (typically with each possible value of a processor
  7744	   register corresponding to a unique core address), as opposed to a
  7745	   `segmented' architecture (like that of the 80x86) in which
  7746	   addresses are composed from a base-register/offset pair (segmented
  7747	   designs are generally considered {cretinous}).
  7748	  
  7749	   Note that sense 1 (at least with respect to filesystems) is usually
  7750	   used pejoratively, while sense 2 is a {Good Thing}.
  7751	
  7752	:flat-ASCII: adj. Said of a text file that contains only 7-bit ASCII
  7753	   characters and uses only ASCII-standard control characters (that
  7754	   is, has no embedded codes specific to a particular text formatter
  7755	   or markup language, and no {meta}-characters).  Syn.
  7756	   {plain-ASCII}.  Compare {flat-file}.
  7757	
  7758	:flat-file: adj. A {flatten}ed representation of some database or
  7759	   tree or network structure as a single file from which the
  7760	   structure could implicitly be rebuilt, esp. one in {flat-ASCII}
  7761	   form.
  7762	
  7763	:flatten: vt. To remove structural information, esp. to filter
  7764	   something with an implicit tree structure into a simple sequence of
  7765	   leaves; also tends to imply mapping to {flat-ASCII}.  "This code
  7766	   flattens an expression with parentheses into an equivalent
  7767	   {canonical} form."
  7768	
  7769	:flavor: n. 1. Variety, type, kind.  "DDT commands come in two
  7770	   flavors."  "These lights come in two flavors, big red ones and
  7771	   small green ones."  See {vanilla}.  2. The attribute that causes
  7772	   something to be {flavorful}.  Usually used in the phrase "yields
  7773	   additional flavor".  "This convention yields additional flavor by
  7774	   allowing one to print text either right-side-up or upside-down."
  7775	   See {vanilla}.  This usage was certainly reinforced by the
  7776	   terminology of quantum chromodynamics, in which quarks (the
  7777	   constituents of, e.g., protons) come in six flavors (up, down,
  7778	   strange, charm, top, bottom) and three colors (red, blue, green)
  7779	   --- however, hackish use of `flavor' at MIT predated QCD.  3. The
  7780	   term for `class' (in the object-oriented sense) in the LISP Machine
  7781	   Flavors system.  Though the Flavors design has been superseded
  7782	   (notably by the Common LISP CLOS facility), the term `flavor' is
  7783	   still used as a general synonym for `class' by some LISP hackers.
  7784	
  7785	:flavorful: adj. Full of {flavor}; esthetically pleasing.  See
  7786	   {random} and {losing} for antonyms.  See also the entries for
  7787	   {taste} and {elegant}.
  7788	
  7789	:flippy: /flip'ee/ n. A single-sided floppy disk altered for
  7790	   double-sided use by addition of a second write-notch, so called
  7791	   because it must be flipped over for the second side to be
  7792	   accessible.  No longer common.
  7793	
  7794	:flood: [IRC] v.  To dump large amounts of text onto an {IRC}
  7795	   channel.  This is especially rude when the text is uninteresting
  7796	   and the other users are trying to carry on a serious conversation.
  7797	   
  7798	:flowchart:: [techspeak] n. An archaic form of visual control-flow
  7799	   specification employing arrows and `speech balloons' of various
  7800	   shapes.  Hackers never use flowcharts, consider them extremely
  7801	   silly, and associate them with {COBOL} programmers, {card
  7802	   walloper}s, and other lower forms of life.  This is because (from a
  7803	   hacker's point of view) they are no easier to read than code, are
  7804	   less precise, and tend to fall out of sync with the code (so that
  7805	   they either obfuscate it rather than explaining it or require
  7806	   extra maintenance effort that doesn't improve the code).  See also
  7807	   {pdl}, sense 3.
  7808	
  7809	:flower key: [Mac users] n. See {feature key}.
  7810	
  7811	:flush: v. 1. To delete something, usually superfluous, or to abort
  7812	   an operation.  "All that nonsense has been flushed."  2. [UNIX/C]
  7813	   To force buffered I/O to disk, as with an `fflush(3)' call.
  7814	   This is *not* an abort or deletion as in sense 1, but a
  7815	   demand for early completion!  3. To leave at the end of a day's
  7816	   work (as opposed to leaving for a meal).  "I'm going to flush
  7817	   now."  "Time to flush."  4. To exclude someone from an activity,
  7818	   or to ignore a person.
  7819	
  7820	   `Flush' was standard ITS terminology for aborting an output
  7821	   operation; one spoke of the text that would have been printed, but
  7822	   was not, as having been flushed.  It is speculated that this term
  7823	   arose from a vivid image of flushing unwanted characters by hosing
  7824	   down the internal output buffer, washing the characters away before
  7825	   they can be printed.  The UNIX/C usage, on the other hand, was
  7826	   propagated by the `fflush(3)' call in C's standard I/O library
  7827	   (though it is reported to have been in use among BLISS programmers
  7828	   at DEC and on Honeywell and IBM machines as far back as 1965).
  7829	   UNIX/C hackers find the ITS usage confusing, and vice versa.
  7830	
  7831	:flypage: /fli: payj/n. (alt. `fly page') A {banner}, sense 1.
  7832	
  7833	:Flyspeck 3: n. Standard name for any font that is so tiny as to be
  7834	   unreadable (by analogy with such names as `Helvetica 10' for
  7835	   10-point Helvetica).  Legal boilerplate is usually printed in
  7836	   Flyspeck 3.
  7837	
  7838	:flytrap: n. See {firewall machine}.
  7839	
  7840	:FM: n. *Not* `Frequency Modulation' but rather an
  7841	   abbreviation for `Fucking Manual', the back-formation from
  7842	   {RTFM}. Used to refer to the manual itself in the {RTFM}.
  7843	   "Have you seen the Networking FM lately?"
  7844	
  7845	:FOAF: // [USENET] n. Acronym for `Friend Of A Friend'.  The
  7846	   source of an unverified, possibly untrue story.  This was not
  7847	   originated by hackers (it is used in Jan Brunvand's books on urban
  7848	   folklore), but is much better recognized on USENET and elsewhere
  7849	   than in mainstream English.
  7850	
  7851	:FOD: /fod/ v. [Abbreviation for `Finger of Death', originally a
  7852	   spell-name from fantasy gaming] To terminate with extreme prejudice
  7853	   and with no regard for other people.  From {MUD}s where the
  7854	   wizard command `FOD <player>' results in the immediate and total
  7855	   death of <player>, usually as punishment for obnoxious behavior.
  7856	   This migrated to other circumstances, such as "I'm going to fod
  7857	   the process that is burning all the cycles."  Compare {gun}.
  7858	
  7859	   In aviation, FOD means Foreign Object Damage, e.g., what happens
  7860	   when a jet engine sucks up a rock on the runway or a bird in
  7861	   flight.  Finger of Death is a distressingly apt description of
  7862	   what this does to the engine.
  7863	
  7864	:fold case: v. See {smash case}.  This term tends to be used
  7865	   more by people who don't mind that their tools smash case.  It also
  7866	   connotes that case is ignored but case distinctions in data
  7867	   processed by the tool in question aren't destroyed.
  7868	
  7869	:followup: n. On USENET, a {posting} generated in response to
  7870	   another posting (as opposed to a {reply}, which goes by email
  7871	   rather than being broadcast).  Followups include the ID of the
  7872	   {parent message} in their headers; smart news-readers can use
  7873	   this information to present USENET news in `conversation' sequence
  7874	   rather than order-of-arrival.  See {thread}.
  7875	
  7876	:fontology: [XEROX PARC] n. The body of knowledge dealing with the
  7877	   construction and use of new fonts (e.g. for window systems and
  7878	   typesetting software).  It has been said that fontology
  7879	   recapitulates file-ogeny.
  7880	
  7881	   [Unfortunately, this reference to the embryological dictum that
  7882	   "Ontogeny recapitulates phylogeny" is not merely a joke.  On the
  7883	   Macintosh, for example, System 7 has to go through contortions to
  7884	   compensate for an earlier design error that created a whole
  7885	   different set of abstractions for fonts parallel to `files' and
  7886	   `folders' --- ESR]
  7887	
  7888	:foo: /foo/ 1. interj. Term of disgust.  2. Used very generally
  7889	   as a sample name for absolutely anything, esp. programs and files
  7890	   (esp. scratch files).  3. First on the standard list of
  7891	   {metasyntactic variable}s used in syntax examples.  See also
  7892	   {bar}, {baz}, {qux}, {quux}, {corge}, {grault},
  7893	   {garply}, {waldo}, {fred}, {plugh}, {xyzzy},
  7894	   {thud}.
  7895	
  7896	   The etymology of hackish `foo' is obscure.  When used in
  7897	   connection with `bar' it is generally traced to the WWII-era Army
  7898	   slang acronym FUBAR (`Fucked Up Beyond All Recognition'), later
  7899	   bowdlerized to {foobar}.  (See also {FUBAR}).
  7900	
  7901	   However, the use of the word `foo' itself has more complicated
  7902	   antecedents, including a long history in comic strips and cartoons.
  7903	   The old "Smokey Stover" comic strips by Bill Holman often
  7904	   included the word `FOO', in particular on license plates of cars;
  7905	   allegedly, `FOO' and `BAR' also occurred in Walt Kelly's
  7906	   "Pogo" strips.  In the 1938 cartoon "Daffy Doc", a very
  7907	   early version of Daffy Duck holds up a sign saying "SILENCE IS
  7908	   FOO!"; oddly, this seems to refer to some approving or positive
  7909	   affirmative use of foo.  It has been suggested that this might be
  7910	   related to the Chinese word `fu' (sometimes transliterated
  7911	   `foo'), which can mean "happiness" when spoken with the proper
  7912	   tone (the lion-dog guardians flanking the steps of many Chinese
  7913	   restaurants are properly called "fu dogs").
  7914	
  7915	   It is even possible that hacker usage actually springs from
  7916	   `FOO, Lampoons and Parody', the title of a comic book first
  7917	   issued in September 1958; the byline read `C. Crumb' but the style
  7918	   of the art suggests this may well have been a sort-of pseudonym for
  7919	   noted weird-comix artist Robert Crumb.  The title FOO was featured
  7920	   in large letters on the front cover.  What the word meant to Mr.
  7921	   Crumb is anybody's guess.
  7922	
  7923	   An old-time member reports that in the 1959 `Dictionary of the
  7924	   TMRC Language', compiled at {TMRC} there was an entry that went
  7925	   something like this:
  7926	
  7927	     FOO: The first syllable of the sacred chant phrase "FOO MANE PADME
  7928	     HUM."  Our first obligation is to keep the foo counters turning.
  7929	
  7930	   For more about the legendary foo counters, see {TMRC}.  Almost
  7931	   the entire staff of what became the MIT AI LAB was involved with
  7932	   TMRC, and probably picked the word up there.
  7933	
  7934	   Very probably, hackish `foo' had no single origin and derives
  7935	   through all these channels from Yiddish `feh' and/or English
  7936	   `fooey'.
  7937	
  7938	:foobar: n. Another common {metasyntactic variable}; see {foo}.
  7939	   Hackers do *not* generally use this to mean {FUBAR} in
  7940	   either the slang or jargon sense.
  7941	
  7942	:fool: n. As used by hackers, specifically describes a person who
  7943	   habitually reasons from obviously or demonstrably incorrect
  7944	   premises and cannot be persuaded by evidence to do otherwise; it is
  7945	   not generally used in its other senses, i.e., to describe a person
  7946	   with a native incapacity to reason correctly, or a clown.  Indeed,
  7947	   in hackish experience many fools are capable of reasoning all too
  7948	   effectively in executing their errors.  See also {cretin},
  7949	   {loser}, {fool file, the}.
  7950	
  7951	:fool file, the: [USENET] n. A notional repository of all the most
  7952	   dramatically and abysmally stupid utterances ever.  There is a
  7953	   subgenre of {sig block}s that consists of the header "From the
  7954	   fool file:" followed by some quote the poster wishes to represent
  7955	   as an immortal gem of dimwittery; for this to be really effective,
  7956	   the quote has to be so obviously wrong as to be laughable.  More
  7957	   than one USENETter has achieved an unwanted notoriety by being
  7958	   quoted in this way.
  7959	
  7960	:Foonly: n. 1. The {PDP-10} successor that was to have been built by
  7961	   the Super Foonly project at the Stanford Artificial Intelligence
  7962	   Laboratory along with a new operating system.  The intention was to
  7963	   leapfrog from the old DEC timesharing system SAIL was running to a
  7964	   new generation, bypassing TENEX which at that time was the ARPANET
  7965	   standard.  ARPA funding for both the Super Foonly and the new
  7966	   operating system was cut in 1974.  Most of the design team went to
  7967	   DEC and contributed greatly to the design of the PDP-10 model KL10.
  7968	   2. The name of the company formed by Dave Poole, one of the
  7969	   principal Super Foonly designers, and one of hackerdom's more
  7970	   colorful personalities.  Many people remember the parrot which sat
  7971	   on Poole's shoulder and was a regular companion.  3. Any of the
  7972	   machines built by Poole's company.  The first was the F-1 (a.k.a.
  7973	   Super Foonly), which was the computational engine used to create
  7974	   the graphics in the movie "TRON".  The F-1 was the fastest
  7975	   PDP-10 ever built, but only one was ever made.  The effort drained
  7976	   Foonly of its financial resources, and they turned towards building
  7977	   smaller, slower, and much less expensive machines.  Unfortunately,
  7978	   these ran not the popular {TOPS-20} but a TENEX variant called
  7979	   Foonex; this seriously limited their market.  Also, the machines
  7980	   shipped were actually wire-wrapped engineering prototypes requiring
  7981	   individual attention from more than usually competent site
  7982	   personnel, and thus had significant reliability problems.  Poole's
  7983	   legendary temper and unwillingness to suffer fools gladly did not
  7984	   help matters.  By the time of the Jupiter project cancellation in
  7985	   1983 Foonly's proposal to build another F-1 was eclipsed by the
  7986	   {Mars}, and the company never quite recovered.  See the
  7987	   {Mars} entry for the continuation and moral of this story.
  7988	
  7989	:footprint: n. 1. The floor or desk area taken up by a piece of
  7990	   hardware.  2. [IBM] The audit trail (if any) left by a crashed
  7991	   program (often in plural, `footprints').  See also
  7992	   {toeprint}.
  7993	
  7994	:for free: adj. Said of a capability of a programming language or
  7995	   hardware equipment that is available by its design without needing
  7996	   cleverness to implement: "In APL, we get the matrix operations for
  7997	   free."  "And owing to the way revisions are stored in this
  7998	   system, you get revision trees for free."  Usually it refers to a
  7999	   serendipitous feature of doing things a certain way (compare
  8000	   {big win}), but it may refer to an intentional but secondary
  8001	   feature.
  8002	
  8003	:for the rest of us: [from the Mac slogan "The computer for the
  8004	   rest of us"] adj. 1. Used to describe a {spiffy} product whose
  8005	   affordability shames other comparable products, or (more often)
  8006	   used sarcastically to describe {spiffy} but very overpriced
  8007	   products.  2. Describes a program with a limited interface,
  8008	   deliberately limited capabilities, non-orthogonality, inability to
  8009	   compose primitives, or any other limitation designed to not
  8010	   `confuse' a na"ive user.  This places an upper bound on how far
  8011	   that user can go before the program begins to get in the way of the
  8012	   task instead of helping accomplish it.  Used in reference to
  8013	   Macintosh software which doesn't provide obvious capabilities
  8014	   because it is thought that the poor lusers might not be able to
  8015	   handle them.  Becomes `the rest of *them*' when used in
  8016	   third-party reference; thus, "Yes, it is an attractive program,
  8017	   but it's designed for The Rest Of Them" means a program that
  8018	   superficially looks neat but has no depth beyond the surface flash.
  8019	   See also {WIMP environment}, {Macintrash},
  8020	   {point-and-drool interface}, {user-friendly}.
  8021	
  8022	:for values of: [MIT] A common rhetorical maneuver at MIT is to use
  8023	   any of the canonical {random numbers} as placeholders for
  8024	   variables.  "The max function takes 42 arguments, for arbitrary
  8025	   values of 42."  "There are 69 ways to leave your lover, for
  8026	   69 = 50."  This is especially likely when the speaker has uttered
  8027	   a random number and realizes that it was not recognized as such,
  8028	   but even `non-random' numbers are occasionally used in this
  8029	   fashion.  A related joke is that pi equals 3 --- for
  8030	   small values of pi and large values of 3.
  8031	
  8032	   Historical note: this usage probably derives from the programming
  8033	   language MAD (Michigan Algorithm Decoder), an Algol-like language
  8034	   that was the most common choice among mainstream (non-hacker) users
  8035	   at MIT in the mid-60s.  It had a control structure FOR VALUES OF X
  8036	   = 3, 7, 99 DO ... that would repeat the indicated instructions for
  8037	   each value in the list (unlike the usual FOR that only works for
  8038	   arithmetic sequences of values).  MAD is long extinct, but similar
  8039	   for-constructs still flourish (e.g. in UNIX's shell languages).
  8040	
  8041	:fora: pl.n. Plural of {forum}.
  8042	
  8043	:foreground: [UNIX] vt. To foreground a task is to bring it to
  8044	   the top of one's {stack} for immediate processing, and hackers
  8045	   often use it in this sense for non-computer tasks. "If your
  8046	   presentation is due next week, I guess I'd better foreground
  8047	   writing up the design document."
  8048	
  8049	   Technically, on a time-sharing system, a task executing in
  8050	   foreground is one able to accept input from and return output to
  8051	   the user; oppose {background}.  Nowadays this term is primarily
  8052	   associated with {{UNIX}}, but it appears first to have been used
  8053	   in this sense on OS/360.  Normally, there is only one foreground
  8054	   task per terminal (or terminal window); having multiple processes
  8055	   simultaneously reading the keyboard is a good way to {lose}.
  8056	
  8057	:fork bomb: [UNIX] n.  A particular species of {wabbit} that can
  8058	   be written in one line of C (`main() {for(;;)fork();}') or shell
  8059	   (`$0 & $0 &') on any UNIX system, or occasionally created by an
  8060	   egregious coding bug.  A fork bomb process `explodes' by
  8061	   recursively spawning copies of itself (using the UNIX system call
  8062	   `fork(2)').  Eventually it eats all the process table entries
  8063	   and effectively wedges the system.  Fortunately, fork bombs are
  8064	   relatively easy to spot and kill, so creating one deliberately
  8065	   seldom accomplishes more than to bring the just wrath of the gods
  8066	   down upon the perpetrator.  See also {logic bomb}.
  8067	
  8068	:forked: [UNIX; prob. influenced by a mainstream expletive] adj.
  8069	   Terminally slow, or dead.  Originated when one system was slowed to
  8070	   a snail's pace by an inadvertent {fork bomb}.
  8071	
  8072	:Fortrash: /for'trash/ n. Hackerism for the FORTRAN language,
  8073	   referring to its primitive design, gross and irregular syntax,
  8074	   limited control constructs, and slippery, exception-filled
  8075	   semantics.
  8076	
  8077	:fortune cookie: [WAITS, via UNIX] n. A random quote, item of
  8078	   trivia, joke, or maxim printed to the user's tty at login time or
  8079	   (less commonly) at logout time.  Items from this lexicon have often
  8080	   been used as fortune cookies.  See {cookie file}.
  8081	
  8082	:forum: n. [USENET, GEnie, CI$; pl. `fora' or `forums'] Any
  8083	   discussion group accessible through a dial-in {BBS}, a
  8084	   {mailing list}, or a {newsgroup} (see {network, the}).  A
  8085	   forum functions much like a bulletin board; users submit
  8086	   {posting}s for all to read and discussion ensues.  Contrast
  8087	   real-time chat via {talk mode} or point-to-point personal
  8088	   {email}.
  8089	
  8090	:fossil: n. 1. In software, a misfeature that becomes
  8091	   understandable only in historical context, as a remnant of times
  8092	   past retained so as not to break compatibility.  Example: the
  8093	   retention of octal as default base for string escapes in {C}, in
  8094	   spite of the better match of hexadecimal to ASCII and modern
  8095	   byte-addressable architectures.  See {dusty deck}.  2. More
  8096	   restrictively, a feature with past but no present utility.
  8097	   Example: the force-all-caps (LCASE) bits in the V7 and {BSD}
  8098	   UNIX tty driver, designed for use with monocase terminals.  In a
  8099	   perversion of the usual backward-compatibility goal, this
  8100	   functionality has actually been expanded and renamed in some later
  8101	   {USG UNIX} releases as the IUCLC and OLCUC bits.  3. The FOSSIL
  8102	   (Fido/Opus/Seadog Standard Interface Level) driver specification
  8103	   for serial-port access to replace the {brain-dead} routines in
  8104	   the IBM PC ROMs.  Fossils are used by most MS-DOS {BBS} software
  8105	   in preference to the `supported' ROM routines, which do not support
  8106	   interrupt-driven operation or setting speeds above 9600; the use of
  8107	   a semistandard FOSSIL library is preferable to the {bare metal}
  8108	   serial port programming otherwise required.  Since the FOSSIL
  8109	   specification allows additional functionality to be hooked in,
  8110	   drivers that use the {hook} but do not provide serial-port
  8111	   access themselves are named with a modifier, as in `video
  8112	   fossil'.
  8113	
  8114	:four-color glossies: 1. Literature created by {marketroid}s
  8115	   that allegedly contains technical specs but which is in fact as
  8116	   superficial as possible without being totally {content-free}.
  8117	   "Forget the four-color glossies, give me the tech ref manuals."
  8118	   Often applied as an indication of superficiality even when the
  8119	   material is printed on ordinary paper in black and white.
  8120	   Four-color-glossy manuals are *never* useful for finding a
  8121	   problem.  2. [rare] Applied by extension to manual pages that don't
  8122	   contain enough information to diagnose why the program doesn't
  8123	   produce the expected or desired output.
  8124	
  8125	:fragile: adj. Syn {brittle}.
  8126	
  8127	:fred: n. 1. The personal name most frequently used as a
  8128	   {metasyntactic variable} (see {foo}).  Allegedly popular
  8129	   because it's easy for a non-touch-typist to type on a standard
  8130	   QWERTY keyboard.  Unlike {J. Random Hacker} or `J. Random
  8131	   Loser', this name has no positive or negative loading (but see
  8132	   {Mbogo, Dr. Fred}).  See also {barney}.  2. An acronym for
  8133	   `Flipping Ridiculous Electronic Device'; other F-verbs may be
  8134	   substituted for `flipping'.
  8135	
  8136	:frednet: /fred'net/ n. Used to refer to some {random} and
  8137	   uncommon protocol encountered on a network.  "We're implementing
  8138	   bridging in our router to solve the frednet problem."
  8139	
  8140	:freeware: n. Free software, often written by enthusiasts and
  8141	   distributed by users' groups, or via electronic mail, local
  8142	   bulletin boards, {USENET}, or other electronic media.  At one
  8143	   time, `freeware' was a trademark of Andrew Fluegelman, the author
  8144	   of the well-known MS-DOS comm program PC-TALK III.  It wasn't
  8145	   enforced after his mysterious disappearance and presumed death
  8146	   in 1984.  See {shareware}.
  8147	
  8148	:freeze: v. To lock an evolving software distribution or document
  8149	   against changes so it can be released with some hope of stability.
  8150	   Carries the strong implication that the item in question will
  8151	   `unfreeze' at some future date.  "OK, fix that bug and we'll
  8152	   freeze for release."
  8153	
  8154	   There are more specific constructions on this.  A `feature freeze',
  8155	   for example, locks out modifications intended to introduce new
  8156	   features; a `code freeze' connotes no more changes at all.
  8157	   At Sun Microsystems and elsewhere, one may also hear references to
  8158	   `code slush' --- that is, an almost-but-not-quite frozen state.
  8159	
  8160	:fried: adj. 1. Non-working due to hardware failure; burnt out.
  8161	   Especially used of hardware brought down by a `power glitch' (see
  8162	   {glitch}), {drop-outs}, a short, or some other electrical
  8163	   event.  (Sometimes this literally happens to electronic circuits!
  8164	   In particular, resistors can burn out and transformers can melt
  8165	   down, emitting noxious smoke --- see {friode}, {SED} and
  8166	   {LER}.  However, this term is also used metaphorically.)
  8167	   Compare {frotzed}.  2. Of people, exhausted.  Said particularly
  8168	   of those who continue to work in such a state.  Often used as an
  8169	   explanation or excuse.  "Yeah, I know that fix destroyed the file
  8170	   system, but I was fried when I put it in."  Esp. common in
  8171	   conjunction with `brain': "My brain is fried today, I'm very
  8172	   short on sleep."
  8173	
  8174	:friode: /fri:'ohd/ [TMRC] n. A reversible (that is, fused or
  8175	   blown) diode.  Compare {fried}; see also {SED}, {LER}.
  8176	
  8177	:fritterware: n. An excess of capability that serves no productive
  8178	   end.  The canonical example is font-diddling software on the Mac
  8179	   (see {macdink}); the term describes anything that eats huge
  8180	   amounts of time for quite marginal gains in function but seduces
  8181	   people into using it anyway.
  8182	
  8183	:frob: /frob/ 1. n. [MIT] The {TMRC} definition was "FROB = a
  8184	   protruding arm or trunnion"; by metaphoric extension, a `frob'
  8185	   is any random small thing; an object that you can comfortably hold
  8186	   in one hand; something you can frob.  See {frobnitz}.  2. vt.
  8187	   Abbreviated form of {frobnicate}.  3. [from the {MUD} world]
  8188	   A command on some MUDs that changes a player's
  8189	   experience level (this can be used to make wizards); also, to
  8190	   request {wizard} privileges on the `professional courtesy'
  8191	   grounds that one is a wizard elsewhere.  The command is actually
  8192	   `frobnicate' but is universally abbreviated to the shorter form.
  8193	
  8194	:frobnicate: /frob'ni-kayt/ vt. [Poss. derived from
  8195	   {frobnitz}, and usually abbreviated to {frob}, but
  8196	   `frobnicate' is recognized as the official full form.] To
  8197	   manipulate or adjust, to tweak.  One frequently frobs bits or other
  8198	   2-state devices.  Thus: "Please frob the light switch" (that is,
  8199	   flip it), but also "Stop frobbing that clasp; you'll break it".
  8200	   One also sees the construction `to frob a frob'.  See {tweak}
  8201	   and {twiddle}.  Usage: frob, twiddle, and tweak sometimes
  8202	   connote points along a continuum.  `Frob' connotes aimless
  8203	   manipulation; `twiddle' connotes gross manipulation, often a
  8204	   coarse search for a proper setting; `tweak' connotes fine-tuning.
  8205	   If someone is turning a knob on an oscilloscope, then if he's
  8206	   carefully adjusting it, he is probably tweaking it; if he is just
  8207	   turning it but looking at the screen, he is probably twiddling it;
  8208	   but if he's just doing it because turning a knob is fun, he's
  8209	   frobbing it.  The variant `frobnosticate' has been recently
  8210	   reported.
  8211	
  8212	:frobnitz: /frob'nits/, pl. `frobnitzem' /frob'nit-zm/ or
  8213	   `frobni' /frob'ni:/ [TMRC] n. An unspecified physical object, a
  8214	   widget.  Also refers to electronic black boxes.  This rare form is
  8215	   usually abbreviated to `frotz', or more commonly to {frob}.
  8216	   Also used are `frobnule' (/frob'n[y]ool/) and `frobule'
  8217	   (/frob'yool/).  Starting perhaps in 1979, `frobozz'
  8218	   /fr*-boz'/ (plural: `frobbotzim' /fr*-bot'zm/) has also
  8219	   become very popular, largely through its exposure as a name via
  8220	   {Zork}.  These can also be applied to nonphysical objects, such
  8221	   as data structures.
  8222	
  8223	   Pete Samson, compiler of the {TMRC} lexicon, adds, "Under the
  8224	   TMRC [railroad] layout were many storage boxes, managed (in 1958)
  8225	   by David R. Sawyer.  Several had fanciful designations written on
  8226	   them, such as `Frobnitz Coil Oil'.  Perhaps DRS intended Frobnitz
  8227	   to be a proper name, but the name was quickly taken for the
  8228	   thing".  This was almost certainly the origin of the term.
  8229	
  8230	:frog: alt. `phrog' 1. interj. Term of disgust (we seem to have
  8231	   a lot of them).  2. Used as a name for just about anything.  See
  8232	   {foo}.  3. n. Of things, a crock.  4. n. Of people, somewhere
  8233	   in between a turkey and a toad.  5. `froggy': adj. Similar to
  8234	   `bagbiting' (see {bagbiter}), but milder.  "This froggy
  8235	   program is taking forever to run!"
  8236	
  8237	:frogging: [University of Waterloo] v. 1. Partial corruption of a text
  8238	   file or input stream by some bug or consistent glitch, as opposed
  8239	   to random events like line noise or media failures.  Might occur,
  8240	   for example, if one bit of each incoming character on a tty were
  8241	   stuck, so that some characters were correct and others were not.
  8242	   See {terminak} for a historical example.  2. By extension,
  8243	   accidental display of text in a mode where the output device emits
  8244	   special symbols or mnemonics rather than conventional ASCII.  Often
  8245	   happens, for example, when using a terminal or comm program on a
  8246	   device like an IBM PC with a special `high-half' character set and
  8247	   with the bit-parity assumption wrong.  A hacker sufficiently
  8248	   familiar with ASCII bit patterns might be able to read the display
  8249	   anyway.
  8250	
  8251	:front end: n. 1. An intermediary computer that does set-up and
  8252	   filtering for another (usually more powerful but less friendly)
  8253	   machine (a `back end').  2. What you're talking to when you
  8254	   have a conversation with someone who is making replies without
  8255	   paying attention.  "Look at the dancing elephants!"  "Uh-huh."
  8256	   "Do you know what I just said?"  "Sorry, you were talking to the
  8257	   front end."  See also {fepped out}.  3. Software that provides
  8258	   an interface to another program `behind' it, which may not be as
  8259	   user-friendly.  Probably from analogy with hardware front-ends (see
  8260	   sense 1) that interfaced with mainframes.
  8261	
  8262	:frotz: /frots/ 1. n. See {frobnitz}.  2. `mumble frotz': An
  8263	   interjection of very mild disgust.
  8264	
  8265	:frotzed: /frotst/ adj. {down} because of hardware problems.  Compare
  8266	   {fried}.  A machine that is merely frotzed may be fixable
  8267	   without replacing parts, but a fried machine is more seriously
  8268	   damaged.
  8269	
  8270	:frowney: n. (alt. `frowney face')  See {emoticon}.
  8271	
  8272	:fry: 1. vi. To fail.  Said especially of smoke-producing hardware
  8273	   failures.  More generally, to become non-working.  Usage: never
  8274	   said of software, only of hardware and humans.  See {fried},
  8275	   {magic smoke}.  2. vt. To cause to fail; to {roach}, {toast},
  8276	   or {hose} a piece of hardware.  Never used of software or humans,
  8277	   but compare {fried}.
  8278	
  8279	:FTP: /F-T-P/, *not* /fit'ip/ 1. [techspeak] n. The File
  8280	   Transfer Protocol for transmitting files between systems on the
  8281	   Internet.  2. vt. To {beam} a file using the File Transfer
  8282	   Protocol.  3. Sometimes used as a generic even for file transfers
  8283	   not using {FTP}.  "Lemme get a copy of `Wuthering
  8284	   Heights' ftp'd from uunet."
  8285	
  8286	:FUBAR: n. The Failed UniBus Address Register in a VAX.  A good
  8287	   example of how jargon can occasionally be snuck past the {suit}s;
  8288	   see {foobar}, and {foo} for a fuller etymology.
  8289	
  8290	:fuck me harder: excl. Sometimes uttered in response to egregious
  8291	   misbehavior, esp. in software, and esp. of misbehaviors which
  8292	   seem unfairly persistent (as though designed in by the imp of the
  8293	   perverse).  Often theatrically elaborated: "Aiighhh! Fuck me with
  8294	   a piledriver and 16 feet of curare-tipped wrought-iron fence
  8295	   *and no lubricants*!" The phrase is sometimes heard
  8296	   abbreviated `FMH' in polite company.
  8297	
  8298	   [This entry is an extreme example of the hackish habit of coining
  8299	   elaborate and evocative terms for lossage. Here we see a quite
  8300	   self-conscious parody of mainstream expletives that has become a
  8301	   running gag in part of the hacker culture; it illustrates the
  8302	   hackish tendency to turn any situation, even one of extreme
  8303	   frustration, into an intellectual game (the point being, in this
  8304	   case, to creatively produce a long-winded description of the
  8305	   most anatomically absurd mental image possible --- the short forms
  8306	   implicitly allude to all the ridiculous long forms ever spoken).
  8307	   Scatological language is actually relatively uncommon among
  8308	   hackers, and there was some controversy over whether this entry
  8309	   ought to be included at all.  As it reflects a live usage
  8310	   recognizably peculiar to the hacker culture, we feel it is
  8311	   in the hackish spirit of truthfulness and opposition to all
  8312	   forms of censorship to record it here. --ESR & GLS]
  8313	
  8314	:FUD: /fuhd/ n. Defined by Gene Amdahl after he left IBM to found
  8315	   his own company: "FUD is the fear, uncertainty, and doubt that IBM
  8316	   sales people instill in the minds of potential customers who might
  8317	   be considering [Amdahl] products."  The idea, of course, was to
  8318	   persuade them to go with safe IBM gear rather than with
  8319	   competitors' equipment.  This was traditionally done by promising
  8320	   that Good Things would happen to people who stuck with IBM, but
  8321	   Dark Shadows loomed over the future of competitors' equipment or
  8322	   software.  See {IBM}.
  8323	
  8324	:FUD wars: /fuhd worz/ n. [from {FUD}] Political posturing engaged in
  8325	   by hardware and software vendors ostensibly committed to
  8326	   standardization but actually willing to fragment the market to
  8327	   protect their own shares.  The UNIX International vs. OSF conflict
  8328	   is but one outstanding example.
  8329	
  8330	:fudge: 1. vt. To perform in an incomplete but marginally acceptable
  8331	   way, particularly with respect to the writing of a program.  "I
  8332	   didn't feel like going through that pain and suffering, so I fudged
  8333	   it --- I'll fix it later."  2. n. The resulting code.
  8334	
  8335	:fudge factor: n. A value or parameter that is varied in an ad hoc way
  8336	   to produce the desired result.  The terms `tolerance' and
  8337	   {slop} are also used, though these usually indicate a one-sided
  8338	   leeway, such as a buffer that is made larger than necessary
  8339	   because one isn't sure exactly how large it needs to be, and it is
  8340	   better to waste a little space than to lose completely for not
  8341	   having enough.  A fudge factor, on the other hand, can often be
  8342	   tweaked in more than one direction.  A good example is the `fuzz'
  8343	   typically allowed in floating-point calculations: two numbers being
  8344	   compared for equality must be allowed to differ by a small amount;
  8345	   if that amount is too small, a computation may never terminate,
  8346	   while if it is too large, results will be needlessly inaccurate.
  8347	   Fudge factors are frequently adjusted incorrectly by programmers
  8348	   who don't fully understand their import.  See also {coefficient
  8349	   of X}.
  8350	
  8351	:fuel up: vi. To eat or drink hurriedly in order to get back to
  8352	   hacking.  "Food-p?"  "Yeah, let's fuel up."  "Time for a
  8353	   {great-wall}!"  See also {{oriental food}}.
  8354	
  8355	:fuggly: /fuhg'lee/ adj. Emphatic form of {funky}; funky +
  8356	   ugly).  Unusually for hacker jargon, this may actually derive from
  8357	   black street-jive.  To say it properly, the first syllable should
  8358	   be growled rather than spoken.  Usage: humorous.  "Man, the
  8359	   {{ASCII}}-to-{{EBCDIC}} code in that printer driver is
  8360	   *fuggly*."  See also {wonky}.
  8361	
  8362	:fum: [XEROX PARC] n. At PARC, often the third of the standard
  8363	   {metasyntactic variable}s (after {foo} and {bar}.  Competes
  8364	   with {baz}, which is more common outside PARC.
  8365	
  8366	:funky: adj. Said of something that functions, but in a slightly
  8367	   strange, klugey way.  It does the job and would be difficult to
  8368	   change, so its obvious non-optimality is left alone.  Often used to
  8369	   describe interfaces.  The more bugs something has that nobody has
  8370	   bothered to fix because workarounds are easier, the funkier it is.
  8371	   {TECO} and UUCP are funky.  The Intel i860's exception handling is
  8372	   extraordinarily funky.  Most standards acquire funkiness as they
  8373	   age.  "The new mailer is installed, but is still somewhat funky;
  8374	   if it bounces your mail for no reason, try resubmitting it."
  8375	   "This UART is pretty funky.  The data ready line is active-high in
  8376	   interrupt mode and active-low in DMA mode."  See {fuggly}.
  8377	
  8378	:funny money: n. 1. Notional `dollar' units of computing time and/or
  8379	   storage handed to students at the beginning of a computer course;
  8380	   also called `play money' or `purple money' (in implicit
  8381	   opposition to real or `green' money).  In New Zealand and Germany
  8382	   the odd usage `paper money' has been recorded; in Gremany, the
  8383	   particularly amusing synonym `transfer rouble' commemmorates the
  8384	   worthlessness of the ex-USSR's currency.  When your funny money
  8385	   ran out, your account froze and you needed to go to a professor to
  8386	   get more.  Fortunately, the plunging cost of timesharing cycles has
  8387	   made this less common.  The amounts allocated were almost
  8388	   invariably too small, even for the non-hackers who wanted to slide
  8389	   by with minimum work.  In extreme cases, the practice led to
  8390	   small-scale black markets in bootlegged computer accounts.  2. By
  8391	   extension, phantom money or quantity tickets of any kind used as a
  8392	   resource-allocation hack within a system.  Antonym: `real
  8393	   money'.
  8394	
  8395	:fuzzball: [TCP/IP hackers] n. A DEC LSI-11 running a particular
  8396	   suite of homebrewed software written by Dave Mills and assorted
  8397	   co-conspirators, used in the early 1980s for Internet protocol
  8398	   testbedding and experimentation.  These were used as NSFnet
  8399	   backbone sites in its early 56KB-line days; a few are still active
  8400	   on the Internet as of early 1991, doing odd jobs such as network
  8401	   time service.
  8402	
  8403	= G =
  8404	=====
  8405	
  8406	:G: [SI] pref.,suff. See {{quantifiers}}.
  8407	
  8408	:gabriel: /gay'bree-*l/ [for Dick Gabriel, SAIL LISP hacker and
  8409	   volleyball fanatic] n. An unnecessary (in the opinion of the
  8410	   opponent) stalling tactic, e.g., tying one's shoelaces or combing
  8411	   one's hair repeatedly, asking the time, etc.  Also used to refer to
  8412	   the perpetrator of such tactics.  Also, `pulling a Gabriel',
  8413	   `Gabriel mode'.
  8414	
  8415	:gag: vi. Equivalent to {choke}, but connotes more disgust. "Hey,
  8416	   this is FORTRAN code.  No wonder the C compiler gagged."  See also
  8417	   {barf}.
  8418	
  8419	:gang bang: n. The use of large numbers of loosely coupled
  8420	   programmers in an attempt to wedge a great many features into a
  8421	   product in a short time.  Though there have been memorable gang
  8422	   bangs (e.g., that over-the-weekend assembler port mentioned in
  8423	   Steven Levy's `Hackers'), most are perpetrated by large
  8424	   companies trying to meet deadlines and produce enormous buggy
  8425	   masses of code entirely lacking in {orthogonal}ity.  When
  8426	   market-driven managers make a list of all the features the
  8427	   competition has and assign one programmer to implement each, they
  8428	   often miss the importance of maintaining a coherent design.  See
  8429	   also {firefighting}, {Mongolian Hordes technique},
  8430	   {Conway's Law}.
  8431	
  8432	:garbage collect: vi. (also `garbage collection', n.) See {GC}.
  8433	
  8434	:garply: /gar'plee/ [Stanford] n. Another metasyntactic variable (see
  8435	   {foo}); once popular among SAIL hackers.
  8436	
  8437	:gas: [as in `gas chamber'] 1. interj. A term of disgust and
  8438	   hatred, implying that gas should be dispensed in generous
  8439	   quantities, thereby exterminating the source of irritation.  "Some
  8440	   loser just reloaded the system for no reason!  Gas!"  2. interj. A
  8441	   suggestion that someone or something ought to be flushed out of
  8442	   mercy.  "The system's getting {wedged} every few minutes.
  8443	   Gas!"  3. vt.  To {flush} (sense 1).  "You should gas that old
  8444	   crufty software."  4. [IBM] n. Dead space in nonsequentially
  8445	   organized files that was occupied by data that has been deleted;
  8446	   the compression operation that removes it is called `degassing' (by
  8447	   analogy, perhaps, with the use of the same term in vacuum
  8448	   technology). 5. [IBM] n.  Empty space on a disk that has been
  8449	   clandestinely allocated against future need.
  8450	
  8451	:gaseous: adj. Deserving of being {gas}sed.  Disseminated by
  8452	   Geoff Goodfellow while at SRI; became particularly popular after
  8453	   the Moscone-Milk killings in San Francisco, when it was learned
  8454	   that the defendant Dan White (a politician who had supported
  8455	   Proposition 7) would get the gas chamber under Proposition 7 if
  8456	   convicted of first-degree murder (he was eventually convicted of
  8457	   manslaughter).
  8458	
  8459	:GC: /G-C/ [from LISP terminology; `Garbage Collect']
  8460	   1. vt. To clean up and throw away useless things.  "I think I'll
  8461	   GC the top of my desk today."  When said of files, this is
  8462	   equivalent to {GFR}.  2. vt. To recycle, reclaim, or put to
  8463	   another use.  3. n. An instantiation of the garbage collector
  8464	   process.
  8465	
  8466	   `Garbage collection' is computer-science jargon for a particular
  8467	   class of strategies for dynamically reallocating computer memory.
  8468	   One such strategy involves periodically scanning all the data in
  8469	   memory and determining what is no longer accessible; useless data
  8470	   items are then discarded so that the memory they occupy can be
  8471	   recycled and used for another purpose.  Implementations of the LISP
  8472	   language usually use garbage collection.
  8473	
  8474	   In jargon, the full phrase is sometimes heard but the {abbrev} is
  8475	   more frequently used because it is shorter.  Note that there is an
  8476	   ambiguity in usage that has to be resolved by context: "I'm going
  8477	   to garbage-collect my desk" usually means to clean out the
  8478	   drawers, but it could also mean to throw away or recycle the desk
  8479	   itself.
  8480	
  8481	:GCOS:: /jee'kohs/ n. A {quick-and-dirty} {clone} of
  8482	   System/360 DOS that emerged from GE around 1970; originally called
  8483	   GECOS (the General Electric Comprehensive Operating System).  Later
  8484	   kluged to support primitive timesharing and transaction processing.
  8485	   After the buyout of GE's computer division by Honeywell, the name
  8486	   was changed to General Comprehensive Operating System (GCOS).
  8487	   Other OS groups at Honeywell began referring to it as `God's Chosen
  8488	   Operating System', allegedly in reaction to the GCOS crowd's
  8489	   uninformed and snotty attitude about the superiority of their
  8490	   product.  All this might be of zero interest, except for two facts:
  8491	   (1) The GCOS people won the political war, and this led in the
  8492	   orphaning and eventual death of Honeywell {{Multics}}, and
  8493	   (2) GECOS/GCOS left one permanent mark on UNIX.  Some early UNIX
  8494	   systems at Bell Labs used GCOS machines for print spooling and
  8495	   various other services; the field added to `/etc/passwd' to
  8496	   carry GCOS ID information was called the `GECOS field' and
  8497	   survives today as the `pw_gecos' member used for the user's
  8498	   full name and other human-ID information.  GCOS later played a
  8499	   major role in keeping Honeywell a dismal also-ran in the mainframe
  8500	   market, and was itself ditched for UNIX in the late 1980s when
  8501	   Honeywell retired its aging {big iron} designs.
  8502	
  8503	:GECOS:: /jee'kohs/ n. See {{GCOS}}.
  8504	
  8505	:gedanken: /g*-don'kn/ adj. Ungrounded; impractical; not
  8506	   well-thought-out; untried; untested.  `Gedanken' is a German word
  8507	   for `thought'.  A thought experiment is one you carry out in your
  8508	   head.  In physics, the term `gedanken experiment' is used to
  8509	   refer to an experiment that is impractical to carry out, but useful
  8510	   to consider because you can reason about it theoretically.  (A
  8511	   classic gedanken experiment of relativity theory involves thinking
  8512	   about a man in an elevator accelerating through space.)  Gedanken
  8513	   experiments are very useful in physics, but you have to be careful.
  8514	   It's too easy to idealize away some important aspect of the real
  8515	   world in contructing your `apparatus'.
  8516	
  8517	   Among hackers, accordingly, the word has a pejorative connotation.
  8518	   It is said of a project, especially one in artificial intelligence
  8519	   research, that is written up in grand detail (typically as a Ph.D.
  8520	   thesis) without ever being implemented to any great extent.  Such a
  8521	   project is usually perpetrated by people who aren't very good
  8522	   hackers or find programming distasteful or are just in a hurry.  A
  8523	   `gedanken thesis' is usually marked by an obvious lack of
  8524	   intuition about what is programmable and what is not, and about
  8525	   what does and does not constitute a clear specification of an
  8526	   algorithm.  See also {AI-complete}, {DWIM}.
  8527	
  8528	:geef: v. [ostensibly from `gefingerpoken'] vt. Syn. {mung}.  See
  8529	   also {blinkenlights}.
  8530	
  8531	:geek out: vi. To temporarily enter techno-nerd mode while in a
  8532	   non-hackish context, for example at parties held near computer
  8533	   equipment.  Especially used when you need to do something highly
  8534	   technical and don't have time to explain: "Pardon me while I geek
  8535	   out for a moment."  See {computer geek}.
  8536	
  8537	:gen: /jen/ n.,v. Short for {generate}, used frequently in both spoken
  8538	   and written contexts.
  8539	
  8540	:gender mender: n. A cable connector shell with either two male or two
  8541	   female connectors on it, used to correct the mismatches that result
  8542	   when some {loser} didn't understand the RS232C specification and
  8543	   the distinction between DTE and DCE.  Used esp. for RS-232C
  8544	   parts in either the original D-25 or the IBM PC's bogus D-9 format.
  8545	   Also called `gender bender', `gender blender', `sex
  8546	   changer', and even `homosexual adapter'; however, there appears
  8547	   to be some confusion as to whether a `male homosexual adapter' has
  8548	   pins on both sides (is male) or sockets on both sides (connects two
  8549	   males).
  8550	
  8551	:General Public Virus: n. Pejorative name for some versions of the
  8552	   {GNU} project {copyleft} or General Public License (GPL), which
  8553	   requires that any tools or {app}s incorporating copylefted code
  8554	   must be source-distributed on the same counter-commercial terms as
  8555	   GNU stuff.  Thus it is alleged that the copyleft `infects' software
  8556	   generated with GNU tools, which may in turn infect other software
  8557	   that reuses any of its code.  The Free Software Foundation's
  8558	   official position as of January 1991 is that copyright law limits
  8559	   the scope of the GPL to "programs textually incorporating
  8560	   significant amounts of GNU code", and that the `infection' is not
  8561	   passed on to third parties unless actual GNU source is transmitted
  8562	   (as in, for example, use of the Bison parser skeleton).
  8563	   Nevertheless, widespread suspicion that the {copyleft} language
  8564	   is `boobytrapped' has caused many developers to avoid using GNU
  8565	   tools and the GPL.  Recent (July 1991) changes in the language of
  8566	   the version 2.00 license may eliminate this problem.
  8567	
  8568	:generate: vt. To produce something according to an algorithm or
  8569	   program or set of rules, or as a (possibly unintended) side effect
  8570	   of the execution of an algorithm or program.  The opposite of
  8571	   {parse}.  This term retains its mechanistic connotations (though
  8572	   often humorously) when used of human behavior.  "The guy is
  8573	   rational most of the time, but mention nuclear energy around him
  8574	   and he'll generate {infinite} flamage."
  8575	
  8576	:gensym: /jen'sim/ [from MacLISP for `generated symbol'] 1. v.
  8577	   To invent a new name for something temporary, in such a way that
  8578	   the name is almost certainly not in conflict with one already in
  8579	   use.  2. n.  The resulting name.  The canonical form of a gensym is
  8580	   `Gnnnn' where nnnn represents a number; any LISP hacker would
  8581	   recognize G0093 (for example) as a gensym.  3. A freshly generated
  8582	   data structure with a gensymmed name.  These are useful for storing
  8583	   or uniquely identifying crufties (see {cruft}).
  8584	
  8585	:Get a life!: imp. Hacker-standard way of suggesting that the person
  8586	   to whom you are speaking has succumbed to terminal geekdom (see
  8587	   {computer geek}).  Often heard on {USENET}, esp. as a way of
  8588	   suggesting that the target is taking some obscure issue of
  8589	   {theology} too seriously.  This exhortation was popularized by
  8590	   William Shatner on a "Saturday Night Live" episode in a speech that
  8591	   ended "Get a *life*!", but some respondents believe it to
  8592	   have been in use before then.  It was certainly in wide use among
  8593	   hackers for at least five years before achieving mainstream
  8594	   currency around early 1992.
  8595	
  8596	:Get a real computer!: imp. Typical hacker response to news that
  8597	   somebody is having trouble getting work done on a system that
  8598	   (a) is single-tasking, (b) has no hard disk, or (c) has an address
  8599	   space smaller than 4 megabytes.  This is as of mid-1991; note that
  8600	   the threshold for `real computer' rises with time, and it may well
  8601	   be (for example) that machines with character-only displays will be
  8602	   generally considered `unreal' in a few years (GLS points out that
  8603	   they already are in some circles).  See {essentials}, {bitty
  8604	   box}, and {toy}.
  8605	
  8606	:GFR: /G-F-R/ vt. [ITS] From `Grim File Reaper', an ITS and Lisp
  8607	   Machine utility.  To remove a file or files according to some
  8608	   program-automated or semi-automatic manual procedure, especially
  8609	   one designed to reclaim mass storage space or reduce name-space
  8610	   clutter (the original GFR actually moved files to tape).  Often
  8611	   generalized to pieces of data below file level.  "I used to have
  8612	   his phone number, but I guess I {GFR}ed it."  See also
  8613	   {prowler}, {reaper}.  Compare {GC}, which discards only
  8614	   provably worthless stuff.
  8615	
  8616	:gig: /jig/ or /gig/ [SI] n. See {{quantifiers}}.
  8617	
  8618	:giga-: /ji'ga/ or /gi'ga/ [SI] pref. See {{quantifiers}}.
  8619	
  8620	:GIGO: /gi:'goh/ [acronym] 1. `Garbage In, Garbage Out' ---
  8621	   usually said in response to {luser}s who complain that a program
  8622	   didn't complain about faulty data.  Also commonly used to describe
  8623	   failures in human decision making due to faulty, incomplete, or
  8624	   imprecise data.  2. `Garbage In, Gospel Out': this more recent
  8625	   expansion is a sardonic comment on the tendency human beings have
  8626	   to put excessive trust in `computerized' data.
  8627	
  8628	:gilley: [USENET] n. The unit of analogical bogosity.  According to
  8629	   its originator, the standard for one gilley was "the act of
  8630	   bogotoficiously comparing the shutting down of 1000 machines for a
  8631	   day with the killing of one person".  The milligilley has been
  8632	   found to suffice for most normal conversational exchanges.
  8633	
  8634	:gillion: /gil'y*n/ or /jil'y*n/ [formed from {giga-} by analogy
  8635	   with mega/million and tera/trillion] n. 10^9. Same as an
  8636	   American billion or a British `milliard'.  How one pronounces
  8637	   this depends on whether one speaks {giga-} with a hard or
  8638	   soft `g'.
  8639	
  8640	:GIPS: /gips/ or /jips/ [analogy with {MIPS}] n.
  8641	   Giga-Instructions per Second (also possibly `Gillions of
  8642	   Instructions per Second'; see {gillion}).  In 1991, this is used
  8643	   of only a handful of highly parallel machines, but this is expected
  8644	   to change.  Compare {KIPS}.
  8645	
  8646	:glark: /glark/ vt. To figure something out from context.  "The
  8647	   System III manuals are pretty poor, but you can generally glark the
  8648	   meaning from context."  Interestingly, the word was originally
  8649	   `glork'; the context was "This gubblick contains many
  8650	   nonsklarkish English flutzpahs, but the overall pluggandisp can be
  8651	   glorked [sic] from context" (David Moser, quoted by Douglas
  8652	   Hofstadter in his "Metamagical Themas" column in the
  8653	   January 1981 `Scientific American').  It is conjectured that
  8654	   hackish usage mutated the verb to `glark' because {glork} was
  8655	   already an established jargon term.  Compare {grok},
  8656	   {zen}.
  8657	
  8658	:glass: [IBM] n. Synonym for {silicon}.
  8659	
  8660	:glass tty: /glas T-T-Y/ or /glas ti'tee/ n. A terminal that
  8661	   has a display screen but which, because of hardware or software
  8662	   limitations, behaves like a teletype or some other printing
  8663	   terminal, thereby combining the disadvantages of both: like a
  8664	   printing terminal, it can't do fancy display hacks, and like a
  8665	   display terminal, it doesn't produce hard copy.  An example is the
  8666	   early `dumb' version of Lear-Siegler ADM 3 (without cursor
  8667	   control).  See {tube}, {tty}; compare {dumb terminal}, {smart
  8668	   terminal}.  See "{TV Typewriters}" (appendix A) for an
  8669	   interesting true story about a glass tty.
  8670	
  8671	:glassfet: /glas'fet/ [by analogy with MOSFET, the acronym for
  8672	   `Metal-Oxide-Semiconductor Field-Effect Transistor'] n. Syn.
  8673	   {firebottle}, a humorous way to refer to a vacuum tube.
  8674	
  8675	:glitch: /glich/ [from German `glitschen' to slip, via Yiddish
  8676	   `glitshen', to slide or skid] 1. n. A sudden interruption in
  8677	   electric service, sanity, continuity, or program function.
  8678	   Sometimes recoverable.  An interruption in electric service is
  8679	   specifically called a `power glitch' (also {power hit}).  This
  8680	   is of grave concern because it usually crashes all the computers.
  8681	   In jargon, though, a hacker who got to the middle of a sentence and
  8682	   then forgot how he or she intended to complete it might say,
  8683	   "Sorry, I just glitched".  2. vi. To commit a glitch.  See
  8684	   {gritch}.  3. vt.  [Stanford] To scroll a display screen, esp.
  8685	   several lines at a time.  {{WAITS}} terminals used to do this in
  8686	   order to avoid continuous scrolling, which is distracting to the
  8687	   eye.  4. obs.  Same as {magic cookie}, sense 2.
  8688	
  8689	   All these uses of `glitch' derive from the specific technical
  8690	   meaning the term has in the electronic hardware world, where it is
  8691	   now techspeak.  A glitch can occur when the inputs of a circuit
  8692	   change, and the outputs change to some {random} value for some
  8693	   very brief time before they settle down to the correct value.  If
  8694	   another circuit inspects the output at just the wrong time, reading
  8695	   the random value, the results can be very wrong and very hard to
  8696	   debug (a glitch is one of many causes of electronic {heisenbug}s).
  8697	
  8698	:glob: /glob/, *not* /glohb/ [UNIX] vt.,n. To expand
  8699	   special characters in a wildcarded name, or the act of so doing
  8700	   (the action is also called `globbing').  The UNIX conventions for
  8701	   filename wildcarding have become sufficiently pervasive that many
  8702	   hackers use some of them in written English, especially in email or
  8703	   news on technical topics.  Those commonly encountered include the
  8704	   following:
  8705	
  8706	     *
  8707	          wildcard for any string (see also {UN*X})
  8708	  
  8709	     ?
  8710	          wildcard for any character (generally read this way only at
  8711	          the beginning or in the middle of a word)
  8712	
  8713	     []
  8714	          delimits a wildcard matching any of the enclosed characters
  8715	
  8716	     {}
  8717	          alternation of comma-separated alternatives; thus,
  8718	          `foo{baz,qux}' would be read as `foobaz' or `fooqux'
  8719	
  8720	   Some examples: "He said his name was [KC]arl" (expresses
  8721	   ambiguity).  "I don't read talk.politics.*" (any of the
  8722	   talk.politics subgroups on {USENET}).  Other examples are given
  8723	   under the entry for {X}.  Compare {regexp}.
  8724	
  8725	   Historical note: The jargon usage derives from `glob', the
  8726	   name of a subprogram that expanded wildcards in archaic pre-Bourne
  8727	   versions of the UNIX shell.
  8728	
  8729	:glork: /glork/ 1. interj. Term of mild surprise, usually tinged with
  8730	   outrage, as when one attempts to save the results of 2 hours of
  8731	   editing and finds that the system has just crashed.  2. Used as a
  8732	   name for just about anything.  See {foo}.  3. vt. Similar to
  8733	   {glitch}, but usually used reflexively.  "My program just glorked
  8734	   itself."  See also {glark}.
  8735	
  8736	:glue: n. Generic term for any interface logic or protocol that
  8737	   connects two component blocks.  For example,  {Blue
  8738	   Glue} is IBM's SNA protocol, and hardware designers call anything
  8739	   used to connect large VLSI's or circuit blocks `glue logic'.
  8740	
  8741	:gnarly: /nar'lee/ adj. Both {obscure} and {hairy} in the
  8742	   sense of complex.  "{Yow!} --- the tuned assembler
  8743	   implementation of BitBlt is really gnarly!"  From a similar but
  8744	   less specific usage in surfer slang.
  8745	
  8746	:GNU: /gnoo/, *not* /noo/ 1. [acronym: `GNU's Not UNIX!',
  8747	   see {{recursive acronym}}] A UNIX-workalike development effort of
  8748	   the Free Software Foundation headed by Richard Stallman
  8749	   <rms@gnu.ai.mit.edu>.  GNU EMACS and the GNU C compiler, two tools
  8750	   designed for this project, have become very popular in hackerdom
  8751	   and elsewhere.  The GNU project was designed partly to proselytize
  8752	   for RMS's position that information is community property and all
  8753	   software source should be shared.  One of its slogans is "Help
  8754	   stamp out software hoarding!"  Though this remains controversial
  8755	   (because it implicitly denies any right of designers to own,
  8756	   assign, and sell the results of their labors), many hackers who
  8757	   disagree with RMS have nevertheless cooperated to produce large
  8758	   amounts of high-quality software for free redistribution under the
  8759	   Free Software Foundation's imprimatur.  See {EMACS},
  8760	   {copyleft}, {General Public Virus}.  2. Noted UNIX hacker
  8761	   John Gilmore <gnu@toad.com>, founder of USENET's anarchic alt.*
  8762	   hierarchy.
  8763	
  8764	:GNUMACS: /gnoo'maks/ [contraction of `GNU EMACS'] Often-heard
  8765	   abbreviated name for the {GNU} project's flagship tool, {EMACS}.
  8766	   Used esp. in contrast with {GOSMACS}.
  8767	
  8768	:go flatline: [from cyberpunk SF, refers to flattening of EEG
  8769	   traces upon brain-death] vi., also adjectival `flatlined'. 1. To
  8770	   {die}, terminate, or fail, esp. irreversibly.  In hacker
  8771	   parlance, this is used of machines only, human death being
  8772	   considered somewhat too serious a matter to employ jargon-jokes
  8773	   about.  2. To go completely quiescent; said of machines undergoing
  8774	   controlled shutdown.  "You can suffer file damage if you shut down
  8775	   UNIX but power off before the system has gone flatline."  3. Of a
  8776	   video tube, to fail by losing vertical scan, so all one sees is a
  8777	   bright horizontal line bisecting the screen.
  8778	
  8779	:go root: [UNIX] vi. To temporarily enter {root mode} in order
  8780	   to perform a privileged operation.  This use is deprecated in
  8781	   Australia, where v. `root' refers to animal sex.
  8782	
  8783	:go-faster stripes: [UK] Syn. {chrome}.
  8784	
  8785	:gobble: vt. To consume or to obtain.  The phrase `gobble up' tends to
  8786	   imply `consume', while `gobble down' tends to imply `obtain'.
  8787	   "The output spy gobbles characters out of a {tty} output buffer."
  8788	   "I guess I'll gobble down a copy of the documentation tomorrow."
  8789	   See also {snarf}.
  8790	
  8791	:Godzillagram: /god-zil'*-gram/ n. [from Japan's national hero]
  8792	   1. A network packet that in theory is a broadcast to every machine
  8793	   in the universe.  The typical case of this is an IP datagram whose
  8794	   destination IP address is [255.255.255.255].  Fortunately, few
  8795	   gateways are foolish enough to attempt to implement this!  2. A
  8796	   network packet of maximum size.  An IP Godzillagram has
  8797	   65,536 octets.
  8798	
  8799	:golden: adj. [prob. from folklore's `golden egg'] When used to
  8800	   describe a magnetic medium (e.g., `golden disk', `golden tape'),
  8801	   describes one containing a tested, up-to-spec, ready-to-ship
  8802	   software version.  Compare {platinum-iridium}.
  8803	
  8804	:golf-ball printer: n. The IBM 2741, a slow but letter-quality
  8805	   printing device and terminal based on the IBM Selectric typewriter.
  8806	   The `golf ball' was a round object bearing reversed embossed
  8807	   images of 88 different characters arranged on four meridians of
  8808	   latitude; one could change the font by swapping in a different golf
  8809	   ball.  This was the technology that enabled APL to use a
  8810	   non-EBCDIC, non-ASCII, and in fact completely non-standard
  8811	   character set.  This put it 10 years ahead of its time --- where it
  8812	   stayed, firmly rooted, for the next 20, until character displays
  8813	   gave way to programmable bit-mapped devices with the flexibility to
  8814	   support other character sets.
  8815	
  8816	:gonk: /gonk/ vt.,n. 1. To prevaricate or to embellish the truth
  8817	   beyond any reasonable recognition.  It is alleged that in German
  8818	   the term is (mythically) `gonken'; in Spanish the verb becomes
  8819	   `gonkar'.  "You're gonking me.  That story you just told me is a
  8820	   bunch of gonk."  In German, for example, "Du gonkst mir" (You're
  8821	   pulling my leg).  See also {gonkulator}.  2. [British] To grab some
  8822	   sleep at an odd time; compare {gronk out}.
  8823	
  8824	:gonkulator: /gon'kyoo-lay-tr/ [from the old "Hogan's Heroes" TV
  8825	   series] n. A pretentious piece of equipment that actually serves no
  8826	   useful purpose.  Usually used to describe one's least favorite
  8827	   piece of computer hardware.  See {gonk}.
  8828	
  8829	:gonzo: /gon'zoh/ [from Hunter S. Thompson] adj. Overwhelming;
  8830	   outrageous; over the top; very large, esp. used of collections of
  8831	   source code, source files, or individual functions.  Has some of
  8832	   the connotations of {moby} and {hairy}, but without the
  8833	   implication of obscurity or complexity.
  8834	
  8835	:Good Thing: n.,adj. Often capitalized; always pronounced as if
  8836	   capitalized.  1. Self-evidently wonderful to anyone in a position
  8837	   to notice: "The Trailblazer's 19.2Kbaud PEP mode with on-the-fly
  8838	   Lempel-Ziv compression is a Good Thing for sites relaying
  8839	   netnews."  2. Something that can't possibly have any ill
  8840	   side-effects and may save considerable grief later: "Removing the
  8841	   self-modifying code from that shared library would be a Good
  8842	   Thing."  3. When said of software tools or libraries, as in "YACC
  8843	   is a Good Thing", specifically connotes that the thing has
  8844	   drastically reduced a programmer's work load.  Oppose {Bad
  8845	   Thing}.
  8846	
  8847	:gorilla arm: n. The side-effect that destroyed touch-screens as a
  8848	   mainstream input technology despite a promising start in the early
  8849	   1980s.  It seems the designers of all those {spiffy} touch-menu
  8850	   systems failed to notice that humans aren't designed to hold their
  8851	   arms in front of their faces making small motions.  After more than
  8852	   a very few selections, the arm begins to feel sore, cramped, and
  8853	   oversized; hence `gorilla arm'.  This is now considered a classic
  8854	   cautionary tale to human-factors designers; "Remember the gorilla
  8855	   arm!" is shorthand for "How is this going to fly in *real*
  8856	   use?".
  8857	
  8858	:gorp: /gorp/ [CMU: perhaps from the canonical hiker's food, Good
  8859	   Old Raisins and Peanuts] Another {metasyntactic variable}, like
  8860	   {foo} and {bar}.
  8861	
  8862	:GOSMACS: /goz'maks/ [contraction of `Gosling EMACS'] n. The first
  8863	   {EMACS}-in-C implementation, predating but now largely eclipsed by
  8864	   {GNUMACS}.  Originally freeware; a commercial version is now
  8865	   modestly popular as `UniPress EMACS'.  The author (James Gosling)
  8866	   went on to invent {NeWS}.
  8867	
  8868	:Gosperism: /gos'p*r-izm/ A hack, invention, or saying by
  8869	   arch-hacker R. William (Bill) Gosper.  This notion merits its own
  8870	   term because there are so many of them.  Many of the entries in
  8871	   {HAKMEM} are Gosperisms; see also {life}.
  8872	
  8873	:gotcha: n. A {misfeature} of a system, especially a programming
  8874	   language or environment, that tends to breed bugs or mistakes
  8875	   because it behaves in an unexpected way.  For example, a classic
  8876	   gotcha in {C} is the fact that `if (a=b) {code;}' is
  8877	   syntactically valid and sometimes even correct.  It puts the value
  8878	   of `b' into `a' and then executes `code' if
  8879	   `a' is non-zero.  What the programmer probably meant was
  8880	   `if (a==b) {code;}', which executes `code' if
  8881	   `a' and `b' are equal.
  8882	
  8883	:GPL: /G-P-L/ n. Abbrev. for `General Public License' in
  8884	   widespread use; see {copyleft}.
  8885	
  8886	:GPV: /G-P-V/ n. Abbrev. for {General Public Virus} in
  8887	   widespread use.
  8888	
  8889	:grault: /grawlt/ n. Yet another {metasyntactic variable}, invented by
  8890	   Mike Gallaher and propagated by the {GOSMACS} documentation.  See
  8891	   {corge}.
  8892	
  8893	:gray goo: n. A hypothetical substance composed of {sagan}s of
  8894	   sub-micron-sized self-replicating robots programmed to make copies
  8895	   of themselves out of whatever is available.  The image that goes
  8896	   with the term is one of the entire biosphere of Earth being
  8897	   eventually converted to robot goo.  This is the simplest of the
  8898	   {{nanotechnology}} disaster scenarios, easily refuted by arguments
  8899	   from energy requirements and elemental abundances.  Compare {blue
  8900	   goo}.
  8901	
  8902	:Great Renaming: n. The {flag day} on which all of the non-local
  8903	   groups on the {USENET} had their names changed from the net.-
  8904	   format to the current multiple-hierarchies scheme.
  8905	
  8906	:Great Runes: n. Uppercase-only text or display messages.  Some
  8907	   archaic operating systems still emit these.  See also {runes},
  8908	   {smash case}, {fold case}.
  8909	
  8910	   Decades ago, back in the days when it was the sole supplier of
  8911	   long-distance hardcopy transmittal devices, the Teletype
  8912	   Corporation was faced with a major design choice.  To shorten code
  8913	   lengths and cut complexity in the printing mechanism, it had been
  8914	   decided that teletypes would use a monocase font, either ALL UPPER
  8915	   or all lower.  The question was, which one to choose.  A study was
  8916	   conducted on readability under various conditions of bad ribbon,
  8917	   worn print hammers, etc.  Lowercase won; it is less dense and has
  8918	   more distinctive letterforms, and is thus much easier to read both
  8919	   under ideal conditions and when the letters are mangled or partly
  8920	   obscured.  The results were filtered up through {management}.
  8921	   The chairman of Teletype killed the proposal because it failed one
  8922	   incredibly important criterion:
  8923	
  8924	        "It would be impossible to spell the name of the Deity
  8925	        correctly."
  8926	
  8927	   In this way (or so, at least, hacker folklore has it) superstition
  8928	   triumphed over utility.  Teletypes were the major input devices on
  8929	   most early computers, and terminal manufacturers looking for
  8930	   corners to cut naturally followed suit until well into the 1970s.
  8931	   Thus, that one bad call stuck us with Great Runes for thirty years.
  8932	
  8933	:Great Worm, the: n. The 1988 Internet {worm} perpetrated by
  8934	   {RTM}.  This is a play on Tolkien (compare {elvish},
  8935	   {Elder Days}).  In the fantasy history of his Middle Earth
  8936	   books, there were dragons powerful enough to lay waste to entire
  8937	   regions; two of these (Scatha and Glaurung) were known as "the
  8938	   Great Worms".  This usage expresses the connotation that the RTM
  8939	   hack was a sort of devastating watershed event in hackish history;
  8940	   certainly it did more to make non-hackers nervous about the
  8941	   Internet than anything before or since.
  8942	
  8943	:great-wall: [from SF fandom] vi.,n. A mass expedition to an
  8944	   oriental restaurant, esp. one where food is served family-style
  8945	   and shared.  There is a common heuristic about the amount of food
  8946	   to order, expressed as "Get N - 1 entrees"; the value of N,
  8947	   which is the number of people in the group, can be inferred from
  8948	   context (see {N}).  See {{oriental food}}, {ravs},
  8949	   {stir-fried random}.
  8950	
  8951	:Green Book: n. 1. One of the three standard {PostScript}
  8952	   references: `PostScript Language Program Design', bylined
  8953	   `Adobe Systems' (Addison-Wesley, 1988; QA76.73.P67P66 ISBN;
  8954	   0-201-14396-8); see also {Red Book}, {Blue Book}, and the
  8955	   {White Book} (sense 2)).  2. Informal name for one of the three
  8956	   standard references on SmallTalk: `Smalltalk-80: Bits of
  8957	   History, Words of Advice', by Glenn Krasner (Addison-Wesley, 1983;
  8958	   QA76.8.S635S58; ISBN 0-201-11669-3) (this, too, is associated with
  8959	   blue and red books).  3. The `X/Open Compatibility Guide'.
  8960	   Defines an international standard {{UNIX}} environment that is a
  8961	   proper superset of POSIX/SVID; also includes descriptions of a
  8962	   standard utility toolkit, systems administrations features, and the
  8963	   like.  This grimoire is taken with particular seriousness in
  8964	   Europe.  See {Purple Book}.  4. The IEEE 1003.1 POSIX Operating
  8965	   Systems Interface standard has been dubbed "The Ugly Green Book".
  8966	   5. Any of the 1992 standards which will be issued by the CCITT's
  8967	   tenth plenary assembly.  Until now, these have changed color each
  8968	   review cycle (1984 was {Red Book}, 1988 {Blue Book});
  8969	   however, it is rumored that this convention is going to be dropped
  8970	   before 1992.  These include, among other things, the X.400 email
  8971	   standard and the Group 1 through 4 fax standards.  See also
  8972	   {{book titles}}.
  8973	
  8974	:green bytes: n. (also `green words') 1. Meta-information
  8975	   embedded in a file, such as the length of the file or its name; as
  8976	   opposed to keeping such information in a separate description file
  8977	   or record.  The term comes from an IBM user's group meeting
  8978	   (ca. 1962) at which these two approaches were being debated and the
  8979	   diagram of the file on the blackboard had the `green bytes' drawn
  8980	   in green.  2. By extension, the non-data bits in any
  8981	   self-describing format.  "A GIF file contains, among other things,
  8982	   green bytes describing the packing method for the image." Compare
  8983	   {out-of-band}, {zigamorph}, {fence} (sense 1).
  8984	
  8985	:green card: n. [after the `IBM System/360 Reference Data'
  8986	   card] This is used for any summary of an assembly language, even if
  8987	   the color is not green.  Less frequently used now because of the
  8988	   decrease in the use of assembly language.  "I'll go get my green
  8989	   card so I can check the addressing mode for that instruction."
  8990	   Some green cards are actually booklets.
  8991	
  8992	   The original green card became a yellow card when the System/370
  8993	   was introduced, and later a yellow booklet.  An anecdote from IBM
  8994	   refers to a scene that took place in a programmers' terminal room
  8995	   at Yorktown in 1978.  A luser overheard one of the programmers ask
  8996	   another "Do you have a green card?"  The other grunted and
  8997	   passed the first a thick yellow booklet.  At this point the luser
  8998	   turned a delicate shade of olive and rapidly left the room, never
  8999	   to return.  See also {card}.
  9000	
  9001	:green lightning: [IBM] n. 1. Apparently random flashing streaks on
  9002	   the face of 3278-9 terminals while a new symbol set is being
  9003	   downloaded.  This hardware bug was left deliberately unfixed, as
  9004	   some genius within IBM suggested it would let the user know that
  9005	   `something is happening'.  That, it certainly does.  Later
  9006	   microprocessor-driven IBM color graphics displays were actually
  9007	   *programmed* to produce green lightning!  2. [proposed] Any
  9008	   bug perverted into an alleged feature by adroit rationalization or
  9009	   marketing.  "Motorola calls the CISC cruft in the 88000
  9010	   architecture `compatibility logic', but I call it green
  9011	   lightning".  See also {feature}.
  9012	
  9013	:green machine: n. A computer or peripheral device that has been
  9014	   designed and built to military specifications for field equipment
  9015	   (that is, to withstand mechanical shock, extremes of temperature
  9016	   and humidity, and so forth).  Comes from the olive-drab `uniform'
  9017	   paint used for military equipment.
  9018	
  9019	:Green's Theorem: [TMRC] prov. For any story, in any group of people
  9020	   there will be at least one person who has not heard the story.
  9021	   [The name of this theorem is a play on a fundamental theorem in
  9022	   calculus. --- ESR]
  9023	
  9024	:grep: /grep/ [from the qed/ed editor idiom g/re/p , where
  9025	   re stands for a regular expression, to Globally search for the
  9026	   Regular Expression and Print the lines containing matches to it,
  9027	   via {{UNIX}} `grep(1)'] vt. To rapidly scan a file or set of
  9028	   files looking for a particular string or pattern (when browsing
  9029	   through a large set of files, one may speak of `grepping
  9030	   around').  By extension, to look for something by pattern.  "Grep
  9031	   the bulletin board for the system backup schedule, would you?"
  9032	   See also {vgrep}.
  9033	
  9034	:grind: vt. 1. [MIT and Berkeley] To format code, especially LISP
  9035	   code, by indenting lines so that it looks pretty.  This usage was
  9036	   associated with the MacLISP community and is now rare;
  9037	   {prettyprint} was and is the generic term for such
  9038	   operations.  2. [UNIX] To generate the formatted version of a
  9039	   document from the nroff, troff, TeX, or Scribe source.  The BSD
  9040	   program `vgrind(1)' grinds code for printing on a Versatec
  9041	   bitmapped printer.  3. To run seemingly interminably, esp. (but
  9042	   not necessarily) if performing some tedious and inherently useless
  9043	   task.  Similar to {crunch} or {grovel}.  Grinding has a
  9044	   connotation of using a lot of CPU time, but it is possible to grind
  9045	   a disk, network, etc.  See also {hog}.  4. To make the whole
  9046	   system slow.  "Troff really grinds a PDP-11."  5. `grind grind'
  9047	   excl. Roughly, "Isn't the machine slow today!"
  9048	
  9049	:grind crank: n. A mythical accessory to a terminal.  A crank on the
  9050	   side of a monitor, which when operated makes a zizzing noise and
  9051	   causes the computer to run faster.  Usually one does not refer to a
  9052	   grind crank out loud, but merely makes the appropriate gesture and
  9053	   noise.  See {grind} and {wugga wugga}.
  9054	
  9055	   Historical note: At least one real machine actually had a grind
  9056	   crank --- the R1, a research machine built toward the end of the
  9057	   days of the great vacuum tube computers, in 1959.  R1 (also known
  9058	   as `The Rice Institute Computer' (TRIC) and later as `The Rice
  9059	   University Computer' (TRUC)) had a single-step/free-run switch for
  9060	   use when debugging programs.  Since single-stepping through a large
  9061	   program was rather tedious, there was also a crank with a cam and
  9062	   gear arrangement that repeatedly pushed the single-step button.
  9063	   This allowed one to `crank' through a lot of code, then slow
  9064	   down to single-step for a bit when you got near the code of
  9065	   interest, poke at some registers using the console typewriter, and
  9066	   then keep on cranking.
  9067	
  9068	:gripenet: [IBM] n. A wry (and thoroughly unoffical) name for IBM's
  9069	   internal VNET system, deriving from its common use by IBMers to
  9070	   voice pointed criticism of IBM management that would be taboo in
  9071	   more formal channels.
  9072	
  9073	:gritch: /grich/ 1. n. A complaint (often caused by a {glitch}).
  9074	   2. vi. To complain.  Often verb-doubled: "Gritch gritch".  3. A
  9075	   synonym for {glitch} (as verb or noun).
  9076	
  9077	:grok: /grok/, var. /grohk/ [from the novel `Stranger in
  9078	   a Strange Land', by Robert A. Heinlein, where it is a Martian word
  9079	   meaning literally `to drink' and metaphorically `to be one
  9080	   with'] vt. 1. To understand, usually in a global sense.  Connotes
  9081	   intimate and exhaustive knowledge.  Contrast {zen}, similar
  9082	   supernal understanding as a single brief flash.  See also
  9083	   {glark}.  2. Used of programs, may connote merely sufficient
  9084	   understanding.  "Almost all C compilers grok the `void' type
  9085	   these days."
  9086	
  9087	:gronk: /gronk/ [popularized by Johnny Hart's comic strip
  9088	   "B.C." but the word apparently predates that] vt. 1. To
  9089	   clear the state of a wedged device and restart it.  More severe
  9090	   than `to {frob}'.  2. [TMRC] To cut, sever, smash, or
  9091	   similarly disable.  3. The sound made by many 3.5-inch diskette
  9092	   drives.  In particular, the microfloppies on a Commodore Amiga go
  9093	   "grink, gronk".
  9094	
  9095	:gronk out: vi. To cease functioning.  Of people, to go home and go
  9096	   to sleep.  "I guess I'll gronk out now; see you all tomorrow."
  9097	
  9098	:gronked: adj. 1. Broken.  "The teletype scanner was gronked, so
  9099	   we took the system down."  2. Of people, the condition of feeling
  9100	   very tired or (less commonly) sick.  "I've been chasing that bug
  9101	   for 17 hours now and I am thoroughly gronked!"  Compare
  9102	   {broken}, which means about the same as {gronk} used of
  9103	   hardware, but connotes depression or mental/emotional problems in
  9104	   people.
  9105	
  9106	:grovel: vi. 1. To work interminably and without apparent progress.
  9107	   Often used transitively with `over' or `through'.  "The file
  9108	   scavenger has been groveling through the file directories for 10
  9109	   minutes now."  Compare {grind} and {crunch}.  Emphatic form:
  9110	   `grovel obscenely'.  2. To examine minutely or in complete detail.
  9111	   "The compiler grovels over the entire source program before
  9112	   beginning to translate it."  "I grovelled through all the
  9113	   documentation, but I still couldn't find the command I wanted."
  9114	
  9115	:grunge: /gruhnj/ n. 1. That which is grungy, or that which makes
  9116	   it so.  2. [Cambridge] Code which is inaccessible due to changes in
  9117	   other parts of the program.  The preferred term in North America is
  9118	   {dead code}.
  9119	
  9120	:gubbish: /guhb'*sh/ [a portmanteau of `garbage' and `rubbish'?]
  9121	   n. Garbage; crap; nonsense.  "What is all this gubbish?"  The
  9122	   opposite portmanteau `rubbage' is also reported.
  9123	
  9124	:guiltware: /gilt'weir/ n. 1. A piece of {freeware} decorated
  9125	   with a message telling one how long and hard the author worked on
  9126	   it and intimating that one is a no-good freeloader if one does not
  9127	   immediately send the poor suffering martyr gobs of money.
  9128	   2. {Shareware} that works.
  9129	
  9130	:gumby: /guhm'bee/ [from a class of Monty Python characters,
  9131	   poss. with some influence from the 1960s claymation character] n.
  9132	   An act of minor but conspicuous stupidity, often in `gumby
  9133	   maneuver' or `pull a gumby'.
  9134	
  9135	:gun: [ITS: from the `:GUN' command] vt. To forcibly
  9136	   terminate a program or job (computer, not career).  "Some idiot
  9137	   left a background process running soaking up half the cycles, so I
  9138	   gunned it."  Compare {can}.
  9139	
  9140	:gunch: /guhnch/ [TMRC] vt. To push, prod, or poke at a device
  9141	   that has almost produced the desired result.  Implies a threat to
  9142	   {mung}.
  9143	
  9144	:gurfle: /ger'fl/ interj. An expression of shocked disbelief.  "He
  9145	   said we have to recode this thing in FORTRAN by next week.
  9146	   Gurfle!"  Compare {weeble}.
  9147	
  9148	:guru: n. [UNIX] An expert.  Implies not only {wizard} skill but
  9149	   also a history of being a knowledge resource for others.  Less
  9150	   often, used (with a qualifier) for other experts on other systems,
  9151	   as in `VMS guru'.  See {source of all good bits}.
  9152	
  9153	:guru meditation: n. Amiga equivalent of `panic' in UNIX
  9154	   (sometimes just called a `guru' or `guru event').  When the
  9155	   system crashes, a cryptic message "GURU MEDITATION
  9156	   #XXXXXXXX.YYYYYYYY" appears, indicating what the problem was.  An
  9157	   Amiga guru can figure things out from the numbers.  Generally a
  9158	   {guru} event must be followed by a {Vulcan nerve pinch}.
  9159	
  9160	   This term is (no surprise) an in-joke from the earliest days of the
  9161	   Amiga.  There used to be a device called a `Joyboard' which was
  9162	   basically a plastic board built onto on a joystick-like device; it
  9163	   was sold with a skiing game cartridge for the Atari game machine.
  9164	   It is said that whenever the prototype OS crashed, the system
  9165	   programmer responsible would calm down by concentrating on a
  9166	   solution while sitting cross-legged on a Joyboard trying to keep
  9167	   the board in balance.  This position resembled that of a
  9168	   meditating guru.  Sadly, the joke was removed in AmigaOS 2.04.
  9169	
  9170	:gweep: /gweep/ [WPI] 1. v. To {hack}, usually at night.  At
  9171	   WPI, from 1977 onwards, this often indicated that the speaker could
  9172	   be found at the College Computing Center punching cards or crashing
  9173	   the {PDP-10} or, later, the DEC-20; the term has survived the
  9174	   demise of those technologies, however, and is still live in late
  9175	   1991.  "I'm going to go gweep for a while. See you in the
  9176	   morning"  "I gweep from 8pm till 3am during the week."  2. n. One
  9177	   who habitually gweeps in sense 1; a {hacker}.  "He's a
  9178	   hard-core gweep, mumbles code in his sleep."
  9179	
  9180	= H =
  9181	=====
  9182	
  9183	:h: [from SF fandom] infix. A method of `marking' common words,
  9184	   i.e., calling attention to the fact that they are being used in a
  9185	   nonstandard, ironic, or humorous way.  Originated in the fannish
  9186	   catchphrase "Bheer is the One True Ghod!" from decades ago.
  9187	   H-infix marking of `Ghod' and other words spread into the 1960s
  9188	   counterculture via underground comix, and into early hackerdom
  9189	   either from the counterculture or from SF fandom (the three
  9190	   overlapped heavily at the time).  More recently, the h infix has
  9191	   become an expected feature of benchmark names (Dhrystone,
  9192	   Rhealstone, etc.); this is prob. patterning on the original
  9193	   Whetstone (the name of a laboratory) but influenced by the
  9194	   fannish/counterculture h infix.
  9195	
  9196	:ha ha only serious: [from SF fandom, orig. as mutation of HHOK,
  9197	   `Ha Ha Only Kidding'] A phrase (often seen abbreviated as HHOS)
  9198	   that aptly captures the flavor of much hacker discourse.  Applied
  9199	   especially to parodies, absurdities, and ironic jokes that are both
  9200	   intended and perceived to contain a possibly disquieting amount of
  9201	   truth, or truths that are constructed on in-joke and self-parody.
  9202	   This lexicon contains many examples of ha-ha-only-serious in both
  9203	   form and content.  Indeed, the entirety of hacker culture is often
  9204	   perceived as ha-ha-only-serious by hackers themselves; to take it
  9205	   either too lightly or too seriously marks a person as an outsider,
  9206	   a {wannabee}, or in {larval stage}.  For further
  9207	   enlightenment on this subject, consult any Zen master.  See also
  9208	   {{Humor, Hacker}}, and {AI koans}.
  9209	
  9210	:hack: 1. n. Originally, a quick job that produces what is needed,
  9211	   but not well.  2. n. An incredibly good, and perhaps very
  9212	   time-consuming, piece of work that produces exactly what is needed.
  9213	   3. vt. To bear emotionally or physically.  "I can't hack this
  9214	   heat!"  4. vt. To work on something (typically a program).  In an
  9215	   immediate sense: "What are you doing?"  "I'm hacking TECO."
  9216	   In a general (time-extended) sense: "What do you do around here?"
  9217	   "I hack TECO."  More generally, "I hack `foo'" is roughly
  9218	   equivalent to "`foo' is my major interest (or project)".  "I
  9219	   hack solid-state physics."  5. vt. To pull a prank on.  See
  9220	   sense 2 and {hacker} (sense 5).  6. vi. To interact with a
  9221	   computer in a playful and exploratory rather than goal-directed
  9222	   way.  "Whatcha up to?"  "Oh, just hacking."  7. n. Short for
  9223	   {hacker}.  8. See {nethack}.  9. [MIT] v. To explore
  9224	   the basements, roof ledges, and steam tunnels of a large,
  9225	   institutional building, to the dismay of Physical Plant workers and
  9226	   (since this is usually performed at educational institutions) the
  9227	   Campus Police.  This activity has been found to be eerily similar
  9228	   to playing adventure games such as Dungeons and Dragons and {Zork}.
  9229	   See also {vadding}.
  9230	
  9231	   Constructions on this term abound.  They include `happy hacking'
  9232	   (a farewell), `how's hacking?' (a friendly greeting among
  9233	   hackers) and `hack, hack' (a fairly content-free but friendly
  9234	   comment, often used as a temporary farewell).  For more on this
  9235	   totipotent term see "{The Meaning of `Hack'}".  See
  9236	   also {neat hack}, {real hack}.
  9237	
  9238	:hack attack: [poss. by analogy with `Big Mac Attack' from ads
  9239	   for the McDonald's fast-food chain; the variant `big hack attack'
  9240	   is reported] n. Nearly synonymous with {hacking run}, though the
  9241	   latter more strongly implies an all-nighter.
  9242	
  9243	:hack mode: n. 1. What one is in when hacking, of course.  2. More
  9244	   specifically, a Zen-like state of total focus on The Problem that
  9245	   may be achieved when one is hacking (this is why every good hacker
  9246	   is part mystic).  Ability to enter such concentration at will
  9247	   correlates strongly with wizardliness; it is one of the most
  9248	   important skills learned during {larval stage}.  Sometimes
  9249	   amplified as `deep hack mode'.
  9250	
  9251	   Being yanked out of hack mode (see {priority interrupt}) may be
  9252	   experienced as a physical shock, and the sensation of being in it
  9253	   is more than a little habituating.  The intensity of this
  9254	   experience is probably by itself sufficient explanation for the
  9255	   existence of hackers, and explains why many resist being promoted
  9256	   out of positions where they can code.  See also {cyberspace}
  9257	   (sense 2).
  9258	
  9259	   Some aspects of hackish etiquette will appear quite odd to an
  9260	   observer unaware of the high value placed on hack mode.  For
  9261	   example, if someone appears at your door, it is perfectly okay to
  9262	   hold up a hand (without turning one's eyes away from the screen) to
  9263	   avoid being interrupted.  One may read, type, and interact with the
  9264	   computer for quite some time before further acknowledging the
  9265	   other's presence (of course, he or she is reciprocally free to
  9266	   leave without a word).  The understanding is that you might be in
  9267	   {hack mode} with a lot of delicate {state} (sense 2) in your
  9268	   head, and you dare not {swap} that context out until you have
  9269	   reached a good point to pause. See also {juggling eggs}.
  9270	
  9271	:hack on: vt. To {hack}; implies that the subject is some
  9272	   pre-existing hunk of code that one is evolving, as opposed to
  9273	   something one might {hack up}.
  9274	
  9275	:hack together: vt. To throw something together so it will work.
  9276	   Unlike `kluge together' or {cruft together}, this does not
  9277	   necessarily have negative connotations.
  9278	
  9279	:hack up: vt. To {hack}, but generally implies that the result is
  9280	   a hack in sense 1 (a quick hack).  Contrast this with {hack on}.
  9281	   To `hack up on' implies a {quick-and-dirty} modification to an
  9282	   existing system.  Contrast {hacked up}; compare {kluge up},
  9283	   {monkey up}, {cruft together}.
  9284	
  9285	:hack value: n. Often adduced as the reason or motivation for
  9286	   expending effort toward a seemingly useless goal, the point being
  9287	   that the accomplished goal is a hack.  For example, MacLISP had
  9288	   features for reading and printing Roman numerals, which were
  9289	   installed purely for hack value.  See {display hack} for one
  9290	   method of computing hack value, but this cannot really be
  9291	   explained.  As a great artist once said of jazz: "If you hafta ask,
  9292	   you ain't never goin' to find out."
  9293	
  9294	:hack-and-slay: v. (also `hack-and-slash') 1. To play a {MUD}
  9295	   or go mudding, especially with the intention of {berserking} for
  9296	   pleasure.  2. To undertake an all-night programming/hacking
  9297	   session, interspersed with stints of mudding as a change of pace.
  9298	   This term arose on the British academic network amongst students
  9299	   who worked nights and logged onto Essex University's MUDs during
  9300	   public-access hours (2 A.M. to 7 A.M.).  Usually more
  9301	   mudding than work was done in these sessions.
  9302	
  9303	:hacked off: [analogous to `pissed off'] adj. Said of system
  9304	   administrators who have become annoyed, upset, or touchy owing to
  9305	   suspicions that their sites have been or are going to be victimized
  9306	   by crackers, or used for inappropriate, technically illegal, or
  9307	   even overtly criminal activities.  For example, having unreadable
  9308	   files in your home directory called `worm', `lockpick', or `goroot'
  9309	   would probably be an effective (as well as impressively obvious and
  9310	   stupid) way to get your sysadmin hacked off at you.
  9311	
  9312	:hacked up: adj. Sufficiently patched, kluged, and tweaked that the
  9313	   surgical scars are beginning to crowd out normal tissue (compare
  9314	   {critical mass}).  Not all programs that are hacked become
  9315	   `hacked up'; if modifications are done with some eye to coherence
  9316	   and continued maintainability, the software may emerge better for
  9317	   the experience.  Contrast {hack up}.
  9318	
  9319	:hacker: [originally, someone who makes furniture with an axe] n.
  9320	   1. A person who enjoys exploring the details of programmable
  9321	   systems and how to stretch their capabilities, as opposed to most
  9322	   users, who prefer to learn only the minimum necessary.  2. One who
  9323	   programs enthusiastically (even obsessively) or who enjoys
  9324	   programming rather than just theorizing about programming.  3. A
  9325	   person capable of appreciating {hack value}.  4. A person who is
  9326	   good at programming quickly.  5. An expert at a particular program,
  9327	   or one who frequently does work using it or on it; as in `a UNIX
  9328	   hacker'.  (Definitions 1 through 5 are correlated, and people who
  9329	   fit them congregate.)  6. An expert or enthusiast of any kind.  One
  9330	   might be an astronomy hacker, for example.  7. One who enjoys the
  9331	   intellectual challenge of creatively overcoming or circumventing
  9332	   limitations.  8. [deprecated] A malicious meddler who tries to
  9333	   discover sensitive information by poking around.  Hence `password
  9334	   hacker', `network hacker'.  See {cracker}.
  9335	
  9336	   The term `hacker' also tends to connote membership in the global
  9337	   community defined by the net (see {network, the} and
  9338	   {Internet address}).  It also implies that the person described
  9339	   is seen to subscribe to some version of the hacker ethic (see
  9340	   {hacker ethic, the}.
  9341	
  9342	   It is better to be described as a hacker by others than to describe
  9343	   oneself that way.  Hackers consider themselves something of an
  9344	   elite (a meritocracy based on ability), though one to which new
  9345	   members are gladly welcome.  There is thus a certain ego
  9346	   satisfaction to be had in identifying yourself as a hacker (but if
  9347	   you claim to be one and are not, you'll quickly be labeled
  9348	   {bogus}).  See also {wannabee}.
  9349	
  9350	:hacker ethic, the: n.  1. The belief that information-sharing
  9351	   is a powerful positive good, and that it is an ethical duty of
  9352	   hackers to share their expertise by writing free software and
  9353	   facilitating access to information and to computing resources
  9354	   wherever possible.  2. The belief that system-cracking for fun
  9355	   and exploration is ethically OK as long as the cracker commits
  9356	   no theft, vandalism, or breach of confidentiality.
  9357	  
  9358	   Both of these normative ethical principles are widely, but by no
  9359	   means universally) accepted among hackers. Most hackers subscribe
  9360	   to the hacker ethic in sense 1, and many act on it by writing and
  9361	   giving away free software.  A few go further and assert that
  9362	   *all* information should be free and *any* proprietary
  9363	   control of it is bad; this is the philosophy behind the {GNU}
  9364	   project.
  9365	
  9366	   Sense 2 is more controversial: some people consider the act of
  9367	   cracking itself to be unethical, like breaking and entering.
  9368	   But this principle at least moderates the behavior of people who
  9369	   see themselves as `benign' crackers (see also {samurai}).  On
  9370	   this view, it is one of the highest forms of hackerly courtesy
  9371	   to (a) break into a system, and then (b) explain to the sysop,
  9372	   preferably by email from a {superuser} account, exactly how it
  9373	   was done and how the hole can be plugged --- acting as an
  9374	   unpaid (and unsolicited) {tiger team}.
  9375	
  9376	   The most reliable manifestation of either version of the hacker
  9377	   ethic is that almost all hackers are actively willing to share
  9378	   technical tricks, software, and (where possible) computing
  9379	   resources with other hackers.  Huge cooperative networks such as
  9380	   {USENET}, {Fidonet} and Internet (see {Internet address})
  9381	   can function without central control because of this trait; they
  9382	   both rely on and reinforce a sense of community that may be
  9383	   hackerdom's most valuable intangible asset.
  9384	
  9385	:hacking run: [analogy with `bombing run' or `speed run'] n. A
  9386	   hack session extended long outside normal working times, especially
  9387	   one longer than 12 hours.  May cause you to `change phase the hard
  9388	   way' (see {phase}).
  9389	
  9390	:Hacking X for Y: [ITS] n. The information ITS made publicly
  9391	   available about each user (the INQUIR record) was a sort of form in
  9392	   which the user could fill out fields.  On display, two of these
  9393	   fields were combined into a project description of the form
  9394	   "Hacking X for Y" (e.g., `"Hacking perceptrons for
  9395	   Minsky"').  This form of description became traditional and has
  9396	   since been carried over to other systems with more general
  9397	   facilities for self-advertisement (such as UNIX {plan file}s).
  9398	
  9399	:Hackintosh: n. 1. An Apple Lisa that has been hacked into emulating a
  9400	   Macintosh (also called a `Mac XL').  2. A Macintosh assembled
  9401	   from parts theoretically belonging to different models in the line.
  9402	
  9403	:hackish: /hak'ish/ adj. (also {hackishness} n.) 1. Said of
  9404	   something that is or involves a hack.  2. Of or pertaining to
  9405	   hackers or the hacker subculture.  See also {true-hacker}.
  9406	
  9407	:hackishness: n. The quality of being or involving a hack.  This
  9408	   term is considered mildly silly.  Syn.  {hackitude}.
  9409	
  9410	:hackitude: n. Syn. {hackishness}; this word is considered sillier.
  9411	
  9412	:hair: [back-formation from {hairy}] n. The complications that
  9413	   make something hairy.  "Decoding {TECO} commands requires a
  9414	   certain amount of hair."  Often seen in the phrase `infinite
  9415	   hair', which connotes extreme complexity.  Also in `hairiferous'
  9416	   (tending to promote hair growth): "GNUMACS elisp encourages lusers
  9417	   to write complex editing modes."  "Yeah, it's pretty hairiferous
  9418	   all right." (or just: "Hair squared!")
  9419	
  9420	:hairy: adj. 1. Annoyingly complicated.  "{DWIM} is incredibly
  9421	   hairy."  2. Incomprehensible.  "{DWIM} is incredibly hairy."
  9422	   3. Of people, high-powered, authoritative, rare, expert, and/or
  9423	   incomprehensible.  Hard to explain except in context: "He knows
  9424	   this hairy lawyer who says there's nothing to worry about."  See
  9425	   also {hirsute}.
  9426	
  9427	   The adjective `long-haired' is well-attested to have been in
  9428	   slang use among scientists and engineers during the early 1950s; it
  9429	   was equivalent to modern `hairy' senses 1 and 2, and was very
  9430	   likely ancestral to the hackish use.  In fact the noun
  9431	   `long-hair' was at the time used to describe a person satisfying
  9432	   sense 3.  Both senses probably passed out of use when long hair
  9433	   was adopted as a signature trait by the 1960s counterculture,
  9434	   leaving hackish `hairy' as a sort of stunted mutant relic.
  9435	
  9436	:HAKMEM: /hak'mem/ n. MIT AI Memo 239 (February 1972).  A
  9437	   legendary collection of neat mathematical and programming hacks
  9438	   contributed by many people at MIT and elsewhere.  (The title of the
  9439	   memo really is "HAKMEM", which is a 6-letterism for `hacks
  9440	   memo'.)  Some of them are very useful techniques, powerful
  9441	   theorems, or interesting unsolved problems, but most fall into the
  9442	   category of mathematical and computer trivia.  Here is a sampling
  9443	   of the entries (with authors), slightly paraphrased:
  9444	
  9445	   Item 41 (Gene Salamin): There are exactly 23,000 prime numbers less
  9446	   than 2^18.
  9447	
  9448	   Item 46 (Rich Schroeppel): The most *probable* suit
  9449	   distribution in bridge hands is 4-4-3-2, as compared to 4-3-3-3,
  9450	   which is the most *evenly* distributed.  This is because the
  9451	   world likes to have unequal numbers: a thermodynamic effect saying
  9452	   things will not be in the state of lowest energy, but in the state
  9453	   of lowest disordered energy.
  9454	
  9455	   Item 81 (Rich Schroeppel): Count the magic squares of order 5
  9456	   (that is, all the 5-by-5 arrangements of the numbers from 1 to 25
  9457	   such that all rows, columns, and diagonals add up to the same
  9458	   number).  There are about 320 million, not counting those that
  9459	   differ only by rotation and reflection.
  9460	
  9461	   Item 154 (Bill Gosper): The myth that any given programming
  9462	   language is machine independent is easily exploded by computing the
  9463	   sum of powers of 2.  If the result loops with period = 1
  9464	   with sign +, you are on a sign-magnitude machine.  If the
  9465	   result loops with period = 1 at -1, you are on a
  9466	   twos-complement machine.  If the result loops with period greater
  9467	   than 1, including the beginning, you are on a ones-complement
  9468	   machine.  If the result loops with period greater than 1, not
  9469	   including the beginning, your machine isn't binary --- the pattern
  9470	   should tell you the base.  If you run out of memory, you are on a
  9471	   string or bignum system.  If arithmetic overflow is a fatal error,
  9472	   some fascist pig with a read-only mind is trying to enforce machine
  9473	   independence.  But the very ability to trap overflow is machine
  9474	   dependent.  By this strategy, consider the universe, or, more
  9475	   precisely, algebra: Let X = the sum of many powers of 2 =
  9476	   ...111111.  Now add X to itself:
  9477	   X + X = ...111110 Thus, 2X = X - 1, so
  9478	   X = -1.  Therefore algebra is run on a machine (the
  9479	   universe) that is two's-complement.
  9480	
  9481	   Item 174 (Bill Gosper and Stuart Nelson): 21963283741 is the only
  9482	   number such that if you represent it on the {PDP-10} as both an
  9483	   integer and a floating-point number, the bit patterns of the two
  9484	   representations are identical.
  9485	
  9486	   Item 176 (Gosper): The "banana phenomenon" was encountered when
  9487	   processing a character string by taking the last 3 letters typed
  9488	   out, searching for a random occurrence of that sequence in the
  9489	   text, taking the letter following that occurrence, typing it out,
  9490	   and iterating.  This ensures that every 4-letter string output
  9491	   occurs in the original.  The program typed BANANANANANANANA....  We
  9492	   note an ambiguity in the phrase, "the Nth occurrence of."  In one
  9493	   sense, there are five 00's in 0000000000; in another, there are
  9494	   nine.  The editing program TECO finds five.  Thus it finds only the
  9495	   first ANA in BANANA, and is thus obligated to type N next.  By
  9496	   Murphy's Law, there is but one NAN, thus forcing A, and thus a
  9497	   loop.  An option to find overlapped instances would be useful,
  9498	   although it would require backing up N - 1 characters before
  9499	   seeking the next N-character string.
  9500	
  9501	   Note: This last item refers to a {Dissociated Press}
  9502	   implementation.  See also {banana problem}.
  9503	
  9504	   HAKMEM also contains some rather more complicated mathematical and
  9505	   technical items, but these examples show some of its fun flavor.
  9506	
  9507	:hakspek: /hak'speek/ n. A shorthand method of spelling found on
  9508	   many British academic bulletin boards and {talker system}s.
  9509	   Syllables and whole words in a sentence are replaced by single
  9510	   ASCII characters the names of which are phonetically similar or
  9511	   equivalent, while multiple letters are usually dropped.  Hence,
  9512	   `for' becomes `4'; `two', `too', and `to' become `2'; `ck'
  9513	   becomes `k'.  "Before I see you tomorrow" becomes "b4 i c u
  9514	   2moro".  First appeared in London about 1986, and was probably
  9515	   caused by the slowness of available talker systems, which
  9516	   operated on archaic machines with outdated operating systems and
  9517	   no standard methods of communication.  Has become rarer since.
  9518	   See also {talk mode}.
  9519	
  9520	:hammer: vt. Commonwealth hackish syn. for {bang on}.
  9521	
  9522	:hamster: n. 1. [Fairchild] A particularly slick little piece of
  9523	   code that does one thing well; a small, self-contained hack.  The
  9524	   image is of a hamster happily spinning its exercise wheel.  2. A
  9525	   tailless mouse; that is, one with an infrared link to a receiver on
  9526	   the machine, as opposed to the conventional cable.  3. [UK] Any
  9527	   item of hardware made by Amstrad, a company famous for its cheap
  9528	   plastic PC-almost-compatibles.
  9529	
  9530	:hand-hacking: n. 1. The practice of translating {hot spot}s from
  9531	   an {HLL} into hand-tuned assembler, as opposed to trying to
  9532	   coerce the compiler into generating better code.  Both the term and
  9533	   the practice are becoming uncommon.  See {tune}, {bum}, {by
  9534	   hand}; syn.  with v. {cruft}.  2. More generally, manual
  9535	   construction or patching of data sets that would normally be
  9536	   generated by a translation utility and interpreted by another
  9537	   program, and aren't really designed to be read or modified by
  9538	   humans.
  9539	
  9540	:handle: [from CB slang] n.  An electronic pseudonym; a `nom de
  9541	   guerre' intended to conceal the user's true identity.  Network and
  9542	   BBS handles function as the same sort of simultaneous concealment
  9543	   and display one finds on Citizen's Band radio, from which the term
  9544	   was adopted.  Use of grandiose handles is characteristic of
  9545	   {cracker}s, {weenie}s, {spod}s, and other lower forms of
  9546	   network life; true hackers travel on their own reputations rather
  9547	   than invented legendry.
  9548	
  9549	:hand-roll: [from obs. mainstream slang `hand-rolled' in
  9550	   opposition to `ready-made', referring to cigarettes] v. To
  9551	   perform a normally automated software installation or configuration
  9552	   process {by hand}; implies that the normal process failed due to
  9553	   bugs in the configurator or was defeated by something exceptional
  9554	   in the local environment.  "The worst thing about being a gateway
  9555	   between four different nets is having to hand-roll a new sendmail
  9556	   configuration every time any of them upgrades."
  9557	
  9558	:handshaking: n. Hardware or software activity designed to start or
  9559	   keep two machines or programs in synchronization as they {do
  9560	   protocol}.  Often applied to human activity; thus, a hacker might
  9561	   watch two people in conversation nodding their heads to indicate
  9562	   that they have heard each others' points and say "Oh, they're
  9563	   handshaking!".  See also {protocol}.
  9564	
  9565	:handwave: [poss. from gestures characteristic of stage magicians]
  9566	   1. v. To gloss over a complex point; to distract a listener; to
  9567	   support a (possibly actually valid) point with blatantly faulty
  9568	   logic.  2. n. The act of handwaving.  "Boy, what a handwave!"
  9569	
  9570	   If someone starts a sentence with "Clearly..." or
  9571	   "Obviously..." or "It is self-evident that...", it is
  9572	   a good bet he is about to handwave (alternatively, use of these
  9573	   constructions in a sarcastic tone before a paraphrase of someone
  9574	   else's argument suggests that it is a handwave).  The theory behind
  9575	   this term is that if you wave your hands at the right moment, the
  9576	   listener may be sufficiently distracted to not notice that what you
  9577	   have said is {bogus}.  Failing that, if a listener does object,
  9578	   you might try to dismiss the objection with a wave of your hand.
  9579	
  9580	   The use of this word is often accompanied by gestures: both hands
  9581	   up, palms forward, swinging the hands in a vertical plane pivoting
  9582	   at the elbows and/or shoulders (depending on the magnitude of the
  9583	   handwave); alternatively, holding the forearms in one position
  9584	   while rotating the hands at the wrist to make them flutter.  In
  9585	   context, the gestures alone can suffice as a remark; if a speaker
  9586	   makes an outrageously unsupported assumption, you might simply wave
  9587	   your hands in this way, as an accusation, far more eloquent than
  9588	   words could express, that his logic is faulty.
  9589	
  9590	:hang: v. 1. To wait for an event that will never occur.  "The
  9591	   system is hanging because it can't read from the crashed drive".
  9592	   See {wedged}, {hung}.  2. To wait for some event to occur; to
  9593	   hang around until something happens.  "The program displays a menu
  9594	   and then hangs until you type a character."  Compare {block}.
  9595	   3. To attach a peripheral device, esp. in the construction `hang
  9596	   off':  "We're going to hang another tape drive off the file
  9597	   server."  Implies a device attached with cables, rather than
  9598	   something that is strictly inside the machine's chassis.
  9599	
  9600	:Hanlon's Razor: prov. A corollary of {Finagle's Law}, similar to
  9601	   Occam's Razor, that reads "Never attribute to malice that which can
  9602	   be adequately explained by stupidity."  The derivation of the
  9603	   common title Hanlon's Razor is unknown; a similar epigram has been
  9604	   attributed to William James.  Quoted here because it seems to be a
  9605	   particular favorite of hackers, often showing up in {fortune
  9606	   cookie} files and the login banners of BBS systems and commercial
  9607	   networks.  This probably reflects the hacker's daily experience of
  9608	   environments created by well-intentioned but short-sighted people.
  9609	
  9610	:happily: adv.  Of software, used to emphasize that a program is
  9611	   unaware of some important fact about its environment, either
  9612	   because it has been fooled into believing a lie, or because it
  9613	   doesn't care.  The sense of `happy' here is not that of elation,
  9614	   but rather that of blissful ignorance.  "The program continues to
  9615	   run, happily unaware that its output is going to /dev/null."
  9616	
  9617	:haque: /hak/ [USENET] n. Variant spelling of {hack}, used
  9618	   only for the noun form and connoting an {elegant} hack.
  9619	
  9620	:hard boot: n. See {boot}.
  9621	
  9622	:hardcoded: adj. 1. Said of data inserted directly into a program,
  9623	   where it cannot be easily modified, as opposed to data in some
  9624	   {profile}, resource (see {de-rezz} sense 2), or environment
  9625	   variable that a {user} or hacker can easily modify.  2. In C,
  9626	   this is esp. applied to use of a literal instead of a
  9627	   `#define' macro (see {magic number}).
  9628	
  9629	:hardwarily: /hard-weir'*-lee/ adv. In a way pertaining to
  9630	   hardware.  "The system is hardwarily unreliable."  The adjective
  9631	   `hardwary' is *not* traditionally used, though it has recently
  9632	   been reported from the U.K.  See {softwarily}.
  9633	
  9634	:hardwired: adj. 1. In software, syn. for {hardcoded}.  2. By
  9635	   extension, anything that is not modifiable, especially in the sense
  9636	   of customizable to one's particular needs or tastes.
  9637	
  9638	:has the X nature: [seems to derive from Zen Buddhist koans of the
  9639	   form "Does an X have the Buddha-nature?"] adj. Common hacker
  9640	   construction for `is an X', used for humorous emphasis.  "Anyone
  9641	   who can't even use a program with on-screen help embedded in it
  9642	   truly has the {loser} nature!"  See also {the X that can be Y
  9643	   is not the true X}.
  9644	
  9645	:hash bucket: n. A notional receptacle into which more than one
  9646	   thing accessed by the same key or short code might be dropped.
  9647	   When you look up a name in the phone book (for example), you
  9648	   typically hash it by extracting its first letter; the hash buckets
  9649	   are the alphabetically ordered letter sections.  This is used as
  9650	   techspeak with respect to code that uses actual hash functions; in
  9651	   jargon, it is used for human associative memory as well.  Thus, two
  9652	   things `in the same hash bucket' may be confused with each other.
  9653	   "If you hash English words only by length, you get too many common
  9654	   grammar words in the first couple of hash buckets." Compare {hash
  9655	   collision}.
  9656	
  9657	:hash collision: [from the technical usage] n. (var. `hash
  9658	   clash') When used of people, signifies a confusion in associative
  9659	   memory or imagination, especially a persistent one (see
  9660	   {thinko}).  True story: One of us [ESR] was once on the phone
  9661	   with a friend about to move out to Berkeley.  When asked what he
  9662	   expected Berkeley to be like, the friend replied: "Well, I have
  9663	   this mental picture of naked women throwing Molotov cocktails, but
  9664	   I think that's just a collision in my hash tables."  Compare
  9665	   {hash bucket}.
  9666	
  9667	:hat: n. Common (spoken) name for the circumflex (`^', ASCII
  9668	   1011110) character.  See {ASCII} for other synonyms.
  9669	
  9670	:HCF: /H-C-F/ n. Mnemonic for `Halt and Catch Fire', any of
  9671	   several undocumented and semi-mythical machine instructions with
  9672	   destructive side-effects, supposedly included for test purposes on
  9673	   several well-known architectures going as far back as the IBM 360.
  9674	   The MC6800 microprocessor was the first for which an HCF opcode
  9675	   became widely known.  This instruction caused the processor to
  9676	   {toggle} a subset of the bus lines as rapidly as it could; in
  9677	   some configurations this could actually cause lines to burn
  9678	   up.
  9679	
  9680	:heads down: [Sun] adj. Concentrating, usually so heavily and for so
  9681	   long that everything outside the focus area is missed.  See also
  9682	   {hack mode} and {larval stage}, although it is not confined to
  9683	   fledgling hackers.
  9684	
  9685	:heartbeat: n. 1. The signal emitted by a Level 2 Ethernet
  9686	   transceiver at the end of every packet to show that the
  9687	   collision-detection circuit is still connected.  2. A periodic
  9688	   synchronization signal used by software or hardware, such as a bus
  9689	   clock or a periodic interrupt.  3. The `natural' oscillation
  9690	   frequency of a computer's clock crystal, before frequency division
  9691	   down to the machine's clock rate.  4. A signal emitted at regular
  9692	   intervals by software to demonstrate that it is still alive.
  9693	   Sometimes hardware is designed to reboot the machine if it stops
  9694	   hearing a heartbeat.  See also {breath-of-life packet}.
  9695	
  9696	:heatseeker: [IBM] n. A customer who can be relied upon to always
  9697	   buy the latest version of an existing product (not quite the same
  9698	   as a member the {lunatic fringe}).  A 1992 example of a
  9699	   heatseeker is someone who, owning a 286 PC and Windows 3.0, goes
  9700	   out and buys Windows 3.1 (which offers no worthwhile benefits
  9701	   unless you have a 386).  If all customers were heatseekers, vast
  9702	   amounts of money could be made by just fixing the bugs in each
  9703	   release (n) and selling it to them as release (n+1).
  9704	
  9705	:heavy metal: [Cambridge] n. Syn. {big iron}.
  9706	
  9707	:heavy wizardry: n. Code or designs that trade on a particularly
  9708	   intimate knowledge or experience of a particular operating system
  9709	   or language or complex application interface.  Distinguished from
  9710	   {deep magic}, which trades more on arcane *theoretical*
  9711	   knowledge.  Writing device drivers is heavy wizardry; so is
  9712	   interfacing to {X} (sense 2) without a toolkit.  Esp. found in
  9713	   comments similar to "Heavy wizardry begins here ...".  Compare
  9714	   {voodoo programming}.
  9715	
  9716	:heavyweight: adj. High-overhead; {baroque}; code-intensive;
  9717	   featureful, but costly.  Esp. used of communication protocols,
  9718	   language designs, and any sort of implementation in which maximum
  9719	   generality and/or ease of implementation has been pushed at the
  9720	   expense of mundane considerations such as speed, memory
  9721	   utilization, and startup time.  {EMACS} is a heavyweight editor;
  9722	   {X} is an *extremely* heavyweight window system.  This term
  9723	   isn't pejorative, but one man's heavyweight is another's
  9724	   {elephantine} and a third's {monstrosity}.  Oppose
  9725	   `lightweight'.  Usage: now borders on techspeak, especially in
  9726	   the compound `heavyweight process'.
  9727	
  9728	:heisenbug: /hi:'zen-buhg/ [from Heisenberg's Uncertainty
  9729	   Principle in quantum physics] n. A bug that disappears or alters
  9730	   its behavior when one attempts to probe or isolate it.  Antonym of
  9731	   {Bohr bug}; see also {mandelbug}, {schroedinbug}.  In C,
  9732	   nine out of ten heisenbugs result from either {fandango on core}
  9733	   phenomena (esp. lossage related to corruption of the malloc
  9734	   {arena}) or errors that {smash the stack}.
  9735	
  9736	:Helen Keller mode: n. 1. State of a hardware or software system
  9737	   that is deaf, dumb, and blind, i.e., accepting no input and
  9738	   generating no output, usually due to an infinite loop or some other
  9739	   excursion into {deep space}.  (Unfair to the real Helen Keller,
  9740	   whose success at learning speech was triumphant.)  See also
  9741	   {go flatline}, {catatonic}.  2. On IBM PCs under DOS, refers
  9742	   to a specific failure mode in which a screen saver has kicked in
  9743	   over an {ill-behaved} application which bypasses the interrupts
  9744	   the screen saver watches for activity.  Your choices are to try to
  9745	   get from the program's current state through a successful
  9746	   save-and-exit without being able to see what you're doing, or
  9747	   re-boot the machine.  This isn't (strictly speaking) a crash.
  9748	
  9749	:hello, sailor!: interj. Occasional West Coast equivalent of
  9750	   {hello, world}; seems to have originated at SAIL, later
  9751	   associated with the game {Zork} (which also included "hello,
  9752	   aviator" and "hello, implementor").  Originally from the
  9753	   traditional hooker's greeting to a swabbie fresh off the boat, of
  9754	   course.
  9755	
  9756	:hello, wall!: excl. See {wall}.
  9757	
  9758	:hello, world: interj. 1. The canonical minimal test message in the
  9759	   C/UNIX universe.  2. Any of the minimal programs that emit this
  9760	   message.  Traditionally, the first program a C coder is supposed to
  9761	   write in a new environment is one that just prints "hello, world"
  9762	   to standard output (and indeed it is the first example program
  9763	   in {K&R}).  Environments that generate an unreasonably large
  9764	   executable for this trivial test or which require a {hairy}
  9765	   compiler-linker invocation to generate it are considered to
  9766	   {lose} (see {X}).  3. Greeting uttered by a hacker making an
  9767	   entrance or requesting information from anyone present.  "Hello,
  9768	   world!  Is the {VAX} back up yet?"
  9769	
  9770	:hex: n. 1. Short for {{hexadecimal}}, base 16.  2. A 6-pack
  9771	   of anything (compare {quad}, sense 2).  Neither usage has
  9772	   anything to do with {magic} or {black art}, though the pun is
  9773	   appreciated and occasionally used by hackers.  True story: As a
  9774	   joke, some hackers once offered some surplus ICs for sale to be
  9775	   worn as protective amulets against hostile magic.  The chips were,
  9776	   of course, hex inverters.
  9777	
  9778	:hexadecimal:: n. Base 16.  Coined in the early 1960s to replace
  9779	   earlier `sexadecimal', which was too racy and amusing for stuffy
  9780	   IBM, and later adopted by the rest of the industry.
  9781	
  9782	   Actually, neither term is etymologically pure.  If we take `binary'
  9783	   to be paradigmatic, the most etymologically correct term for
  9784	   base 10, for example, is `denary', which
  9785	   comes from `deni' (ten at a time, ten each), a Latin `distributive'
  9786	   number; the corresponding term for base-16 would be something like
  9787	   `sendenary'.  `Decimal' is from an ordinal number; the
  9788	   corresponding prefix for 6 would imply something like
  9789	   `sextidecimal'.  The `sexa-' prefix is Latin but incorrect in this
  9790	   context, and `hexa-' is Greek.  The word `octal' is similarly
  9791	   incorrect; a correct form would be `octaval' (to go with decimal),
  9792	   or `octonary' (to go with binary).  If anyone ever implements a
  9793	   base-3 computer, computer scientists will be faced with the
  9794	   unprecedented dilemma of a choice between two *correct* forms;
  9795	   both `ternary' and `trinary' have a claim to this throne.
  9796	
  9797	:hexit: /hek'sit/ n. A hexadecimal digit (0--9, and A--F or a--f).
  9798	   Used by people who claim that there are only *ten* digits,
  9799	   dammit; sixteen-fingered human beings are rather rare, despite what
  9800	   some keyboard designs might seem to imply (see {space-cadet
  9801	   keyboard}).
  9802	
  9803	:HHOK: See {ha ha only serious}.
  9804	
  9805	:HHOS: See {ha ha only serious}.
  9806	
  9807	:hidden flag: [scientific computation] n. An extra option added to a
  9808	   routine without changing the calling sequence.  For example,
  9809	   instead of adding an explicit input variable to instruct a routine
  9810	   to give extra diagnostic output, the programmer might just add a
  9811	   test for some otherwise meaningless feature of the existing inputs,
  9812	   such as a negative mass.  Liberal use of hidden flags can make a
  9813	   program very hard to debug and understand.
  9814	
  9815	:high bit: [from `high-order bit'] n. 1. The most significant
  9816	   bit in a byte.  2. By extension, the most significant part of
  9817	   something other than a data byte: "Spare me the whole {saga},
  9818	   just give me the high bit."  See also {meta bit}, {hobbit},
  9819	   {dread high-bit disease}, and compare the mainstream slang
  9820	   `bottom line'.
  9821	
  9822	:high moby: /hi:' mohb'ee/ n. The high half of a 512K
  9823	   {PDP-10}'s physical address space; the other half was of course
  9824	   the low moby.  This usage has been generalized in a way that has
  9825	   outlasted the {PDP-10}; for example, at the 1990 Washington D.C.
  9826	   Area Science Fiction Conclave (Disclave), when a miscommunication
  9827	   resulted in two separate wakes being held in commemoration of the
  9828	   shutdown of MIT's last {{ITS}} machines, the one on the upper
  9829	   floor was dubbed the `high moby' and the other the `low moby'.
  9830	   All parties involved {grok}ked this instantly.  See {moby}.
  9831	
  9832	:highly: [scientific computation] adv. The preferred modifier for
  9833	   overstating an understatement.  As in: `highly nonoptimal', the
  9834	   worst possible way to do something; `highly nontrivial', either
  9835	   impossible or requiring a major research project; `highly
  9836	   nonlinear', completely erratic and unpredictable; `highly
  9837	   nontechnical', drivel written for {luser}s, oversimplified to the
  9838	   point of being misleading or incorrect (compare {drool-proof
  9839	   paper}).  In other computing cultures, postfixing of {in the
  9840	   extreme} might be preferred.
  9841	
  9842	:hing: // [IRC] n. Fortuitous typo for `hint', now in wide
  9843	   intentional use among players of {initgame}.  Compare
  9844	   {newsfroup}, {filk}.
  9845	
  9846	:hirsute: adj. Occasionally used humorously as a synonym for {hairy}.
  9847	
  9848	:HLL: /H-L-L/ n. [High-Level Language (as opposed to assembler)]
  9849	   Found primarily in email and news rather than speech.  Rarely, the
  9850	   variants `VHLL' and `MLL' are found.  VHLL stands for
  9851	   `Very-High-Level Language' and is used to describe a
  9852	   {bondage-and-discipline language} that the speaker happens to
  9853	   like; Prolog and Backus's FP are often called VHLLs.  `MLL' stands
  9854	   for `Medium-Level Language' and is sometimes used half-jokingly to
  9855	   describe {C}, alluding to its `structured-assembler' image.
  9856	   See also {languages of choice}.
  9857	
  9858	:hobbit: n. 1. The High Order Bit of a byte; same as the {meta
  9859	   bit} or {high bit}.  2. The non-ITS name of vad@ai.mit.edu
  9860	   (*Hobbit*), master of lasers.
  9861	
  9862	:hog: n.,vt. 1. Favored term to describe programs or hardware that
  9863	   seem to eat far more than their share of a system's resources,
  9864	   esp. those which noticeably degrade interactive response.
  9865	   *Not* used of programs that are simply extremely large or
  9866	   complex or that are merely painfully slow themselves (see {pig,
  9867	   run like a}).  More often than not encountered in qualified forms,
  9868	   e.g., `memory hog', `core hog', `hog the processor', `hog
  9869	   the disk'.  "A controller that never gives up the I/O bus
  9870	   gets killed after the bus-hog timer expires."   2. Also said
  9871	   of *people* who use more than their fair share of resources
  9872	   (particularly disk, where it seems that 10% of the people use 90%
  9873	   of the disk, no matter how big the disk is or how many people use
  9874	   it).  Of course, once disk hogs fill up one filesystem, they
  9875	   typically find some other new one to infect, claiming to the
  9876	   sysadmin that they have an important new project to complete.
  9877	
  9878	:holy wars: [from {USENET}, but may predate it] n. {flame
  9879	   war}s over {religious issues}.  The paper by Danny Cohen that
  9880	   popularized the terms {big-endian} and {little-endian} in
  9881	   connection with the LSB-first/MSB-first controversy was entitled
  9882	   "On Holy Wars and a Plea for Peace".  Other perennial Holy
  9883	   Wars have included {EMACS} vs. {vi}, my personal computer vs.
  9884	   everyone else's personal computer, {{ITS}} vs. {{UNIX}},
  9885	   {{UNIX}} vs. {VMS}, {BSD} UNIX vs. {USG UNIX}, {C} vs.
  9886	   {{Pascal}}, {C} vs. {LISP}, etc., ad nauseam.  The
  9887	   characteristic that distinguishes holy wars from normal
  9888	   technical disputes is that in a holy wars most of the participants
  9889	   spend their time trying to pass off personal value choices and
  9890	   cultural attachments as objective technical evaluations. See also
  9891	   {theology}.
  9892	
  9893	:home box: n. A hacker's personal machine, especially one he or she
  9894	   owns.  "Yeah?  Well, *my* home box runs a full 4.2 BSD, so
  9895	   there!"
  9896	
  9897	:hook: n. A software or hardware feature included in order to
  9898	   simplify later additions or changes by a user.  For example, a
  9899	   simple program that prints numbers might always print them in base
  9900	   10, but a more flexible version would let a variable determine what
  9901	   base to use; setting the variable to 5 would make the program print
  9902	   numbers in base 5.  The variable is a simple hook.  An even more
  9903	   flexible program might examine the variable and treat a value of 16
  9904	   or less as the base to use, but treat any other number as the
  9905	   address of a user-supplied routine for printing a number.  This is
  9906	   a {hairy} but powerful hook; one can then write a routine to
  9907	   print numbers as Roman numerals, say, or as Hebrew characters, and
  9908	   plug it into the program through the hook.  Often the difference
  9909	   between a good program and a superb one is that the latter has
  9910	   useful hooks in judiciously chosen places.  Both may do the
  9911	   original job about equally well, but the one with the hooks is much
  9912	   more flexible for future expansion of capabilities ({EMACS}, for
  9913	   example, is *all* hooks).  The term `user exit' is
  9914	   synonymous but much more formal and less hackish.
  9915	
  9916	:hop: n. One file transmission in a series required to get a file
  9917	   from point A to point B on a store-and-forward network.  On such
  9918	   networks (including {UUCPNET} and {FidoNet}), the important
  9919	   inter-machine metric is the number of hops in the shortest path
  9920	   between them, rather than their geographical separation.  See
  9921	   {bang path}.
  9922	
  9923	:hose: 1. vt. To make non-functional or greatly degraded in
  9924	   performance.  "That big ray-tracing program really hoses the
  9925	   system."  See {hosed}.  2. n. A narrow channel through which
  9926	   data flows under pressure.  Generally denotes data paths that
  9927	   represent performance bottlenecks.  3. n. Cabling, especially
  9928	   thick Ethernet cable.  This is sometimes called `bit hose' or
  9929	   `hosery' (play on `hosiery') or `etherhose'.  See also
  9930	   {washing machine}.
  9931	
  9932	:hosed: adj. Same as {down}.  Used primarily by UNIX hackers.
  9933	   Humorous: also implies a condition thought to be relatively easy to
  9934	   reverse.  Probably derived from the Canadian slang `hoser'
  9935	   popularized by the Bob and Doug Mackenzie skits on SCTV.  See
  9936	   {hose}.  It is also widely used of people in the mainstream sense
  9937	   of `in an extremely unfortunate situation'.
  9938	
  9939	   Once upon a time, a Cray that had been experiencing periodic
  9940	   difficulties crashed, and it was announced to have been hosed.
  9941	   It was discovered that the crash was due to the disconnection of
  9942	   some coolant hoses.  The problem was corrected, and users were then
  9943	   assured that everything was OK because the system had been rehosed.
  9944	   See also {dehose}.
  9945	
  9946	:hot spot: n. 1. [primarily used by C/UNIX programmers, but
  9947	   spreading] It is received wisdom that in most programs, less than
  9948	   10% of the code eats 90% of the execution time; if one were to
  9949	   graph instruction visits versus code addresses, one would typically
  9950	   see a few huge spikes amidst a lot of low-level noise.  Such spikes
  9951	   are called `hot spots' and are good candidates for heavy
  9952	   optimization or {hand-hacking}.  The term is especially used of
  9953	   tight loops and recursions in the code's central algorithm, as
  9954	   opposed to (say) initial set-up costs or large but infrequent I/O
  9955	   operations.  See {tune}, {bum}, {hand-hacking}.  2. The
  9956	   active location of a cursor on a bit-map display.  "Put the
  9957	   mouse's hot spot on the `ON' widget and click the left button."
  9958	   3. A screen region that is sensitive to mouse clicks, which trigger
  9959	   some action.  Hypertext help screens are an example, in which a hot
  9960	   spot exists in the vicinity of any word for which additional
  9961	   material is available.  4. In a massively parallel computer with
  9962	   shared memory, the one location that all 10,000 processors are
  9963	   trying to read or write at once (perhaps because they are all doing
  9964	   a {busy-wait} on the same lock).
  9965	
  9966	:house wizard: [prob. from ad-agency lingo, `house freak'] n. A
  9967	   hacker occupying a technical-specialist, R&D, or systems position
  9968	   at a commercial shop.  A really effective house wizard can have
  9969	   influence out of all proportion to his/her ostensible rank and
  9970	   still not have to wear a suit.  Used esp. of UNIX wizards.  The
  9971	   term `house guru' is equivalent.
  9972	
  9973	:HP-SUX: /H-P suhks/ n. Unflattering hackerism for HP-UX,
  9974	   Hewlett-Packard's UNIX port, which eatures some truly unique bogosities
  9975	   in the filesystem internals and elsewhere (these occasionally create
  9976	   portability problems).  HP-UX is often referred to as `hockey-pux'
  9977	   inside HP, and one respondent claims that the proper pronunciation
  9978	   is /H-P ukkkhhhh/ as though one were about to spit.  Another such
  9979	   alternate spelling and pronunciation is "H-PUX" /H-puhks/.
  9980	   Hackers at HP/Apollo (the former Apollo Computers which was
  9981	   swallowed by HP in 1989) have been heard to complain that
  9982	   Mr. Packard should have pushed to have his name first, if for no
  9983	   other reason than the greater eloquence of the resulting acronym.
  9984	   Compare {AIDX}, {buglix}.  See also {Nominal Semidestructor},
  9985	   {Telerat}, {Open DeathTrap}, {ScumOS}, {sun-stools},
  9986	   {terminak}.
  9987	
  9988	:huff: v. To compress data using a Huffman code.  Various programs
  9989	   that use such methods have been called `HUFF' or some variant
  9990	   thereof.  Oppose {puff}.  Compare {crunch}, {compress}.
  9991	
  9992	:humma: // excl. A filler word used on various `chat' and
  9993	   `talk' programs when you had nothing to say but felt that it was
  9994	   important to say something.  The word apparently originated (at
  9995	   least with this definition) on the MECC Timeshare System (MTS, a
  9996	   now-defunct educational time-sharing system running in Minnesota
  9997	   during the 1970s and the early 1980s) but was later sighted on
  9998	   early UNIX systems.
  9999	
 10000	:Humor, Hacker:: n. A distinctive style of shared intellectual
 10001	   humor found among hackers, having the following marked
 10002	   characteristics:
 10003	
 10004	   1. Fascination with form-vs.-content jokes, paradoxes, and humor
 10005	   having to do with confusion of metalevels (see {meta}).  One way
 10006	   to make a hacker laugh: hold a red index card in front of him/her
 10007	   with "GREEN" written on it, or vice-versa (note, however, that
 10008	   this is funny only the first time).
 10009	
 10010	   2. Elaborate deadpan parodies of large intellectual constructs,
 10011	   such as specifications (see {write-only memory}), standards
 10012	   documents, language descriptions (see {INTERCAL}), and even
 10013	   entire scientific theories (see {quantum bogodynamics},
 10014	   {computron}).
 10015	
 10016	   3. Jokes that involve screwily precise reasoning from bizarre,
 10017	   ludicrous, or just grossly counter-intuitive premises.
 10018	
 10019	   4. Fascination with puns and wordplay.
 10020	
 10021	   5. A fondness for apparently mindless humor with subversive
 10022	   currents of intelligence in it --- for example, old Warner Brothers
 10023	   and Rocky & Bullwinkle cartoons, the Marx brothers, the early
 10024	   B-52s, and Monty Python's Flying Circus.  Humor that combines this
 10025	   trait with elements of high camp and slapstick is especially
 10026	   favored.
 10027	
 10028	   6. References to the symbol-object antinomies and associated ideas
 10029	   in Zen Buddhism and (less often) Taoism.  See {has the X nature},
 10030	   {Discordianism}, {zen}, {ha ha only serious}, {AI koans}.
 10031	
 10032	   See also {filk}, {retrocomputing}, and {appendix B}.  If you
 10033	   have an itchy feeling that all 6 of these traits are really aspects
 10034	   of one thing that is incredibly difficult to talk about exactly,
 10035	   you are (a) correct and (b) responding like a hacker.  These traits
 10036	   are also recognizable (though in a less marked form) throughout
 10037	   {{science-fiction fandom}}.
 10038	
 10039	:hung: [from `hung up'] adj. Equivalent to {wedged}, but more
 10040	   common at UNIX/C sites.  Not generally used of people.  Syn. with
 10041	   {locked up}, {wedged}; compare {hosed}.  See also {hang}.
 10042	   A hung state is distinguished from {crash}ed or {down}, where the
 10043	   program or system is also unusable but because it is not running
 10044	   rather than because it is waiting for something.  However, the
 10045	   recovery from both situations is often the same.
 10046	
 10047	:hungry puppy: n. Syn. {slopsucker}.
 10048	
 10049	:hungus: /huhng'g*s/ [perhaps related to slang `humongous'] adj.
 10050	   Large, unwieldy, usually unmanageable.  "TCP is a hungus piece of
 10051	   code."  "This is a hungus set of modifications."
 10052	
 10053	:hyperspace: /hi:'per-spays/ n. A memory location that is *far*
 10054	   away from where the program counter should be pointing, often
 10055	   inaccessible because it is not even mapped in.  "Another core
 10056	   dump --- looks like the program jumped off to hyperspace
 10057	   somehow."  (Compare {jump off into never-never land}.)  This
 10058	   usage is from the SF notion of a spaceship jumping `into
 10059	   hyperspace', that is, taking a shortcut through higher-dimensional
 10060	   space --- in other words, bypassing this universe.  The variant
 10061	   `east hyperspace' is recorded among CMU and Bliss hackers.
 10062	
 10063	= I =
 10064	=====
 10065	
 10066	:I didn't change anything!: interj. An aggrieved cry often heard as
 10067	   bugs manifest during a regression test.  The {canonical} reply to
 10068	   this assertion is "Then it works just the same as it did before,
 10069	   doesn't it?"  See also {one-line fix}.  This is also heard from
 10070	   applications programmers trying to blame an obvious applications
 10071	   problem on an unrelated systems software change, for example a
 10072	   divide-by-0 fault after terminals were added to a network.
 10073	   Usually, their statement is found to be false.  Upon close
 10074	   questioning, they will admit some major restructuring of the
 10075	   program that shouldn't have broken anything, in their opinion,
 10076	   but which actually {hosed} the code completely.
 10077	
 10078	:I see no X here.: Hackers (and the interactive computer games they
 10079	   write) traditionally favor this slightly marked usage over other
 10080	   possible equivalents such as "There's no X here!" or "X is
 10081	   missing."  or "Where's the X?".  This goes back to the original
 10082	   PDP-10 {ADVENT}, which would respond in this wise if you asked
 10083	   it to do something involving an object not present at your location
 10084	   in the game.
 10085	
 10086	:i14y: // n. Abbrev. for `interoperability', with the `14'
 10087	   replacing fourteen letters.  Used in the {X} (windows)
 10088	   community.  Refers to portability and compatibility of data formats
 10089	   (even binary ones) between different programs or implementations of
 10090	   the same program on different machines.
 10091	
 10092	:i18n: // n. Abbrev. for `internationali{z,s}ation', with the 18
 10093	   replacing 18 letters.  Used in the {X} (windows) community.
 10094	
 10095	:IBM: /I-B-M/ Inferior But Marketable; It's Better Manually;
 10096	   Insidious Black Magic; It's Been Malfunctioning; Incontinent Bowel
 10097	   Movement; and a near-{infinite} number of even less complimentary
 10098	   expansions, including `International Business Machines'.  See
 10099	   {TLA}.  These abbreviations illustrate the considerable
 10100	   antipathy most hackers have long felt toward the `industry leader'
 10101	   (see {fear and loathing}).
 10102	
 10103	   What galls hackers about most IBM machines above the PC level isn't
 10104	   so much that they are underpowered and overpriced (though that does
 10105	   count against them), but that the designs are incredibly archaic,
 10106	   {crufty}, and {elephantine} ... and you can't *fix* them
 10107	   --- source code is locked up tight, and programming tools are
 10108	   expensive, hard to find, and bletcherous to use once you've found
 10109	   them.  With the release of the UNIX-based RIOS family this may have
 10110	   begun to change --- but then, we thought that when the PC-RT came
 10111	   out, too.
 10112	
 10113	   In the spirit of universal peace and brotherhood, this lexicon now
 10114	   includes a number of entries attributed to `IBM'; these derive from
 10115	   some rampantly unofficial jargon lists circulated within IBM's own
 10116	   beleaguered hacker underground.
 10117	
 10118	:IBM discount: n. A price increase.  Outside IBM, this derives from
 10119	   the common perception that IBM products are generally overpriced
 10120	   (see {clone}); inside, it is said to spring from a belief that
 10121	   large numbers of IBM employees living in an area cause prices to
 10122	   rise.
 10123	
 10124	:ICBM address: n. (Also `missile address') The form used to
 10125	   register a site with the USENET mapping project includes a blank
 10126	   for longitude and latitude, preferably to seconds-of-arc accuracy.
 10127	   This is actually used for generating geographically-correct maps of
 10128	   USENET links on a plotter; however, it has become traditional to
 10129	   refer to this as one's `ICBM address' or `missile address', and
 10130	   many people include it in their {sig block} with that name.
 10131	
 10132	:ice: [coined by USENETter Tom Maddox, popularized by William
 10133	   Gibson's cyberpunk SF novels: a contrived acronym for `Intrusion
 10134	   Countermeasure Electronics'] Security software (in Gibson's novels,
 10135	   software that responds to intrusion by attempting to literally kill
 10136	   the intruder).  Also, `icebreaker': a program designed for
 10137	   cracking security on a system.  Neither term is in serious use yet
 10138	   as of mid-1991, but many hackers find the metaphor attractive, and
 10139	   each may develop a denotation in the future.
 10140	
 10141	:idempotent: [from mathematical techspeak] adj. Acting exactly
 10142	   once.  This term is often used with respect to {C} header files,
 10143	   which contain common definitions and declarations to be included by
 10144	   several source files.  If a header file is ever included twice
 10145	   during the same compilation (perhaps due to nested #include
 10146	   files), compilation errors can result unless the header file has
 10147	   protected itself against multiple inclusion; a header file so
 10148	   protected is said to be idempotent.  The term can also be used to
 10149	   describe an initialization subroutine which is arranged to perform
 10150	   some critical action exactly once, even if the routine is called
 10151	   several times.
 10152	
 10153	:If you want X, you know where to find it.: There is a legend that
 10154	   Dennis Ritchie, inventor of {C}, once responded to demands for
 10155	   features resembling those of what at the time was a much more
 10156	   popular language by observing "If you want PL/1, you know where to
 10157	   find it."  Ever since, this has been hackish standard form for
 10158	   fending off requests to alter a new design to mimic some older
 10159	   (and, by implication, inferior and {baroque}) one.  The case X =
 10160	   {Pascal} manifests semi-regularly on USENET's comp.lang.c
 10161	   newsgroup.  Indeed, the case X = X has been reported in
 10162	   discussions of graphics software (see {X}).
 10163	
 10164	:ifdef out: /if'def owt/ v. Syn. for {condition out}, specific
 10165	   to {C}.
 10166	
 10167	:ill-behaved: adj. 1. [numerical analysis] Said of an algorithm or
 10168	   computational method that tends to blow up because of accumulated
 10169	   roundoff error or poor convergence properties.  2. Software that
 10170	   bypasses the defined {OS} interfaces to do things (like screen,
 10171	   keyboard, and disk I/O) itself, often in a way that depends on the
 10172	   hardware of the machine it is running on or which is nonportable or
 10173	   incompatible with other pieces of software.  In the IBM PC/MS-DOS
 10174	   world, there is a folk theorem (nearly true) to the effect that
 10175	   (owing to gross inadequacies and performance penalties in the OS
 10176	   interface) all interesting applications are ill-behaved.  See also
 10177	   {bare metal}. Oppose {well-behaved}, compare {PC-ism}.  See
 10178	   {mess-dos}.
 10179	
 10180	:IMHO: // [from SF fandom via USENET; abbreviation for `In My Humble
 10181	   Opinion']  "IMHO, mixed-case C names should be avoided, as
 10182	   mistyping something in the wrong case can cause hard-to-detect
 10183	   errors --- and they look too Pascalish anyhow."  Also seen in
 10184	   variant forms such as IMNSHO (In My Not-So-Humble Opinion) and IMAO
 10185	   (In My Arrogant Opinion).
 10186	
 10187	:Imminent Death Of The Net Predicted!: [USENET] prov.  Since USENET
 10188	   first got off the ground in 1980-81, it has grown exponentially,
 10189	   approximately doubling in size every year.  On the other hand, most
 10190	   people feel the {signal-to-noise ratio} of USENET has dropped
 10191	   steadily.  These trends led, as far back as mid-1983, to predictions of
 10192	   the imminent collapse (or death) of the net.  Ten years and
 10193	   numerous doublings later, enough of these gloomy prognostications
 10194	   have been confounded that the phrase "Imminent Death Of The Net
 10195	   Predicted!" has become a running joke, hauled out any time someone
 10196	   grumbles about the {S/N ratio} or the huge and steadily
 10197	   increasing volume.
 10198	
 10199	:in the extreme: adj. A preferred superlative suffix for many hackish
 10200	   terms.  See, for example, `obscure in the extreme' under {obscure},
 10201	   and compare {highly}.
 10202	
 10203	:incantation: n. Any particularly arbitrary or obscure command that
 10204	   one must mutter at a system to attain a desired result.  Not used
 10205	   of passwords or other explicit security features.  Especially used
 10206	   of tricks that are so poorly documented they must be learned from a
 10207	   {wizard}.  "This compiler normally locates initialized data
 10208	   in the data segment, but if you {mutter} the right incantation they
 10209	   will be forced into text space."
 10210	
 10211	:include: vt. [USENET] 1. To duplicate a portion (or whole) of
 10212	   another's message (typically with attribution to the source) in a
 10213	   reply or followup, for clarifying the context of one's response.
 10214	   See the the discussion of inclusion styles under "Hacker
 10215	   Writing Style".  2. [from {C}] `#include <disclaimer.h>'
 10216	   has appeared in {sig block}s to refer to a notional `standard
 10217	   {disclaimer} file'.
 10218	
 10219	:include war: n. Excessive multi-leveled including within a
 10220	   discussion {thread}, a practice that tends to annoy readers.  In
 10221	   a forum with high-traffic newsgroups, such as USENET, this can lead
 10222	   to {flame}s and the urge to start a {kill file}.
 10223	
 10224	:indent style: [C programmers] n. The rules one uses to indent code
 10225	   in a readable fashion; a subject of {holy wars}.  There are four
 10226	   major C indent styles, described below; all have the aim of
 10227	   making it easier for the reader to visually track the scope of
 10228	   control constructs.  The significant variable is the placement of
 10229	   `{' and `}' with respect to the statement(s) they
 10230	   enclose and the guard or controlling statement (`if',
 10231	   `else', `for', `while', or `do') on the block,
 10232	   if any.
 10233	
 10234	   `K&R style' --- Named after Kernighan & Ritchie, because the
 10235	   examples in {K&R} are formatted this way.  Also called `kernel
 10236	   style' because the UNIX kernel is written in it, and the `One True
 10237	   Brace Style' (abbrev. 1TBS) by its partisans.  The basic indent
 10238	   shown here is eight spaces (or one tab) per level; four are
 10239	   occasionally seen, but are much less common.
 10240	
 10241	     if (cond) {
 10242	             <body>
 10243	     }
 10244	
 10245	   `Allman style' --- Named for Eric Allman, a Berkeley hacker who
 10246	   wrote a lot of the BSD utilities in it (it is sometimes called
 10247	   `BSD style').  Resembles normal indent style in Pascal and Algol.
 10248	   Basic indent per level shown here is eight spaces, but four is just
 10249	   as common (esp. in C++ code).
 10250	
 10251	     if (cond)
 10252	     {
 10253	             <body>
 10254	     }
 10255	
 10256	   `Whitesmiths style' --- popularized by the examples that came
 10257	   with Whitesmiths C, an early commercial C compiler.  Basic indent
 10258	   per level shown here is eight spaces, but four is occasionally
 10259	   seen.
 10260	
 10261	     if (cond)
 10262	             {
 10263	             <body>
 10264	             }
 10265	
 10266	   `GNU style' --- Used throughout GNU EMACS and the Free Software
 10267	   Foundation code, and just about nowhere else.  Indents are always
 10268	   four spaces per level, with `{' and `}' halfway between the
 10269	   outer and inner indent levels.
 10270	
 10271	     if (cond)
 10272	       {
 10273	         <body>
 10274	       }
 10275	
 10276	   Surveys have shown the Allman and Whitesmiths styles to be the most
 10277	   common, with about equal mind shares.  K&R/1TBS used to be nearly
 10278	   universal, but is now much less common (the opening brace tends to
 10279	   get lost against the right paren of the guard part in an `if'
 10280	   or `while', which is a {Bad Thing}).  Defenders of 1TBS
 10281	   argue that any putative gain in readability is less important than
 10282	   their style's relative economy with vertical space, which enables
 10283	   one to see more code on one's screen at once.  Doubtless these
 10284	   issues will continue to be the subject of {holy wars}.
 10285	
 10286	:index: n. See {coefficient of X}.
 10287	
 10288	:infant mortality: n. It is common lore among hackers (and in the
 10289	   electronics industry at large; this term is possibly techspeak by
 10290	   now) that the chances of sudden hardware failure drop off
 10291	   exponentially with a machine's time since power-up (that is, until
 10292	   the relatively distant time at which enough mechanical wear in I/O
 10293	   devices and thermal-cycling stress in components has accumulated
 10294	   for the machine to start going senile).  Up to half of all chip and
 10295	   wire failures happen within a new system's first few weeks; such
 10296	   failures are often referred to as `infant mortality' problems
 10297	   (or, occasionally, as `sudden infant death syndrome').  See
 10298	   {bathtub curve}, {burn-in period}.
 10299	
 10300	:infinite: adj. Consisting of a large number of objects; extreme.
 10301	   Used very loosely as in: "This program produces infinite
 10302	   garbage."  "He is an infinite loser."  The word most likely to
 10303	   follow `infinite', though, is {hair} (it has been pointed out
 10304	   that fractals are an excellent example of infinite hair).  These
 10305	   uses are abuses of the word's mathematical meaning.  The term
 10306	   `semi-infinite', denoting an immoderately large amount of some
 10307	   resource, is also heard.  "This compiler is taking a semi-infinite
 10308	   amount of time to optimize my program."  See also {semi}.
 10309	
 10310	:infinite loop: n. One that never terminates (that is, the machine
 10311	   {spin}s or {buzz}es forever and goes {catatonic}).  There
 10312	   is a standard joke that has been made about each generation's
 10313	   exemplar of the ultra-fast machine: "The Cray-3 is so fast it can
 10314	   execute an infinite loop in under 2 seconds!"
 10315	
 10316	:infinity: n. 1. The largest value that can be represented in a
 10317	   particular type of variable (register, memory location, data type,
 10318	   whatever).  2. `minus infinity': The smallest such value, not
 10319	   necessarily or even usually the simple negation of plus infinity.
 10320	   In N-bit twos-complement arithmetic, infinity is
 10321	   2^(N-1) - 1 but minus infinity is - (2^(N-1)),
 10322	   not -(2^(N-1) - 1).  Note also that this is different from
 10323	   "time T equals minus infinity", which is closer to a
 10324	   mathematician's usage of infinity.
 10325	
 10326	:initgame: /in-it'gaym/ [IRC] n.  An {IRC} version of the
 10327	   venerable trivia game "20 questions", in which one user changes
 10328	   his {nick} to the initials of a famous person or other named
 10329	   entity, and the others on the channel ask yes or no questions, with
 10330	   the one to guess the person getting to be "it" next.  As a
 10331	   courtesy, the one picking the initials starts by providing a
 10332	   4-letter hint of the form sex, nationality, life-status,
 10333	   reality-status.  For example, MAAR means "Male, American, Alive,
 10334	   Real" (as opposed to "fictional").  Initgame can be surprisingly
 10335	   addictive.  See also {hing}.
 10336	
 10337	:insanely great: adj. [Mac community, from Steve Jobs; also BSD UNIX
 10338	   people via Bill Joy] Something so incredibly {elegant} that it is
 10339	   imaginable only to someone possessing the most puissant of
 10340	   {hacker}-natures.
 10341	
 10342	:INTERCAL: /in't*r-kal/ [said by the authors to stand for
 10343	   `Compiler Language With No Pronounceable Acronym'] n. A
 10344	   computer language designed by Don Woods and James Lyon in 1972.
 10345	   INTERCAL is purposely different from all other computer
 10346	   languages in all ways but one; it is purely a written language,
 10347	   being totally unspeakable.  An excerpt from the INTERCAL Reference
 10348	   Manual will make the style of the language clear:
 10349	
 10350	     It is a well-known and oft-demonstrated fact that a person whose
 10351	     work is incomprehensible is held in high esteem.  For example, if
 10352	     one were to state that the simplest way to store a value of 65536
 10353	     in a 32-bit INTERCAL variable is:
 10354	
 10355	          DO :1 <- #0$#256
 10356	
 10357	     any sensible programmer would say that that was absurd.  Since this
 10358	     is indeed the simplest method, the programmer would be made to look
 10359	     foolish in front of his boss, who would of course have happened to
 10360	     turn up, as bosses are wont to do.  The effect would be no less
 10361	     devastating for the programmer having been correct.
 10362	
 10363	   INTERCAL has many other peculiar features designed to make it even
 10364	   more unspeakable.  The Woods-Lyons implementation was actually used
 10365	   by many (well, at least several) people at Princeton.  The language
 10366	   has been recently reimplemented as C-INTERCAL and is consequently
 10367	   enjoying an unprecedented level of unpopularity; there is even an
 10368	   alt.lang.intercal newsgroup devoted to the study and ...
 10369	   appreciation of the language on USENET.
 10370	
 10371	:interesting: adj. In hacker parlance, this word has strong
 10372	   connotations of `annoying', or `difficult', or both.  Hackers
 10373	   relish a challenge, and enjoy wringing all the irony possible out
 10374	   of the ancient Chinese curse "May you live in interesting times".
 10375	   Oppose {trivial}, {uninteresting}.
 10376	
 10377	:Internet address:: n. 1. [techspeak] An absolute network address of
 10378	   the form foo@bar.baz, where foo is a user name, bar is a
 10379	   {sitename}, and baz is a `domain' name, possibly including
 10380	   periods itself.  Contrast with {bang path}; see also {network,
 10381	   the} and {network address}.  All Internet machines and most UUCP
 10382	   sites can now resolve these addresses, thanks to a large amount of
 10383	   behind-the-scenes magic and PD software written since 1980 or so.
 10384	   See also {bang path}, {domainist}.  2. More loosely, any
 10385	   network address reachable through Internet; this includes {bang
 10386	   path} addresses and some internal corporate and government
 10387	   networks.
 10388	
 10389	   Reading Internet addresses is something of an art.  Here are the
 10390	   four most important top-level functional Internet domains followed
 10391	   by a selection of geographical domains:
 10392	
 10393	     com
 10394	          commercial organizations
 10395	     edu
 10396	          educational institutions
 10397	     gov
 10398	          U.S. government civilian sites
 10399	     mil
 10400	          U.S. military sites
 10401	
 10402	   Note that most of the sites in the com and edu domains are in
 10403	   the U.S. or Canada.
 10404	
 10405	     us
 10406	          sites in the U.S. outside the functional domains
 10407	     su
 10408	          sites in the ex-Soviet Union (see {kremvax}).
 10409	     uk
 10410	          sites in the United Kingdom
 10411	
 10412	   Within the us domain, there are subdomains for the fifty
 10413	   states, each generally with a name identical to the state's postal
 10414	   abbreviation.  Within the uk domain, there is an ac subdomain for
 10415	   academic sites and a co domain for commercial ones.  Other
 10416	   top-level domains may be divided up in similar ways.
 10417	
 10418	:interrupt: 1. [techspeak] n. On a computer, an event that
 10419	   interrupts normal processing and temporarily diverts
 10420	   flow-of-control through an "interrupt handler" routine.  See also
 10421	   {trap}.  2. interj. A request for attention from a hacker.
 10422	   Often explicitly spoken.  "Interrupt --- have you seen Joe
 10423	   recently?"  See {priority interrupt}.  3. Under MS-DOS, the
 10424	   term `interrupt' is nearly synonymous with `system call', because
 10425	   the OS and BIOS routines are both called using the INT instruction
 10426	   (see {{interrupt list, the}}) and because programmers so often have
 10427	   to bypass the OS (going directly to a BIOS interrupt) to get
 10428	   reasonable performance.
 10429	
 10430	:interrupt list, the:: [MS-DOS] n. The list of all known software
 10431	   interrupt calls (both documented and undocumented) for IBM PCs and
 10432	   compatibles, maintained and made available for free redistribution
 10433	   by Ralf Brown <ralf@cs.cmu.edu>.  As of early 1991, it had grown to
 10434	   approximately a megabyte in length.
 10435	
 10436	:interrupts locked out: adj. When someone is ignoring you.  In a
 10437	   restaurant, after several fruitless attempts to get the waitress's
 10438	   attention, a hacker might well observe "She must have interrupts
 10439	   locked out".  The synonym `interrupts disabled' is also common.
 10440	   Variations abound; "to have one's interrupt mask bit set" and
 10441	   "interrupts masked out" is also heard.  See also {spl}.
 10442	
 10443	:IRC: /I-R-C/ [Internet Relay Chat] n.  A world-wide "party
 10444	   line" network that allows one to converse with others in real
 10445	   time.  IRC is structured as a network of Internet servers, each of
 10446	   which accepts connections from client programs, one per user.  The
 10447	   IRC community and the {USENET} and {MUD} communities overlap
 10448	   to some extent, including both hackers and regular folks who have
 10449	   discovered the wonders of computer networks.  Some USENET jargon
 10450	   has been adopted on IRC, as have some conventions such as
 10451	   {emoticon}s.  There is also a vigorous native jargon,
 10452	   represented in this lexicon by entries marked `[IRC]'.  See also
 10453	   {talk mode}.
 10454	   
 10455	:iron: n. Hardware, especially older and larger hardware of
 10456	   {mainframe} class with big metal cabinets housing relatively
 10457	   low-density electronics (but the term is also used of modern
 10458	   supercomputers).  Often in the phrase {big iron}.  Oppose
 10459	   {silicon}.  See also {dinosaur}.
 10460	
 10461	:Iron Age: n. In the history of computing, 1961--1971 --- the
 10462	   formative era of commercial {mainframe} technology, when {big
 10463	   iron} {dinosaur}s ruled the earth.  These began with the delivery
 10464	   of the first PDP-1, coincided with the dominance of ferrite
 10465	   {core}, and ended with the introduction of the first commercial
 10466	   microprocessor (the Intel 4004) in 1971.  See also {Stone Age};
 10467	   compare {elder days}.
 10468	
 10469	:iron box: [UNIX/Internet] n. A special environment set up to trap
 10470	   a {cracker} logging in over remote connections long enough to be
 10471	   traced.  May include a modified {shell} restricting the cracker's
 10472	   movements in unobvious ways, and `bait' files designed to keep
 10473	   him interested and logged on.  See also {back door},
 10474	   {firewall machine}, {Venus flytrap}, and Clifford Stoll's
 10475	   account in `{The Cuckoo's Egg}' of how he made and used
 10476	   one (see the Bibliography in appendix C).  Compare {padded
 10477	   cell}.
 10478	
 10479	:ironmonger: [IBM] n. Derogatory.  A hardware specialist.  Compare
 10480	   {sandbender}, {polygon pusher}.
 10481	
 10482	:ITS:: /I-T-S/ n. 1. Incompatible Time-sharing System, an
 10483	   influential but highly idiosyncratic operating system written for
 10484	   PDP-6s and PDP-10s at MIT and long used at the MIT AI Lab.  Much
 10485	   AI-hacker jargon derives from ITS folklore, and to have been `an
 10486	   ITS hacker' qualifies one instantly as an old-timer of the most
 10487	   venerable sort.  ITS pioneered many important innovations,
 10488	   including transparent file sharing between machines and
 10489	   terminal-independent I/O.  After about 1982, most actual work was
 10490	   shifted to newer machines, with the remaining ITS boxes run
 10491	   essentially as a hobby and service to the hacker community.  The
 10492	   shutdown of the lab's last ITS machine in May 1990 marked the end
 10493	   of an era and sent old-time hackers into mourning nationwide (see
 10494	   {high moby}).  The Royal Institute of Technology in Sweden is
 10495	   maintaining one `live' ITS site at its computer museum (right next
 10496	   to the only TOPS-10 system still on the Internet), so ITS is still
 10497	   alleged to hold the record for OS in longest continuous use
 10498	   (however, {{WAITS}} is a credible rival for this palm).  See
 10499	   {appendix A}.  2. A mythical image of operating-system perfection
 10500	   worshiped by a bizarre, fervent retro-cult of old-time hackers and
 10501	   ex-users (see {troglodyte}, sense 2).  ITS worshipers manage
 10502	   somehow to continue believing that an OS maintained by
 10503	   assembly-language hand-hacking that supported only monocase
 10504	   6-character filenames in one directory per account remains superior
 10505	   to today's state of commercial art (their venom against UNIX is
 10506	   particularly intense).  See also {holy wars},
 10507	   {Weenix}.
 10508	
 10509	:IWBNI: // [abbreviation] `It Would Be Nice If'.  Compare {WIBNI}.
 10510	
 10511	:IYFEG: // [USENET] Abbreviation for `Insert Your Favorite Ethnic
 10512	   Group'.  Used as a meta-name when telling racist jokes on the net
 10513	   to avoid offending anyone.  See {JEDR}.
 10514	
 10515	= J =
 10516	=====
 10517	
 10518	:J. Random: /J rand'm/ n. [generalized from {J. Random Hacker}]
 10519	   Arbitrary; ordinary; any one; any old.  `J. Random' is often
 10520	   prefixed to a noun to make a name out of it.  It means roughly
 10521	   `some particular' or `any specific one'.  "Would you let
 10522	   J. Random Loser marry your daughter?"  The most common uses are
 10523	   `J. Random Hacker', `J. Random Loser', and `J. Random Nerd'
 10524	   ("Should J. Random Loser be allowed to {gun} down other
 10525	   people?"), but it can be used simply as an elaborate version of
 10526	   {random} in any sense.
 10527	
 10528	:J. Random Hacker: [MIT] /J rand'm hak'r/ n. A mythical figure
 10529	   like the Unknown Soldier; the archetypal hacker nerd.  See
 10530	   {random}, {Suzie COBOL}.  This may originally have been
 10531	   inspired by `J. Fred Muggs', a show-biz chimpanzee whose name was a
 10532	   household word back in the early days of {TMRC}, and was
 10533	   probably influenced by `J. Presper Eckert' (one of the co-inventors
 10534	   of the digital computer).
 10535	
 10536	:jack in: v. To log on to a machine or connect to a network or
 10537	   {BBS}, esp. for purposes of entering a {virtual reality}
 10538	   simulation such as a {MUD} or {IRC} (leaving is "jacking
 10539	   out").  This term derives from {cyberpunk} SF, in which it was
 10540	   used for the act of plugging an electrode set into neural sockets
 10541	   in order to interface the brain directly to a virtual reality.
 10542	   It's primarily used by MUD & IRC fans and younger hackers on BBS
 10543	   systems.
 10544	
 10545	:jaggies: /jag'eez/ n. The `stairstep' effect observable when an
 10546	   edge (esp. a linear edge of very shallow or steep slope) is
 10547	   rendered on a pixel device (as opposed to a vector display).
 10548	
 10549	:JCL: /J-C-L/ n. 1. IBM's supremely {rude} Job Control
 10550	   Language.  JCL is the script language used to control the execution
 10551	   of programs in IBM's batch systems.  JCL has a very {fascist}
 10552	   syntax, and some versions will, for example, {barf} if two
 10553	   spaces appear where it expects one.  Most programmers confronted
 10554	   with JCL simply copy a working file (or card deck), changing the
 10555	   file names.  Someone who actually understands and generates unique
 10556	   JCL is regarded with the mixed respect one gives to someone who
 10557	   memorizes the phone book.  It is reported that hackers at IBM
 10558	   itself sometimes sing "Who's the breeder of the crud that mangles
 10559	   you and me?  I-B-M, J-C-L, M-o-u-s-e" to the tune of the
 10560	   "Mickey Mouse Club" theme to express their opinion of the
 10561	   beast.  2. A comparative for any very {rude} software that a
 10562	   hacker is expected to use.  "That's as bad as JCL."  As with
 10563	   {COBOL}, JCL is often used as an archetype of ugliness even by
 10564	   those who haven't experienced it.  See also {IBM}, {fear and
 10565	   loathing}.
 10566	
 10567	:JEDR: // n. Synonymous with {IYFEG}.  At one time, people in
 10568	   the USENET newsgroup rec.humor.funny tended to use `JEDR'
 10569	   instead of {IYFEG} or `<ethnic>'; this stemmed from a public
 10570	   attempt to suppress the group once made by a loser with initials
 10571	   JEDR after he was offended by an ethnic joke posted there.  (The
 10572	   practice was {retcon}ned by the expanding these initials as
 10573	   `Joke Ethnic/Denomination/Race'.)  After much sound and fury JEDR
 10574	   faded away; this term appears to be doing likewise.  JEDR's only
 10575	   permanent effect on the net.culture was to discredit
 10576	   `sensitivity' arguments for censorship so thoroughly that more
 10577	   recent attempts to raise them have met with immediate and
 10578	   near-universal rejection.
 10579	
 10580	:JFCL: /jif'kl/, /jaf'kl/, /j*-fi'kl/ vt., obs. (alt.
 10581	   `jfcl') To cancel or annul something.  "Why don't you jfcl that
 10582	   out?"  The fastest do-nothing instruction on older models of the
 10583	   PDP-10 happened to be JFCL, which stands for "Jump if Flag set and
 10584	   then CLear the flag"; this does something useful, but is a very
 10585	   fast no-operation if no flag is specified.  Geoff Goodfellow, one
 10586	   of the jargon-1 co-authors, had JFCL on the license plate of his
 10587	   BMW for years.  Usage: rare except among old-time PDP-10
 10588	   hackers.
 10589	
 10590	:jiffy: n. 1. The duration of one tick of the system clock on the
 10591	   computer (see {tick}).  Often one AC cycle time (1/60 second in
 10592	   the U.S. and Canada, 1/50 most other places), but more recently
 10593	   1/100 sec has become common.  "The swapper runs every 6 jiffies"
 10594	   means that the virtual memory management routine is executed once
 10595	   for every 6 ticks of the clock, or about ten times a second.
 10596	   2. Confusingly, the term is sometimes also used for a 1-millisecond
 10597	   {wall time} interval.  Even more confusingly, physicists
 10598	   semi-jokingly use `jiffy' to mean the time required for light to
 10599	   travel one foot in a vacuum, which turns out to be close to one
 10600	   *nanosecond*.  3. Indeterminate time from a few seconds to
 10601	   forever.  "I'll do it in a jiffy" means certainly not now and
 10602	   possibly never.  This is a bit contrary to the more widespread use
 10603	   of the word.  Oppose {nano}. See also {Real Soon Now}.
 10604	
 10605	:job security: n. When some piece of code is written in a
 10606	   particularly {obscure} fashion, and no good reason (such as time
 10607	   or space optimization) can be discovered, it is often said that the
 10608	   programmer was attempting to increase his job security (i.e., by
 10609	   making himself indispensable for maintenance).  This sour joke
 10610	   seldom has to be said in full; if two hackers are looking over some
 10611	   code together and one points at a section and says "job security",
 10612	   the other one may just nod.
 10613	
 10614	:jock: n. 1. A programmer who is characterized by large and somewhat
 10615	   brute-force programs.  See {brute force}.  2. When modified by
 10616	   another noun, describes a specialist in some particular computing
 10617	   area.  The compounds `compiler jock' and `systems jock' seem to be
 10618	   the best-established examples of this.
 10619	
 10620	:joe code: /joh' kohd`/ n. 1. Code that is overly {tense} and
 10621	   unmaintainable.  "{Perl} may be a handy program, but if you look
 10622	   at the source, it's complete joe code."  2. Badly written,
 10623	   possibly buggy code.
 10624	
 10625	   Correspondents wishing to remain anonymous have fingered a
 10626	   particular Joe at the Lawrence Berkeley Laboratory and observed
 10627	   that usage has drifted slightly; the original sobriquet `Joe code'
 10628	   was intended in sense 1.
 10629	
 10630	:jolix: n. /johl'liks/ n.,adj. 386BSD, the freeware port of the
 10631	   BSD Net/2 release to the Intel i386 architecture by Bill Jolitz and
 10632	   friends.  Used to differentiate from BSDI's port based on the same
 10633	   source tape, which is called BSD/386.  See {BSD}.
 10634	
 10635	:JR[LN]: /J-R-L/, /J-R-N/ n. The names JRL and JRN were
 10636	   sometimes used as example names when discussing a kind of user ID
 10637	   used under {{TOPS-10}} and {WAITS}; they were understood to be
 10638	   the initials of (fictitious) programmers named `J. Random Loser'
 10639	   and `J. Random Nerd' (see {J. Random}).  For example, if one
 10640	   said "To log in, type log one comma jay are en" (that is,
 10641	   "log 1,JRN"), the listener would have understood that he should
 10642	   use his own computer ID in place of `JRN'.
 10643	
 10644	:JRST: /jerst/ [based on the PDP-10 jump instruction] v.,obs. To
 10645	   suddenly change subjects, with no intention of returning to the
 10646	   previous topic.  Usage: rather rare except among PDP-10 diehards,
 10647	   and considered silly.  See also {AOS}.
 10648	
 10649	:juggling eggs: vi. Keeping a lot of {state} in your head while
 10650	   modifying a program.  "Don't bother me now, I'm juggling eggs",
 10651	   means that an interrupt is likely to result in the program's being
 10652	   scrambled.  In the classic first-contact SF novel `The Mote in
 10653	   God's Eye', by Larry Niven and Jerry Pournelle, an alien describes
 10654	   a very difficult task by saying "We juggle priceless eggs in
 10655	   variable gravity."  That is a very hackish use of language.  See
 10656	   also {hack mode}.
 10657	
 10658	:jump off into never-never land: [from J. M. Barrie's `Peter
 10659	   Pan'] v. Same as {branch to Fishkill}, but more common in
 10660	   technical cultures associated with non-IBM computers that use the
 10661	   term `jump' rather than `branch'.  Compare {hyperspace}.
 10662	
 10663	:jupiter: [IRC] vt. To kill an {IRC} {robot} or user, and
 10664	   then take its place by adopting its {nick} so that it cannot
 10665	   reconnect.  Named after a particular IRC user who did this to
 10666	   NickServ, the robot in charge of preventing people from
 10667	   inadvertently using a nick claimed by another user.
 10668	
 10669	= K =
 10670	=====
 10671	
 10672	:K: /K/ [from {kilo-}] n. A kilobyte.  This is used both as a
 10673	   spoken word and a written suffix (like {meg} and {gig} for
 10674	   megabyte and gigabyte).  See {{quantifiers}}.
 10675	
 10676	:K&R: [Kernighan and Ritchie] n. Brian Kernighan and Dennis Ritchie's
 10677	   book `The C Programming Language', esp. the classic and influential
 10678	   first edition (Prentice-Hall 1978; ISBN 0-113-110163-3).  Syn.
 10679	   {White Book}, {Old Testament}.  See also {New Testament}.
 10680	
 10681	:K-line: [IRC] v.  To ban a particular person from an {IRC}
 10682	   server, usually for grossly bad {netiquette}.  Comes from the
 10683	   `K' code used to accomplish this in IRC's configuration file.
 10684	   
 10685	:kahuna: /k*-hoo'nuh/ [IBM: from the Hawaiian title for a shaman] n.
 10686	   Synonym for {wizard}, {guru}.
 10687	
 10688	:kamikaze packet: n. The `official' jargon for what is more commonly
 10689	   called a {Christmas tree packet}. RFC-1025, `TCP and IP Bake Off'
 10690	   says:
 10691	
 10692	     10 points for correctly being able to process a "Kamikaze"
 10693	     packet (AKA nastygram, christmas tree packet, lamp test
 10694	     segment, et al.).  That is, correctly handle a segment with the
 10695	     maximum combination of features at once (e.g., a SYN URG PUSH
 10696	     FIN segment with options and data).
 10697	
 10698	   See also {Chernobyl packet}.
 10699	
 10700	:kangaroo code: n. Syn. {spaghetti code}.
 10701	
 10702	:ken: /ken/ n. 1. [UNIX] Ken Thompson, principal inventor of
 10703	   UNIX.  In the early days he used to hand-cut distribution tapes,
 10704	   often with a note that read "Love, ken".  Old-timers still use
 10705	   his first name (sometimes uncapitalized, because it's a login name
 10706	   and mail address) in third-person reference; it is widely
 10707	   understood (on USENET, in particular) that without a last name
 10708	   `Ken' refers only to Ken Thompson.  Similarly, Dennis without last
 10709	   name means Dennis Ritchie (and he is often known as dmr).  See
 10710	   also {demigod}, {{UNIX}}.  2. A flaming user.  This was
 10711	   originated by the Software Support group at Symbolics because the
 10712	   two greatest flamers in the user community were both named Ken.
 10713	
 10714	:kgbvax: /K-G-B'vaks/ n. See {kremvax}.
 10715	
 10716	:KIBO: /kee'boh/ [acronym] Knowledge In, Bullshit Out.  A summary
 10717	   of what happens whenever valid data is passed through an
 10718	   organization (or person) which deliberately or accidentally
 10719	   disregards or ignores its significance.  Consider, for example,
 10720	   what advertising campaign can do with a product's actual
 10721	   specifications.  Compare {GIGO}; see also {SNAFU principle}.
 10722	
 10723	:kick: [IRC] v.  To cause somebody to be removed from a {IRC}
 10724	   channel, an option only available to {CHOP}s.  This is an
 10725	   extreme measure, often used to combat extreme {flamage} or
 10726	   {flood}ing, but sometimes used at the chop's whim.
 10727	   
 10728	:kill file: [USENET] n. (alt. `KILL file') Per-user file(s) used
 10729	   by some {USENET} reading programs (originally Larry Wall's
 10730	   `rn(1)') to discard summarily (without presenting for reading)
 10731	   articles matching some particularly uninteresting (or unwanted)
 10732	   patterns of subject, author, or other header lines.  Thus to add
 10733	   a person (or subject) to one's kill file is to arrange for that
 10734	   person to be ignored by one's newsreader in future.  By extension,
 10735	   it may be used for a decision to ignore the person or subject in
 10736	   other media.  See also {plonk}.
 10737	
 10738	:killer micro: [popularized by Eugene Brooks] n. A
 10739	   microprocessor-based machine that infringes on mini, mainframe, or
 10740	   supercomputer performance turf.  Often heard in "No one will
 10741	   survive the attack of the killer micros!", the battle cry of the
 10742	   downsizers.  Used esp. of RISC architectures.
 10743	
 10744	   The popularity of the phrase `attack of the killer micros' is
 10745	   doubtless reinforced by the movie title "Attack Of The Killer
 10746	   Tomatoes" (one of the {canonical} examples of
 10747	   so-bad-it's-wonderful among hackers).  This has even more flavor
 10748	   now that killer micros have gone on the offensive not just
 10749	   individually (in workstations) but in hordes (within massively
 10750	   parallel computers).
 10751	
 10752	:killer poke: n. A recipe for inducing hardware damage on a machine
 10753	   via insertion of invalid values (see {poke}) in a memory-mapped
 10754	   control register; used esp. of various fairly well-known tricks
 10755	   on {bitty box}es without hardware memory management (such as the
 10756	   IBM PC and Commodore PET) that can overload and trash analog
 10757	   electronics in the monitor.  See also {HCF}.
 10758	
 10759	:kilo-: [SI] pref. See {{quantifiers}}.
 10760	
 10761	:KIPS: /kips/ [abbreviation, by analogy with {MIPS} using {K}] n.
 10762	   Thousands (*not* 1024s) of Instructions Per Second.  Usage:
 10763	   rare.
 10764	
 10765	:KISS Principle: /kis' prin'si-pl/ n. "Keep It Simple, Stupid".
 10766	   A maxim often invoked when discussing design to fend off
 10767	   {creeping featurism} and control development complexity.
 10768	   Possibly related to the {marketroid} maxim on sales
 10769	   presentations, "Keep It Short and Simple".
 10770	
 10771	:kit: [USENET; poss. fr. DEC slang for a full software
 10772	   distribution, as opposed to a patch or upgrade] n. A source
 10773	   software distribution that has been packaged in such a way that it
 10774	   can (theoretically) be unpacked and installed according to a series
 10775	   of steps using only standard UNIX tools, and entirely documented by
 10776	   some reasonable chain of references from the top-level {README
 10777	   file}.  The more general term {distribution} may imply that
 10778	   special tools or more stringent conditions on the host environment
 10779	   are required.
 10780	
 10781	:klone: /klohn/ n. See {clone}, sense 4.
 10782	
 10783	:kludge: /kluhj/ n. Common (but incorrect) variant of {kluge}, q.v.
 10784	
 10785	:kluge: /klooj/ [from the German `klug', clever] 1. n.  A Rube
 10786	   Goldberg (or Heath Robinson) device, whether in hardware or
 10787	   software.  (A long-ago `Datamation' article by Jackson Granholme
 10788	   said: "An ill-assorted collection of poorly matching parts,
 10789	   forming a distressing whole.")  2. n. A clever programming trick
 10790	   intended to solve a particular nasty case in an expedient, if not
 10791	   clear, manner.  Often used to repair bugs.  Often involves
 10792	   {ad-hockery} and verges on being a {crock}.  In fact, the
 10793	   TMRC Dictionary defined `kludge' as "a crock that works".  3. n.
 10794	   Something that works for the wrong reason.  4. vt. To insert a
 10795	   kluge into a program.  "I've kluged this routine to get around
 10796	   that weird bug, but there's probably a better way."  5. [WPI] n. A
 10797	   feature that is implemented in a {rude} manner.
 10798	
 10799	   Nowadays this term is often encountered in the variant spelling
 10800	   `kludge'.  Reports from {old fart}s are consistent that
 10801	   `kluge' was the original spelling, reported around computers as
 10802	   far back as the mid-1950s and, at that time, used exclusively of
 10803	   *hardware* kluges.  In 1947, the `New York Folklore
 10804	   Quarterly' reported a classic shaggy-dog story `Murgatroyd the
 10805	   Kluge Maker' then current in the Armed Forces, in which a `kluge'
 10806	   was a complex and puzzling artifact with a trivial function.
 10807	
 10808	   However, there is reason to believe this slang use may be a decade
 10809	   older.  Several respondents have connected it to the brand name of
 10810	   a device called a "Kluge paper feeder" dating back at least to
 10811	   1935, an adjunct to mechanical printing presses.  The Kluge feeder
 10812	   was designed before small, cheap electric motors and control
 10813	   electronics; it relied on a fiendishly complex assortment of cams,
 10814	   belts, and linkages to both power and synchronize all its
 10815	   operations from one motive driveshaft.  It was accordingly
 10816	   tempermental, subject to frequent breakdowns, and devilishly
 10817	   difficult to repair --- but oh, so clever!  One traditional
 10818	   folk etymology of `kluge' makes it the name of a design engineer;
 10819	   in fact, `Kluge' is a surname in German, and the designer of the
 10820	   Kluge feeder may well have been the man behind this myth.
 10821	
 10822	   The variant `kludge' was apparently popularized by the
 10823	   {Datamation} article mentioned above; it was titled "How
 10824	   to Design a Kludge" (February 1962, pages 30 and 31).  Some people
 10825	   who encountered the word first in print or on-line jumped to the
 10826	   reasonable but incorrect conclusion that the word should be
 10827	   pronounced /kluhj/ (rhyming with `sludge').  The result of this
 10828	   tangled history is a mess; in 1991, many (perhaps even most)
 10829	   hackers pronounce the word correctly as /klooj/ but spell it
 10830	   incorrectly as `kludge' (compare the pronunciation drift of
 10831	   {mung}).  Some observers consider this appropriate in view of
 10832	   its meaning.
 10833	
 10834	:kluge around: vt. To avoid a bug or difficult condition by
 10835	   inserting a {kluge}.  Compare {workaround}.
 10836	
 10837	:kluge up: vt. To lash together a quick hack to perform a task; this
 10838	   is milder than {cruft together} and has some of the connotations
 10839	   of {hack up} (note, however, that the construction `kluge on'
 10840	   corresponding to {hack on} is never used).  "I've kluged up this
 10841	   routine to dump the buffer contents to a safe place."
 10842	
 10843	:Knights of the Lambda Calculus: n. A semi-mythical organization of
 10844	   wizardly LISP and Scheme hackers.  The name refers to a
 10845	   mathematical formalism invented by Alonzo Church, with which LISP
 10846	   is intimately connected.  There is no enrollment list and the
 10847	   criteria for induction are unclear, but one well-known LISPer has
 10848	   been known to give out buttons and, in general, the *members*
 10849	   know who they are....
 10850	
 10851	:Knuth: /nooth/ [Donald E. Knuth's `The Art of Computer
 10852	   Programming'] n. Mythically, the reference that answers all
 10853	   questions about data structures or algorithms.  A safe answer when
 10854	   you do not know: "I think you can find that in Knuth."  Contrast
 10855	   {literature, the}.  See also {bible}.
 10856	
 10857	:kremvax: /krem-vaks/ [from the then large number of {USENET}
 10858	   {VAXen} with names of the form foovax] n. Originally, a
 10859	   fictitious USENET site at the Kremlin, announced on April 1, 1984
 10860	   in a posting ostensibly originated there by Soviet leader
 10861	   Konstantin Chernenko.  The posting was actually forged by Piet
 10862	   Beertema as an April Fool's joke.  Other fictitious sites mentioned
 10863	   in the hoax were moskvax and {kgbvax}.  This was probably
 10864	   the funniest of the many April Fool's forgeries perpetrated on
 10865	   USENET (which has negligible security against them), because the
 10866	   notion that USENET might ever penetrate the Iron Curtain seemed so
 10867	   totally absurd at the time.
 10868	
 10869	   In fact, it was only six years later that the first genuine site in
 10870	   Moscow, demos.su, joined USENET.  Some readers needed
 10871	   convincing that the postings from it weren't just another prank.
 10872	   Vadim Antonov, senior programmer at Demos and the major poster from
 10873	   there up to mid-1991, was quite aware of all this, referred to it
 10874	   frequently in his own postings, and at one point twitted some
 10875	   credulous readers by blandly asserting that he *was* a
 10876	   hoax!
 10877	
 10878	   Eventually he even arranged to have the domain's gateway site
 10879	   *named* kremvax, thus neatly turning fiction into truth
 10880	   and demonstrating that the hackish sense of humor transcends
 10881	   cultural barriers.  [Mr. Antonov also contributed the
 10882	   Russian-language material for this lexicon. --- ESR]
 10883	
 10884	   In an even more ironic historical footnote, kremvax became an
 10885	   electronic center of the anti-communist resistance during the
 10886	   bungled hard-line coup of August 1991.  During those three days the
 10887	   Soviet UUCP network centered on kremvax became the only
 10888	   trustworthy news source for many places within the USSR.  Though
 10889	   the sysops were concentrating on internal communications,
 10890	   cross-border postings included immediate transliterations of Boris
 10891	   Yeltsin's decrees condemning the coup and eyewitness reports of the
 10892	   demonstrations in Moscow's streets.  In those hours, years of
 10893	   speculation that totalitarianism would prove unable to maintain its
 10894	   grip on politically-loaded information in the age of computer
 10895	   networking were proved devastatingly accurate --- and the original
 10896	   kremvax joke became a reality as Yeltsin and the new Russian
 10897	   revolutionaries of `glasnost' and `perestroika' made
 10898	   kremvax one of the timeliest means of their outreach to the
 10899	   West.
 10900	
 10901	:kyrka: /shir'k*/ n. See {feature key}.
 10902	
 10903	= L =
 10904	=====
 10905	
 10906	:lace card: n. obs. A {{punched card}} with all holes punched
 10907	   (also called a `whoopee card').  Card readers tended to jam when
 10908	   they got to one of these, as the resulting card had too little
 10909	   structural strength to avoid buckling inside the mechanism.  Card
 10910	   punches could also jam trying to produce these things owing to
 10911	   power-supply problems.  When some practical joker fed a lace card
 10912	   through the reader, you needed to clear the jam with a `card
 10913	   knife' --- which you used on the joker first.
 10914	
 10915	:language lawyer: n. A person, usually an experienced or senior
 10916	   software engineer, who is intimately familiar with many or most of
 10917	   the numerous restrictions and features (both useful and esoteric)
 10918	   applicable to one or more computer programming languages.  A
 10919	   language lawyer is distinguished by the ability to show you the
 10920	   five sentences scattered through a 200-plus-page manual that
 10921	   together imply the answer to your question "if only you had
 10922	   thought to look there".  Compare {wizard}, {legal},
 10923	   {legalese}.
 10924	
 10925	:languages of choice: n. {C} and {LISP}.  Nearly every
 10926	   hacker knows one of these, and most good ones are fluent in both.
 10927	   Smalltalk and Prolog are also popular in small but influential
 10928	   communities.
 10929	
 10930	   There is also a rapidly dwindling category of older hackers with
 10931	   FORTRAN, or even assembler, as their language of choice.  They
 10932	   often prefer to be known as {real programmer}s, and other
 10933	   hackers consider them a bit odd (see "{The Story of Mel, a
 10934	   Real Programmer}" in {appendix A}).  Assembler is generally no longer
 10935	   considered interesting or appropriate for anything but {HLL}
 10936	   implementation, {glue}, and a few time-critical and
 10937	   hardware-specific uses in systems programs.  FORTRAN occupies a
 10938	   shrinking niche in scientific programming.
 10939	
 10940	   Most hackers tend to frown on languages like {{Pascal}} and
 10941	   {{Ada}}, which don't give them the near-total freedom considered
 10942	   necessary for hacking (see {bondage-and-discipline language}),
 10943	   and to regard everything that's even remotely connected with
 10944	   {COBOL} or other traditional {card walloper} languages as a
 10945	   total and unmitigated {loss}.
 10946	
 10947	:larval stage: n. Describes a period of monomaniacal concentration
 10948	   on coding apparently passed through by all fledgling hackers.
 10949	   Common symptoms include the perpetration of more than one 36-hour
 10950	   {hacking run} in a given week; neglect of all other activities
 10951	   including usual basics like food, sleep, and personal hygiene; and
 10952	   a chronic case of advanced bleary-eye.  Can last from 6 months to 2
 10953	   years, the apparent median being around 18 months.  A few so
 10954	   afflicted never resume a more `normal' life, but the ordeal
 10955	   seems to be necessary to produce really wizardly (as opposed to
 10956	   merely competent) programmers.  See also {wannabee}.  A less
 10957	   protracted and intense version of larval stage (typically lasting
 10958	   about a month) may recur when one is learning a new {OS} or
 10959	   programming language.
 10960	
 10961	:lase: /layz/ vt. To print a given document via a laser printer.
 10962	   "OK, let's lase that sucker and see if all those graphics-macro
 10963	   calls did the right things."
 10964	
 10965	:laser chicken: n. Kung Pao Chicken, a standard Chinese dish
 10966	   containing chicken, peanuts, and hot red peppers in a spicy
 10967	   pepper-oil sauce.  Many hackers call it `laser chicken' for
 10968	   two reasons: It can {zap} you just like a laser, and the
 10969	   sauce has a red color reminiscent of some laser beams.
 10970	
 10971	   In a variation on this theme, it is reported that some Australian
 10972	   hackers have redesignated the common dish `lemon chicken' as
 10973	   `Chernobyl Chicken'.  The name is derived from the color of the
 10974	   sauce, which is considered bright enough to glow in the dark (as,
 10975	   mythically, do some of the inhabitants of Chernobyl).
 10976	
 10977	:Lasherism: [Harvard] n. A program which solves a standard problem
 10978	   (such as the Eight Queens puzzle or implementing the {life}
 10979	   algorithm) in a deliberately nonstandard way.  Distinguished from a
 10980	   {crock} or {kluge} by the fact that the programmer did it on
 10981	   purpose as a mental exercise.  Lew Lasher was a student at Harvard
 10982	   around 1980 who became notorious for such behavior.
 10983	
 10984	:laundromat: n. Syn. {disk farm}; see {washing machine}.
 10985	
 10986	:LDB: /l*'d*b/ [from the PDP-10 instruction set] vt. To extract
 10987	   from the middle.  "LDB me a slice of cake, please." This usage
 10988	   has been kept alive by Common LISP's function of the same name.
 10989	   Considered silly.  See also {DPB}.
 10990	
 10991	:leaf site: n. A machine that merely originates and reads USENET
 10992	   news or mail, and does not relay any third-party traffic.  Often
 10993	   uttered in a critical tone; when the ratio of leaf sites to
 10994	   backbone, rib, and other relay sites gets too high, the network
 10995	   tends to develop bottlenecks.  Compare {backbone site}, {rib
 10996	   site}.
 10997	
 10998	:leak: n. With qualifier, one of a class of resource-management bugs
 10999	   that occur when resources are not freed properly after operations
 11000	   on them are finished, so they effectively disappear (leak out).
 11001	   This leads to eventual exhaustion as new allocation requests come
 11002	   in.  {memory leak} and {fd leak} have their own entries; one
 11003	   might also refer, to, say, a `window handle leak' in a window
 11004	   system.
 11005	
 11006	:leaky heap: [Cambridge] n. An {arena} with a {memory leak}.
 11007	
 11008	:legal: adj. Loosely used to mean `in accordance with all the
 11009	   relevant rules', esp. in connection with some set of constraints
 11010	   defined by software.  "The older =+ alternate for += is no longer
 11011	   legal syntax in ANSI C."  "This parser processes each line of
 11012	   legal input the moment it sees the trailing linefeed."  Hackers
 11013	   often model their work as a sort of game played with the
 11014	   environment in which the objective is to maneuver through the
 11015	   thicket of `natural laws' to achieve a desired objective.  Their
 11016	   use of `legal' is flavored as much by this game-playing sense as by
 11017	   the more conventional one having to do with courts and lawyers.
 11018	   Compare {language lawyer}, {legalese}.
 11019	
 11020	:legalese: n. Dense, pedantic verbiage in a language description,
 11021	   product specification, or interface standard; text that seems
 11022	   designed to obfuscate and requires a {language lawyer} to
 11023	   {parse} it.  Though hackers are not afraid of high information
 11024	   density and complexity in language (indeed, they rather enjoy
 11025	   both), they share a deep and abiding loathing for legalese; they
 11026	   associate it with deception, {suit}s, and situations in which
 11027	   hackers generally get the short end of the stick.
 11028	
 11029	:LER: /L-E-R/ [TMRC, from `Light-Emitting Diode'] n. A
 11030	   light-emitting resistor (that is, one in the process of burning
 11031	   up).  Ohm's law was broken.  See {SED}.
 11032	
 11033	:LERP: /lerp/ vi.,n. Quasi-acronym for Linear Interpolation, used as a
 11034	   verb or noun for the operation.  E.g., Bresenham's algorithm lerps
 11035	   incrementally between the two endpoints of the line.
 11036	
 11037	:let the smoke out: v. To fry hardware (see {fried}).  See
 11038	   {magic smoke} for the mythology behind this.
 11039	
 11040	:letterbomb: n. A piece of {email} containing {live data}
 11041	   intended to do nefarious things to the recipient's machine or
 11042	   terminal.  It is possible, for example, to send letterbombs that
 11043	   will lock up some specific kinds of terminals when they are viewed,
 11044	   so thoroughly that the user must cycle power (see {cycle}, sense
 11045	   3) to unwedge them.  Under UNIX, a letterbomb can also try to get
 11046	   part of its contents interpreted as a shell command to the mailer.
 11047	   The results of this could range from silly to tragic.  See also
 11048	   {Trojan horse}; compare {nastygram}.
 11049	
 11050	:lexer: /lek'sr/ n. Common hacker shorthand for `lexical
 11051	   analyzer', the input-tokenizing stage in the parser for a language
 11052	   (the part that breaks it into word-like pieces).  "Some C lexers
 11053	   get confused by the old-style compound ops like `=-'."
 11054	
 11055	:lexiphage: /lek'si-fayj`/ n. A notorious word {chomper} on
 11056	   ITS.  See {bagbiter}.
 11057	
 11058	:life: n. 1. A cellular-automata game invented by John Horton
 11059	   Conway and first introduced publicly by Martin Gardner
 11060	   (`Scientific American', October 1970); the game's popularity
 11061	   had to wait a few years for computers on which it could reasonably
 11062	   be played, as it's no fun to simulate the cells by hand.  Many
 11063	   hackers pass through a stage of fascination with it, and hackers at
 11064	   various places contributed heavily to the mathematical analysis of
 11065	   this game (most notably Bill Gosper at MIT, who even implemented
 11066	   life in {TECO}!; see {Gosperism}).  When a hacker mentions
 11067	   `life', he is much more likely to mean this game than the
 11068	   magazine, the breakfast cereal, or the human state of existence.
 11069	   2. The opposite of {USENET}.  As in {Get a life!}
 11070	
 11071	:Life is hard: [XEROX PARC] prov. This phrase has two possible
 11072	   interpretations: (1) "While your suggestion may have some merit, I
 11073	   will behave as though I hadn't heard it."  (2) "While your
 11074	   suggestion has obvious merit, equally obvious circumstances prevent
 11075	   it from being seriously considered."  The charm of the phrase lies
 11076	   precisely in this subtle but important ambiguity.
 11077	
 11078	:light pipe: n. Fiber optic cable.  Oppose {copper}.
 11079	
 11080	:lightweight: adj. Opposite of {heavyweight}; usually found in
 11081	   combining forms such as `lightweight process'.
 11082	
 11083	:like kicking dead whales down the beach: adj. Describes a slow,
 11084	   difficult, and disgusting process.  First popularized by a famous
 11085	   quote about the difficulty of getting work done under one of IBM's
 11086	   mainframe OSes.  "Well, you *could* write a C compiler in
 11087	   COBOL, but it would be like kicking dead whales down the beach."
 11088	   See also {fear and loathing}
 11089	
 11090	:like nailing jelly to a tree: adj. Used to describe a task thought
 11091	   to be impossible, esp. one in which the difficulty arises from
 11092	   poor specification or inherent slipperiness in the problem domain.
 11093	   "Trying to display the `prettiest' arrangement of nodes and arcs
 11094	   that diagrams a given graph is like nailing jelly to a tree,
 11095	   because nobody's sure what `prettiest' means algorithmically."
 11096	
 11097	:line 666: [from Christian eschatological myth] n. The notational
 11098	   line of source at which a program fails for obscure reasons,
 11099	   implying either that *somebody* is out to get it (when you are
 11100	   the programmer), or that it richly deserves to be so gotten (when
 11101	   you are not). "It works when I trace through it, but seems to
 11102	   crash on line 666 when I run it."  "What happens is that whenever
 11103	   a large batch comes through, mmdf dies on the Line of the Beast.
 11104	   Probably some twit hardcoded a buffer size."
 11105	
 11106	:line eater, the: [USENET] n. 1. A bug in some now-obsolete
 11107	   versions of the netnews software that used to eat up to BUFSIZ
 11108	   bytes of the article text.  The bug was triggered by having the
 11109	   text of the article start with a space or tab.  This bug was
 11110	   quickly personified as a mythical creature called the `line
 11111	   eater', and postings often included a dummy line of `line eater
 11112	   food'.  Ironically, line eater `food' not beginning with a space or
 11113	   tab wasn't actually eaten, since the bug was avoided; but if there
 11114	   *was* a space or tab before it, then the line eater would eat
 11115	   the food *and* the beginning of the text it was supposed to be
 11116	   protecting.  The practice of `sacrificing to the line eater'
 11117	   continued for some time after the bug had been {nailed to the
 11118	   wall}, and is still humorously referred to.  The bug itself is
 11119	   still (in mid-1991) occasionally reported to be lurking in some
 11120	   mail-to-netnews gateways.  2. See {NSA line eater}.
 11121	
 11122	:line noise: n. 1. [techspeak] Spurious characters due to
 11123	   electrical noise in a communications link, especially an RS-232
 11124	   serial connection.  Line noise may be induced by poor connections,
 11125	   interference or crosstalk from other circuits, electrical storms,
 11126	   {cosmic rays}, or (notionally) birds crapping on the phone
 11127	   wires.  2. Any chunk of data in a file or elsewhere that looks like
 11128	   the results of line noise in sense 1.  3. Text that is
 11129	   theoretically a readable text or program source but employs syntax
 11130	   so bizarre that it looks like line noise in senses 1 or 2.  Yes,
 11131	   there are languages this ugly.  The canonical example is {TECO};
 11132	   it is often claimed that "TECO's input syntax is indistinguishable
 11133	   from line noise."  Other non-{WYSIWYG} editors, such as Multics
 11134	   `qed' and Unix `ed', in the hands of a real hacker, also
 11135	   qualify easily, as do deliberately obfuscated languages such as
 11136	   {INTERCAL}.
 11137	
 11138	:line starve: [MIT] 1. vi. To feed paper through a printer the
 11139	   wrong way by one line (most printers can't do this).  On a display
 11140	   terminal, to move the cursor up to the previous line of the screen.
 11141	   "To print `X squared', you just output `X', line starve, `2', line
 11142	   feed."  (The line starve causes the `2' to appear on the line
 11143	   above the `X', and the line feed gets back to the original line.)
 11144	   2. n. A character (or character sequence) that causes a terminal to
 11145	   perform this action.  ASCII 0011010, also called SUB or control-Z,
 11146	   was one common line-starve character in the days before
 11147	   microcomputers and the X3.64 terminal standard.  Unlike `line
 11148	   feed', `line starve' is *not* standard {{ASCII}}
 11149	   terminology.  Even among hackers it is considered a bit silly.
 11150	   3. [proposed] A sequence such as \c (used in System V echo, as well
 11151	   as nroff/troff) that suppresses a {newline} or other
 11152	   character(s) that would normally be emitted.
 11153	
 11154	:link farm: [UNIX] n. A directory tree that contains many links to
 11155	   files in a master directory tree of files.  Link farms save space
 11156	   when (for example) one is maintaining several nearly identical
 11157	   copies of the same source tree, e.g., when the only difference is
 11158	   architecture-dependent object files.  "Let's freeze the source and
 11159	   then rebuild the FROBOZZ-3 and FROBOZZ-4 link farms."  Link farms
 11160	   may also be used to get around restrictions on the number of
 11161	   `-I' (include-file directory) arguments on older
 11162	   C preprocessors.  However, they can also get completely out of
 11163	   hand, becoming the filesystem equivalent of {spaghetti code}.
 11164	
 11165	:link-dead: [MUD] adj. Said of a {MUD} character who has frozen in
 11166	   place because of a dropped Internet connection.
 11167	
 11168	:lint: [from UNIX's `lint(1)', named for the bits of fluff it
 11169	   picks from programs] 1. vt. To examine a program closely for style,
 11170	   language usage, and portability problems, esp. if in C, esp. if
 11171	   via use of automated analysis tools, most esp. if the UNIX
 11172	   utility `lint(1)' is used.  This term used to be restricted to
 11173	   use of `lint(1)' itself, but (judging by references on USENET)
 11174	   it has become a shorthand for {desk check} at some non-UNIX
 11175	   shops, even in languages other than C.  Also as v.  {delint}.
 11176	   2. n. Excess verbiage in a document, as in "this draft has too
 11177	   much lint".
 11178	
 11179	:lion food: [IBM] n. Middle management or HQ staff (by extension,
 11180	   administrative drones in general).  From an old joke about two
 11181	   lions who, escaping from the zoo, split up to increase their
 11182	   chances but agreed to meet after 2 months.  When they finally
 11183	   meet, one is skinny and the other overweight.  The thin one says:
 11184	   "How did you manage?  I ate a human just once and they turned out
 11185	   a small army to chase me --- guns, nets, it was terrible.  Since
 11186	   then I've been reduced to eating mice, insects, even grass."  The
 11187	   fat one replies: "Well, *I* hid near an IBM office and ate a
 11188	   manager a day.  And nobody even noticed!"
 11189	
 11190	:Lions Book: n. `Source Code and Commentary on UNIX level 6',
 11191	   by John Lions.  The two parts of this book contained (1) the entire
 11192	   source listing of the UNIX Version 6 kernel, and (2) a commentary
 11193	   on the source discussing the algorithms.  These were circulated
 11194	   internally at the University of New South Wales beginning 1976--77,
 11195	   and were for years after the *only* detailed kernel
 11196	   documentation available to anyone outside Bell Labs.  Because
 11197	   Western Electric wished to maintain trade secret status on the
 11198	   kernel, the Lions book was never formally published and was only
 11199	   supposed to be distributed to affiliates of source licensees.  In
 11200	   spite of this, it soon spread by samizdat to a good many of the
 11201	   early UNIX hackers.
 11202	
 11203	:LISP: [from `LISt Processing language', but mythically from
 11204	   `Lots of Irritating Superfluous Parentheses'] n. The name of AI's
 11205	   mother tongue, a language based on the ideas of (a) variable-length
 11206	   lists and trees as fundamental data types, and (b) the
 11207	   interpretation of code as data and vice-versa.  Invented by John
 11208	   McCarthy at MIT in the late 1950s, it is actually older than any
 11209	   other {HLL} still in use except FORTRAN.  Accordingly, it has
 11210	   undergone considerable adaptive radiation over the years; modern
 11211	   variants are quite different in detail from the original LISP 1.5.
 11212	   The dominant HLL among hackers until the early 1980s, LISP now
 11213	   shares the throne with {C}.  See {languages of choice}.
 11214	
 11215	   All LISP functions and programs are expressions that return
 11216	   values; this, together with the high memory utilization of LISPs,
 11217	   gave rise to Alan Perlis's famous quip (itself a take on an Oscar
 11218	   Wilde quote) that "LISP programmers know the value of everything
 11219	   and the cost of nothing".
 11220	
 11221	   One significant application for LISP has been as a proof by example
 11222	   that most newer languages, such as {COBOL} and {Ada}, are full
 11223	   of unnecessary {crock}s.  When the {Right Thing} has already
 11224	   been done once, there is no justification for {bogosity} in newer
 11225	   languages.
 11226	
 11227	:literature, the: n. Computer-science journals and other
 11228	   publications, vaguely gestured at to answer a question that the
 11229	   speaker believes is {trivial}.  Thus, one might answer an
 11230	   annoying question by saying "It's in the literature."  Oppose
 11231	   {Knuth}, which has no connotation of triviality.
 11232	
 11233	:little-endian: adj. Describes a computer architecture in which,
 11234	   within a given 16- or 32-bit word, bytes at lower addresses have
 11235	   lower significance (the word is stored `little-end-first').  The
 11236	   PDP-11 and VAX families of computers and Intel microprocessors and
 11237	   a lot of communications and networking hardware are little-endian.
 11238	   See {big-endian}, {middle-endian}, {NUXI problem}.  The term
 11239	   is sometimes used to describe the ordering of units other than
 11240	   bytes; most often these are bits within a byte.
 11241	
 11242	:live data: n. 1. Data that is written to be interpreted and takes
 11243	   over program flow when triggered by some un-obvious operation, such
 11244	   as viewing it.  One use of such hacks is to break security.  For
 11245	   example, some smart terminals have commands that allow one to
 11246	   download strings to program keys; this can be used to write live
 11247	   data that, when listed to the terminal, infects it with a
 11248	   security-breaking {virus} that is triggered the next time a
 11249	   hapless user strikes that key.  For another, there are some
 11250	   well-known bugs in {vi} that allow certain texts to send
 11251	   arbitrary commands back to the machine when they are simply viewed.
 11252	   2. In C code, data that includes pointers to function {hook}s
 11253	   (executable code).  3. An object, such as a {trampoline}, that is
 11254	   constructed on the fly by a program and intended to be executed as
 11255	   code.  4. Actual real-world data, as opposed to `test data'.
 11256	   For example, "I think I have the record deletion module
 11257	   finished."  "Have you tried it out on live data?"  It usually
 11258	   carries the connotation that live data is more fragile and must not
 11259	   be corrupted, else bad things will happen.  So a possible alternate
 11260	   response to the above claim might be: "Well, make sure it works
 11261	   perfectly before we throw live data at it."  The implication here
 11262	   is that record deletion is something pretty significant, and a
 11263	   haywire record-deletion module running amok on live data would
 11264	   cause great harm and probably require restoring from backups.
 11265	
 11266	:Live Free Or Die!: imp. 1. The state motto of New Hampshire, which
 11267	   appears on that state's automobile license plates.  2. A slogan
 11268	   associated with UNIX in the romantic days when UNIX aficionados saw
 11269	   themselves as a tiny, beleaguered underground tilting against the
 11270	   windmills of industry.  The "free" referred specifically to
 11271	   freedom from the {fascist} design philosophies and crufty
 11272	   misfeatures common on commercial operating systems.  Armando
 11273	   Stettner, one of the early UNIX developers, used to give out fake
 11274	   license plates bearing this motto under a large UNIX, all in New
 11275	   Hampshire colors of green and white.  These are now valued
 11276	   collector's items.
 11277	
 11278	:livelock: /li:v'lok/ n. A situation in which some critical stage
 11279	   of a task is unable to finish because its clients perpetually
 11280	   create more work for it to do after they have been serviced but
 11281	   before it can clear its queue.  Differs from {deadlock} in that
 11282	   the process is not blocked or waiting for anything, but has a
 11283	   virtually infinite amount of work to do and can never catch up.
 11284	
 11285	:liveware: /li:v'weir/ n. 1. Synonym for {wetware}.  Less
 11286	   common.  2. [Cambridge] Vermin. "Waiter, there's some liveware in
 11287	   my salad..."
 11288	
 11289	:lobotomy: n. 1. What a hacker subjected to formal management
 11290	   training is said to have undergone.  At IBM and elsewhere this term
 11291	   is used by both hackers and low-level management; the latter
 11292	   doubtless intend it as a joke.  2. The act of removing the
 11293	   processor from a microcomputer in order to replace or upgrade it.
 11294	   Some very cheap {clone} systems are sold in `lobotomized' form
 11295	   --- everything but the brain.
 11296	
 11297	:locked and loaded: [from military slang for an M-16 rifle with
 11298	   magazine inserted and prepared for firing] adj. Said of a removable
 11299	   disk volume properly prepared for use --- that is, locked into the
 11300	   drive and with the heads loaded.  Ironically, because their heads
 11301	   are `loaded' whenever the power is up, this description is never
 11302	   used of {{Winchester}} drives (which are named after a rifle).
 11303	
 11304	:locked up: adj. Syn. for {hung}, {wedged}.
 11305	
 11306	:logic bomb: n. Code surreptitiously inserted in an application or
 11307	   OS that causes it to perform some destructive or
 11308	   security-compromising activity whenever specified conditions are
 11309	   met.  Compare {back door}.
 11310	
 11311	:logical: [from the technical term `logical device', wherein a
 11312	   physical device is referred to by an arbitrary `logical' name]
 11313	   adj.  Having the role of.  If a person (say, Les Earnest at SAIL)
 11314	   who had long held a certain post left and were replaced, the
 11315	   replacement would for a while be known as the `logical' Les
 11316	   Earnest.  (This does not imply any judgment on the replacement.)
 11317	   Compare {virtual}.
 11318	
 11319	   At Stanford, `logical' compass directions denote a coordinate
 11320	   system in which `logical north' is toward San Francisco,
 11321	   `logical west' is toward the ocean, etc., even though logical
 11322	   north varies between physical (true) north near San Francisco and
 11323	   physical west near San Jose.  (The best rule of thumb here is that,
 11324	   by definition, El Camino Real always runs logical north-and-south.)
 11325	   In giving directions, one might say: "To get to Rincon Tarasco
 11326	   restaurant, get onto {El Camino Bignum} going logical north."
 11327	   Using the word `logical' helps to prevent the recipient from
 11328	   worrying about that the fact that the sun is setting almost
 11329	   directly in front of him.  The concept is reinforced by North
 11330	   American highways which are almost, but not quite, consistently
 11331	   labeled with logical rather than physical directions.  A similar
 11332	   situation exists at MIT: Route 128 (famous for the electronics
 11333	   industry that has grown up along it) is a 3-quarters circle
 11334	   surrounding Boston at a radius of 10 miles, terminating near the
 11335	   coastline at each end.  It would be most precise to describe the
 11336	   two directions along this highway as `clockwise' and
 11337	   `counterclockwise', but the road signs all say "north" and
 11338	   "south", respectively.  A hacker might describe these directions
 11339	   as `logical north' and `logical south', to indicate that they
 11340	   are conventional directions not corresponding to the usual
 11341	   denotation for those words.  (If you went logical south along the
 11342	   entire length of route 128, you would start out going northwest,
 11343	   curve around to the south, and finish headed due east, including
 11344	   one infamous stretch of pavement which is simultaneously route 128
 11345	   south and Interstate 93 north, and is signed as such!)
 11346	
 11347	:loop through: vt. To process each element of a list of things.
 11348	   "Hold on, I've got to loop through my paper mail."  Derives from
 11349	   the computer-language notion of an iterative loop; compare `cdr
 11350	   down' (under {cdr}), which is less common among C and UNIX
 11351	   programmers.  ITS hackers used to say `IRP over' after an
 11352	   obscure pseudo-op in the MIDAS PDP-10 assembler.
 11353	
 11354	:loose bytes: n. Commonwealth hackish term for the padding bytes or
 11355	   {shim}s many compilers insert between members of a record or
 11356	   structure to cope with alignment requirements imposed by the
 11357	   machine architecture.
 11358	
 11359	:lord high fixer: [primarily British, from Gilbert & Sullivan's
 11360	   `lord high executioner'] n. The person in an organization who knows
 11361	   the most about some aspect of a system.  See {wizard}.
 11362	
 11363	:lose: [MIT] vi. 1. To fail.  A program loses when it encounters
 11364	   an exceptional condition or fails to work in the expected manner.
 11365	   2. To be exceptionally unesthetic or crocky.  3. Of people, to
 11366	   be obnoxious or unusually stupid (as opposed to ignorant).  See
 11367	   also {deserves to lose}.  4. n. Refers to something that is
 11368	   {losing}, especially in the phrases "That's a lose!" and "What
 11369	   a lose!"
 11370	
 11371	:lose lose: interj. A reply to or comment on an undesirable
 11372	   situation.  "I accidentally deleted all my files!"  "Lose,
 11373	   lose."
 11374	
 11375	:loser: n. An unexpectedly bad situation, program, programmer, or
 11376	   person.  Someone who habitually loses.  (Even winners can lose
 11377	   occasionally.)  Someone who knows not and knows not that he knows
 11378	   not.  Emphatic forms are `real loser', `total loser', and
 11379	   `complete loser' (but not *`moby loser', which would be a
 11380	   contradiction in terms).  See {luser}.
 11381	
 11382	:losing: adj. Said of anything that is or causes a {lose} or
 11383	   {lossage}.
 11384	
 11385	:loss: n. Something (not a person) that loses; a situation in which
 11386	   something is losing.  Emphatic forms include `moby loss', and
 11387	   `total loss', `complete loss'.  Common interjections are
 11388	   "What a loss!"  and "What a moby loss!"  Note that `moby loss'
 11389	   is OK even though *`moby loser' is not used; applied to an abstract
 11390	   noun, moby is simply a magnifier, whereas when applied to a person
 11391	   it implies substance and has positive connotations.  Compare
 11392	   {lossage}.
 11393	
 11394	:lossage: /los'*j/ n. The result of a bug or malfunction.  This
 11395	   is a mass or collective noun.  "What a loss!" and "What
 11396	   lossage!"  are nearly synonymous.  The former is slightly more
 11397	   particular to the speaker's present circumstances; the latter
 11398	   implies a continuing {lose} of which the speaker is currently a
 11399	   victim.  Thus (for example) a temporary hardware failure is a loss,
 11400	   but bugs in an important tool (like a compiler) are serious
 11401	   lossage.
 11402	
 11403	:lost in the noise: adj. Syn. {lost in the underflow}.  This term
 11404	   is from signal processing, where signals of very small amplitude
 11405	   cannot be separated from low-intensity noise in the system.  Though
 11406	   popular among hackers, it is not confined to hackerdom; physicists,
 11407	   engineers, astronomers, and statisticians all use it.
 11408	
 11409	:lost in the underflow: adj. Too small to be worth considering;
 11410	   more specifically, small beyond the limits of accuracy or
 11411	   measurement.  This is a reference to `floating underflow', a
 11412	   condition that can occur when a floating-point arithmetic processor
 11413	   tries to handle quantities smaller than its limit of magnitude.  It
 11414	   is also a pun on `undertow' (a kind of fast, cold current that
 11415	   sometimes runs just offshore and can be dangerous to swimmers).
 11416	   "Well, sure, photon pressure from the stadium lights alters the
 11417	   path of a thrown baseball, but that effect gets lost in the
 11418	   underflow."  See also {overflow bit}.
 11419	
 11420	:lots of MIPS but no I/O: adj. Used to describe a person who is
 11421	   technically brilliant but can't seem to communicate with human
 11422	   beings effectively.  Technically it describes a machine that has
 11423	   lots of processing power but is bottlenecked on input-output (in
 11424	   1991, the IBM Rios, a.k.a. RS/6000, is a notorious recent
 11425	   example).
 11426	
 11427	:low-bandwidth: [from communication theory] adj. Used to indicate a
 11428	   talk that, although not {content-free}, was not terribly
 11429	   informative.  "That was a low-bandwidth talk, but what can you
 11430	   expect for an audience of {suit}s!"  Compare {zero-content},
 11431	   {bandwidth}, {math-out}.
 11432	
 11433	:LPT: /L-P-T/ or /lip'it/ or /lip-it'/ [MIT, via DEC] n.  Line
 11434	   printer, of course.  Rare under UNIX, commoner in hackers with
 11435	   MS-DOS or CP/M background.  The printer device is called
 11436	   `LPT:' on those systems that, like ITS, were strongly
 11437	   influenced by early DEC conventions.
 11438	
 11439	:lunatic fringe: [IBM] n. Customers who can be relied upon to accept
 11440	   release 1 versions of software.
 11441	
 11442	:lurker: n. One of the `silent majority' in a electronic forum;
 11443	   one who posts occasionally or not at all but is known to read the
 11444	   group's postings regularly.  This term is not pejorative and indeed
 11445	   is casually used reflexively: "Oh, I'm just lurking."  Often used
 11446	   in `the lurkers', the hypothetical audience for the group's
 11447	   {flamage}-emitting regulars.
 11448	
 11449	:luser: /loo'zr/ n. A {user}; esp. one who is also a
 11450	   {loser}.  ({luser} and {loser} are pronounced
 11451	   identically.)  This word was coined around 1975 at MIT.  Under
 11452	   ITS, when you first walked up to a terminal at MIT and typed
 11453	   Control-Z to get the computer's attention, it printed out some
 11454	   status information, including how many people were already using
 11455	   the computer; it might print "14 users", for example.  Someone
 11456	   thought it would be a great joke to patch the system to print
 11457	   "14 losers" instead.  There ensued a great controversy, as some
 11458	   of the users didn't particularly want to be called losers to their
 11459	   faces every time they used the computer.  For a while several
 11460	   hackers struggled covertly, each changing the message behind the
 11461	   back of the others; any time you logged into the computer it was
 11462	   even money whether it would say "users" or "losers".  Finally,
 11463	   someone tried the compromise "lusers", and it stuck.  Later one
 11464	   of the ITS machines supported `luser' as a request-for-help
 11465	   command.  ITS died the death in mid-1990, except as a museum piece;
 11466	   the usage lives on, however, and the term `luser' is often seen
 11467	   in program comments.
 11468	
 11469	= M =
 11470	=====
 11471	
 11472	:M: [SI] pref. (on units) suff. (on numbers) See {{quantifiers}}.
 11473	
 11474	:macdink: /mak'dink/ [from the Apple Macintosh, which is said to
 11475	   encourage such behavior] vt. To make many incremental and
 11476	   unnecessary cosmetic changes to a program or file.  Often the
 11477	   subject of the macdinking would be better off without them.
 11478	   "When I left at 11 P.M. last night, he was still macdinking the
 11479	   slides for his presentation."  See also {fritterware}.
 11480	
 11481	:machinable: adj. Machine-readable.  Having the {softcopy} nature.
 11482	
 11483	:machoflops: /mach'oh-flops/ [pun on `megaflops', a coinage for
 11484	   `millions of FLoating-point Operations Per Second'] n. Refers to
 11485	   artificially inflated performance figures often quoted by computer
 11486	   manufacturers.  Real applications are lucky to get half the quoted
 11487	   speed. See {Your mileage may vary}, {benchmark}.
 11488	
 11489	:Macintoy: /mak'in-toy/ n. The Apple Macintosh, considered as a
 11490	   {toy}.  Less pejorative than {Macintrash}.
 11491	
 11492	:Macintrash: /mak'in-trash`/ n. The Apple Macintosh, as described
 11493	   by a hacker who doesn't appreciate being kept away from the
 11494	   *real computer* by the interface.  The term {maggotbox} has
 11495	   been reported in regular use in the Research Triangle area of North
 11496	   Carolina.  Compare {Macintoy}. See also {beige toaster},
 11497	   {WIMP environment}, {point-and-drool interface},
 11498	   {drool-proof paper}, {user-friendly}.
 11499	
 11500	:macro: /mak'roh/ [techspeak] n. A name (possibly followed by a
 11501	   formal {arg} list) that is equated to a text or symbolic
 11502	   expression to which it is to be expanded (possibly with the
 11503	   substitution of actual arguments) by a macro expander.  This
 11504	   definition can be found in any technical dictionary; what those
 11505	   won't tell you is how the hackish connotations of the term have
 11506	   changed over time.
 11507	
 11508	   The term `macro' originated in early assemblers, which encouraged
 11509	   the use of macros as a structuring and information-hiding device.
 11510	   During the early 1970s, macro assemblers became ubiquitous, and
 11511	   sometimes quite as powerful and expensive as {HLL}s, only to fall
 11512	   from favor as improving compiler technology marginalized assembler
 11513	   programming (see {languages of choice}).  Nowadays the term is
 11514	   most often used in connection with the C preprocessor, LISP, or one
 11515	   of several special-purpose languages built around a macro-expansion
 11516	   facility (such as TeX or UNIX's [nt]roff suite).
 11517	
 11518	   Indeed, the meaning has drifted enough that the collective
 11519	   `macros' is now sometimes used for code in any special-purpose
 11520	   application control language (whether or not the language is
 11521	   actually translated by text expansion), and for macro-like entities
 11522	   such as the `keyboard macros' supported in some text editors
 11523	   (and PC TSR or Macintosh INIT/CDEV keyboard enhancers).
 11524	
 11525	:macro-: pref. Large.  Opposite of {micro-}.  In the mainstream
 11526	   and among other technical cultures (for example, medical people)
 11527	   this competes with the prefix {mega-}, but hackers tend to
 11528	   restrict the latter to quantification.
 11529	
 11530	:macrology: /mak-rol'*-jee/ n. 1. Set of usually complex or crufty
 11531	   macros, e.g., as part of a large system written in {LISP},
 11532	   {TECO}, or (less commonly) assembler.  2. The art and science
 11533	   involved in comprehending a macrology in sense 1.  Sometimes
 11534	   studying the macrology of a system is not unlike archeology,
 11535	   ecology, or {theology}, hence the sound-alike construction.  See
 11536	   also {boxology}.
 11537	
 11538	:macrotape: /ma'kroh-tayp/ n. An industry-standard reel of tape, as
 11539	   opposed to a {microtape}.
 11540	
 11541	:maggotbox: /mag'*t-boks/ n. See {Macintrash}.  This is even
 11542	   more derogatory.
 11543	
 11544	:magic: adj. 1. As yet unexplained, or too complicated to explain;
 11545	   compare {automagically} and (Arthur C.) Clarke's Third Law:
 11546	   "Any sufficiently advanced technology is indistinguishable from
 11547	   magic."  "TTY echoing is controlled by a large number of magic
 11548	   bits."  "This routine magically computes the parity of an 8-bit
 11549	   byte in three instructions."  2. Characteristic of something that
 11550	   works although no one really understands why (this is especially
 11551	   called {black magic}).  3. [Stanford] A feature not generally
 11552	   publicized that allows something otherwise impossible, or a feature
 11553	   formerly in that category but now unveiled.  Compare {black
 11554	   magic}, {wizardly}, {deep magic}, {heavy wizardry}.
 11555	
 11556	   For more about hackish `magic', see {A Story About `Magic'}
 11557	   (in {appendix A}).
 11558	
 11559	:magic cookie: [UNIX] n. 1. Something passed between routines or
 11560	   programs that enables the receiver to perform some operation; a
 11561	   capability ticket or opaque identifier.  Especially used of small
 11562	   data objects that contain data encoded in a strange or
 11563	   intrinsically machine-dependent way.  E.g., on non-UNIX OSes with a
 11564	   non-byte-stream model of files, the result of `ftell(3)' may
 11565	   be a magic cookie rather than a byte offset; it can be passed to
 11566	   `fseek(3)', but not operated on in any meaningful way.  The
 11567	   phrase `it hands you a magic cookie' means it returns a result
 11568	   whose contents are not defined but which can be passed back to the
 11569	   same or some other program later.  2. An in-band code for
 11570	   changing graphic rendition (e.g., inverse video or underlining) or
 11571	   performing other control functions.  Some older terminals would
 11572	   leave a blank on the screen corresponding to mode-change magic
 11573	   cookies; this was also called a {glitch}.  See also {cookie}.
 11574	
 11575	:magic number: [UNIX/C] n. 1. In source code, some non-obvious
 11576	   constant whose value is significant to the operation of a program
 11577	   and that is inserted inconspicuously in-line ({hardcoded}),
 11578	   rather than expanded in by a symbol set by a commented
 11579	   `#define'.  Magic numbers in this sense are bad style.  2. A
 11580	   number that encodes critical information used in an algorithm in
 11581	   some opaque way.  The classic examples of these are the numbers
 11582	   used in hash or CRC functions, or the coefficients in a linear
 11583	   congruential generator for pseudo-random numbers.  This sense
 11584	   actually predates and was ancestral to the more common sense 1.
 11585	   3. Special data located at the beginning of a binary data file to
 11586	   indicate its type to a utility.  Under UNIX, the system and various
 11587	   applications programs (especially the linker) distinguish between
 11588	   types of executable file by looking for a magic number.  Once upon
 11589	   a time, these magic numbers were PDP-11 branch instructions that
 11590	   skipped over header data to the start of executable code; the 0407,
 11591	   for example, was octal for `branch 16 bytes relative'.  Nowadays
 11592	   only a {wizard} knows the spells to create magic numbers.  How do
 11593	   you choose a fresh magic number of your own?  Simple --- you pick
 11594	   one at random.  See?  It's magic!
 11595	
 11596	:magic smoke: n. A substance trapped inside IC packages that enables
 11597	   them to function (also called `blue smoke'; this is similar to
 11598	   the archaic `phlogiston' hypothesis about combustion).  Its
 11599	   existence is demonstrated by what happens when a chip burns up ---
 11600	   the magic smoke gets let out, so it doesn't work any more.  See
 11601	   {smoke test}, {let the smoke out}.
 11602	
 11603	   USENETter Jay Maynard tells the following story: "Once, while
 11604	   hacking on a dedicated Z80 system, I was testing code by blowing
 11605	   EPROMs and plugging them in the system, then seeing what happened.
 11606	   One time, I plugged one in backwards.  I only discovered that
 11607	   *after* I realized that Intel didn't put power-on lights under
 11608	   the quartz windows on the tops of their EPROMs --- the die was
 11609	   glowing white-hot.  Amazingly, the EPROM worked fine after I erased
 11610	   it, filled it full of zeros, then erased it again.  For all I know,
 11611	   it's still in service.  Of course, this is because the magic smoke
 11612	   didn't get let out."  Compare the original phrasing of {Murphy's
 11613	   Law}.
 11614	
 11615	:mailing list: n. (often shortened in context to `list') 1. An
 11616	   {email} address that is an alias (or {macro}, though that word
 11617	   is never used in this connection) for many other email addresses.
 11618	   Some mailing lists are simple `reflectors', redirecting mail sent
 11619	   to them to the list of recipients.  Others are filtered by humans
 11620	   or programs of varying degrees of sophistication; lists filtered by
 11621	   humans are said to be `moderated'.  2. The people who receive
 11622	   your email when you send it to such an address.
 11623	
 11624	   Mailing lists are one of the primary forms of hacker interaction,
 11625	   along with {USENET}.  They predate USENET, having originated
 11626	   with the first UUCP and ARPANET connections.  They are often used
 11627	   for private information-sharing on topics that would be too
 11628	   specialized for or inappropriate to public USENET groups.  Though
 11629	   some of these maintain purely technical content (such as the
 11630	   Internet Engineering Task Force mailing list), others (like the
 11631	   `sf-lovers' list maintained for many years by Saul Jaffe) are
 11632	   recreational, and others are purely social.  Perhaps the most
 11633	   infamous of the social lists was the eccentric bandykin
 11634	   distribution; its latter-day progeny, lectroids and
 11635	   tanstaafl, still include a number of the oddest and most
 11636	   interesting people in hackerdom.
 11637	
 11638	   Mailing lists are easy to create and (unlike USENET) don't tie up a
 11639	   significant amount of machine resources (until they get very large,
 11640	   at which point they can become interesting torture tests for mail
 11641	   software).  Thus, they are often created temporarily by working
 11642	   groups, the members of which can then collaborate on a project
 11643	   without ever needing to meet face-to-face.  Much of the material in
 11644	   this lexicon was criticized and polished on just such a mailing
 11645	   list (called `jargon-friends'), which included all the co-authors
 11646	   of Steele-1983.
 11647	
 11648	:main loop: n. Software tools are often written to perform some
 11649	   actions repeatedly on whatever input is handed to them, terminating
 11650	   when there is no more input or they are explicitly told to go away.
 11651	   In such programs, the loop that gets and processes input is called
 11652	   the `main loop'.  See also {driver}.
 11653	
 11654	:mainframe: n. Term originally referring to the cabinet
 11655	   containing the central processor unit or `main frame' of a
 11656	   room-filling {Stone Age} batch machine.  After the emergence of
 11657	   smaller `minicomputer' designs in the early 1970s, the
 11658	   traditional {big iron} machines were described as `mainframe
 11659	   computers' and eventually just as mainframes.  The term carries the
 11660	   connotation of a machine designed for batch rather than interactive
 11661	   use, though possibly with an interactive timesharing operating
 11662	   system retrofitted onto it; it is especially used of machines built
 11663	   by IBM, Unisys, and the other great {dinosaur}s surviving from
 11664	   computing's {Stone Age}.
 11665	
 11666	   It is common wisdom among hackers that the mainframe architectural
 11667	   tradition is essentially dead (outside of the tiny market for
 11668	   {number-crunching} supercomputers (see {cray})), having been
 11669	   swamped by the recent huge advances in IC technology and low-cost
 11670	   personal computing.  As of 1991, corporate America hasn't quite
 11671	   figured this out yet, though the wave of failures, takeovers, and
 11672	   mergers among traditional mainframe makers are certainly straws in
 11673	   the wind (see {dinosaurs mating}).
 11674	
 11675	:management: n. 1. Corporate power elites distinguished primarily by
 11676	   their distance from actual productive work and their chronic
 11677	   failure to manage (see also {suit}).  Spoken derisively, as in
 11678	   "*Management* decided that ...".  2. Mythically, a vast
 11679	   bureaucracy responsible for all the world's minor irritations.
 11680	   Hackers' satirical public notices are often signed `The Mgt'; this
 11681	   derives from the `Illuminatus' novels (see the Bibliography in
 11682	   {appendix C}).
 11683	
 11684	:mandelbug: /mon'del-buhg/ [from the Mandelbrot set] n. A bug
 11685	   whose underlying causes are so complex and obscure as to make its
 11686	   behavior appear chaotic or even non-deterministic.  This term
 11687	   implies that the speaker thinks it is a {Bohr bug}, rather than a
 11688	   {heisenbug}.  See also {schroedinbug}.
 11689	
 11690	:manged: /monjd/ [probably from the French `manger' or Italian
 11691	   `mangiare', to eat; perhaps influenced by English n. `mange',
 11692	   `mangy'] adj. Refers to anything that is mangled or damaged,
 11693	   usually beyond repair.  "The disk was manged after the electrical
 11694	   storm."  Compare {mung}.
 11695	
 11696	:mangle: vt. Used similarly to {mung} or {scribble}, but more violent
 11697	   in its connotations; something that is mangled has been
 11698	   irreversibly and totally trashed.
 11699	
 11700	:mangler: [DEC] n. A manager.  Compare {mango}; see also
 11701	   {management}.  Note that {system mangler} is somewhat different
 11702	   in connotation.
 11703	
 11704	:mango: /mang'go/ [orig. in-house jargon at Symbolics] n. A manager.
 11705	   Compare {mangler}.  See also {devo} and {doco}.
 11706	
 11707	:manularity: [prob. fr. techspeak `granularity' + `manual']
 11708	   n. A notional measure of the manual labor required for some task,
 11709	   particularly one of the sort that automation is supposed to
 11710	   eliminate.  "Composing English on paper has much higher manularity
 11711	   than using a text editor, especially in the revising stage."
 11712	   Hackers tend to consider manularity a symptom of primitive methods;
 11713	   in fact, a true hacker confronted with an apparent requirement to
 11714	   do a computing task {by hand} will usually consider it
 11715	   motivation enough to build another tool.
 11716	
 11717	:marbles: [from mainstream "lost all his/her marbles"] pl.n. The
 11718	   minimum needed to build your way further up some hierarchy of tools
 11719	   or abstractions.  After a bad system crash, you need to determine
 11720	   if the machine has enough marbles to come up on its own, or enough
 11721	   marbles to allow a rebuild from backups, or if you need to rebuild
 11722	   from scratch.  "This compiler doesn't even have enough marbles to
 11723	   compile {hello, world}."
 11724	
 11725	:marginal: adj. 1. Extremely small.  "A marginal increase in
 11726	   {core} can decrease {GC} time drastically."  In everyday
 11727	   terms, this means that it is a lot easier to clean off your desk if
 11728	   you have a spare place to put some of the junk while you sort
 11729	   through it.  2. Of extremely small merit.  "This proposed new
 11730	   feature seems rather marginal to me."  3. Of extremely small
 11731	   probability of {win}ning.  "The power supply was rather marginal
 11732	   anyway; no wonder it fried."
 11733	
 11734	:Marginal Hacks: n. Margaret Jacks Hall, a building into which the
 11735	   Stanford AI Lab was moved near the beginning of the 1980s (from the
 11736	   {D. C. Power Lab}).
 11737	
 11738	:marginally: adv. Slightly.  "The ravs here are only marginally
 11739	   better than at Small Eating Place."  See {epsilon}.
 11740	
 11741	:marketroid: /mar'k*-troyd/ alt. `marketing slime',
 11742	   `marketing droid', `marketeer' n. A member of a company's
 11743	   marketing department, esp. one who promises users that the next
 11744	   version of a product will have features that are not actually
 11745	   scheduled for inclusion, are extremely difficult to implement,
 11746	   and/or are in violation of the laws of physics; and/or one who
 11747	   describes existing features (and misfeatures) in ebullient,
 11748	   buzzword-laden adspeak.  Derogatory.  Compare {droid}.
 11749	
 11750	:Mars: n. A legendary tragic failure, the archetypal Hacker Dream
 11751	   Gone Wrong.  Mars was the code name for a family of PDP-10
 11752	   compatible computers built by Systems Concepts (now, The SC Group);
 11753	   the multi-processor SC-30M, the small uniprocessor SC-25M, and the
 11754	   never-built superprocessor SC-40M.  These machines were marvels of
 11755	   engineering design; although not much slower than the unique
 11756	   {Foonly} F-1, they were physically smaller and consumed less
 11757	   power than the much slower DEC KS10 or Foonly F-2, F-3, or F-4
 11758	   machines.  They were also completely compatible with the DEC KL10,
 11759	   and ran all KL10 binaries, including the operating system, with no
 11760	   modifications at about 2--3 times faster than a KL10.
 11761	   
 11762	   When DEC cancelled the Jupiter project in 1983, Systems Concepts
 11763	   should have made a bundle selling their machine into shops with a
 11764	   lot of software investment in PDP-10s, and in fact their spring
 11765	   1984 announcement generated a great deal of excitement in the
 11766	   PDP-10 world.  TOPS-10 was running on the Mars by the summer of
 11767	   1984, and TOPS-20 by early fall.  Unfortunately, the hackers
 11768	   running Systems Concepts were much better at designing machines
 11769	   than at mass producing or selling them; the company allowed itself
 11770	   to be sidetracked by a bout of perfectionism into continually
 11771	   improving the design, and lost credibility as delivery dates
 11772	   continued to slip.  They also overpriced the product ridiculously;
 11773	   they believed they were competing with the KL10 and VAX 8600 and
 11774	   failed to reckon with the likes of Sun Microsystems and other
 11775	   hungry startups building workstations with power comparable to the
 11776	   KL10 at a fraction of the price.  By the time SC shipped the first
 11777	   SC-30M to Stanford in late 1985, most customers had already made
 11778	   the traumatic decision to abandon the PDP-10, usually for VMS or
 11779	   UNIX boxes.  Most of the Mars computers built ended up being
 11780	   purchased by CompuServe.
 11781	   
 11782	   This tale and the related saga of {Foonly} hold a lesson for hackers:
 11783	   if you want to play in the {Real World}, you need to learn Real World
 11784	   moves.
 11785	   
 11786	:martian: n. A packet sent on a TCP/IP network with a source
 11787	   address of the test loopback interface [127.0.0.1].  This means
 11788	   that it will come back at you labeled with a source address that
 11789	   is clearly not of this earth.  "The domain server is getting lots
 11790	   of packets from Mars.  Does that gateway have a martian filter?"
 11791	
 11792	:massage: vt. Vague term used to describe `smooth' transformations of
 11793	   a data set into a different form, esp. transformations that do
 11794	   not lose information.  Connotes less pain than {munch} or {crunch}.
 11795	   "He wrote a program that massages X bitmap files into GIF
 11796	   format."  Compare {slurp}.
 11797	
 11798	:math-out: [poss. from `white-out' (the blizzard variety)] n. A
 11799	   paper or presentation so encrusted with mathematical or other
 11800	   formal notation as to be incomprehensible.  This may be a device
 11801	   for concealing the fact that it is actually {content-free}.  See
 11802	   also {numbers}, {social science number}.
 11803	
 11804	:Matrix: [FidoNet] n. 1. What the Opus BBS software and sysops call
 11805	   {FidoNet}.  2. Fanciful term for a {cyberspace} expected to
 11806	   emerge from current networking experiments (see {network, the}).
 11807	   3. The totality of present-day computer networks.
 11808	
 11809	:maximum Maytag mode: What a {washing machine} or, by extension,
 11810	   any hard disk is in when it's being used so heavily that it's
 11811	   shaking like an old Maytag with an unbalanced load.  If prolonged
 11812	   for any length of time, can lead to disks becoming {walking
 11813	   drives}.
 11814	
 11815	:Mbogo, Dr. Fred: /*m-boh'goh, dok'tr fred/ [Stanford] n. The
 11816	   archetypal man you don't want to see about a problem, esp. an
 11817	   incompetent professional; a shyster.  "Do you know a good eye
 11818	   doctor?"  "Sure, try Mbogo Eye Care and Professional Dry
 11819	   Cleaning."  The name comes from synergy between {bogus} and the
 11820	   original Dr. Mbogo, a witch doctor who was Gomez Addams' physician
 11821	   on the old "Addams Family" TV show.  See also
 11822	   {fred}.
 11823	
 11824	:meatware: n. Synonym for {wetware}.  Less common.
 11825	
 11826	:meeces: /mees'*z/ [TMRC] n. Occasional furry visitors who are
 11827	   not {urchin}s.  [That is, mice. This may no longer be in live
 11828	   use; it clearly derives from the refrain of the early-1960s cartoon
 11829	   character Mr. Jinx: "I hate meeces to *pieces*!" --- ESR]
 11830	
 11831	:meg: /meg/ n. See {{quantifiers}}.
 11832	
 11833	:mega-: /me'g*/ [SI] pref. See {{quantifiers}}.
 11834	
 11835	:megapenny: /meg'*-pen`ee/ n. $10,000 (1 cent * 10^6).
 11836	   Used semi-humorously as a unit in comparing computer cost and
 11837	   performance figures.
 11838	
 11839	:MEGO: /me'goh/ or /mee'goh/ [`My Eyes Glaze Over', often `Mine Eyes
 11840	   Glazeth (sic) Over', attributed to the futurologist Herman Kahn]
 11841	   Also `MEGO factor'.  1. n. A {handwave} intended to confuse the
 11842	   listener and hopefully induce agreement because the listener does
 11843	   not want to admit to not understanding what is going on.  MEGO is
 11844	   usually directed at senior management by engineers and contains a
 11845	   high proportion of {TLA}s.  2. excl. An appropriate response to
 11846	   MEGO tactics.  3. Among non-hackers this term often refers not to
 11847	   behavior that causes the eyes to glaze, but to the eye-glazing
 11848	   reaction itself, which may be triggered by the mere threat of
 11849	   technical detail as effectively as by an actual excess of it.
 11850	
 11851	:meltdown, network: n.  See {network meltdown}.
 11852	
 11853	:meme: /meem/ [coined on analogy with `gene' by Richard
 11854	   Dawkins] n. An idea considered as a {replicator}, esp. with
 11855	   the connotation that memes parasitize people into propagating them
 11856	   much as viruses do.  Used esp. in the phrase `meme complex'
 11857	   denoting a group of mutually supporting memes that form an
 11858	   organized belief system, such as a religion.  This lexicon is an
 11859	   (epidemiological) vector of the `hacker subculture' meme complex;
 11860	   each entry might be considered a meme.  However, `meme' is often
 11861	   misused to mean `meme complex'.  Use of the term connotes
 11862	   acceptance of the idea that in humans (and presumably other tool-
 11863	   and language-using sophonts) cultural evolution by selection of
 11864	   adaptive ideas has superseded biological evolution by selection of
 11865	   hereditary traits.  Hackers find this idea congenial for tolerably
 11866	   obvious reasons.
 11867	
 11868	:meme plague: n. The spread of a successful but pernicious
 11869	   {meme}, esp. one that parasitizes the victims into giving
 11870	   their all to propagate it.  Astrology, BASIC, and the other guy's
 11871	   religion are often considered to be examples.  This usage is given
 11872	   point by the historical fact that `joiner' ideologies like
 11873	   Naziism or various forms of millennarian Christianity have
 11874	   exhibited plague-like cycles of exponential growth followed by
 11875	   collapses to small reservoir populations.
 11876	
 11877	:memetics: /me-met'iks/ [from {meme}] The study of memes.  As of
 11878	   mid-1991, this is still an extremely informal and speculative
 11879	   endeavor, though the first steps towards at least statistical rigor
 11880	   have been made by H. Keith Henson and others.  Memetics is a
 11881	   popular topic for speculation among hackers, who like to see
 11882	   themselves as the architects of the new information ecologies in
 11883	   which memes live and replicate.
 11884	
 11885	:memory leak: n. An error in a program's dynamic-store allocation
 11886	   logic that causes it to fail to reclaim discarded memory, leading
 11887	   to eventual collapse due to memory exhaustion.  Also (esp. at
 11888	   CMU) called {core leak}.  These problems were severe on older
 11889	   machines with small, fixed-size address spaces, and special "leak
 11890	   detection" tools were commonly written to root them out.  With the
 11891	   advent of virtual memory, it is unfortunately easier to be sloppy
 11892	   about wasting a bit of memory (although when you run out of memory
 11893	   on a VM machine, it means you've got a *real* leak!).  See
 11894	   {aliasing bug}, {fandango on core}, {smash the stack},
 11895	   {precedence lossage}, {overrun screw}, {leaky heap},
 11896	   {leak}.
 11897	
 11898	:memory smash: [XEROX PARC] n. Writing through a pointer that
 11899	   doesn't point to what you think it does.  This occasionally reduces
 11900	   your machine to a rubble of bits.  Note that this is subtly
 11901	   different from (and more general than) related terms such as a
 11902	   {memory leak} or {fandango on core} because it doesn't imply
 11903	   an allocation error or overrun condition.
 11904	
 11905	:menuitis: /men`yoo-i:'tis/ n. Notional disease suffered by software
 11906	   with an obsessively simple-minded menu interface and no escape.
 11907	   Hackers find this intensely irritating and much prefer the
 11908	   flexibility of command-line or language-style interfaces,
 11909	   especially those customizable via macros or a special-purpose
 11910	   language in which one can encode useful hacks.  See
 11911	   {user-obsequious}, {drool-proof paper}, {WIMP environment},
 11912	   {for the rest of us}.
 11913	
 11914	:mess-dos: /mes-dos/ n. Derisory term for MS-DOS.  Often followed
 11915	   by the ritual banishing "Just say No!"  See {{MS-DOS}}.  Most
 11916	   hackers (even many MS-DOS hackers) loathe MS-DOS for its
 11917	   single-tasking nature, its limits on application size, its nasty
 11918	   primitive interface, and its ties to IBMness (see {fear and
 11919	   loathing}).  Also `mess-loss', `messy-dos', `mess-dog',
 11920	   `mess-dross', `mush-dos', and various combinations thereof.  In
 11921	   Ireland and the U.K. it is even sometimes called `Domestos' after a
 11922	   brand of toilet cleanser.
 11923	
 11924	:meta: /me't*/ or /may't*/ or (Commonwealth) /mee't*/ [from
 11925	   analytic philosophy] adj.,pref. One level of description up.  A
 11926	   metasyntactic variable is a variable in notation used to describe
 11927	   syntax, and meta-language is language used to describe language.
 11928	   This is difficult to explain briefly, but much hacker humor turns
 11929	   on deliberate confusion between meta-levels.  See {{Humor,
 11930	   Hacker}}.
 11931	
 11932	:meta bit: n. The top bit of an 8-bit character, which is on in
 11933	   character values 128--255.  Also called {high bit}, {alt bit},
 11934	   or {hobbit}.  Some terminals and consoles (see {space-cadet
 11935	   keyboard}) have a META shift key.  Others (including,
 11936	   *mirabile dictu*, keyboards on IBM PC-class machines) have an
 11937	   ALT key.  See also {bucky bits}.
 11938	
 11939	   Historical note: although in modern usage shaped by a universe of
 11940	   8-bit bytes the meta bit is invariably hex 80 (octal 0200), things
 11941	   were different on earlier machines with 36-bit words and 9-bit
 11942	   bytes.  The MIT and Stanford keyboards (see {space-cadet
 11943	   keyboard}) generated hex 100 (octal 400) from their meta keys.
 11944	
 11945	:metasyntactic variable: n. A name used in examples and understood
 11946	   to stand for whatever thing is under discussion, or any random
 11947	   member of a class of things under discussion.  The word {foo} is
 11948	   the {canonical} example.  To avoid confusion, hackers never
 11949	   (well, hardly ever) use `foo' or other words like it as permanent
 11950	   names for anything.  In filenames, a common convention is that any
 11951	   filename beginning with a metasyntactic-variable name is a
 11952	   {scratch} file that may be deleted at any time.
 11953	
 11954	   To some extent, the list of one's preferred metasyntactic variables
 11955	   is a cultural signature.  They occur both in series (used for
 11956	   related groups of variables or objects) and as singletons.  Here
 11957	   are a few common signatures:
 11958	
 11959	     {foo}, {bar}, {baz}, {quux}, quuux, quuuux...:
 11960	             MIT/Stanford usage, now found everywhere (thanks largely to early
 11961	             versions of this lexicon!).  At MIT, {baz} dropped out of use for
 11962	             a while in the 1970s and '80s. A common recent mutation of this
 11963	             sequence inserts {qux} before {quux}.
 11964	     {foo}, {bar}, thud, grunt:
 11965	             This series was popular at CMU.  Other CMU-associated variables
 11966	             include {gorp}.
 11967	     {foo}, {bar}, fum:
 11968	             This series is reported common at XEROX PARC.
 11969	     {fred}, {barney}:
 11970	             See the entry for {fred}.  These tend to be Britishisms.
 11971	     {toto}, titi, tata, tutu:
 11972	             Standard series of metasyntactic variables among francophones.
 11973	     {corge}, {grault}, {flarp}:
 11974	             Popular at Rutgers University and among {GOSMACS} hackers.
 11975	     zxc, spqr, {wombat}:
 11976	             Cambridge University (England).
 11977	
 11978	   Of all these, only `foo' and `bar' are universal (and {baz}
 11979	   nearly so).  The compounds {foobar} and `foobaz' also enjoy
 11980	   very wide currency.  
 11981	
 11982	   Some jargon terms are also used as metasyntactic names; {barf}
 11983	   and {mumble}, for example.  See also {{Commonwealth Hackish}}
 11984	   for discussion of numerous metasyntactic variables found in Great
 11985	   Britain and the Commonwealth.
 11986	
 11987	:MFTL: /M-F-T-L/ [abbreviation: `My Favorite Toy Language'] 1. adj.
 11988	   Describes a talk on a programming language design that is heavy on
 11989	   the syntax (with lots of BNF), sometimes even talks about semantics
 11990	   (e.g., type systems), but rarely, if ever, has any content (see
 11991	   {content-free}).  More broadly applied to talks --- even when
 11992	   the topic is not a programming language --- in which the subject
 11993	   matter is gone into in unnecessary and meticulous detail at the
 11994	   sacrifice of any conceptual content.  "Well, it was a typical MFTL
 11995	   talk".  2. n. Describes a language about which the developers are
 11996	   passionate (often to the point of prosyletic zeal) but no one else
 11997	   cares about.  Applied to the language by those outside the
 11998	   originating group.  "He cornered me about type resolution in his
 11999	   MFTL."
 12000	
 12001	   The first great goal in the mind of the designer of an MFTL is
 12002	   usually to write a compiler for it, then bootstrap the design away
 12003	   from contamination by lesser languages by writing a compiler for it
 12004	   in itself.  Thus, the standard put-down question at an MFTL talk is
 12005	   "Has it been used for anything besides its own compiler?".  On
 12006	   the other hand, a language that *cannot* be used to write
 12007	   its own compiler is beneath contempt.  See {break-even point}.
 12008	
 12009	   (On a related note, Dennis Ritchie has proposed a test of the
 12010	   generality and utility of a language and the operating system under
 12011	   which it is compiled: "Is the output of a program compiled under
 12012	   the language acceptable as input to the compiler?"  In other
 12013	   words, can you write programs which write programs? (see
 12014	   {toolsmith})  Alarming numbers of (language, OS) pairs fail this
 12015	   test, particularly when the language is Fortran; Ritchie is quick
 12016	   to point out that {UNIX} (even using Fortran) passes it handily.
 12017	   That the test could ever be failed is only surprising to those who
 12018	   have had the good fortune only to have worked under modern systems
 12019	   which lack OS-supported and -imposed "file types".)
 12020	
 12021	:mickey: n. The resolution unit of mouse movement.  It has been
 12022	   suggested that the `disney' will become a benchmark unit for
 12023	   animation graphics performance.
 12024	
 12025	:mickey mouse program: n. North American equivalent of a {noddy}
 12026	   (that is, trivial) program.  Doesn't necessarily have the
 12027	   belittling connotations of mainstream slang "Oh, that's just
 12028	   mickey mouse stuff!"; sometimes trivial programs can be very
 12029	   useful.
 12030	
 12031	:micro-: pref. 1. Very small; this is the root of its use as a
 12032	   quantifier prefix.  2. A quantifier prefix, calling for
 12033	   multiplication by 10^(-6) (see {{quantifiers}}).  Neither
 12034	   of these uses is peculiar to hackers, but hackers tend to fling
 12035	   them both around rather more freely than is countenanced in
 12036	   standard English.  It is recorded, for example, that one
 12037	   CS professor used to characterize the standard length of his
 12038	   lectures as a microcentury --- that is, about 52.6 minutes (see
 12039	   also {attoparsec}, {nanoacre}, and especially
 12040	   {microfortnight}).  3. Personal or human-scale --- that is,
 12041	   capable of being maintained or comprehended or manipulated by one
 12042	   human being.  This sense is generalized from `microcomputer',
 12043	   and is esp. used in contrast with `macro-' (the corresponding
 12044	   Greek prefix meaning `large').  4. Local as opposed to global (or
 12045	   {macro-}).  Thus a hacker might say that buying a smaller car to
 12046	   reduce pollution only solves a microproblem; the macroproblem of
 12047	   getting to work might be better solved by using mass transit,
 12048	   moving to within walking distance, or (best of all) telecommuting.
 12049	   
 12050	
 12051	:microfloppies: n. 3.5-inch floppies, as opposed to 5.25-inch
 12052	   {vanilla} or mini-floppies and the now-obsolete 8-inch variety.
 12053	   This term may be headed for obsolescence as 5.25-inchers pass out
 12054	   of use, only to be revived if anybody floats a sub-3-inch floppy
 12055	   standard.  See {stiffy}, {minifloppies}.
 12056	
 12057	:microfortnight: n. 1/1000000 of the fundamental unit of time in
 12058	   the Furlong/Firkin/Fortnight system of measurement; 1.2096 sec.
 12059	   The VMS operating system has a lot of tuning parameters that you
 12060	   can set with the SYSGEN utility, and one of these is
 12061	   TIMEPROMPTWAIT, the time the system will wait for an operator to
 12062	   set the correct date and time at boot if it realizes that the
 12063	   current value is bogus.  This time is specified in microfortnights!
 12064	
 12065	   Multiple uses of the millifortnight (about 20 minutes) and
 12066	   {nanofortnight} have also been reported.
 12067	
 12068	:microLenat: /mi:-kroh-len'-*t/ n. See {bogosity}.
 12069	
 12070	:microReid: /mi:'kroh-reed/ n. See {bogosity}.
 12071	
 12072	:Microsloth Windows: /mi:'kroh-sloth` win'dohz/ n. Hackerism for
 12073	   `Microsoft Windows', a windowing system for the IBM-PC which is so
 12074	   limited by bug-for-bug compatibility with {mess-dos} that it is
 12075	   agonizingly slow on anything less than a fast 386.  Compare {X},
 12076	   {sun-stools}.
 12077	
 12078	:microtape: /mi:'kroh-tayp/ n. Occasionally used to mean a
 12079	   DECtape, as opposed to a {macrotape}.  A DECtape is a small
 12080	   reel, about 4 inches in diameter, of magnetic tape about an inch
 12081	   wide.  Unlike drivers for today's {macrotape}s, microtape
 12082	   drivers allow random access to the data, and therefore could be
 12083	   used to support file systems and even for swapping (this was
 12084	   generally done purely for {hack value}, as they were far too
 12085	   slow for practical use).  In their heyday they were used in pretty
 12086	   much the same ways one would now use a floppy disk: as a small,
 12087	   portable way to save and transport files and programs.  Apparently
 12088	   the term `microtape' was actually the official term used within
 12089	   DEC for these tapes until someone coined the word `DECtape',
 12090	   which, of course, sounded sexier to the {marketroid}s; another
 12091	   version of the story holds that someone discovered a conflict with
 12092	   another company's `microtape' trademark.
 12093	
 12094	:middle-endian: adj. Not {big-endian} or {little-endian}.
 12095	   Used of perverse byte orders such as 3-4-1-2 or 2-1-4-3,
 12096	   occasionally found in the packed-decimal formats of minicomputer
 12097	   manufacturers who shall remain nameless.  See {NUXI problem}.
 12098	
 12099	:milliLampson: /mil'*-lamp`sn/ n. A unit of talking speed,
 12100	   abbreviated mL.  Most people run about 200 milliLampsons.  Butler
 12101	   Lampson (a CS theorist and systems implementor highly regarded
 12102	   among hackers) goes at 1000.  A few people speak faster.  This unit
 12103	   is sometimes used to compare the (sometimes widely disparate) rates
 12104	   at which people can generate ideas and actually emit them in
 12105	   speech.  For example, noted computer architect C. Gordon Bell
 12106	   (designer of the PDP-11) is said, with some awe, to think at about
 12107	   1200 mL but only talk at about 300; he is frequently reduced to
 12108	   fragments of sentences as his mouth tries to keep up with his
 12109	   speeding brain.
 12110	
 12111	:minifloppies: n. 5.25-inch {vanilla} floppy disks, as opposed to
 12112	   3.5-inch or {microfloppies} and the now-obsolescent 8-inch
 12113	   variety.  At one time, this term was a trademark of Shugart
 12114	   Associates for their SA-400 minifloppy drive.  Nobody paid any
 12115	   attention.  See {stiffy}.
 12116	
 12117	:MIPS: /mips/ [abbreviation] n. 1. A measure of computing speed;
 12118	   formally, `Million Instructions Per Second' (that's 10^6
 12119	   per second, not 2^(20)!); often rendered by hackers as
 12120	   `Meaningless Indication of Processor Speed' or in other
 12121	   unflattering ways.  This joke expresses a nearly universal attitude
 12122	   about the value of most {benchmark} claims, said attitude being
 12123	   one of the great cultural divides between hackers and
 12124	   {marketroid}s.  The singular is sometimes `1 MIP' even though
 12125	   this is clearly etymologically wrong.  See also {KIPS} and
 12126	   {GIPS}.  2. Computers, especially large computers, considered
 12127	   abstractly as sources of {computron}s.  "This is just a
 12128	   workstation; the heavy MIPS are hidden in the basement."  3. The
 12129	   corporate name of a particular RISC-chip company; among other
 12130	   things, they designed the processor chips used in DEC's 3100
 12131	   workstation series.  4. Acronym for `Meaningless Information per
 12132	   Second' (a joke, prob. from sense 1).
 12133	
 12134	:misbug: /mis-buhg/ [MIT] n. An unintended property of a program
 12135	   that turns out to be useful; something that should have been a
 12136	   {bug} but turns out to be a {feature}.  Usage: rare.  Compare
 12137	   {green lightning}. See {miswart}.
 12138	
 12139	:misfeature: /mis-fee'chr/ or /mis'fee`chr/ n. A feature that
 12140	   eventually causes lossage, possibly because it is not adequate for
 12141	   a new situation which has evolved.  Since it results from a
 12142	   deliberate and properly-implemented feature, a misfeature is not a
 12143	   bug.  Nor is it a simple unforeseen side effect; the term implies
 12144	   that the feature in question was carefully planned, but its
 12145	   long-term consequences were not accurately or adequately predicted
 12146	   (which is quite different from not having thought ahead at all).  A
 12147	   misfeature can be a particularly stubborn problem to resolve,
 12148	   because fixing it usually involves a substantial philosophical
 12149	   change to the structure of the system involved.
 12150	
 12151	   Many misfeatures (especially in user-interface design) arise
 12152	   because the designers/implementors mistake their personal tastes
 12153	   for laws of nature.  Often a former feature becomes a misfeature
 12154	   because a tradeoff was made whose parameters subsequently change
 12155	   (possibly only in the judgment of the implementors).  "Well, yeah,
 12156	   it is kind of a misfeature that file names are limited to 6
 12157	   characters, but the original implementors wanted to save directory
 12158	   space and we're stuck with it for now."
 12159	
 12160	:Missed'em-five: n. Pejorative hackerism for AT&T System V UNIX,
 12161	   generally used by {BSD} partisans in a bigoted mood.  (The
 12162	   synonym `SysVile' is also encountered.)  See {software bloat},
 12163	   {Berzerkeley}.
 12164	
 12165	:missile address: n. See {ICBM address}.
 12166	
 12167	:miswart: /mis-wort/ [from {wart} by analogy with {misbug}] n.
 12168	   A {feature} that superficially appears to be a {wart} but has been
 12169	   determined to be the {Right Thing}.  For example, in some versions
 12170	   of the {EMACS} text editor, the `transpose characters' command
 12171	   exchanges the character under the cursor with the one before it on the
 12172	   screen, *except* when the cursor is at the end of a line, in
 12173	   which case the two characters before the cursor are exchanged.
 12174	   While this behavior is perhaps surprising, and certainly
 12175	   inconsistent, it has been found through extensive experimentation
 12176	   to be what most users want.  This feature is a miswart.
 12177	
 12178	:moby: /moh'bee/ [MIT: seems to have been in use among model
 12179	   railroad fans years ago.  Derived from Melville's `Moby Dick'
 12180	   (some say from `Moby Pickle').] 1. adj. Large, immense, complex,
 12181	   impressive.  "A Saturn V rocket is a truly moby frob."  "Some
 12182	   MIT undergrads pulled off a moby hack at the Harvard-Yale game."
 12183	   (See "{The Meaning of `Hack'}").  2. n. obs. The
 12184	   maximum address space of a machine (see below).  For a 680[234]0 or
 12185	   VAX or most modern 32-bit architectures, it is 4,294,967,296 8-bit
 12186	   bytes (4 gigabytes).  3. A title of address (never of third-person
 12187	   reference), usually used to show admiration, respect, and/or
 12188	   friendliness to a competent hacker.  "Greetings, moby Dave.  How's
 12189	   that address-book thing for the Mac going?"  4. adj. In
 12190	   backgammon, doubles on the dice, as in `moby sixes', `moby
 12191	   ones', etc.  Compare this with {bignum} (sense 2): double sixes
 12192	   are both bignums and moby sixes, but moby ones are not bignums (the
 12193	   use of `moby' to describe double ones is sarcastic).  Standard
 12194	   emphatic forms: `Moby foo', `moby win', `moby loss'.  `Foby
 12195	   moo': a spoonerism due to Richard Greenblatt.
 12196	
 12197	   This term entered hackerdom with the Fabritek 256K memory added to
 12198	   the MIT AI PDP-6 machine, which was considered unimaginably huge
 12199	   when it was installed in the 1960s (at a time when a more typical
 12200	   memory size for a timesharing system was 72 kilobytes).  Thus, a
 12201	   moby is classically 256K 36-bit words, the size of a PDP-6 or
 12202	   PDP-10 moby.  Back when address registers were narrow the term was
 12203	   more generally useful, because when a computer had virtual memory
 12204	   mapping, it might actually have more physical memory attached to it
 12205	   than any one program could access directly.  One could then say
 12206	   "This computer has 6 mobies" meaning that the ratio of physical
 12207	   memory to address space is 6, without having to say specifically
 12208	   how much memory there actually is.  That in turn implied that the
 12209	   computer could timeshare six `full-sized' programs without having
 12210	   to swap programs between memory and disk.
 12211	
 12212	   Nowadays the low cost of processor logic means that address spaces
 12213	   are usually larger than the most physical memory you can cram onto
 12214	   a machine, so most systems have much *less* than one theoretical
 12215	   `native' moby of {core}.  Also, more modern memory-management
 12216	   techniques (esp. paging) make the `moby count' less significant.
 12217	   However, there is one series of popular chips for which the term
 12218	   could stand to be revived --- the Intel 8088 and 80286 with their
 12219	   incredibly {brain-damaged} segmented-memory designs.  On these, a
 12220	   `moby' would be the 1-megabyte address span of a segment/offset
 12221	   pair (by coincidence, a PDP-10 moby was exactly 1 megabyte of 9-bit
 12222	   bytes).
 12223	
 12224	:mod: vt.,n. 1. Short for `modify' or `modification'.  Very
 12225	   commonly used --- in fact the full terms are considered markers
 12226	   that one is being formal.  The plural `mods' is used esp. with
 12227	   reference to bug fixes or minor design changes in hardware or
 12228	   software, most esp. with respect to {patch} sets or a {diff}.
 12229	   2. Short for {modulo} but used *only* for its techspeak sense.
 12230	
 12231	:mode: n. A general state, usually used with an adjective
 12232	   describing the state.  Use of the word `mode' rather than
 12233	   `state' implies that the state is extended over time, and
 12234	   probably also that some activity characteristic of that state is
 12235	   being carried out. "No time to hack; I'm in thesis mode."  In its
 12236	   jargon sense, `mode' is most often attributed to people, though
 12237	   it is sometimes applied to programs and inanimate objects. In
 12238	   particular, see {hack mode}, {day mode}, {night mode},
 12239	   {demo mode}, {fireworks mode}, and {yoyo mode}; also
 12240	   {talk mode}.
 12241	
 12242	   One also often hears the verbs `enable' and `disable' used in
 12243	   connection with jargon modes.  Thus, for example, a sillier way of
 12244	   saying "I'm going to crash" is "I'm going to enable crash mode
 12245	   now".  One might also hear a request to "disable flame mode,
 12246	   please".
 12247	
 12248	   In a usage much closer to techspeak, a mode is a special state
 12249	   which certain user interfaces must pass into in order to perform
 12250	   certain functions.  For example, in order to insert characters into a
 12251	   document in the UNIX editor `vi', one must type the "i" key,
 12252	   which invokes the "Insert" command.  The effect of this command
 12253	   is to put vi into "insert mode", in which typing the "i" key
 12254	   has a quite different effect (to wit, it inserts an "i" into the
 12255	   document).  One must then hit another special key, "ESC", in
 12256	   order to leave "insert mode".  Nowadays, moded interfaces are
 12257	   generally considered {losing}, but survive in quite a few
 12258	   widely-used tools built in less enlightened times.
 12259	
 12260	:mode bit: n. A {flag}, usually in hardware, that selects between
 12261	   two (usually quite different) modes of operation.  The connotations
 12262	   are different from {flag} bit in that mode bits are mainly
 12263	   written during a boot or set-up phase, are seldom explicitly read,
 12264	   and seldom change over the lifetime of an ordinary program.  The
 12265	   classic example was the EBCDIC-vs.-ASCII bit (#12) of the Program
 12266	   Status Word of the IBM 360.  Another was the bit on a PDP-12 that
 12267	   controlled whether it ran the PDP-8 or the LINC instruction set.
 12268	
 12269	:modulo: /mo'dyu-loh/ prep. Except for.  An overgeneralization of
 12270	   mathematical terminology; one can consider saying that
 12271	   4 = 22 except for the 9s (4 = 22 mod 9).  "Well,
 12272	   LISP seems to work okay now, modulo that {GC} bug."  "I feel
 12273	   fine today modulo a slight headache."
 12274	
 12275	:molly-guard: /mol'ee-gard/ [University of Illinois] n. A shield
 12276	   to prevent tripping of some {Big Red Switch} by clumsy or
 12277	   ignorant hands.  Originally used of some plexiglass covers
 12278	   improvised for the BRS on an IBM 4341 after a programmer's toddler
 12279	   daughter (named Molly) frobbed it twice in one day.  Later
 12280	   generalized to covers over stop/reset switches on disk drives and
 12281	   networking equipment.
 12282	
 12283	:Mongolian Hordes technique: n. Development by {gang bang}
 12284	   (poss. from the Sixties counterculture expression `Mongolian
 12285	   clusterfuck' for a public orgy).  Implies that large numbers of
 12286	   inexperienced programmers are being put on a job better performed
 12287	   by a few skilled ones.  Also called `Chinese Army technique';
 12288	   see also {Brooks's Law}.
 12289	
 12290	:monkey up: vt. To hack together hardware for a particular task,
 12291	   especially a one-shot job.  Connotes an extremely {crufty} and
 12292	   consciously temporary solution.  Compare {hack up}, {kluge up},
 12293	   {cruft together}, {cruft together}.
 12294	
 12295	:monkey, scratch: n.  See {scratch monkey}.
 12296	
 12297	:monstrosity: 1. n. A ridiculously {elephantine} program or
 12298	   system, esp. one that is buggy or only marginally functional.
 12299	   2. The quality of being monstrous (see `Overgeneralization' in the
 12300	   discussion of jargonification).  See also {baroque}.
 12301	
 12302	:Moof: /moof/ [MAC users] n. The Moof or `dogcow' is a
 12303	   semi-legendary creature that lurks in the depths of the Macintosh
 12304	   Technical Notes Hypercard stack V3.1; specifically, the full story
 12305	   of the dogcow is told in technical note #31 (the particular Moof
 12306	   illustrated is properly named `Clarus').  Option-shift-click will
 12307	   cause it to emit a characteristic `Moof!' or `!fooM' sound.
 12308	   *Getting* to tech note 31 is the hard part; to discover how
 12309	   to do that, one must needs examine the stack script with a hackerly
 12310	   eye.  Clue: {rot13} is involved.  A dogcow also appears if you
 12311	   choose `Page Setup...' with a LaserWriter selected and click on
 12312	   the `Options' button.
 12313	
 12314	:Moore's Law: /morz law/ prov. The observation that the logic
 12315	   density of silicon integrated circuits has closely followed the
 12316	   curve (bits per square inch)  = 2^((n - 1962)); that is, the
 12317	   amount of information storable in one square inch of silicon has
 12318	   roughly doubled yearly every year since the technology was
 12319	   invented.  See also {Parkinson's Law of Data}.
 12320	
 12321	:moose call, the: n. See {whalesong}.
 12322	
 12323	:moria: /mor'ee-*/ n. Like {nethack} and {rogue}, one of the
 12324	   large PD Dungeons-and-Dragons-like simulation games, available for
 12325	   a wide range of machines and operating systems.  Extremely
 12326	   addictive and a major consumer of time better used for hacking.
 12327	
 12328	:MOTAS: /moh-toz/ [USENET: Member Of The Appropriate Sex, after
 12329	   {MOTOS} and {MOTSS}] n. A potential or (less often) actual sex
 12330	   partner.  See also {SO}.
 12331	
 12332	:MOTOS: /moh-tohs/ [acronym from the 1970 U.S. census forms via
 12333	   USENET: Member Of The Opposite Sex] n. A potential or (less often)
 12334	   actual sex partner.  See {MOTAS}, {MOTSS}, {SO}.  Less
 12335	   common than MOTSS or {MOTAS}, which have largely displaced it.
 12336	
 12337	:MOTSS: /mots/ or /M-O-T-S-S/ [from the 1970 U.S. census forms
 12338	   via USENET, Member Of The Same Sex] n. Esp. one considered as a
 12339	   possible sexual partner.  The gay-issues newsgroup on USENET is
 12340	   called soc.motss.  See {MOTOS} and {MOTAS}, which derive
 12341	   from it.  Also see {SO}.
 12342	
 12343	:mouse ahead: vi. Point-and-click analog of `type ahead'.  To
 12344	   manipulate a computer's pointing device (almost always a mouse in
 12345	   this usage, but not necessarily) and its selection or command
 12346	   buttons before a computer program is ready to accept such input, in
 12347	   anticipation of the program accepting the input.  Handling this
 12348	   properly is rare, but it can help make a {WIMP environment} much
 12349	   more usable, assuming the users are familiar with the behavior of
 12350	   the user interface.
 12351	
 12352	:mouse around: vi. To explore public portions of a large system, esp.
 12353	   a network such as Internet via {FTP} or {TELNET}, looking for
 12354	   interesting stuff to {snarf}.
 12355	
 12356	:mouse belt: n. See {rat belt}.
 12357	
 12358	:mouse droppings: [MS-DOS] n. Pixels (usually single) that are not
 12359	   properly restored when the mouse pointer moves away from a
 12360	   particular location on the screen, producing the appearance that
 12361	   the mouse pointer has left droppings behind.  The major causes for
 12362	   this problem are programs that write to the screen memory
 12363	   corresponding to the mouse pointer's current location without
 12364	   hiding the mouse pointer first, and mouse drivers that do not quite
 12365	   support the graphics mode in use.
 12366	
 12367	:mouse elbow: n. A tennis-elbow-like fatigue syndrome resulting from
 12368	   excessive use of a {WIMP environment}.  Similarly, `mouse
 12369	   shoulder'; GLS reports that he used to get this a lot before he
 12370	   taught himself to be ambimoustrous.
 12371	
 12372	:mouso: /mow'soh/ n. [by analogy with `typo'] An error in mouse usage
 12373	   resulting in an inappropriate selection or graphic garbage on the
 12374	   screen.  Compare {thinko}, {braino}.
 12375	
 12376	:MS-DOS:: /M-S-dos/ [MicroSoft Disk Operating System] n. A
 12377	   {clone} of {{CP/M}} for the 8088 crufted together in 6 weeks by
 12378	   hacker Tim Paterson, who is said to have regretted it ever since.
 12379	   Numerous features, including vaguely UNIX-like but rather broken
 12380	   support for subdirectories, I/O redirection, and pipelines, were
 12381	   hacked into 2.0 and subsequent versions; as a result, there are two
 12382	   or more incompatible versions of many system calls, and MS-DOS
 12383	   programmers can never agree on basic things like what character to
 12384	   use as an option switch or whether to be case-sensitive.  The
 12385	   resulting mess is now the highest-unit-volume OS in history.  Often
 12386	   known simply as DOS, which annoys people familiar with other
 12387	   similarly abbreviated operating systems (the name goes back to the
 12388	   mid-1960s, when it was attached to IBM's first disk operating
 12389	   system for the 360).  The name further annoys those who know what
 12390	   the term {operating system} does (or ought to) connote; DOS is
 12391	   more properly a set of relatively simple interrupt services.  Some
 12392	   people like to pronounce DOS like "dose", as in "I don't work on
 12393	   dose, man!", or to compare it to a dose of brain-damaging drugs
 12394	   (a slogan button in wide circulation among hackers exhorts:
 12395	   "MS-DOS: Just say No!").  See {mess-dos}, {ill-behaved}.
 12396	
 12397	:mu: /moo/ The correct answer to the classic trick question
 12398	   "Have you stopped beating your wife yet?".  Assuming that you
 12399	   have no wife or you have never beaten your wife, the answer "yes"
 12400	   is wrong because it implies that you used to beat your wife and
 12401	   then stopped, but "no" is worse because it suggests that you have
 12402	   one and are still beating her.  According to various Discordians
 12403	   and Douglas Hofstadter (see the Bibliography in {appendix C}),
 12404	   the correct answer is usually "mu", a Japanese word alleged to
 12405	   mean "Your question cannot be answered because it depends on
 12406	   incorrect assumptions".  Hackers tend to be sensitive to logical
 12407	   inadequacies in language, and many have adopted this suggestion
 12408	   with enthusiasm.  The word `mu' is actually from Chinese, meaning
 12409	   `nothing'; it is used in mainstream Japanese in that sense, but
 12410	   native speakers do not recognize the Discordian question-denying
 12411	   use.  It almost certainly derives from overgeneralization of the
 12412	   answer in the following well-known Rinzei Zen teaching riddle:
 12413	
 12414	     A monk asked Joshu, "Does a dog have the Buddha nature?"
 12415	     Joshu retorted, "Mu!"
 12416	
 12417	   See also {has the X nature}, {AI Koans}, and Douglas
 12418	   Hofstadter's `G"odel, Escher, Bach: An Eternal Golden Braid'
 12419	   (pointer in the Bibliography in appendix C).
 12420	
 12421	:MUD: /muhd/ [acronym, Multi-User Dungeon; alt. Multi-User
 12422	   Dimension] 1. n.  A class of {virtual reality} experiments
 12423	   accessible via the Internet.  These are real-time chat forums with
 12424	   structure; they have multiple `locations' like an adventure game,
 12425	   and may include combat, traps, puzzles, magic, a simple economic
 12426	   system, and the capability for characters to build more structure
 12427	   onto the database that represents the existing world.  2. vi. To
 12428	   play a MUD (see {hack-and-slay}).  The acronym MUD is often
 12429	   lowercased and/or verbed; thus, one may speak of `going
 12430	   mudding', etc.
 12431	
 12432	   Historically, MUDs (and their more recent progeny with names of MU-
 12433	   form) derive from a hack by Richard Bartle and Roy Trubshaw on the
 12434	   University of Essex's DEC-10 in the early 1980s; descendants of
 12435	   that game still exist today (see {BartleMUD}).  There is a
 12436	   widespread myth (repeated, unfortunately, by earlier versions of
 12437	   this lexicon) that the name MUD was trademarked to the commercial
 12438	   MUD run by Bartle on British Telecom (the motto: "You haven't
 12439	   *lived* 'til you've *died* on MUD!"); however, this is
 12440	   false --- Richard Bartle explicitly placed `MUD' in PD in 1985.  BT
 12441	   was upset at this, as they had already printed trademark claims on
 12442	   some maps and posters, which were released and created the
 12443	   myth.
 12444	
 12445	   Students on the European academic networks quickly improved on the
 12446	   MUD concept, spawning several new MUDs (VAXMUD, AberMUD, LPMUD).
 12447	   Many of these had associated bulletin-board systems for social
 12448	   interaction.  Because these had an image as `research' they
 12449	   often survived administrative hostility to BBSs in general.  This,
 12450	   together with the fact that USENET feeds have been spotty and
 12451	   difficult to get in the U.K., made the MUDs major foci of hackish
 12452	   social interaction there.
 12453	
 12454	   AberMUD and other variants crossed the Atlantic around 1988 and
 12455	   quickly gained popularity in the U.S.; they became nuclei for large
 12456	   hacker communities with only loose ties to traditional hackerdom
 12457	   (some observers see parallels with the growth of USENET in the
 12458	   early 1980s).  The second wave of MUDs (TinyMUD and variants)
 12459	   tended to emphasize social interaction, puzzles, and cooperative
 12460	   world-building as opposed to combat and competition.  In 1991, over
 12461	   50% of MUD sites are of a third major variety, LPMUD, which
 12462	   synthesizes the combat/puzzle aspects of AberMUD and older systems
 12463	   with the extensibility of TinyMud. The trend toward greater
 12464	   programmability and flexibility will doubtless continue.
 12465	
 12466	   The state of the art in MUD design is still moving very rapidly,
 12467	   with new simulation designs appearing (seemingly) every month.
 12468	   There is now (early 1991) a move afoot to deprecate the term
 12469	   {MUD} itself, as newer designs exhibit an exploding variety of
 12470	   names corresponding to the different simulation styles being
 12471	   explored.  See also {BartleMUD}, {berserking}, {bonk/oif},
 12472	   {brand brand brand}, {FOD}, {hack-and-slay}, {link-dead},
 12473	   {mudhead}, {posing}, {talk mode}, {tinycrud}.
 12474	
 12475	:muddie: n. Syn. {mudhead}.  More common in Great Britain, possibly
 12476	   because system administrators there like to mutter "bloody
 12477	   muddies" when annoyed at the species.
 12478	
 12479	:mudhead: n. Commonly used to refer to a {MUD} player who eats,
 12480	   sleeps, and breathes MUD.  Mudheads have been known to fail their
 12481	   degrees, drop out, etc., with the consolation, however, that they
 12482	   made wizard level.  When encountered in person, on a MUD, or in a
 12483	   chat system, all a mudhead will talk about is three topics: the
 12484	   tactic, character, or wizard that is supposedly always unfairly
 12485	   stopping him/her from becoming a wizard or beating a favorite MUD;
 12486	   why the specific game he/she has experience with is so much better
 12487	   than any other, and the MUD he or she is writing or going to write
 12488	   because his/her design ideas are so much better than in any
 12489	   existing MUD.  See also {wannabee}.
 12490	
 12491	:multician: /muhl-ti'shn/ [coined at Honeywell, ca. 1970] n.
 12492	   Competent user of {{Multics}}.  Perhaps oddly, no one has ever
 12493	   promoted the analogous `Unician'.
 12494	
 12495	:Multics:: /muhl'tiks/ n. [from "MULTiplexed Information and
 12496	   Computing Service"] An early (late 1960s) timesharing operating
 12497	   system co-designed by a consortium including MIT, GE, and Bell
 12498	   Laboratories.  Very innovative for its time --- among other things,
 12499	   it introduced the idea of treating all devices uniformly as special
 12500	   files.  All the members but GE eventually pulled out after
 12501	   determining that {second-system effect} had bloated Multics to
 12502	   the point of practical unusability (the `lean' predecessor in
 12503	   question was {CTSS}).  Honeywell commercialized Multics after
 12504	   buying out GE's computer group, but it was never very successful
 12505	   (among other things, on some versions one was commonly required to
 12506	   enter a password to log out).  One of the developers left in the
 12507	   lurch by the project's breakup was Ken Thompson, a circumstance
 12508	   which led directly to the birth of {{UNIX}}.  For this and other
 12509	   reasons, aspects of the Multics design remain a topic of occasional
 12510	   debate among hackers.  See also {brain-damaged} and {GCOS}.
 12511	
 12512	:multitask: n. Often used of humans in the same meaning it has for
 12513	   computers, to describe a person doing several things at once (but
 12514	   see {thrash}).  The term `multiplex', from communications
 12515	   technology (meaning to handle more than one channel at the same
 12516	   time), is used similarly.
 12517	
 12518	:mumblage: /muhm'bl*j/ n. The topic of one's mumbling (see
 12519	   {mumble}).  "All that mumblage" is used like "all that
 12520	   stuff" when it is not quite clear how the subject of discussion
 12521	   works, or like "all that crap" when `mumble' is being used as
 12522	   an implicit replacement for pejoratives.
 12523	
 12524	:mumble: interj. 1. Said when the correct response is too
 12525	   complicated to enunciate, or the speaker has not thought it out.
 12526	   Often prefaces a longer answer, or indicates a general reluctance
 12527	   to get into a long discussion.  "Don't you think that we could
 12528	   improve LISP performance by using a hybrid reference-count
 12529	   transaction garbage collector, if the cache is big enough and there
 12530	   are some extra cache bits for the microcode to use?"  "Well,
 12531	   mumble ... I'll have to think about it."  2. Sometimes used as
 12532	   an expression of disagreement.  "I think we should buy a
 12533	   {VAX}."  "Mumble!"  Common variant: `mumble frotz' (see
 12534	   {frotz}; interestingly, one does not say `mumble frobnitz'
 12535	   even though `frotz' is short for `frobnitz').  3. Yet another
 12536	   {metasyntactic variable}, like {foo}.  4. When used as a question
 12537	   ("Mumble?") means "I didn't understand you".  5. Sometimes used
 12538	   in `public' contexts on-line as a placefiller for things one is
 12539	   barred from giving details about.  For example, a poster with
 12540	   pre-released hardware in his machine might say "Yup, my machine
 12541	   now has an extra 16M of memory, thanks to the card I'm testing for
 12542	   Mumbleco." 6. A conversational wild card used to designate
 12543	   something one doesn't want to bother spelling out, but which can be
 12544	   {glark}ed from context.  Compare {blurgle}.  7. [XEROX PARC]
 12545	   A colloquialism used to suggest that further discussion would be
 12546	   fruitless.
 12547	
 12548	:munch: [often confused with {mung}, q.v.] vt. To transform
 12549	   information in a serial fashion, often requiring large amounts of
 12550	   computation.  To trace down a data structure.  Related to {crunch}
 12551	   and nearly synonymous with {grovel}, but connotes less pain.
 12552	
 12553	:munching: n. Exploration of security holes of someone else's
 12554	   computer for thrills, notoriety, or to annoy the system manager.
 12555	   Compare {cracker}.  See also {hacked off}.
 12556	
 12557	:munching squares: n. A {display hack} dating back to the PDP-1
 12558	   (ca. 1962, reportedly discovered by Jackson Wright), which employs
 12559	   a trivial computation (repeatedly plotting the graph Y = X XOR T
 12560	   for successive values of T --- see {HAKMEM} items 146--148) to
 12561	   produce an impressive display of moving and growing squares that
 12562	   devour the screen.  The initial value of T is treated as a
 12563	   parameter, which, when well-chosen, can produce amazing effects.
 12564	   Some of these, later (re)discovered on the LISP machine, have been
 12565	   christened `munching triangles' (try AND for XOR and toggling
 12566	   points instead of plotting them), `munching w's', and `munching
 12567	   mazes'.  More generally, suppose a graphics program produces an
 12568	   impressive and ever-changing display of some basic form, foo, on a
 12569	   display terminal, and does it using a relatively simple program;
 12570	   then the program (or the resulting display) is likely to be
 12571	   referred to as `munching foos'.  [This is a good example of the
 12572	   use of the word {foo} as a {metasyntactic variable}.]
 12573	
 12574	:munchkin: /muhnch'kin/ [from the squeaky-voiced little people in
 12575	   L. Frank Baum's `The Wizard of Oz'] n. A teenage-or-younger micro
 12576	   enthusiast hacking BASIC or something else equally constricted.  A
 12577	   term of mild derision --- munchkins are annoying but some grow up
 12578	   to be hackers after passing through a {larval stage}.  The term
 12579	   {urchin} is also used.  See also {wannabee}, {bitty box}.
 12580	
 12581	:mundane: [from SF fandom] n. 1. A person who is not in science
 12582	   fiction fandom.  2. A person who is not in the computer industry.
 12583	   In this sense, most often an adjectival modifier as in "in my
 12584	   mundane life...." See also {Real World}.
 12585	
 12586	:mung: /muhng/ alt. `munge' /muhnj/ [in 1960 at MIT, `Mash
 12587	   Until No Good'; sometime after that the derivation from the
 12588	   {{recursive acronym}} `Mung Until No Good' became standard] vt.
 12589	   1. To make changes to a file, esp. large-scale and irrevocable
 12590	   changes.  See {BLT}.  2. To destroy, usually accidentally,
 12591	   occasionally maliciously.  The system only mungs things
 12592	   maliciously; this is a consequence of {Finagle's Law}.  See
 12593	   {scribble}, {mangle}, {trash}, {nuke}.  Reports from
 12594	   {USENET} suggest that the pronunciation /muhnj/ is now usual
 12595	   in speech, but the spelling `mung' is still common in program
 12596	   comments (compare the widespread confusion over the proper spelling
 12597	   of {kluge}).  3. The kind of beans of which the sprouts are used
 12598	   in Chinese food.  (That's their real name!  Mung beans!  Really!)
 12599	
 12600	   Like many early hacker terms, this one seems to have originated at
 12601	   {TMRC}; it was already in use there in 1958.  Peter Samson
 12602	   (compiler of the TMRC lexicon) thinks it may originally have been
 12603	   onomatopoeic for the sound of a relay spring (contact) being
 12604	   twanged.
 12605	
 12606	:Murphy's Law: prov. The correct, *original* Murphy's Law
 12607	   reads: "If there are two or more ways to do something, and one of
 12608	   those ways can result in a catastrophe, then someone will do it."
 12609	   This is a principle of defensive design, cited here because it is
 12610	   usually given in mutant forms less descriptive of the challenges of
 12611	   design for lusers.  For example, you don't make a two-pin plug
 12612	   symmetrical and then label it `THIS WAY UP'; if it matters which
 12613	   way it is plugged in, then you make the design asymmetrical (see
 12614	   also the anecdote under {magic smoke}).
 12615	
 12616	   Edward A. Murphy, Jr. was one of the engineers on the rocket-sled
 12617	   experiments that were done by the U.S. Air Force in 1949 to test
 12618	   human acceleration tolerances (USAF project MX981).  One experiment
 12619	   involved a set of 16 accelerometers mounted to different parts of
 12620	   the subject's body.  There were two ways each sensor could be glued
 12621	   to its mount, and somebody methodically installed all 16 the wrong
 12622	   way around.  Murphy then made the original form of his
 12623	   pronouncement, which the test subject (Major John Paul Stapp)
 12624	   quoted at a news conference a few days later.
 12625	
 12626	   Within months `Murphy's Law' had spread to various technical
 12627	   cultures connected to aerospace engineering.  Before too many years
 12628	   had gone by variants had passed into the popular imagination,
 12629	   changing as they went.  Most of these are variants on "Anything
 12630	   that can go wrong, will"; this is sometimes referred to as
 12631	   {Finagle's Law}.  The memetic drift apparent in these mutants
 12632	   clearly demonstrates Murphy's Law acting on itself!
 12633	
 12634	:music:: n. A common extracurricular interest of hackers (compare
 12635	   {{science-fiction fandom}}, {{oriental food}}; see also
 12636	   {filk}).  Hackish folklore has long claimed that musical and
 12637	   programming abilities are closely related, and there has been at
 12638	   least one large-scale statistical study that supports this.
 12639	   Hackers, as a rule, like music and often develop musical
 12640	   appreciation in unusual and interesting directions.  Folk music is
 12641	   very big in hacker circles; so is electronic music, and the sort of
 12642	   elaborate instrumental jazz/rock that used to be called
 12643	   `progressive' and isn't recorded much any more.  The hacker's
 12644	   musical range tends to be wide; many can listen with equal
 12645	   appreciation to (say) Talking Heads, Yes, Gentle Giant, Spirogyra,
 12646	   Scott Joplin, Tangerine Dream, King Sunny Ade, The Pretenders, or
 12647	   Bach's Brandenburg Concerti.  It is also apparently true that
 12648	   hackerdom includes a much higher concentration of talented amateur
 12649	   musicians than one would expect from a similar-sized control group
 12650	   of {mundane} types.
 12651	
 12652	:mutter: vt. To quietly enter a command not meant for the ears, eyes,
 12653	   or fingers of ordinary mortals.  Often used in `mutter an
 12654	   {incantation}'.  See also {wizard}.
 12655	
 12656	= N =
 12657	=====
 12658	
 12659	:N: /N/ quant. 1. A large and indeterminate number of objects:
 12660	   "There were N bugs in that crock!"  Also used in its
 12661	   original sense of a variable name: "This crock has N bugs,
 12662	   as N goes to infinity."  (The true number of bugs is always
 12663	   at least N + 1.)  2. A variable whose value is inherited
 12664	   from the current context.  For example, when a meal is being
 12665	   ordered at a restaurant, N may be understood to mean however
 12666	   many people there are at the table.  From the remark "We'd like to
 12667	   order N wonton soups and a family dinner
 12668	   for N - 1" you can deduce that one person at the table
 12669	   wants to eat only soup, even though you don't know how many people
 12670	   there are (see {great-wall}).  3. `Nth': adj. The
 12671	   ordinal counterpart of N, senses 1 and 2.  "Now for the
 12672	   Nth and last time..." In the specific context
 12673	   "Nth-year grad student", N is generally assumed to
 12674	   be at least 4, and is usually 5 or more (see {tenured graduate
 12675	   student}).  See also {{random numbers}}, {two-to-the-N}.
 12676	
 12677	:nadger: /nad'jr/ [Great Britain] v. Of software or hardware (not
 12678	   people), to twiddle some object in a hidden manner, generally so
 12679	   that it conforms better to some format.  For instance, string
 12680	   printing routines on 8-bit processors often take the string text
 12681	   from the instruction stream, thus a print call looks like `jsr
 12682	   print:"Hello world"'. The print routine has to `nadger' the
 12683	   return instruction pointer so that the processor doesn't try to
 12684	   execute the text as instructions.
 12685	
 12686	:nailed to the wall: [like a trophy] adj. Said of a bug finally
 12687	   eliminated after protracted, and even heroic, effort.
 12688	
 12689	:nailing jelly: vi. See {like nailing jelly to a tree}.
 12690	
 12691	:na"ive: adj. Untutored in the perversities of some particular
 12692	   program or system; one who still tries to do things in an intuitive
 12693	   way, rather than the right way (in really good designs these
 12694	   coincide, but most designs aren't `really good' in the
 12695	   appropriate sense).  This is completely unrelated to general
 12696	   maturity or competence, or even competence at any other specific
 12697	   program.  It is a sad commentary on the primitive state of
 12698	   computing that the natural opposite of this term is often claimed
 12699	   to be `experienced user' but is really more like `cynical
 12700	   user'.
 12701	
 12702	:na"ive user: n. A {luser}.  Tends to imply someone who is
 12703	   ignorant mainly owing to inexperience.  When this is applied to
 12704	   someone who *has* experience, there is a definite implication
 12705	   of stupidity.
 12706	
 12707	:NAK: /nak/ [from the ASCII mnemonic for 0010101] interj.
 12708	   1. On-line joke answer to {ACK}?: "I'm not here."
 12709	   2. On-line answer to a request for chat: "I'm not available."
 12710	   3. Used to politely interrupt someone to tell them you don't
 12711	   understand their point or that they have suddenly stopped making
 12712	   sense.  See {ACK}, sense 3.  "And then, after we recode the
 12713	   project in COBOL...."  "Nak, Nak, Nak!  I thought I heard you
 12714	   say COBOL!"
 12715	
 12716	:nano: /nan'oh/ [CMU: from `nanosecond'] n. A brief period of
 12717	   time.  "Be with you in a nano" means you really will be free
 12718	   shortly, i.e., implies what mainstream people mean by "in a
 12719	   jiffy" (whereas the hackish use of `jiffy' is quite different ---
 12720	   see {jiffy}).
 12721	
 12722	:nano-: [SI: the next quantifier below {micro-}; meaning *
 12723	   10^(-9)] pref. Smaller than {micro-}, and used in the same rather
 12724	   loose and connotative way.  Thus, one has {{nanotechnology}}
 12725	   (coined by hacker K. Eric Drexler) by analogy with
 12726	   `microtechnology'; and a few machine architectures have a
 12727	   `nanocode' level below `microcode'.  Tom Duff at Bell Labs has
 12728	   also pointed out that "Pi seconds is a nanocentury".
 12729	   See also {{quantifiers}}, {pico-}, {nanoacre}, {nanobot},
 12730	   {nanocomputer}, {nanofortnight}.
 12731	
 12732	:nanoacre: /nan'oh-ay`kr/ n. A unit (about 2 mm square) of real
 12733	   estate on a VLSI chip.  The term gets its giggle value from the
 12734	   fact that VLSI nanoacres have costs in the same range as real acres
 12735	   once one figures in design and fabrication-setup costs.
 12736	
 12737	:nanobot: /nan'oh-bot/ n. A robot of microscopic proportions,
 12738	   presumably built by means of {{nanotechnology}}.  As yet, only
 12739	   used informally (and speculatively!).  Also called a `nanoagent'.
 12740	
 12741	:nanocomputer: /nan'oh-k*m-pyoo'tr/ n. A computer whose switching
 12742	   elements are molecular in size.  Designs for mechanical
 12743	   nanocomputers which use single-molecule sliding rods for their
 12744	   logic have been proposed.  The controller for a {nanobot} would be
 12745	   a nanocomputer.
 12746	
 12747	:nanofortnight: [Adelaide University] n. 1 fortnight * 10^-9,
 12748	   or about 1.2 msec.  This unit was used largely by students doing
 12749	   undergraduate practicals.  See {microfortnight}, {attoparsec},
 12750	   and {micro-}.
 12751	
 12752	:nanotechnology:: /nan'-oh-tek-no`l*-jee/ n. A hypothetical
 12753	   fabrication technology in which objects are designed and built with
 12754	   the individual specification and placement of each separate atom.
 12755	   The first unequivocal nanofabrication experiments are taking place
 12756	   now (1990), for example with the deposition of individual xenon
 12757	   atoms on a nickel substrate to spell the logo of a certain very
 12758	   large computer company.  Nanotechnology has been a hot topic in the
 12759	   hacker subculture ever since the term was coined by K. Eric Drexler
 12760	   in his book `Engines of Creation', where he predicted that
 12761	   nanotechnology could give rise to replicating assemblers,
 12762	   permitting an exponential growth of productivity and personal
 12763	   wealth.  See also {blue goo}, {gray goo}, {nanobot}.
 12764	
 12765	:nasal demons: n. During a discussion on the USENET group
 12766	   comp.std.c in early 1992, a regular remarked "When the
 12767	   compiler encounters [a given undefined construct] it is legal for
 12768	   it to make demons fly out of your nose" (the implication is that
 12769	   it may choose any arbitrarily bizarre way to interpret the code
 12770	   without violating the ANSI C standard).  Someone else followed up with a
 12771	   reference to "nasal demons", which became recognized shorthand on
 12772	   that group for any unexpected behaviour of a C compiler on
 12773	   encountering an undefined construct.
 12774	
 12775	:nastygram: /nas'tee-gram/ n. 1. A protocol packet or item of
 12776	   email (the latter is also called a {letterbomb}) that takes
 12777	   advantage of misfeatures or security holes on the target system to
 12778	   do untoward things.  2. Disapproving mail, esp. from a
 12779	   {net.god}, pursuant to a violation of {netiquette} or a
 12780	   complaint about failure to correct some mail- or news-transmission
 12781	   problem.  Compare {shitogram}.  3. A status report from an
 12782	   unhappy, and probably picky, customer.  "What'd Corporate say in
 12783	   today's nastygram?"  4. [deprecated] An error reply by mail from a
 12784	   {daemon}; in particular, a {bounce message}.
 12785	
 12786	:Nathan Hale: n. An asterisk (see also {splat}, {{ASCII}}).  Oh,
 12787	   you want an etymology?  Notionally, from "I regret that I have only
 12788	   one asterisk for my country!", a misquote of the famous remark
 12789	   uttered by Nathan Hale just before he was hanged.  Hale was a
 12790	   (failed) spy for the rebels in the American War of Independence.
 12791	
 12792	:nature: n. See {has the X nature}.
 12793	
 12794	:neat hack: n. 1. A clever technique.  2. A brilliant practical
 12795	   joke, where neatness is correlated with cleverness, harmlessness,
 12796	   and surprise value.  Example: the Caltech Rose Bowl card display
 12797	   switch (see "{The Meaning of `Hack'}", appendix A).  See
 12798	   also {hack}.
 12799	
 12800	:neats vs. scruffies: n. The label used to refer to one of the
 12801	   continuing {holy wars} in AI research.  This conflict tangles
 12802	   together two separate issues.  One is the relationship between
 12803	   human reasoning and AI; `neats' tend to try to build systems
 12804	   that `reason' in some way identifiably similar to the way humans
 12805	   report themselves as doing, while `scruffies' profess not to
 12806	   care whether an algorithm resembles human reasoning in the least as
 12807	   long as it works.  More importantly, `neats' tend to believe
 12808	   that logic is king, while `scruffies' favor looser, more ad-hoc
 12809	   methods driven by empirical knowledge.  To a `neat',
 12810	   `scruffy' methods appear promiscuous and successful only by
 12811	   accident; to a `scruffy', `neat' methods appear to be hung up
 12812	   on formalism and irrelevant to the hard-to-capture `common
 12813	   sense' of living intelligences.
 12814	
 12815	:neep-neep: /neep neep/ [onomatopoeic, from New York SF fandom] n.
 12816	   One who is fascinated by computers.  More general than {hacker},
 12817	   as it need not imply more skill than is required to boot games on a
 12818	   PC.  The derived noun `neep-neeping' applies specifically to
 12819	   the long conversations about computers that tend to develop in the
 12820	   corners at most SF-convention parties.  Fandom has a related
 12821	   proverb to the effect that "Hacking is a conversational black
 12822	   hole!".
 12823	
 12824	:neophilia: /nee`oh-fil'-ee-*/ n. The trait of being excited and
 12825	   pleased by novelty.  Common trait of most hackers, SF fans, and
 12826	   members of several other connected leading-edge subcultures,
 12827	   including the pro-technology `Whole Earth' wing of the ecology
 12828	   movement, space activists, many members of Mensa, and the
 12829	   Discordian/neo-pagan underground.  All these groups overlap heavily
 12830	   and (where evidence is available) seem to share characteristic
 12831	   hacker tropisms for science fiction, {{music}}, and {{oriental
 12832	   food}}.
 12833	
 12834	:net.-: /net dot/ pref. [USENET] Prefix used to describe people and
 12835	   events related to USENET.  From the time before the {Great
 12836	   Renaming}, when most non-local newsgroups had names beginning
 12837	   `net.'.  Includes {net.god}s, `net.goddesses' (various
 12838	   charismatic net.women with circles of on-line admirers),
 12839	   `net.lurkers' (see {lurker}), `net.person',
 12840	   `net.parties' (a synonym for {boink}, sense 2), and
 12841	   many similar constructs.  See also {net.police}.
 12842	
 12843	:net.god: /net god/ n. Used to refer to anyone who satisfies some
 12844	   combination of the following conditions: has been visible on USENET
 12845	   for more than 5 years, ran one of the original backbone sites,
 12846	   moderated an important newsgroup, wrote news software, or knows
 12847	   Gene, Mark, Rick, Mel, Henry, Chuq, and Greg personally.  See
 12848	   {demigod}.   Net.goddesses such as Rissa or the Slime Sisters have
 12849	   (so far) been distinguished more by personality than by authority.
 12850	
 12851	:net.personality: /net per`sn-al'-*-tee/ n. Someone who has made a name
 12852	   for him or herself on {USENET}, through either longevity or
 12853	   attention-getting posts, but doesn't meet the other requirements of
 12854	   {net.god}hood.
 12855	
 12856	:net.police: /net-p*-lees'/ n. (var. `net.cops') Those USENET
 12857	   readers who feel it is their responsibility to pounce on and
 12858	   {flame} any posting which they regard as offensive or in
 12859	   violation of their understanding of {netiquette}.  Generally
 12860	   used sarcastically or pejoratively.  Also spelled `net police'.
 12861	   See also {net.-}, {code police}.
 12862	
 12863	:NetBOLLIX: [from bollix: to bungle] n. {IBM}'s NetBIOS, an
 12864	   extremely {brain-damaged} network protocol which, like {Blue
 12865	   Glue}, is used at commercial shops that don't know any better.
 12866	
 12867	:netburp: [IRC] n.  When {netlag} gets really bad, and delays
 12868	   between servers exceed a certain threshhold, the {IRC} network
 12869	   effectively becomes partitioned for a period of time, and large
 12870	   numbers of people seem to be signing off at the same time and then
 12871	   signing back on again when things get better.  An instance of this
 12872	   is called a `netburp' (or, sometimes, {netsplit}).
 12873	   
 12874	:netdead: [IRC] n.  The state of someone who signs off {IRC},
 12875	   perhaps during a {netburp}, and doesn't sign back on until
 12876	   later.  In the interim, he is "dead to the net".
 12877	
 12878	:nethack: /net'hak/ [UNIX] n. A dungeon game similar to
 12879	   {rogue} but more elaborate, distributed in C source over
 12880	   {USENET} and very popular at UNIX sites and on PC-class machines
 12881	   (nethack is probably the most widely distributed of the freeware
 12882	   dungeon games).  The earliest versions, written by Jay Fenlason and
 12883	   later considerably enhanced by Andries Brouwer, were simply called
 12884	   `hack'.  The name changed when maintenance was taken over by a
 12885	   group of hackers originally organized by Mike Stephenson; the
 12886	   current contact address (as of mid-1991) is
 12887	   nethack-bugs@linc.cis.upenn.edu.
 12888	
 12889	:netiquette: /net'ee-ket/ or /net'i-ket/ [portmanteau from "network
 12890	   etiquette"] n. Conventions of politeness recognized on {USENET},
 12891	   such as avoidance of cross-posting to inappropriate groups or
 12892	   refraining from commercial pluggery on the net.
 12893	
 12894	:netlag: [IRC, MUD] n.  A condition that occurs when the delays in
 12895	   the {IRC} network or on a {MUD} become severe enough that
 12896	   servers briefly lose and then reestablish contact, causing messages
 12897	   to be delivered in bursts, often with delays of up to a minute.
 12898	   (Note that this term has nothing to do with mainstream "jetlag",
 12899	   a condition which hackers tend not to be much bothered by.)
 12900	   
 12901	:netnews: /net'n[y]ooz/ n. 1. The software that makes {USENET}
 12902	   run.  2. The content of USENET.  "I read netnews right after my
 12903	   mail most mornings."
 12904	
 12905	:netrock: /net'rok/ [IBM] n. A {flame}; used esp. on VNET,
 12906	   IBM's internal corporate network.
 12907	
 12908	:netsplit: n. Syn. {netburp}.
 12909	
 12910	:netter: n. 1. Loosely, anyone with a {network address}.  2. More
 12911	   specifically, a {USENET} regular.  Most often found in the
 12912	   plural.  "If you post *that* in a technical group, you're
 12913	   going to be flamed by angry netters for the rest of time!"
 12914	
 12915	:network address: n. (also `net address') As used by hackers,
 12916	   means an address on `the' network (see {network, the}; this is
 12917	   almost always a {bang path} or {{Internet address}}).  Such an
 12918	   address is essential if one wants to be to be taken seriously by
 12919	   hackers; in particular, persons or organizations that claim to
 12920	   understand, work with, sell to, or recruit from among hackers but
 12921	   *don't* display net addresses are quietly presumed to be
 12922	   clueless poseurs and mentally flushed (see {flush}, sense 4).
 12923	   Hackers often put their net addresses on their business cards and
 12924	   wear them prominently in contexts where they expect to meet other
 12925	   hackers face-to-face (see also {{science-fiction fandom}}).  This
 12926	   is mostly functional, but is also a signal that one identifies with
 12927	   hackerdom (like lodge pins among Masons or tie-dyed T-shirts among
 12928	   Grateful Dead fans).  Net addresses are often used in email text as
 12929	   a more concise substitute for personal names; indeed, hackers may
 12930	   come to know each other quite well by network names without ever
 12931	   learning each others' `legal' monikers.  See also {sitename},
 12932	   {domainist}.
 12933	
 12934	:network meltdown: n. A state of complete network overload; the
 12935	   network equivalent of {thrash}ing.  This may be induced by a
 12936	   {Chernobyl packet}.  See also {broadcast storm}, {kamikaze
 12937	   packet}.
 12938	
 12939	:network, the: n. 1. The union of all the major noncommercial,
 12940	   academic, and hacker-oriented networks, such as Internet, the old
 12941	   ARPANET, NSFnet, {BITNET}, and the virtual UUCP and {USENET}
 12942	   `networks', plus the corporate in-house networks and commercial
 12943	   time-sharing services (such as CompuServe) that gateway to them.  A
 12944	   site is generally considered `on the network' if it can be reached
 12945	   through some combination of Internet-style (@-sign) and UUCP
 12946	   (bang-path) addresses.  See {bang path}, {{Internet address}},
 12947	   {network address}.  2. A fictional conspiracy of libertarian
 12948	   hacker-subversives and anti-authoritarian monkeywrenchers described
 12949	   in Robert Anton Wilson's novel `Schr"odinger's Cat', to which
 12950	   many hackers have subsequently decided they belong (this is an
 12951	   example of {ha ha only serious}).
 12952	
 12953	   In sense 1, `network' is often abbreviated to `net'.  "Are
 12954	   you on the net?" is a frequent question when hackers first meet
 12955	   face to face, and "See you on the net!" is a frequent goodbye.
 12956	
 12957	:New Jersey: [primarily Stanford/Silicon Valley] adj. Brain-damaged
 12958	   or of poor design.  This refers to the allegedly wretched quality
 12959	   of such software as C, C++, and UNIX (which originated at Bell Labs
 12960	   in Murray Hill, New Jersey).  "This compiler bites the bag, but
 12961	   what can you expect from a compiler designed in New Jersey?"
 12962	   Compare {Berkeley Quality Software}.  See also {UNIX
 12963	   conspiracy}.
 12964	
 12965	:New Testament: n. [C programmers] The second edition of K&R's
 12966	   `The C Programming Language' (Prentice-Hall, 1988; ISBN
 12967	   0-13-110362-8), describing ANSI Standard C.  See {K&R}.
 12968	
 12969	:newbie: /n[y]oo'bee/ n. [orig. from British public-school and
 12970	   military slang variant of `new boy'] A USENET neophyte.
 12971	   This term surfaced in the {newsgroup} talk.bizarre but is
 12972	   now in wide use.  Criteria for being considered a newbie vary
 12973	   wildly; a person can be called a newbie in one newsgroup while
 12974	   remaining a respected regular in another.  The label `newbie'
 12975	   is sometimes applied as a serious insult to a person who has been
 12976	   around USENET for a long time but who carefully hides all evidence
 12977	   of having a clue.  See {BIFF}.
 12978	
 12979	:newgroup wars: /n[y]oo'groop wohrz/ [USENET] n. The salvos of dueling
 12980	   `newgroup' and `rmgroup' messages sometimes exchanged by
 12981	   persons on opposite sides of a dispute over whether a {newsgroup}
 12982	   should be created net-wide.  These usually settle out within a week
 12983	   or two as it becomes clear whether the group has a natural
 12984	   constituency (usually, it doesn't).  At times, especially in the
 12985	   completely anarchic alt hierarchy, the names of newsgroups
 12986	   themselves become a form of comment or humor; e.g., the spinoff of
 12987	   alt.swedish.chef.bork.bork.bork from alt.tv.muppets in
 12988	   early 1990, or any number of specialized abuse groups named after
 12989	   particularly notorious {flamer}s, e.g., alt.weemba.
 12990	
 12991	:newline: /n[y]oo'li:n/ n. 1. [techspeak, primarily UNIX] The
 12992	   ASCII LF character (0001010), used under {{UNIX}} as a text line
 12993	   terminator.  A Bell-Labs-ism rather than a Berkeleyism;
 12994	   interestingly (and unusually for UNIX jargon), it is said to have
 12995	   originally been an IBM usage.  (Though the term `newline' appears
 12996	   in ASCII standards, it never caught on in the general computing
 12997	   world before UNIX).  2. More generally, any magic character,
 12998	   character sequence, or operation (like Pascal's writeln procedure)
 12999	   required to terminate a text record or separate lines.  See
 13000	   {crlf}, {terpri}.
 13001	
 13002	:NeWS: /nee'wis/, /n[y]oo'is/ or /n[y]ooz/ [acronym; the
 13003	   `Network Window System'] n. The road not taken in window systems,
 13004	   an elegant {PostScript}-based environment that would almost certainly
 13005	   have won the standards war with {X} if it hadn't been
 13006	   {proprietary} to Sun Microsystems.  There is a lesson here that
 13007	   too many software vendors haven't yet heeded.  Many hackers insist
 13008	   on the two-syllable pronunciations above as a way of distinguishing
 13009	   NeWS from {news} (the {netnews} software).
 13010	
 13011	:news: n. See {netnews}.
 13012	
 13013	:newsfroup: // [USENET] n. Silly synonym for {newsgroup},
 13014	   originally a typo but now in regular use on USENET's talk.bizarre
 13015	   and other lunatic-fringe groups.  Compare {hing} and {filk}.
 13016	
 13017	:newsgroup: [USENET] n. One of {USENET}'s huge collection of
 13018	   topic groups or {fora}.  Usenet groups can be `unmoderated'
 13019	   (anyone can post) or `moderated' (submissions are automatically
 13020	   directed to a moderator, who edits or filters and then posts the
 13021	   results).  Some newsgroups have parallel {mailing list}s for
 13022	   Internet people with no netnews access, with postings to the group
 13023	   automatically propagated to the list and vice versa.  Some
 13024	   moderated groups (especially those which are actually gatewayed
 13025	   Internet mailing lists) are distributed as `digests', with groups
 13026	   of postings periodically collected into a single large posting with
 13027	   an index.
 13028	
 13029	   Among the best-known are comp.lang.c (the C-language forum),
 13030	   comp.arch (on computer architectures), comp.unix.wizards
 13031	   (for UNIX wizards), rec.arts.sf-lovers (for science-fiction
 13032	   fans), and talk.politics.misc (miscellaneous political
 13033	   discussions and {flamage}).
 13034	
 13035	:nick: [IRC] n.  Short for nickname.  On {IRC}, every user must
 13036	   pick a nick, which is sometimes the same as the user's real name or
 13037	   login name, but is often more fanciful.
 13038	   
 13039	:nickle: /ni'kl/ [from `nickel', common name for the U.S.
 13040	   5-cent coin] n. A {nybble} + 1; 5 bits.  Reported among
 13041	   developers for Mattel's GI 1600 (the Intellivision games
 13042	   processor), a chip with 16-bit-wide RAM but 10-bit-wide ROM.  See
 13043	   also {deckle}.
 13044	
 13045	:night mode: n. See {phase} (of people).
 13046	
 13047	:Nightmare File System: n. Pejorative hackerism for Sun's Network
 13048	   File System (NFS).  In any nontrivial network of Suns where there
 13049	   is a lot of NFS cross-mounting, when one Sun goes down, the others
 13050	   often freeze up.  Some machine tries to access the down one, and
 13051	   (getting no response) repeats indefinitely.  This causes it to
 13052	   appear dead to some messages (what is actually happening is that it
 13053	   is locked up in what should have been a brief excursion to a higher
 13054	   {spl} level).  Then another machine tries to reach either the
 13055	   down machine or the pseudo-down machine, and itself becomes
 13056	   pseudo-down.  The first machine to discover the down one is now
 13057	   trying both to access the down one and to respond to the
 13058	   pseudo-down one, so it is even harder to reach.  This situation
 13059	   snowballs very fast, and soon the entire network of machines is
 13060	   frozen --- worst of all, the user can't even abort the file access
 13061	   that started the problem!  Many of NFS'es problems are excused by
 13062	   partisans as being an inevitable result of its statelessness, which
 13063	   is held to be a great feature (critics, of course, call it a great
 13064	   {misfeature}).  (ITS partisans are apt to cite this as proof of
 13065	   UNIX's alleged bogosity; ITS had a working NFS-like shared file
 13066	   system with none of these problems in the early 1970s.)  See also
 13067	   {broadcast storm}.
 13068	
 13069	:NIL: /nil/ No.  Used in reply to a question, particularly one
 13070	   asked using the `-P' convention.  Most hackers assume this derives
 13071	   simply from LISP terminology for `false' (see also {T}), but
 13072	   NIL as a negative reply was well-established among radio hams
 13073	   decades before the advent of LISP.  The historical connection
 13074	   between early hackerdom and the ham radio word was strong enough
 13075	   that this may have been an influence.
 13076	
 13077	:NMI: /N-M-I/ n. Non-Maskable Interrupt.  An IRQ 7 on the PDP-11
 13078	   or 680[01234]0; the NMI line on an 80[1234]86.  In contrast with a
 13079	   {priority interrupt} (which might be ignored, although that is
 13080	   unlikely), an NMI is *never* ignored.
 13081	
 13082	:no-op: /noh'op/ alt. NOP /nop/ [no operation] n. 1. (also v.)
 13083	   A machine instruction that does nothing (sometimes used in
 13084	   assembler-level programming as filler for data or patch areas, or
 13085	   to overwrite code to be removed in binaries).  See also {JFCL}.
 13086	   2. A person who contributes nothing to a project, or has nothing
 13087	   going on upstairs, or both.  As in "He's a no-op." 3. Any
 13088	   operation or sequence of operations with no effect, such as
 13089	   circling the block without finding a parking space, or putting
 13090	   money into a vending machine and having it fall immediately into
 13091	   the coin-return box, or asking someone for help and being told to
 13092	   go away.  "Oh, well, that was a no-op."  Hot-and-sour soup (see
 13093	   {great-wall}) that is insufficiently either is `no-op soup';
 13094	   so is wonton soup if everybody else is having hot-and-sour.
 13095	   
 13096	
 13097	:noddy: /nod'ee/ [UK: from the children's books] adj.
 13098	   1. Small and un-useful, but demonstrating a point.  Noddy programs
 13099	   are often written by people learning a new language or system.  The
 13100	   archetypal noddy program is {hello, world}.  Noddy code may be
 13101	   used to demonstrate a feature or bug of a compiler.  May be used of
 13102	   real hardware or software to imply that it isn't worth using.
 13103	   "This editor's a bit noddy."  2. A program that is more or less
 13104	   instant to produce.  In this use, the term does not necessarily
 13105	   connote uselessness, but describes a {hack} sufficiently trivial
 13106	   that it can be written and debugged while carrying on (and during
 13107	   the space of) a normal conversation.  "I'll just throw together a
 13108	   noddy {awk} script to dump all the first fields."  In North
 13109	   America this might be called a {mickey mouse program}.  See
 13110	   {toy program}.
 13111	
 13112	:NOMEX underwear: /noh'meks uhn'-der-weir/ [USENET] n. Syn.
 13113	   {asbestos longjohns}, used mostly in auto-related mailing lists
 13114	   and newsgroups.  NOMEX underwear is an actual product available on
 13115	   the racing equipment market, used as a fire resistance measure and
 13116	   required in some racing series.
 13117	
 13118	:Nominal Semidestructor: n. Sound-alike slang for `National
 13119	   Semiconductor', found among other places in the 4.3BSD networking
 13120	   sources.  During the late 1970s to mid-1980s this company marketed
 13121	   a series of microprocessors including the NS16000 and NS32000 and
 13122	   several variants.  At one point early in the great microprocessor
 13123	   race, the specs on these chips made them look like serious
 13124	   competition for the rising Intel 80x86 and Motorola 680x0 series.
 13125	   Unfortunately, the actual parts were notoriously flaky and never
 13126	   implemented the full instruction set promised in their literature,
 13127	   apparently because the company couldn't get any of the mask
 13128	   steppings to work as designed.  They eventually sank without trace,
 13129	   joining the Zilog Z80,000 and a few even more obscure also-rans in
 13130	   the graveyard of forgotten microprocessors.  Compare {HP-SUX},
 13131	   {AIDX}, {buglix}, {Macintrash}, {Telerat}, {Open
 13132	   DeathTrap}, {ScumOS}, {sun-stools}.
 13133	
 13134	:non-optimal solution: n. (also `sub-optimal solution') An
 13135	   astoundingly stupid way to do something.  This term is generally
 13136	   used in deadpan sarcasm, as its impact is greatest when the person
 13137	   speaking looks completely serious.  Compare {stunning}.  See also
 13138	   {Bad Thing}.
 13139	
 13140	:nonlinear: adj. [scientific computation] 1. Behaving in an erratic
 13141	   and unpredictable fashion; unstable.  When used to describe the
 13142	   behavior of a machine or program, it suggests that said machine or
 13143	   program is being forced to run far outside of design
 13144	   specifications.  This behavior may be induced by unreasonable
 13145	   inputs, or may be triggered when a more mundane bug sends the
 13146	   computation far off from its expected course.  2. When describing
 13147	   the behavior of a person, suggests a tantrum or a {flame}.
 13148	   "When you talk to Bob, don't mention the drug problem or he'll go
 13149	   nonlinear for hours."  In this context, `go nonlinear' connotes
 13150	   `blow up out of proportion' (proportion connotes linearity).
 13151	
 13152	:nontrivial: adj. Requiring real thought or significant computing
 13153	   power.  Often used as an understated way of saying that a problem
 13154	   is quite difficult or impractical, or even entirely unsolvable
 13155	   ("Proving P=NP is nontrivial").  The preferred emphatic form is
 13156	   `decidedly nontrivial'.  See {trivial}, {uninteresting},
 13157	   {interesting}.
 13158	
 13159	:notwork: /not'werk/ n. A network, when it is acting {flaky} or is
 13160	   {down}.  Compare {nyetwork}.  Said at IBM to have orig.
 13161	   referred to a particular period of flakiness on IBM's VNET
 13162	   corporate network, ca. 1988; but there are independent reports of
 13163	   the term from elsewhere.
 13164	
 13165	:NP-: /N-P/ pref. Extremely.  Used to modify adjectives
 13166	   describing a level or quality of difficulty; the connotation is
 13167	   often `more so than it should be' (NP-complete problems all seem
 13168	   to be very hard, but so far no one has found a good a priori
 13169	   reason that they should be.)  "Coding a BitBlt implementation to
 13170	   perform correctly in every case is NP-annoying."  This is
 13171	   generalized from the computer-science terms `NP-hard' and
 13172	   `NP-complete'.  NP is the set of Nondeterministic-Polynomial
 13173	   algorithms, those that can be completed by a nondeterministic
 13174	   Turing machine in an amount of time that is a polynomial function
 13175	   of the size of the input; a solution for one NP-complete problem
 13176	   would solve all the others.  Note, however, that the NP- prefix is,
 13177	   from a complexity theorist's point of view, the wrong part of
 13178	   `NP-complete' to connote extreme difficulty; it is the completeness,
 13179	   not the NP-ness, that puts any problem it describes in the
 13180	   `hard' category.
 13181	
 13182	:nroff: /en'rof/ [UNIX, from "new runoff"] n. A companion
 13183	   program to the UNIX typesetter `troff', accepting identical
 13184	   input but preparing output for terminals and line printers.
 13185	
 13186	:NSA line eater: n. The National Security Agency trawling
 13187	   program sometimes assumed to be reading {USENET} for the
 13188	   U.S. Government's spooks.  Most hackers describe it as a mythical
 13189	   beast, but some believe it actually exists, more aren't sure, and
 13190	   many believe in acting as though it exists just in case.  Some
 13191	   netters put loaded phrases like `KGB', `Uzi', `nuclear materials',
 13192	   `Palestine', `cocaine', and `assassination' in their {sig block}s
 13193	   in a (probably futile) attempt to confuse and overload the
 13194	   creature.  The {GNU} version of {EMACS} actually has a command
 13195	   that randomly inserts a bunch of insidious anarcho-verbiage into
 13196	   your edited text.
 13197	
 13198	   There is a mainstream variant of this myth involving a `Trunk Line
 13199	   Monitor', which supposedly used speech recognition to extract words
 13200	   from telephone trunks.  This one was making the rounds in the
 13201	   late 1970s, spread by people who had no idea of then-current
 13202	   technology or the storage, signal-processing, or speech recognition
 13203	   needs of such a project.  On the basis of mass-storage costs alone
 13204	   it would have been cheaper to hire 50 high-school students and just
 13205	   let them listen in.  Speech-recognition technology can't do this
 13206	   job even now (1991), and almost certainly won't in this millennium,
 13207	   either.  The peak of silliness came with a letter to an alternative
 13208	   paper in New Haven, Connecticut, laying out the factoids of this
 13209	   Big Brotherly affair.  The letter writer then revealed his actual
 13210	   agenda by offering --- at an amazing low price, just this once, we
 13211	   take VISA and MasterCard --- a scrambler guaranteed to daunt the
 13212	   Trunk Trawler and presumably allowing the would-be Baader-Meinhof
 13213	   gangs of the world to get on with their business.
 13214	
 13215	:nuke: vt. 1. To intentionally delete the entire contents of a
 13216	   given directory or storage volume.  "On UNIX, `rm -r /usr'
 13217	   will nuke everything in the usr filesystem."  Never used for
 13218	   accidental deletion.  Oppose {blow away}.  2. Syn. for
 13219	   {dike}, applied to smaller things such as files, features, or
 13220	   code sections.  Often used to express a final verdict.  "What do
 13221	   you want me to do with that 80-meg {wallpaper} file?"  "Nuke
 13222	   it."  3. Used of processes as well as files; nuke is a frequent
 13223	   verbal alias for `kill -9' on UNIX.  4. On IBM PCs, a bug
 13224	   that results in {fandango on core} can trash the operating
 13225	   system, including the FAT (the in-core copy of the disk block
 13226	   chaining information).  This can utterly scramble attached disks,
 13227	   which are then said to have been `nuked'.  This term is also
 13228	   used of analogous lossages on Macintoshes and other micros without
 13229	   memory protection.
 13230	
 13231	:number-crunching: n. Computations of a numerical nature, esp.
 13232	   those that make extensive use of floating-point numbers.  The only
 13233	   thing {Fortrash} is good for.  This term is in widespread
 13234	   informal use outside hackerdom and even in mainstream slang, but
 13235	   has additional hackish connotations: namely, that the computations
 13236	   are mindless and involve massive use of {brute force}.  This is
 13237	   not always {evil}, esp. if it involves ray tracing or fractals
 13238	   or some other use that makes {pretty pictures}, esp. if such
 13239	   pictures can be used as {wallpaper}.  See also {crunch}.
 13240	
 13241	:numbers: [scientific computation] n. Output of a computation that
 13242	   may not be significant results but at least indicate that the
 13243	   program is running.  May be used to placate management, grant
 13244	   sponsors, etc.  `Making numbers' means running a program
 13245	   because output --- any output, not necessarily meaningful output
 13246	   --- is needed as a demonstration of progress.  See {pretty
 13247	   pictures}, {math-out}, {social science number}.
 13248	
 13249	:NUXI problem: /nuk'see pro'bl*m/ n. This refers to the problem of
 13250	   transferring data between machines with differing byte-order.  The
 13251	   string `UNIX' might look like `NUXI' on a machine with a
 13252	   different `byte sex' (e.g., when transferring data from a
 13253	   {little-endian} to a {big-endian}, or vice-versa).  See also
 13254	   {middle-endian}, {swab}, and {bytesexual}.
 13255	
 13256	:nybble: /nib'l/ (alt. `nibble') [from v. `nibble' by analogy
 13257	   with `bite' => `byte'] n. Four bits; one {hex} digit;
 13258	   a half-byte.  Though `byte' is now techspeak, this useful relative
 13259	   is still jargon.  Compare {{byte}}, {crumb}, {tayste},
 13260	   {dynner}; see also {bit}, {nickle}, {deckle}.  Apparently
 13261	   this spelling is uncommon in Commonwealth Hackish, as British
 13262	   orthography suggests the pronunciation /ni:'bl/.
 13263	
 13264	:nyetwork: /nyet'werk/ [from Russian `nyet' = no] n. A network,
 13265	   when it is acting {flaky} or is {down}.  Compare {notwork}.
 13266	
 13267	= O =
 13268	=====
 13269	
 13270	:Ob-: /ob/ pref. Obligatory.  A piece of {netiquette}
 13271	   acknowledging that the author has been straying from the
 13272	   newsgroup's charter topic.  For example, if a posting in alt.sex is
 13273	   a response to a part of someone else's posting that has nothing
 13274	   particularly to do with sex, the author may append `ObSex' (or
 13275	   `Obsex') and toss off a question or vignette about some unusual
 13276	   erotic act.  It is considered a sign of great {winnitude} when
 13277	   your Obs are more interesting than other people's whole postings.
 13278	
 13279	:Obfuscated C Contest: n. An annual contest run since 1984 over
 13280	   USENET by Landon Curt Noll and friends.  The overall winner is
 13281	   whoever produces the most unreadable, creative, and bizarre (but
 13282	   working) C program; various other prizes are awarded at the judges'
 13283	   whim.  C's terse syntax and macro-preprocessor facilities give
 13284	   contestants a lot of maneuvering room.  The winning programs often
 13285	   manage to be simultaneously (a) funny, (b) breathtaking works of
 13286	   art, and (c) horrible examples of how *not* to code in C.
 13287	
 13288	   This relatively short and sweet entry might help convey the flavor
 13289	   of obfuscated C:
 13290	
 13291	     /*
 13292	      * HELLO WORLD program
 13293	      * by Jack Applin and Robert Heckendorn, 1985
 13294	      */
 13295	     main(v,c)char**c;{for(v[c++]="Hello, world!\n)";
 13296	     (!!c)[*c]&&(v--||--c&&execlp(*c,*c,c[!!c]+!!c,!c));
 13297	     **c=!c)write(!!*c,*c,!!**c);}
 13298	
 13299	   Here's another good one:
 13300	
 13301	     /*
 13302	      * Program to compute an approximation of pi
 13303	      *  by Brian Westley, 1988
 13304	      */
 13305	
 13306	     #define _ -F<00||--F-OO--;
 13307	     int F=00,OO=00;
 13308	     main(){F_OO();printf("%1.3f\n",4.*-F/OO/OO);}F_OO()
 13309	     {
 13310	                 _-_-_-_
 13311	            _-_-_-_-_-_-_-_-_
 13312	         _-_-_-_-_-_-_-_-_-_-_-_
 13313	       _-_-_-_-_-_-_-_-_-_-_-_-_-_
 13314	      _-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 13315	      _-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 13316	     _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 13317	     _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 13318	     _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 13319	     _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 13320	      _-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 13321	      _-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 13322	       _-_-_-_-_-_-_-_-_-_-_-_-_-_
 13323	         _-_-_-_-_-_-_-_-_-_-_-_
 13324	             _-_-_-_-_-_-_-_
 13325	                 _-_-_-_
 13326	     }
 13327	
 13328	   See also {hello, world}.
 13329	
 13330	:obi-wan error: /oh'bee-won` er'*r/ [RPI, from `off-by-one' and
 13331	   the Obi-Wan Kenobi character in "Star Wars"] n.  A loop of
 13332	   some sort in which the index is off by 1.  Common when the index
 13333	   should have started from 0 but instead started from 1.  A kind of
 13334	   {off-by-one error}.  See also {zeroth}.
 13335	
 13336	:Objectionable-C: n. Hackish take on "Objective-C", the name of
 13337	   an object-oriented dialect of C in competition with the
 13338	   better-known C++ (it is used to write native applications on the
 13339	   NeXT machine).  Objectionable-C uses a Smalltalk-like syntax, but
 13340	   lacks the flexibility of Smalltalk method calls, and (like many
 13341	   such efforts) comes frustratingly close to attaining the {Right
 13342	   Thing} without actually doing so.
 13343	
 13344	:obscure: adj. Used in an exaggeration of its normal meaning, to
 13345	   imply total incomprehensibility.  "The reason for that last crash
 13346	   is obscure."  "The `find(1)' command's syntax is obscure!"
 13347	   The phrase `moderately obscure' implies that it could be
 13348	   figured out but probably isn't worth the trouble.  The construction
 13349	   `obscure in the extreme' is the preferred emphatic form.
 13350	
 13351	:octal forty: /ok'tl for'tee/ n. Hackish way of saying "I'm
 13352	   drawing a blank."  Octal 40 is the {{ASCII}} space character,
 13353	   0100000; by an odd coincidence, {hex} 40 (01000000) is the
 13354	   {{EBCDIC}} space character.  See {wall}.
 13355	
 13356	:off the trolley: adj. Describes the behavior of a program that
 13357	   malfunctions and goes catatonic, but doesn't actually {crash} or
 13358	   abort.  See {glitch}, {bug}, {deep space}.
 13359	
 13360	:off-by-one error: n. Exceedingly common error induced in many
 13361	   ways, such as by starting at 0 when you should have started at 1 or
 13362	   vice versa, or by writing `< N' instead of `<= N' or
 13363	   vice-versa.  Also applied to giving something to the person next to
 13364	   the one who should have gotten it.  Often confounded with
 13365	   {fencepost error}, which is properly a particular subtype of it.
 13366	
 13367	:offline: adv. Not now or not here.  "Let's take this
 13368	   discussion offline."  Specifically used on {USENET} to suggest
 13369	   that a discussion be taken off a public newsgroup to email.
 13370	
 13371	:old fart: n. Tribal elder.  A title self-assumed with remarkable
 13372	   frequency by (esp.) USENETters who have been programming for more
 13373	   than about 25 years; often appears in {sig block}s attached to
 13374	   Jargon File contributions of great archeological significance.
 13375	   This is a term of insult in the second or third person but one of
 13376	   pride in first person.
 13377	
 13378	:Old Testament: n. [C programmers] The first edition of {K&R}, the
 13379	   sacred text describing {Classic C}.
 13380	
 13381	:one-banana problem: n. At mainframe shops, where the computers
 13382	   have operators for routine administrivia, the programmers and
 13383	   hardware people tend to look down on the operators and claim that a
 13384	   trained monkey could do their job.  It is frequently observed that
 13385	   the incentives which would be offered said monkeys can be used
 13386	   as a scale to describe the difficulty of a task.  A one-banana
 13387	   problem is simple; hence "It's only a one-banana job at the most;
 13388	   what's taking them so long?"
 13389	
 13390	   At IBM, folklore divides the world into one-, two-, and
 13391	   three-banana problems.  Other cultures have different hierarchies
 13392	   and may divide them more finely; at ICL, for example, five grapes
 13393	   (a bunch) equals a banana.  Their upper limit for the in-house
 13394	   {sysape}s is said to be two bananas and three grapes (another
 13395	   source claims it's three bananas and one grape, but observes
 13396	   "However, this is subject to local variations, cosmic rays and
 13397	   ISO").  At a complication level any higher than that, one asks the
 13398	   manufacturers to send someone around to check things.
 13399	
 13400	:one-line fix: n. Used (often sarcastically) of a change to a
 13401	   program that is thought to be trivial or insignificant right up to
 13402	   the moment it crashes the system.  Usually `cured' by another
 13403	   one-line fix.  See also {I didn't change anything!}
 13404	
 13405	:one-liner wars: n. A game popular among hackers who code in the
 13406	   language APL (see {write-only language} and {line noise}).
 13407	   The objective is to see who can code the most interesting and/or
 13408	   useful routine in one line of operators chosen from
 13409	   APL's exceedingly {hairy} primitive set.  A similar amusement
 13410	   was practiced among {TECO} hackers and is now popular among
 13411	   {Perl} aficionados.
 13412	   
 13413	   Ken Iverson, the inventor of APL, has been credited with a
 13414	   one-liner that, given a number N, produces a list of the
 13415	   prime numbers from 1 to N inclusive.  It looks like this:
 13416	
 13417	        (2 = 0 +.= T o.| T) / T <- iN
 13418	
 13419	   where `o' is the APL null character, the assignment arrow is a
 13420	   single character, and `i' represents the APL iota.
 13421	
 13422	:ooblick: /oo'blik/ [from Dr. Seuss's `Bartholomew and the
 13423	   Oobleck'] n. A bizarre semi-liquid sludge made from cornstarch and
 13424	   water.  Enjoyed among hackers who make batches during playtime at
 13425	   parties for its amusing and extremely non-Newtonian behavior; it
 13426	   pours and splatters, but resists rapid motion like a solid and will
 13427	   even crack when hit by a hammer.  Often found near lasers.
 13428	
 13429	   Here is a field-tested ooblick recipe contributed by GLS:
 13430	
 13431	     1 cup cornstarch
 13432	
 13433	     1 cup baking soda
 13434	
 13435	     3/4 cup water
 13436	
 13437	     N drops of food coloring
 13438	
 13439	   This recipe isn't quite as non-Newtonian as a pure cornstarch
 13440	   ooblick, but has an appropriately slimy feel.
 13441	
 13442	   Some, however, insist that the notion of an ooblick *recipe*
 13443	   is far too mechanical, and that it is best to add the water in
 13444	   small increments so that the various mixed states the cornstarch
 13445	   goes through as it *becomes* ooblick can be grokked in
 13446	   fullness by many hands.  For optional ingredients of this
 13447	   experience, see the "{Ceremonial Chemicals}" section of
 13448	   {appendix B}.
 13449	
 13450	:op: /op/ [IRC] n.  Someone who is endowed with privileges on
 13451	   {IRC}, not limited to a particular channel.  These are generally
 13452	   people who are in charge of the IRC server at their particular
 13453	   site.  Sometimes used interchangably with {CHOP}.  Compare
 13454	   {sysop}.
 13455	
 13456	:open: n. Abbreviation for `open (or left) parenthesis' --- used when
 13457	   necessary to eliminate oral ambiguity.  To read aloud the LISP form
 13458	   (DEFUN FOO (X) (PLUS X 1)) one might say: "Open defun foo, open
 13459	   eks close, open, plus eks one, close close."
 13460	
 13461	:Open DeathTrap: n. Abusive hackerism for the Santa Cruz
 13462	   Operation's `Open DeskTop' product, a Motif-based graphical
 13463	   interface over their UNIX.  The funniest part is that this was
 13464	   coined by SCO's own developers...compare {AIDX},
 13465	   {terminak}, {Macintrash} {Nominal Semidestructor},
 13466	   {ScumOS}, {sun-stools}, {HP-SUX}.
 13467	
 13468	:open switch: [IBM: prob. from railroading] n. An unresolved
 13469	   question, issue, or problem.
 13470	
 13471	:operating system:: [techspeak] n. (Often abbreviated `OS') The
 13472	   foundation software of a machine, of course; that which schedules
 13473	   tasks, allocates storage, and presents a default interface to the
 13474	   user between applications.  The facilities an operating system
 13475	   provides and its general design philosophy exert an extremely
 13476	   strong influence on programming style and on the technical cultures
 13477	   that grow up around its host machines.  Hacker folklore has been
 13478	   shaped primarily by the {{UNIX}}, {{ITS}}, {{TOPS-10}},
 13479	   {{TOPS-20}}/{{TWENEX}}, {{WAITS}}, {{CP/M}}, {{MS-DOS}}, and
 13480	   {{Multics}} operating systems (most importantly by ITS and
 13481	   UNIX).
 13482	
 13483	:optical diff: n. See {vdiff}.
 13484	
 13485	:optical grep: n. See {vgrep}.
 13486	
 13487	:Orange Book: n. The U.S. Government's standards document
 13488	   `Trusted Computer System Evaluation Criteria, DOD standard
 13489	   5200.28-STD, December, 1985' which characterize secure computing
 13490	   architectures and defines levels A1 (most secure) through D
 13491	   (least).  Stock UNIXes are roughly C1, and can be upgraded to
 13492	   about C2 without excessive pain.  See also {{book titles}}.
 13493	
 13494	:oriental food:: n. Hackers display an intense tropism towards
 13495	   oriental cuisine, especially Chinese, and especially of the spicier
 13496	   varieties such as Szechuan and Hunan.  This phenomenon (which has
 13497	   also been observed in subcultures that overlap heavily with
 13498	   hackerdom, most notably science-fiction fandom) has never been
 13499	   satisfactorily explained, but is sufficiently intense that one can
 13500	   assume the target of a hackish dinner expedition to be the best
 13501	   local Chinese place and be right at least three times out of four.
 13502	   See also {ravs}, {great-wall}, {stir-fried random},
 13503	   {laser chicken}, {Yu-Shiang Whole Fish}.  Thai, Indian,
 13504	   Korean, and Vietnamese cuisines are also quite popular.
 13505	
 13506	:orphan: [UNIX] n. A process whose parent has died; one inherited by
 13507	   `init(1)'.  Compare {zombie}.
 13508	
 13509	:orphaned i-node: /or'f*nd i:'nohd/ [UNIX] n. 1. [techspeak] A
 13510	   file that retains storage but no longer appears in the directories
 13511	   of a filesystem.  2. By extension, a pejorative for any person
 13512	   serving no useful function within some organization, esp.
 13513	   {lion food} without subordinates.
 13514	
 13515	:orthogonal: [from mathematics] adj. Mutually independent; well
 13516	   separated; sometimes, irrelevant to.  Used in a generalization of
 13517	   its mathematical meaning to describe sets of primitives or
 13518	   capabilities that, like a vector basis in geometry, span the
 13519	   entire `capability space' of the system and are in some sense
 13520	   non-overlapping or mutually independent.  For example, in
 13521	   architectures such as the PDP-11 or VAX where all or nearly all
 13522	   registers can be used interchangeably in any role with respect to
 13523	   any instruction, the register set is said to be orthogonal.  Or, in
 13524	   logic, the set of operators `not' and `or' is orthogonal,
 13525	   but the set `nand', `or', and `not' is not (because any
 13526	   one of these can be expressed in terms of the others).  Also used
 13527	   in comments on human discourse: "This may be orthogonal to the
 13528	   discussion, but...."
 13529	
 13530	:OS: /O-S/ 1. [Operating System] n. An abbreviation heavily used in email,
 13531	   occasionally in speech.  2. n.,obs. On ITS, an output spy.  See
 13532	   "{OS and JEDGAR}" (in {appendix A}).
 13533	
 13534	:OS/2: /O S too/ n. The anointed successor to MS-DOS for Intel
 13535	   286- and 386-based micros; proof that IBM/Microsoft couldn't get it
 13536	   right the second time, either.  Mentioning it is usually good for a
 13537	   cheap laugh among hackers --- the design was so {baroque}, and
 13538	   the implementation of 1.x so bad, that 3 years after introduction
 13539	   you could still count the major {app}s shipping for it on the
 13540	   fingers of two hands --- in unary.  Often called `Half-an-OS'.  On
 13541	   January 28, 1991, Microsoft announced that it was dropping its OS/2
 13542	   development to concentrate on Windows, leaving the OS entirely in
 13543	   the hands of IBM; on January 29 they claimed the media had got the
 13544	   story wrong, but were vague about how.  It looks as though OS/2 is
 13545	   moribund.  See {vaporware}, {monstrosity}, {cretinous},
 13546	   {second-system effect}.
 13547	
 13548	:out-of-band: [from telecommunications and network theory] adj.
 13549	   1. In software, describes values of a function which are not in its
 13550	   `natural' range of return values, but are rather signals that
 13551	   some kind of exception has occurred.  Many C functions, for
 13552	   example, return either a nonnegative integral value, or indicate
 13553	   failure with an out-of-band return value of -1.  Compare
 13554	   {hidden flag}, {green bytes}.  2. Also sometimes used to
 13555	   describe what communications people call `shift characters',
 13556	   like the ESC that leads control sequences for many terminals, or
 13557	   the level shift indicators in the old 5-bit Baudot codes.  3. In
 13558	   personal communication, using methods other than email, such as
 13559	   telephones or {snail-mail}.
 13560	
 13561	:overflow bit: n. 1. [techspeak] On some processors, an attempt to
 13562	   calculate a result too large for a register to hold causes a
 13563	   particular {flag} called an {overflow bit} to be set.
 13564	   2. Hackers use the term of human thought too.  "Well, the {{Ada}}
 13565	   description was {baroque} all right, but I could hack it OK until
 13566	   they got to the exception handling ... that set my overflow bit."
 13567	   3. The hypothetical bit that will be set if a hacker doesn't get to
 13568	   make a trip to the Room of Porcelain Fixtures: "I'd better process
 13569	   an internal interrupt before the overflow bit gets set".
 13570	
 13571	:overflow pdl: [MIT] n. The place where you put things when your
 13572	   {pdl} is full.  If you don't have one and too many things get
 13573	   pushed, you forget something.  The overflow pdl for a person's
 13574	   memory might be a memo pad.  This usage inspired the following
 13575	   doggerel:
 13576	
 13577	     Hey, diddle, diddle
 13578	     The overflow pdl
 13579	        To get a little more stack;
 13580	     If that's not enough
 13581	     Then you lose it all,
 13582	        And have to pop all the way back.
 13583	                                    --The Great Quux
 13584	
 13585	   The term {pdl} seems to be primarily an MITism; outside MIT this
 13586	   term would logically be replaced by `overflow {stack}', but
 13587	   the editors have heard no report of the latter term actually being
 13588	   in use.
 13589	
 13590	:overrun: n. 1. [techspeak] Term for a frequent consequence of data
 13591	   arriving faster than it can be consumed, esp. in serial line
 13592	   communications.  For example, at 9600 baud there is almost exactly
 13593	   one character per millisecond, so if your {silo} can hold only
 13594	   two characters and the machine takes longer than 2 msec to get to
 13595	   service the interrupt, at least one character will be lost.
 13596	   2. Also applied to non-serial-I/O communications. "I forgot to pay
 13597	   my electric bill due to mail overrun."  "Sorry, I got four phone
 13598	   calls in 3 minutes last night and lost your message to overrun."
 13599	   When {thrash}ing at tasks, the next person to make a request
 13600	   might be told "Overrun!"  Compare {firehose syndrome}. 3. More
 13601	   loosely, may refer to a {buffer overflow} not necessarily
 13602	   related to processing time (as in {overrun screw}).
 13603	
 13604	:overrun screw: [C programming] n. A variety of {fandango on
 13605	   core} produced by scribbling past the end of an array (C
 13606	   implementations typically have no checks for this error).  This is
 13607	   relatively benign and easy to spot if the array is static; if it is
 13608	   auto, the result may be to {smash the stack} --- often resulting
 13609	   in {heisenbug}s of the most diabolical subtlety.  The term
 13610	   `overrun screw' is used esp. of scribbles beyond the end of
 13611	   arrays allocated with `malloc(3)'; this typically trashes the
 13612	   allocation header for the next block in the {arena}, producing
 13613	   massive lossage within malloc and often a core dump on the next
 13614	   operation to use `stdio(3)' or `malloc(3)' itself.  See
 13615	   {spam}, {overrun}; see also {memory leak}, {memory
 13616	   smash}, {aliasing bug}, {precedence lossage}, {fandango on
 13617	   core}, {secondary damage}.
 13618	
 13619	= P =
 13620	=====
 13621	
 13622	:P.O.D.: /P-O-D/ Acronym for `Piece Of Data' (as opposed to a
 13623	   code section). Usage: pedantic and rare.  See also {pod}.
 13624	
 13625	:padded cell: n. Where you put {luser}s so they can't hurt
 13626	   anything.  A program that limits a luser to a carefully restricted
 13627	   subset of the capabilities of the host system (for example, the
 13628	   `rsh(1)' utility on USG UNIX).  Note that this is different
 13629	   from an {iron box} because it is overt and not aimed at
 13630	   enforcing security so much as protecting others (and the luser)
 13631	   from the consequences of the luser's boundless na"ivet'e (see
 13632	   {na"ive}).  Also `padded cell environment'.
 13633	
 13634	:page in: [MIT] vi. 1. To become aware of one's surroundings again
 13635	   after having paged out (see {page out}).  Usually confined to
 13636	   the sarcastic comment: "Eric pages in.  Film at 11."  See
 13637	   {film at 11}.  2. Syn. `swap in'; see {swap}.
 13638	
 13639	:page out: [MIT] vi. 1. To become unaware of one's surroundings
 13640	   temporarily, due to daydreaming or preoccupation.  "Can you repeat
 13641	   that?  I paged out for a minute."  See {page in}.  Compare
 13642	   {glitch}, {thinko}.  2. Syn. `swap out'; see {swap}.
 13643	
 13644	:pain in the net: n. A {flamer}.
 13645	
 13646	:paper-net: n. Hackish way of referring to the postal service,
 13647	   analogizing it to a very slow, low-reliability network.  USENET
 13648	   {sig block}s not uncommonly include a "Paper-Net:" header just
 13649	   before the sender's postal address; common variants of this are
 13650	   "Papernet" and "P-Net".  Compare {voice-net}, {snail-mail}.
 13651	
 13652	:param: /p*-ram'/ n. Shorthand for `parameter'.  See also
 13653	   {parm}; compare {arg}, {var}.
 13654	
 13655	:PARC: n. See {XEROX PARC}.
 13656	
 13657	:parent message: n. See {followup}.
 13658	
 13659	:parity errors: pl.n. Little lapses of attention or (in more severe
 13660	   cases) consciousness, usually brought on by having spent all night
 13661	   and most of the next day hacking.  "I need to go home and crash;
 13662	   I'm starting to get a lot of parity errors."  Derives from a
 13663	   relatively common but nearly always correctable transient error in
 13664	   RAM hardware.
 13665	
 13666	:Parkinson's Law of Data: prov. "Data expands to fill the space
 13667	   available for storage"; buying more memory encourages the use of
 13668	   more memory-intensive techniques.  It has been observed over the
 13669	   last 10 years that the memory usage of evolving systems tends to
 13670	   double roughly once every 18 months.  Fortunately, memory density
 13671	   available for constant dollars tends to double about once every
 13672	   12 months (see {Moore's Law}); unfortunately, the laws of
 13673	   physics guarantee that the latter cannot continue indefinitely.
 13674	
 13675	:parm: /parm/ n. Further-compressed form of {param}.  This term
 13676	   is an IBMism, and written use is almost unknown outside IBM
 13677	   shops; spoken /parm/ is more widely distributed, but the synonym
 13678	   {arg} is favored among hackers.  Compare {arg}, {var}.
 13679	
 13680	:parse: [from linguistic terminology] vt. 1. To determine the
 13681	   syntactic structure of a sentence or other utterance (close to the
 13682	   standard English meaning).  "That was the one I saw you."  "I
 13683	   can't parse that."  2. More generally, to understand or
 13684	   comprehend.  "It's very simple; you just kretch the glims and then
 13685	   aos the zotz."  "I can't parse that."  3. Of fish, to have to
 13686	   remove the bones yourself.  "I object to parsing fish", means "I
 13687	   don't want to get a whole fish, but a sliced one is okay".  A
 13688	   `parsed fish' has been deboned.  There is some controversy over
 13689	   whether `unparsed' should mean `bony', or also mean
 13690	   `deboned'.
 13691	
 13692	:Pascal:: n. An Algol-descended language designed by Niklaus Wirth
 13693	   on the CDC 6600 around 1967--68 as an instructional tool for
 13694	   elementary programming.  This language, designed primarily to keep
 13695	   students from shooting themselves in the foot and thus extremely
 13696	   restrictive from a general-purpose-programming point of view, was
 13697	   later promoted as a general-purpose tool and, in fact, became the
 13698	   ancestor of a large family of languages including Modula-2 and
 13699	   {{Ada}} (see also {bondage-and-discipline language}).  The
 13700	   hackish point of view on Pascal was probably best summed up by a
 13701	   devastating (and, in its deadpan way, screamingly funny) 1981 paper
 13702	   by Brian Kernighan (of {K&R} fame) entitled "Why Pascal is
 13703	   Not My Favorite Programming Language", which was turned down by the
 13704	   technical journals but circulated widely via photocopies.  It was
 13705	   eventually published in "Comparing and Assessing Programming
 13706	   Languages", edited by Alan Feuer and Narain Gehani (Prentice-Hall,
 13707	   1984).  Part of his discussion is worth repeating here, because its
 13708	   criticisms are still apposite to Pascal itself after ten years of
 13709	   improvement and could also stand as an indictment of many other
 13710	   bondage-and-discipline languages.  At the end of a summary of the
 13711	   case against Pascal, Kernighan wrote:
 13712	
 13713	     9. There is no escape
 13714	
 13715	     This last point is perhaps the most important.  The language is
 13716	     inadequate but circumscribed, because there is no way to escape its
 13717	     limitations.  There are no casts to disable the type-checking when
 13718	     necessary.  There is no way to replace the defective run-time
 13719	     environment with a sensible one, unless one controls the compiler
 13720	     that defines the "standard procedures".  The language is closed.
 13721	
 13722	     People who use Pascal for serious programming fall into a fatal
 13723	     trap.  Because the language is impotent, it must be extended.  But
 13724	     each group extends Pascal in its own direction, to make it look
 13725	     like whatever language they really want.  Extensions for separate
 13726	     compilation, FORTRAN-like COMMON, string data types, internal
 13727	     static variables, initialization, octal numbers, bit operators,
 13728	     etc., all add to the utility of the language for one group but
 13729	     destroy its portability to others.
 13730	
 13731	     I feel that it is a mistake to use Pascal for anything much beyond
 13732	     its original target.  In its pure form, Pascal is a toy language,
 13733	     suitable for teaching but not for real programming.
 13734	
 13735	   Pascal has since been almost entirely displaced (by {C}) from the
 13736	   niches it had acquired in serious applications and systems
 13737	   programming, but retains some popularity as a hobbyist language in
 13738	   the MS-DOS and Macintosh worlds.
 13739	
 13740	:pastie: /pay'stee/ n. An adhesive-backed label designed to be
 13741	   attached to a key on a keyboard to indicate some non-standard
 13742	   character which can be accessed through that key.  Pasties are
 13743	   likely to be used in APL environments, where almost every key is
 13744	   associated with a special character.  A pastie on the R key, for
 13745	   example, would remind the user that it is used to generate the rho
 13746	   character.  The term properly refers to nipple-concealing devices
 13747	   formerly worn by strippers in concession to indecent-exposure
 13748	   laws; compare {tits on a keyboard}.
 13749	
 13750	:patch: 1. n. A temporary addition to a piece of code, usually as a
 13751	   {quick-and-dirty} remedy to an existing bug or misfeature.  A
 13752	   patch may or may not work, and may or may not eventually be
 13753	   incorporated permanently into the program.  Distinguished from a
 13754	   {diff} or {mod} by the fact that a patch is generated by more
 13755	   primitive means than the rest of the program; the classical
 13756	   examples are instructions modified by using the front panel
 13757	   switches, and changes made directly to the binary executable of a
 13758	   program originally written in an {HLL}.  Compare {one-line
 13759	   fix}.  2. vt. To insert a patch into a piece of code.  3. [in the
 13760	   UNIX world] n. A {diff} (sense 2).  4. A set of modifications to
 13761	   binaries to be applied by a patching program.  IBM operating
 13762	   systems often receive updates to the operating system in the form
 13763	   of absolute hexadecimal patches.  If you have modified your OS, you
 13764	   have to disassemble these back to the source.  The patches might
 13765	   later be corrected by other patches on top of them (patches were
 13766	   said to "grow scar tissue").  The result was often a convoluted
 13767	   {patch space} and headaches galore.  5. [UNIX] the
 13768	   `patch(1)' program, written by Larry Wall, which automatically
 13769	   applies a patch (sense 3) to a set of source code.
 13770	
 13771	   There is a classic story of a {tiger team} penetrating a secure
 13772	   military computer that illustrates the danger inherent in binary
 13773	   patches (or, indeed, any that you can't --- or don't --- inspect
 13774	   and examine before installing).  They couldn't find any {trap
 13775	   door}s or any way to penetrate security of IBM's OS, so they made a
 13776	   site visit to an IBM office (remember, these were official military
 13777	   types who were purportedly on official business), swiped some IBM
 13778	   stationery, and created a fake patch.  The patch was actually the
 13779	   trapdoor they needed.  The patch was distributed at about the right
 13780	   time for an IBM patch, had official stationery and all accompanying
 13781	   documentation, and was dutifully installed.  The installation
 13782	   manager very shortly thereafter learned something about proper
 13783	   procedures.
 13784	
 13785	:patch space: n. An unused block of bits left in a binary so that
 13786	   it can later be modified by insertion of machine-language
 13787	   instructions there (typically, the patch space is modified to
 13788	   contain new code, and the superseded code is patched to contain a
 13789	   jump or call to the patch space).  The widening use of HLLs has
 13790	   made this term rare; it is now primarily historical outside IBM
 13791	   shops.  See {patch} (sense 4), {zap} (sense 4), {hook}.
 13792	
 13793	:path: n. 1. A {bang path} or explicitly routed {{Internet
 13794	   address}}; a node-by-node specification of a link between two
 13795	   machines.  2. [UNIX] A filename, fully specified relative to the
 13796	   root directory (as opposed to relative to the current directory;
 13797	   the latter is sometimes called a `relative path'). This is also
 13798	   called a `pathname'.  3. [UNIX and MS-DOS] The `search
 13799	   path', an environment variable specifying the directories in which
 13800	   the {shell} (COMMAND.COM, under MS-DOS) should look for commands.
 13801	   Other, similar constructs abound under UNIX (for example, the
 13802	   C preprocessor has a `search path' it uses in looking for
 13803	   `#include' files).
 13804	
 13805	:pathological: adj. 1. [scientific computation] Used of a data set
 13806	   that is grossly atypical of normal expected input, esp. one that
 13807	   exposes a weakness or bug in whatever algorithm one is using.  An
 13808	   algorithm that can be broken by pathological inputs may still be
 13809	   useful if such inputs are very unlikely to occur in practice.
 13810	   2. When used of test input, implies that it was purposefully
 13811	   engineered as a worst case.  The implication in both senses is that
 13812	   the data is spectacularly ill-conditioned or that someone had to
 13813	   explicitly set out to break the algorithm in order to come up with
 13814	   such a crazy example.  3. Also said of an unlikely collection of
 13815	   circumstances.  "If the network is down and comes up halfway
 13816	   through the execution of that command by root, the system may
 13817	   just crash."  "Yes, but that's a pathological case."  Often used
 13818	   to dismiss the case from discussion, with the implication that the
 13819	   consequences are acceptable since that they will happen so
 13820	   infrequently (if at all) that there is no justification for
 13821	   going to extra trouble to handle that case (see sense 1).
 13822	
 13823	:payware: /pay'weir/ n. Commercial software.  Oppose {shareware}
 13824	   or {freeware}.
 13825	
 13826	:PBD: /P-B-D/ [abbrev. of `Programmer Brain Damage'] n.  Applied
 13827	   to bug reports revealing places where the program was obviously
 13828	   broken by an incompetent or short-sighted programmer.  Compare
 13829	   {UBD}; see also {brain-damaged}.
 13830	
 13831	:PC-ism: /P-C-izm/ n. A piece of code or coding technique that
 13832	   takes advantage of the unprotected single-tasking environment in
 13833	   IBM PCs and the like, e.g., by busy-waiting on a hardware register,
 13834	   direct diddling of screen memory, or using hard timing loops.
 13835	   Compare {ill-behaved}, {vaxism}, {unixism}.  Also,
 13836	   `PC-ware' n., a program full of PC-isms on a machine with a more
 13837	   capable operating system.  Pejorative.
 13838	
 13839	:PD: /P-D/ adj. Common abbreviation for `public domain', applied
 13840	   to software distributed over {USENET} and from Internet archive
 13841	   sites.  Much of this software is not in fact public domain in
 13842	   the legal sense but travels under various copyrights granting
 13843	   reproduction and use rights to anyone who can {snarf} a copy.  See
 13844	   {copyleft}.
 13845	
 13846	:pdl: /pid'l/ or /puhd'l/ [abbreviation for `Push Down List']
 13847	   1. n. In ITS days, the preferred MITism for {stack}.  See
 13848	   {overflow pdl}.  2. n. Dave Lebling, one of the co-authors of
 13849	   {Zork}; (his {network address} on the ITS machines was at one
 13850	   time pdl@dms).  3. n. `Program Design Language'.  Any of a large
 13851	   class of formal and profoundly useless pseudo-languages in which
 13852	   {management} forces one to design programs.  {Management}
 13853	   often expects it to be maintained in parallel with the code.  See
 13854	   also {{flowchart}}.  4. v. To design using a program design
 13855	   language.  "I've been pdling so long my eyes won't focus beyond 2
 13856	   feet." 5. n. `Page Description Language'.  Refers to any language
 13857	   which is used to control a graphics device, usually a laserprinter.
 13858	   The most common example, is of course, Adobe's {PostScript}
 13859	   language, but there are many others, such as Xerox InterPress,
 13860	   etc.
 13861	
 13862	:PDP-10: [Programmed Data Processor model 10] n. The machine that
 13863	   made timesharing real.  It looms large in hacker folklore because
 13864	   of its adoption in the mid-1970s by many university computing
 13865	   facilities and research labs, including the MIT AI Lab, Stanford,
 13866	   and CMU.  Some aspects of the instruction set (most notably the
 13867	   bit-field instructions) are still considered unsurpassed.  The 10
 13868	   was eventually eclipsed by the VAX machines (descendants of the
 13869	   PDP-11) when DEC recognized that the 10 and VAX product lines were
 13870	   competing with each other and decided to concentrate its software
 13871	   development effort on the more profitable VAX.  The machine was
 13872	   finally dropped from DEC's line in 1983, following the failure of
 13873	   the Jupiter Project at DEC to build a viable new model. (Some
 13874	   attempts by other companies to market clones came to nothing; see
 13875	   {Foonly}) This event spelled the doom of {{ITS}} and the
 13876	   technical cultures that had spawned the original Jargon File, but
 13877	   by mid-1991 it had become something of a badge of honorable
 13878	   old-timerhood among hackers to have cut one's teeth on a PDP-10.
 13879	   See {{TOPS-10}}, {{ITS}}, {AOS}, {BLT}, {DDT}, {DPB},
 13880	   {EXCH}, {HAKMEM}, {JFCL}, {LDB}, {pop}, {push},
 13881	   {appendix A}.
 13882	
 13883	:PDP-20: n. The most famous computer that never was.  {PDP-10}
 13884	   computers running the {{TOPS-10}} operating system were labeled
 13885	   `DECsystem-10' as a way of differentiating them from the PDP-11.
 13886	   Later on, those systems running {TOPS-20} were labeled
 13887	   `DECSYSTEM-20' (the block capitals being the result of a lawsuit
 13888	   brought against DEC by Singer, which once made a computer called
 13889	   `system-10'), but contrary to popular lore there was never a
 13890	   `PDP-20'; the only difference between a 10 and a 20 was the
 13891	   operating system and the color of the paint.  Most (but not all)
 13892	   machines sold to run TOPS-10 were painted `Basil Blue', whereas
 13893	   most TOPS-20 machines were painted `Chinese Red' (often mistakenly
 13894	   called orange).
 13895	
 13896	:peek: n.,vt. (and {poke}) The commands in most microcomputer
 13897	   BASICs for directly accessing memory contents at an absolute
 13898	   address; often extended to mean the corresponding constructs in any
 13899	   {HLL} (peek reads memory, poke modifies it).  Much hacking on
 13900	   small, non-MMU micros consists of `peek'ing around memory, more
 13901	   or less at random, to find the location where the system keeps
 13902	   interesting stuff.  Long (and variably accurate) lists of such
 13903	   addresses for various computers circulate (see {{interrupt list,
 13904	   the}}).  The results of `poke's at these addresses may be highly
 13905	   useful, mildly amusing, useless but neat, or (most likely) total
 13906	   {lossage} (see {killer poke}).
 13907	
 13908	   Since a {real operating system} provides useful, higher-level
 13909	   services for the tasks commonly performed with peeks and pokes on
 13910	   micros, and real languages tend not to encourage low-level memory
 13911	   groveling, a question like "How do I do a peek in C?" is
 13912	   diagnostic of the {newbie}.  (Of course, OS kernels often have to
 13913	   do exactly this; a real C hacker would unhesitatingly, if
 13914	   unportably, assign an absolute address to a pointer variable and
 13915	   indirect through it.)
 13916	
 13917	:pencil and paper: n. An archaic information storage and
 13918	   transmission device that works by depositing smears of graphite on
 13919	   bleached wood pulp.  More recent developments in paper-based
 13920	   technology include improved `write-once' update devices which use
 13921	   tiny rolling heads similar to mouse balls to deposit colored
 13922	   pigment.  All these devices require an operator skilled at
 13923	   so-called `handwriting' technique.  These technologies are
 13924	   ubiquitous outside hackerdom, but nearly forgotten inside it.  Most
 13925	   hackers had terrible handwriting to begin with, and years of
 13926	   keyboarding tend to have encouraged it to degrade further.  Perhaps
 13927	   for this reason, hackers deprecate pencil-and-paper technology and
 13928	   often resist using it in any but the most trivial contexts.  See
 13929	   also {appendix B}.
 13930	
 13931	:peon: n. A person with no special ({root} or {wheel})
 13932	   privileges on a computer system.  "I can't create an account on
 13933	   *foovax* for you; I'm only a peon there."
 13934	
 13935	:percent-S: /per-sent' es'/ [From the code in C's `printf(3)'
 13936	   library function used to insert an arbitrary string argument] n. An
 13937	   unspecified person or object.  "I was just talking to some
 13938	   percent-s in administration."  Compare {random}.
 13939	
 13940	:perf: /perf/ n. See {chad} (sense 1).  The term `perfory'
 13941	   /per'f*-ree/ is also heard. The term {perf} may also refer to
 13942	   the preforations themselves, rather than the chad they produce when
 13943	   torn.
 13944	
 13945	:perfect programmer syndrome: n. Arrogance; the egotistical
 13946	   conviction that one is above normal human error.  Most frequently
 13947	   found among programmers of some native ability but relatively
 13948	   little experience (especially new graduates; their perceptions may
 13949	   be distorted by a history of excellent performance at solving {toy
 13950	   problem}s).  "Of course my program is correct, there is no need to
 13951	   test it."  "Yes, I can see there may be a problem here, but
 13952	   *I'll* never type `rm -r /' while in {root}."
 13953	
 13954	:Perl: /perl/ [Practical Extraction and Report Language, a.k.a
 13955	   Pathologically Eclectic Rubbish Lister] n. An interpreted language
 13956	   developed by Larry Wall <lwall@jpl.nasa.gov>, author of
 13957	   `patch(1)' and `rn(1)') and distributed over USENET.
 13958	   Superficially resembles `awk(1)', but is much hairier (see
 13959	   {awk}).  UNIX sysadmins, who are almost always incorrigible
 13960	   hackers, increasingly consider it one of the {languages of
 13961	   choice}.  Perl has been described, in a parody of a famous remark
 13962	   about `lex(1)', as the "Swiss-Army chainsaw" of UNIX
 13963	   programming.
 13964	
 13965	:pessimal: /pes'im-l/ [Latin-based antonym for `optimal'] adj.
 13966	   Maximally bad.  "This is a pessimal situation."  Also `pessimize'
 13967	   vt. To make as bad as possible.  These words are the obvious
 13968	   Latin-based antonyms for `optimal' and `optimize', but for some
 13969	   reason they do not appear in most English dictionaries, although
 13970	   `pessimize' is listed in the OED.
 13971	
 13972	:pessimizing compiler: /pes'*-mi:z`ing k*m-pi:l'r/ [antonym of
 13973	   `optimizing compiler'] n. A compiler that produces object code that
 13974	   is worse than the straightforward or obvious hand translation.  The
 13975	   implication is that the compiler is actually trying to optimize the
 13976	   program, but through excessive cleverness is doing the opposite.  A
 13977	   few pessimizing compilers have been written on purpose, however, as
 13978	   pranks or burlesques.
 13979	
 13980	:peta-: /pe't*/ [SI] pref. See {{quantifiers}}.
 13981	
 13982	:PETSCII: /pet'skee/ [abbreviation of PET ASCII] n. The variation
 13983	   (many would say perversion) of the {{ASCII}} character set used by
 13984	   the Commodore Business Machines PET series of personal computers
 13985	   and the later Commodore C64, C16, and C128 machines.  The PETSCII
 13986	   set used left-arrow and up-arrow (as in old-style ASCII) instead of
 13987	   underscore and caret, placed the unshifted alphabet at positions
 13988	   65--90, put the shifted alphabet at positions 193--218, and added
 13989	   graphics characters.
 13990	
 13991	:phase: 1. n. The phase of one's waking-sleeping schedule with
 13992	   respect to the standard 24-hour cycle.  This is a useful concept
 13993	   among people who often work at night and/or according to no fixed
 13994	   schedule.  It is not uncommon to change one's phase by as much as 6
 13995	   hours per day on a regular basis.  "What's your phase?"  "I've
 13996	   been getting in about 8 P.M. lately, but I'm going to {wrap
 13997	   around} to the day schedule by Friday."  A person who is roughly
 13998	   12 hours out of phase is sometimes said to be in `night mode'.
 13999	   (The term `day mode' is also (but less frequently) used, meaning
 14000	   you're working 9 to 5 (or, more likely, 10 to 6).)  The act of
 14001	   altering one's cycle is called `changing phase'; `phase
 14002	   shifting' has also been recently reported from Caltech.
 14003	   2. `change phase the hard way': To stay awake for a very long
 14004	   time in order to get into a different phase.  3. `change phase
 14005	   the easy way': To stay asleep, etc.  However, some claim that
 14006	   either staying awake longer or sleeping longer is easy, and that it
 14007	   is *shortening* your day or night that's hard (see {wrap
 14008	   around}).  The `jet lag' that afflicts travelers who cross many
 14009	   time-zone boundaries may be attributed to two distinct causes: the
 14010	   strain of travel per se, and the strain of changing phase.  Hackers
 14011	   who suddenly find that they must change phase drastically in a
 14012	   short period of time, particularly the hard way, experience
 14013	   something very like jet lag without traveling.
 14014	
 14015	:phase of the moon: n. Used humorously as a random parameter on which
 14016	   something is said to depend.  Sometimes implies unreliability of
 14017	   whatever is dependent, or that reliability seems to be dependent on
 14018	   conditions nobody has been able to determine.  "This feature
 14019	   depends on having the channel open in mumble mode, having the foo
 14020	   switch set, and on the phase of the moon."
 14021	
 14022	   True story: Once upon a time there was a bug that really did depend
 14023	   on the phase of the moon.  There is a little subroutine that had
 14024	   traditionally been used in various programs at MIT to calculate an
 14025	   approximation to the moon's true phase.  GLS incorporated this
 14026	   routine into a LISP program that, when it wrote out a file, would
 14027	   print a timestamp line almost 80 characters long.  Very
 14028	   occasionally the first line of the message would be too long and
 14029	   would overflow onto the next line, and when the file was later read
 14030	   back in the program would {barf}.  The length of the first line
 14031	   depended on both the precise date and time and the length of the
 14032	   phase specification when the timestamp was printed, and so the bug
 14033	   literally depended on the phase of the moon!
 14034	
 14035	   The first paper edition of the Jargon File (Steele-1983) included
 14036	   an example of one of the timestamp lines that exhibited this bug,
 14037	   but the typesetter `corrected' it.  This has since been
 14038	   described as the phase-of-the-moon-bug bug.
 14039	
 14040	:phase-wrapping: [MIT] n. Syn. {wrap around}, sense 2.
 14041	
 14042	:phreaking: /freek'ing/ [from `phone phreak'] n. 1. The art and
 14043	   science of cracking the phone network (so as, for example, to make
 14044	   free long-distance calls).  2. By extension, security-cracking in
 14045	   any other context (especially, but not exclusively, on
 14046	   communications networks) (see {cracking}).
 14047	
 14048	   At one time phreaking was a semi-respectable activity among
 14049	   hackers; there was a gentleman's agreement that phreaking as an
 14050	   intellectual game and a form of exploration was OK, but serious
 14051	   theft of services was taboo.  There was significant crossover
 14052	   between the hacker community and the hard-core phone phreaks who
 14053	   ran semi-underground networks of their own through such media as
 14054	   the legendary `TAP Newsletter'.  This ethos began to break
 14055	   down in the mid-1980s as wider dissemination of the techniques put
 14056	   them in the hands of less responsible phreaks.  Around the same
 14057	   time, changes in the phone network made old-style technical
 14058	   ingenuity less effective as a way of hacking it, so phreaking came
 14059	   to depend more on overtly criminal acts such as stealing phone-card
 14060	   numbers.  The crimes and punishments of gangs like the `414 group'
 14061	   turned that game very ugly.  A few old-time hackers still phreak
 14062	   casually just to keep their hand in, but most these days have
 14063	   hardly even heard of `blue boxes' or any of the other
 14064	   paraphernalia of the great phreaks of yore.
 14065	
 14066	:pico-: [SI: a quantifier
 14067	   meaning * 10^-12]
 14068	   pref. Smaller than {nano-}; used in the same rather loose
 14069	   connotative way as {nano-} and {micro-}.  This usage is not yet
 14070	   common in the way {nano-} and {micro-} are, but should be
 14071	   instantly recognizable to any hacker.  See also {{quantifiers}},
 14072	   {micro-}.
 14073	
 14074	:pig, run like a: v. To run very slowly on given hardware, said of
 14075	   software.  Distinct from {hog}.
 14076	
 14077	:pilot error: [Sun: from aviation] n. A user's misconfiguration or
 14078	   misuse of a piece of software, producing apparently buglike results
 14079	   (compare {UBD}).  "Joe Luser reported a bug in sendmail that
 14080	   causes it to generate bogus headers."  "That's not a bug, that's
 14081	   pilot error.  His `sendmail.cf' is hosed."
 14082	
 14083	:ping: [from the TCP/IP acronym `Packet INternet Groper', prob.
 14084	   originally contrived to match the submariners' term for a sonar
 14085	   pulse] 1. n.  Slang term for a small network message (ICMP ECHO)
 14086	   sent by a computer to check for the presence and aliveness of
 14087	   another.  Occasionally used as a phone greeting.  See {ACK},
 14088	   also {ENQ}.  2. vt. To verify the presence of.  3. vt. To get
 14089	   the attention of.  From the UNIX command `ping(1)' that sends
 14090	   an ICMP ECHO packet to another host.  4. vt. To send a message to
 14091	   all members of a {mailing list} requesting an {ACK} (in order
 14092	   to verify that everybody's addresses are reachable).  "We haven't
 14093	   heard much of anything from Geoff, but he did respond with an ACK
 14094	   both times I pinged jargon-friends."  5. n. A quantum packet of
 14095	   happiness.  People who are very happy tend to exude pings;
 14096	   furthermore, one can intentionally create pings and aim them at a
 14097	   needy party (e.g. a depressed person).  This sense of ping may
 14098	   appear as an exclamation; "Ping!" (I'm happy; I am emitting a
 14099	   quantum of happiness; I have been struck by a quantum of
 14100	   happiness).  The form "pingfulness", which is used to describe
 14101	   people who exude pings, also occurs.  (In the standard abuse of
 14102	   language, "pingfulness" can also be used as an exclamation, in
 14103	   which case it's a much stronger exclamation than just "ping"!).
 14104	   Oppose {blargh}.
 14105	
 14106	   The funniest use of `ping' to date was described in January 1991 by
 14107	   Steve Hayman on the USENET group comp.sys.next.  He was trying
 14108	   to isolate a faulty cable segment on a TCP/IP Ethernet hooked up to
 14109	   a NeXT machine, and got tired of having to run back to his console
 14110	   after each cabling tweak to see if the ping packets were getting
 14111	   through.  So he used the sound-recording feature on the NeXT, then
 14112	   wrote a script that repeatedly invoked `ping(8)', listened for
 14113	   an echo, and played back the recording on each returned packet.
 14114	   Result?  A program that caused the machine to repeat, over and
 14115	   over, "Ping ... ping ... ping ..." as long as the
 14116	   network was up.  He turned the volume to maximum, ferreted through
 14117	   the building with one ear cocked, and found a faulty tee connector
 14118	   in no time.
 14119	
 14120	:Pink-Shirt Book: `The Peter Norton Programmer's Guide to the IBM
 14121	   PC'.  The original cover featured a picture of Peter Norton with a
 14122	   silly smirk on his face, wearing a pink shirt.  Perhaps in
 14123	   recognition of this usage, the current edition has a different
 14124	   picture of Norton wearing a pink shirt.  See also {{book titles}}.
 14125	
 14126	:PIP: /pip/ [Peripheral Interchange Program] vt.,obs. To copy;
 14127	   from the program PIP on CP/M, RSX-11, RSTS/E, TOPS-10, and OS/8
 14128	   (derived from a utility on the PDP-6) that was used for file
 14129	   copying (and in OS/8 and RT-11 for just about every other file
 14130	   operation you might want to do).  It is said that when the program
 14131	   was originated, during the development of the PDP-6 in 1963, it was
 14132	   called ATLATL (`Anything, Lord, to Anything, Lord'; this played on
 14133	   the Nahuatl word `atlatl' for a spear-thrower, with connotations
 14134	   of utility and primitivity that were no doubt quite intentional).
 14135	
 14136	:pistol: [IBM] n. A tool that makes it all too easy for you to
 14137	   shoot yourself in the foot.  "UNIX `rm *' makes such a nice
 14138	   pistol!"
 14139	
 14140	:pizza box: [Sun] n. The largish thin box housing the electronics
 14141	   in (especially Sun) desktop workstations, so named because of its
 14142	   size and shape and the dimpled pattern that looks like air holes.
 14143	
 14144	   Two meg single-platter removable disk packs used to be called
 14145	   pizzas, and the huge drive they were stuck into was referred to as
 14146	   a pizza oven.  It's an index of progress that in the old days just
 14147	   the disk was pizza-sized, while now the entire computer is.
 14148	
 14149	:pizza, ANSI standard: /an'see stan'd*rd peet'z*/ [CMU] Pepperoni
 14150	   and mushroom pizza.  Coined allegedly because most pizzas ordered
 14151	   by CMU hackers during some period leading up to mid-1990 were of
 14152	   that flavor.  See also {rotary debugger}; compare {tea, ISO
 14153	   standard cup of}.
 14154	
 14155	:plaid screen: [XEROX PARC] n. A `special effect' which occurs
 14156	   when certain kinds of {memory smash}es overwrite the control
 14157	   blocks or image memory of a bit-mapped display.  The term "salt &
 14158	   pepper" may refer to a different pattern of similar origin.
 14159	   Though the term as coined at PARC refers to the result of an error,
 14160	   some of the {X} demos induce plaid-screen effects deliberately
 14161	   as a {display hack}.
 14162	
 14163	:plain-ASCII: /playn-as'kee/ Syn. {flat-ASCII}.
 14164	
 14165	:plan file: [UNIX] n. On systems that support {finger}, the
 14166	   `.plan' file in a user's home directory is displayed when the user
 14167	   is fingered.  This feature was originally intended to be used to
 14168	   keep potential fingerers apprised of one's location and near-future
 14169	   plans, but has been turned almost universally to humorous and
 14170	   self-expressive purposes (like a {sig block}).  See {Hacking X
 14171	   for Y}.
 14172	
 14173	:platinum-iridium: adj. Standard, against which all others of the
 14174	   same category are measured.  Usage: silly.  The notion is that one
 14175	   of whatever it is has actually been cast in platinum-iridium alloy
 14176	   and placed in the vault beside the Standard Kilogram at the
 14177	   International Bureau of Weights and Measures near Paris.  (From
 14178	   1889 to 1960, the meter was defined to be the distance between two
 14179	   scratches in a platinum-iridium bar kept in that vault --- this
 14180	   replaced an earlier definition as 10^(-7) times the distance
 14181	   between the North Pole and the Equator along a meridian through
 14182	   Paris; unfortunately, this had been based on an inexact value of
 14183	   the circumference of the Earth.  From 1960 to 1984 it was defined
 14184	   to be 1650763.73 wavelengths of the orange-red line of krypton-86
 14185	   propagating in a vacuum.  It is now defined as the length of the
 14186	   path traveled by light in a vacuum in the time interval of
 14187	   1/299,792,458 of a second.  The kilogram is now the only unit of
 14188	   measure officially defined in terms of a unique artifact.)  "This
 14189	   garbage-collection algorithm has been tested against the
 14190	   platinum-iridium cons cell in Paris."  Compare {golden}.
 14191	
 14192	:playpen: [IBM] n. A room where programmers work.  Compare {salt
 14193	   mines}.
 14194	
 14195	:playte: /playt/ 16 bits, by analogy with {nybble} and
 14196	   {{byte}}.  Usage: rare and extremely silly.  See also {dynner}
 14197	   and {crumb}.
 14198	
 14199	:plingnet: /pling'net/ n. Syn. {UUCPNET}.  Also see
 14200	   {{Commonwealth Hackish}}, which uses `pling' for {bang} (as in
 14201	   {bang path}).
 14202	
 14203	:plokta: /plok't*/ [Acronym for `Press Lots Of Keys To Abort']
 14204	   v.  To press random keys in an attempt to get some response from
 14205	   the system.  One might plokta when the abort procedure for a
 14206	   program is not known, or when trying to figure out if the system is
 14207	   just sluggish or really hung.  Plokta can also be used while trying
 14208	   to figure out any unknown key sequence for a particular operation.
 14209	   Someone going into `plokta mode' usually places both hands flat
 14210	   on the keyboard and presses down, hoping for some useful
 14211	   response.
 14212	
 14213	   A slightly more diected form of plokta can often be seen in mail
 14214	   messages or USENET articles from new users -- the text might end
 14215	   with
 14216	
 14217	             q  
 14218	             quit       
 14219	             :q 
 14220	        ^C      
 14221	             end        
 14222	             x  
 14223	             exit       
 14224	             ZZ 
 14225	             ^D 
 14226	             ?  
 14227	             help
 14228	
 14229	   as the user vainly tries to find the right exit sequence, with the
 14230	   incorrect tries piling up at the end of the message....
 14231	
 14232	:plonk: [USENET: possibly influenced by British slang `plonk' for
 14233	   cheap booze] The sound a {newbie} makes as he falls to the bottom
 14234	   of a {kill file}.  Used almost exclusively in the {newsgroup}
 14235	   talk.bizarre, this term (usually written "*plonk*") is a
 14236	   form of public ridicule.
 14237	
 14238	:plugh: /ploogh/ [from the {ADVENT} game] v. See {xyzzy}.
 14239	
 14240	:plumbing: [UNIX] n. Term used for {shell} code, so called
 14241	   because of the prevalence of `pipelines' that feed the output of
 14242	   one program to the input of another.  Under UNIX, user utilities
 14243	   can often be implemented or at least prototyped by a suitable
 14244	   collection of pipelines and temp-file grinding encapsulated in a
 14245	   shell script; this is much less effort than writing C every time,
 14246	   and the capability is considered one of UNIX's major winning
 14247	   features.  A few other OSs such as IBM's VM/CMS support similar
 14248	   facilities.  Esp. used in the construction `hairy plumbing'
 14249	   (see {hairy}).  "You can kluge together a basic spell-checker
 14250	   out of `sort(1)', `comm(1)', and `tr(1)' with a
 14251	   little plumbing."  See also {tee}.
 14252	
 14253	:PM: /P-M/ 1. v. (from `preventive maintenance') To bring
 14254	   down a machine for inspection or test purposes; see {scratch
 14255	   monkey}.  2. n. Abbrev. for `Presentation Manager', an
 14256	   {elephantine} OS/2 graphical user interface.  See also
 14257	   {provocative maintenance}.
 14258	
 14259	:pnambic: /p*-nam'bik/ [Acronym from the scene in the film
 14260	   version of `The Wizard of Oz' in which the true nature of the
 14261	   wizard is first discovered: "Pay no attention to the man behind
 14262	   the curtain."]  1. A stage of development of a process or function
 14263	   that, owing to incomplete implementation or to the complexity of
 14264	   the system, requires human interaction to simulate or replace some
 14265	   or all of the actions, inputs, or outputs of the process or
 14266	   function.  2. Of or pertaining to a process or function whose
 14267	   apparent operations are wholly or partially falsified.
 14268	   3. Requiring {prestidigitization}.
 14269	
 14270	   The ultimate pnambic product was "Dan Bricklin's Demo", a program
 14271	   which supported flashy user-interface design prototyping.  There is
 14272	   a related maxim among hackers: "Any sufficiently advanced
 14273	   technology is indistinguishable from a rigged demo."  See
 14274	   {magic}, sense 1, for illumination of this point.
 14275	
 14276	:pod: [allegedly from abbreviation POD for `Prince Of Darkness'] n. A
 14277	   Diablo 630 (or, latterly, any letter-quality impact printer).  From
 14278	   the DEC-10 PODTYPE program used to feed formatted text to it.
 14279	   See also {P.O.D.}
 14280	
 14281	:point-and-drool interface: n. Parody of the techspeak term
 14282	   `point-and-shoot interface', describing a windows, icons, and
 14283	   mice-based interface such as is found on the Macintosh.  The
 14284	   implication, of course, is that such an interface is only suitable
 14285	   for idiots.  See {for the rest of us}, {WIMP environment},
 14286	   {Macintrash}, {drool-proof paper}.  Also `point-and-grunt
 14287	   interface'.
 14288	
 14289	:poke: n.,vt. See {peek}.
 14290	
 14291	:poll: v.,n. 1. [techspeak] The action of checking the status of an
 14292	   input line, sensor, or memory location to see if a particular
 14293	   external event has been registered.  2. To repeatedly call or check
 14294	   with someone: "I keep polling him, but he's not answering his
 14295	   phone; he must be swapped out."  3. To ask.  "Lunch?  I poll for
 14296	   a takeout order daily."
 14297	
 14298	:polygon pusher: n. A chip designer who spends most of his or her
 14299	   time at the physical layout level (which requires drawing
 14300	   *lots* of multi-colored polygons).  Also `rectangle
 14301	   slinger'.
 14302	
 14303	:POM: /P-O-M/ n. Common abbreviation for {phase of the moon}.  Usage:
 14304	   usually in the phrase `POM-dependent', which means {flaky}.
 14305	
 14306	:pop: [from the operation that removes the top of a stack, and the
 14307	   fact that procedure return addresses are saved on the stack] (also
 14308	   capitalized `POP' /pop/) 1. vt. To remove something from a
 14309	   {stack} or {pdl}.  If a person says he/she has popped
 14310	   something from his stack, that means he/she has finally finished
 14311	   working on it and can now remove it from the list of things hanging
 14312	   overhead.  2. When a discussion gets to too deep a level of detail
 14313	   so that the main point of the discussion is being lost, someone
 14314	   will shout "Pop!", meaning "Get back up to a higher level!"
 14315	   The shout is frequently accompanied by an upthrust arm with a
 14316	   finger pointing to the ceiling.
 14317	
 14318	:POPJ: /pop'J/ [from a {PDP-10} return-from-subroutine
 14319	   instruction] n.,v. To return from a digression.  By verb doubling,
 14320	   "Popj, popj" means roughly "Now let's see, where were we?"
 14321	   See {RTI}.
 14322	
 14323	:posing: n. On a {MUD}, the use of `:' or an equivalent
 14324	   command to announce to other players that one is taking a certain
 14325	   physical action that has no effect on the game (it may, however,
 14326	   serve as a social signal or propaganda device that induces other
 14327	   people to take game actions).  For example, if one's character name
 14328	   is Firechild, one might type `: looks delighted at the idea and
 14329	   begins hacking on the nearest terminal' to broadcast a message that
 14330	   says "Firechild looks delighted at the idea and begins hacking on
 14331	   the nearest terminal".  See {RL}.
 14332	
 14333	:post: v. To send a message to a {mailing list} or {newsgroup}.
 14334	   Distinguished in context from `mail'; one might ask, for
 14335	   example: "Are you going to post the patch or mail it to known
 14336	   users?"
 14337	
 14338	:postcardware: n.  {Shareware} that borders on {freeware}, in that the
 14339	   author requests only that satisfied users send a postcard of their
 14340	   home town or something.  (This practice, silly as it might seem,
 14341	   serves to remind users that they are otherwise getting something for
 14342	   nothing, and may also be psychologically related to real estate
 14343	   "sales" in which $1 changes hands just to keep the transaction from
 14344	   being a gift.)
 14345	
 14346	:posting: n. Noun corresp. to v. {post} (but note that
 14347	   {post} can be nouned).  Distinguished from a `letter' or ordinary
 14348	   {email} message by the fact that it is broadcast rather than
 14349	   point-to-point.  It is not clear whether messages sent to a small
 14350	   mailing list are postings or email; perhaps the best dividing line
 14351	   is that if you don't know the names of all the potential
 14352	   recipients, it is a posting.
 14353	
 14354	:postmaster: n. The email contact and maintenance person at a site
 14355	   connected to the Internet or UUCPNET.  Often, but not always, the
 14356	   same as the {admin}.  The Internet standard for electronic mail
 14357	   ({RFC}822) requires each machine to have a `postmaster' address;
 14358	   usually it is aliased to this person.
 14359	
 14360	:PostScript: n.  A groundbreaking Page Description Language
 14361	   ({PDL}), based on work originally done by John Gaffney at Evans
 14362	   and Sutherland in 1976, evolving through `JaM' (`John and Martin',
 14363	   Martin Newell) at {XEROX PARC}, and finally implemented in its
 14364	   current form by John Warnock et al. after he and Chuck Geschke
 14365	   founded Adobe Systems Incorporated in 1982.  PostScript gets its
 14366	   leverage by using a full programming language, rather than a series
 14367	   of low-level escape sequences, to describe an image to be printed
 14368	   on a laser printer or other output device (in this it parallels
 14369	   {EMACS}, which exploited a similar insight about editing tasks).
 14370	   It is also noteworthy for implementing on-the fly rasterization,
 14371	   from Bezier curve descriptions, of high-quality fonts at low (e.g.
 14372	   300 dpi) resolution (it was formerly believed that hand-tuned
 14373	   bitmap fonts were required for this task).  Hackers consider
 14374	   PostScript to be among the most elegant hacks of all time, and the
 14375	   combination of technical merits and widespread availability has
 14376	   made PostScript the language of choice for graphical output.
 14377	
 14378	:pound on: vt.  Syn. {bang on}.
 14379	
 14380	:power cycle: vt. (also, `cycle power' or just `cycle') To
 14381	   power off a machine and then power it on immediately, with the
 14382	   intention of clearing some kind of {hung} or {gronk}ed state.
 14383	   Syn. {120 reset}; see also {Big Red Switch}.  Compare
 14384	   {Vulcan nerve pinch}, {bounce}, and {boot}, and see the
 14385	   AI Koan in "{A Selection of AI Koans}" (in
 14386	   {appendix A}) about Tom Knight and the novice.
 14387	
 14388	:power hit: n.  A spike or drop-out in the electricity supplying
 14389	   your machine; a power {glitch}.  These can cause crashes and
 14390	   even permanent damage to your machine(s).
 14391	
 14392	:PPN: /P-P-N/, /pip'n/ [from `Project-Programmer Number'] n. A
 14393	   user-ID under {{TOPS-10}} and its various mutant progeny at SAIL,
 14394	   BBN, CompuServe, and elsewhere.  Old-time hackers from the PDP-10
 14395	   era sometimes use this to refer to user IDs on other systems as
 14396	   well.
 14397	
 14398	:precedence lossage: /pre's*-dens los'*j/ [C programmers] n.
 14399	   Coding error in an expression due to unexpected grouping of
 14400	   arithmetic or logical operators by the compiler.  Used esp. of
 14401	   certain common coding errors in C due to the nonintuitively low
 14402	   precedence levels of `&', `|', `^', `<<',
 14403	   and `>>' (for this reason, experienced C programmers
 14404	   deliberately forget the language's {baroque} precedence
 14405	   hierarchy and parenthesize defensively).  Can always be avoided by
 14406	   suitable use of parentheses.  {LISP} fans enjoy pointing out
 14407	   that this can't happen in *their* favorite language, which
 14408	   eschews precedence entirely, requiring one to use explicit
 14409	   parentheses everywhere.  See {aliasing bug}, {memory leak},
 14410	   {memory smash}, {smash the stack}, {fandango on core},
 14411	   {overrun screw}.
 14412	
 14413	:prepend: /pree`pend'/ [by analogy with `append'] vt. To
 14414	   prefix.  As with `append' (but not `prefix' or `suffix' as a
 14415	   verb), the direct object is always the thing being added and not
 14416	   the original word (or character string, or whatever).  "If you
 14417	   prepend a semicolon to the line, the translation routine will pass
 14418	   it through unaltered."
 14419	
 14420	:prestidigitization: /pres`t*-di`j*-ti:-zay'sh*n/ n. 1. The act
 14421	   of putting something into digital notation via sleight of hand.
 14422	   2. Data entry through legerdemain.
 14423	
 14424	:pretty pictures: n. [scientific computation] The next step up from
 14425	   {numbers}.  Interesting graphical output from a program that may
 14426	   not have any sensible relationship to the system the program is
 14427	   intended to model.  Good for showing to {management}.
 14428	
 14429	:prettyprint: /prit'ee-print/ (alt. `pretty-print') v. 1. To
 14430	   generate `pretty' human-readable output from a {hairy} internal
 14431	   representation; esp. used for the process of {grind}ing (sense 2)
 14432	   LISP code.  2. To format in some particularly slick and
 14433	   nontrivial way.
 14434	
 14435	:pretzel key: [Mac users] n. See {feature key}.
 14436	
 14437	:prime time: [from TV programming] n. Normal high-usage hours on a
 14438	   timesharing system; the day shift.  Avoidance of prime time is a
 14439	   major reason for {night mode} hacking.
 14440	
 14441	:printing discussion: [PARC] n. A protracted, low-level,
 14442	   time-consuming, generally pointless discussion of something only
 14443	   peripherally interesting to all.
 14444	
 14445	:priority interrupt: [from the hardware term] n. Describes any
 14446	   stimulus compelling enough to yank one right out of {hack mode}.
 14447	   Classically used to describe being dragged away by an {SO} for
 14448	   immediate sex, but may also refer to more mundane interruptions
 14449	   such as a fire alarm going off in the near vicinity.  Also called
 14450	   an {NMI} (non-maskable interrupt), especially in PC-land.
 14451	
 14452	:profile: n. 1. A control file for a program, esp. a text file
 14453	   automatically read from each user's home directory and intended to
 14454	   be easily modified by the user in order to customize the program's
 14455	   behavior.  Used to avoid {hardcoded} choices.  2. [techspeak] A
 14456	   report on the amounts of time spent in each routine of a program,
 14457	   used to find and {tune} away the {hot spot}s in it.  This sense
 14458	   is often verbed.  Some profiling modes report units other than time
 14459	   (such as call counts) and/or report at granularities other than
 14460	   per-routine, but the idea is similar.
 14461	
 14462	:proglet: /prog'let/ [UK] n. A short extempore program written
 14463	   to meet an immediate, transient need.  Often written in BASIC,
 14464	   rarely more than a dozen lines long, and contains no subroutines.
 14465	   The largest amount of code that can be written off the top of one's
 14466	   head, that does not need any editing, and that runs correctly the
 14467	   first time (this amount varies significantly according to the
 14468	   language one is using).  Compare {toy program}, {noddy},
 14469	   {one-liner wars}.
 14470	
 14471	:program: n. 1. A magic spell cast over a computer allowing it to
 14472	   turn one's input into error messages.  2. An exercise in
 14473	   experimental epistemology.  3. A form of art, ostensibly intended
 14474	   for the instruction of computers, which is nevertheless almost
 14475	   inevitably a failure if other programmers can't understand it.
 14476	
 14477	:Programmer's Cheer: "Shift to the left!  Shift to the right!  Pop
 14478	   up, push down!  Byte!  Byte!  Byte!"  A joke so old it has hair on
 14479	   it.
 14480	
 14481	:programming: n. 1. The art of debugging a blank sheet of paper (or,
 14482	   in these days of on-line editing, the art of debugging an empty
 14483	   file).  2. n. A pastime similar to banging one's head against a
 14484	   wall, but with fewer opportunities for reward.  3. n. The most fun
 14485	   you can have with your clothes on (although clothes are not
 14486	   mandatory).
 14487	
 14488	:programming fluid: n. 1. Coffee.  2. Cola.  3. Any caffeinacious
 14489	   stimulant.  Many hackers consider these essential for those
 14490	   all-night hacking runs.  See {unleaded}, {wirewater}.
 14491	
 14492	:propeller head: n. Used by hackers, this is syn. with {computer
 14493	   geek}.  Non-hackers sometimes use it to describe all techies.
 14494	   Prob. derives from SF fandom's tradition (originally invented by
 14495	   old-time fan Ray Faraday Nelson) of propeller beanies as fannish
 14496	   insignia (though nobody actually wears them except as a joke).
 14497	
 14498	:propeller key: [Mac users] n. See {feature key}.
 14499	
 14500	:proprietary: adj. 1. In {marketroid}-speak, superior; implies a
 14501	   product imbued with exclusive magic by the unmatched brilliance of
 14502	   the company's hardware or software designers.  2. In the language
 14503	   of hackers and users, inferior; implies a product not conforming to
 14504	   open-systems standards, and thus one that puts the customer at the
 14505	   mercy of a vendor able to gouge freely on service and upgrade
 14506	   charges after the initial sale has locked the customer in (that's
 14507	   assuming it wasn't too expensive in the first place).
 14508	
 14509	:protocol: n. As used by hackers, this never refers to niceties
 14510	   about the proper form for addressing letters to the Papal Nuncio or
 14511	   the order in which one should use the forks in a Russian-style
 14512	   place setting; hackers don't care about such things.  It is used
 14513	   instead to describe any set of rules that allow different machines
 14514	   or pieces of software to coordinate with each other without
 14515	   ambiguity.  So, for example, it does include niceties about the
 14516	   proper form for addressing packets on a network or the order in
 14517	   which one should use the forks in the Dining Philosophers Problem.
 14518	   It implies that there is some common message format and an accepted
 14519	   set of primitives or commands that all parties involved understand,
 14520	   and that transactions among them follow predictable logical
 14521	   sequences.  See also {handshaking}, {do protocol}.
 14522	
 14523	:provocative maintenance: [common ironic mutation of `preventive
 14524	   maintenance'] n. Actions performed upon a machine at regularly
 14525	   scheduled intervals to ensure that the system remains in a usable
 14526	   state.  So called because it is all too often performed by a
 14527	   {field servoid} who doesn't know what he is doing; this results
 14528	   in the machine's remaining in an *un*usable state for an
 14529	   indeterminate amount of time.  See also {scratch monkey}.
 14530	
 14531	:prowler: [UNIX] n. A {daemon} that is run periodically (typically
 14532	   once a week) to seek out and erase {core} files, truncate
 14533	   administrative logfiles, nuke `lost+found' directories, and
 14534	   otherwise clean up the {cruft} that tends to pile up in the
 14535	   corners of a file system.  See also {GFR}, {reaper},
 14536	   {skulker}.
 14537	
 14538	:pseudo: /soo'doh/ [USENET: truncation of `pseudonym'] n. 1. An
 14539	   electronic-mail or {USENET} persona adopted by a human for
 14540	   amusement value or as a means of avoiding negative repercussions of
 14541	   one's net.behavior; a `nom de USENET', often associated with
 14542	   forged postings designed to conceal message origins.  Perhaps the
 14543	   best-known and funniest hoax of this type is {BIFF}.
 14544	   2. Notionally, a {flamage}-generating AI program simulating a
 14545	   USENET user.  Many flamers have been accused of actually being such
 14546	   entities, despite the fact that no AI program of the required
 14547	   sophistication yet exists.  However, in 1989 there was a famous
 14548	   series of forged postings that used a phrase-frequency-based
 14549	   travesty generator to simulate the styles of several well-known
 14550	   flamers; it was based on large samples of their back postings
 14551	   (compare {Dissociated Press}).  A significant number of people
 14552	   were fooled by the forgeries, and the debate over their
 14553	   authenticity was settled only when the perpetrator came forward to
 14554	   publicly admit the hoax.
 14555	
 14556	:pseudoprime: n. A backgammon prime (six consecutive occupied
 14557	   points) with one point missing.  This term is an esoteric pun
 14558	   derived from a mathematical method that, rather than determining
 14559	   precisely whether a number is prime (has no divisors), uses a
 14560	   statistical technique to decide whether the number is `probably'
 14561	   prime.  A number that passes this test is called a pseudoprime.
 14562	   The hacker backgammon usage stems from the idea that a pseudoprime
 14563	   is almost as good as a prime: it does the job of a prime until
 14564	   proven otherwise, and that probably won't happen.
 14565	
 14566	:pseudosuit: /soo'doh-s[y]oot`/ n. A {suit} wannabee; a hacker
 14567	   who has decided that he wants to be in management or administration
 14568	   and begins wearing ties, sport coats, and (shudder!) suits
 14569	   voluntarily.  It's his funeral.  See also {lobotomy}.
 14570	
 14571	:psychedelicware: /si:`k*-del'-ik-weir/ [UK] n. Syn.
 14572	   {display hack}.  See also {smoking clover}.
 14573	
 14574	:psyton: /si:'ton/ [TMRC] n. The elementary particle carrying the
 14575	   sinister force.  The probability of a process losing is
 14576	   proportional to the number of psytons falling on it.  Psytons are
 14577	   generated by observers, which is why demos are more likely to fail
 14578	   when lots of people are watching.  [This term appears to have been
 14579	   largely superseded by {bogon}; see also {quantum bogodynamics}.
 14580	   --- ESR]
 14581	
 14582	:pubic directory: [NYU] (also `pube directory' /pyoob'
 14583	   d*-rek't*-ree/) n. The `pub' (public) directory on a machine that
 14584	   allows {FTP} access.  So called because it is the default
 14585	   location for {SEX} (sense 1).  "I'll have the source in the
 14586	   pube directory by Friday."
 14587	
 14588	:puff: vt. To decompress data that has been crunched by Huffman
 14589	   coding.  At least one widely distributed Huffman decoder program
 14590	   was actually *named* `PUFF', but these days it is usually
 14591	   packaged with the encoder.  Oppose {huff}.
 14592	
 14593	:punched card:: alt. `punch card' [techspeak] n.obs. The signature
 14594	   medium of computing's {Stone Age}, now obsolescent outside of
 14595	   some IBM shops.  The punched card actually predated computers
 14596	   considerably, originating in 1801 as a control device for
 14597	   mechanical looms.  The version patented by Hollerith and used with
 14598	   mechanical tabulating machines in the 1890 U.S. Census was a piece
 14599	   of cardboard about 90 mm by 215 mm, designed to fit exactly in the
 14600	   currency trays used for that era's larger dollar bills.
 14601	
 14602	   IBM (which originated as a tabulating-machine manufacturer) married
 14603	   the punched card to computers, encoding binary information as
 14604	   patterns of small rectangular holes; one character per column,
 14605	   80 columns per card.  Other coding schemes, sizes of card, and
 14606	   hole shapes were tried at various times.
 14607	
 14608	   The 80-column width of most character terminals is a legacy of the
 14609	   IBM punched card; so is the size of the quick-reference cards
 14610	   distributed with many varieties of computers even today.  See
 14611	   {chad}, {chad box}, {eighty-column mind}, {green card},
 14612	   {dusty deck}, {lace card}, {card walloper}.
 14613	
 14614	:punt: [from the punch line of an old joke referring to American
 14615	   football: "Drop back 15 yards and punt!"] v. 1. To give up,
 14616	   typically without any intention of retrying.  "Let's punt the
 14617	   movie tonight."  "I was going to hack all night to get this
 14618	   feature in, but I decided to punt" may mean that you've decided
 14619	   not to stay up all night, and may also mean you're not ever even
 14620	   going to put in the feature.  2. More specifically, to give up on
 14621	   figuring out what the {Right Thing} is and resort to an
 14622	   inefficient hack.  3. A design decision to defer solving a
 14623	   problem, typically because one cannot define what is desirable
 14624	   sufficiently well to frame an algorithmic solution.  "No way to
 14625	   know what the right form to dump the graph in is --- we'll punt
 14626	   that for now."  4. To hand a tricky implementation problem off
 14627	   to some other section of the design.  "It's too hard to get the
 14628	   compiler to do that; let's punt to the runtime system."
 14629	
 14630	:Purple Book: n. 1. The `System V Interface Definition'.  The
 14631	   covers of the first editions were an amazingly nauseating shade of
 14632	   off-lavender.  2. Syn. {Wizard Book}.  See also {{book
 14633	   titles}}.
 14634	
 14635	:purple wire: [IBM] n. Wire installed by Field Engineers to work
 14636	   around problems discovered during testing or debugging.  These are
 14637	   called `purple wires' even when (as is frequently the case) their
 14638	   actual physical color is yellow....  Compare {blue wire},
 14639	   {purple wire}, and {red wire}.
 14640	
 14641	:push: [from the operation that puts the current information on a
 14642	   stack, and the fact that procedure return addresses are saved on a
 14643	   stack] Also PUSH /push/ or PUSHJ /push'J/ (the latter based on
 14644	   the PDP-10 procedure call instruction).  1. To put something onto a
 14645	   {stack} or {pdl}.  If one says that something has been pushed
 14646	   onto one's stack, it means that the Damoclean list of things
 14647	   hanging over ones's head has grown longer and heavier yet.  This
 14648	   may also imply that one will deal with it *before* other
 14649	   pending items; otherwise one might say that the thing was `added
 14650	   to my queue'.  2. vi. To enter upon a digression, to save the
 14651	   current discussion for later.  Antonym of {pop}; see also
 14652	   {stack}, {pdl}.
 14653	
 14654	= Q =
 14655	=====
 14656	
 14657	:Q-line: [IRC] v.  To ban a particular {IRC} server from
 14658	   connecting to one's own; does to it what {K-line} does to an
 14659	   individual.  Since this is applied transitively, it has the effect
 14660	   of partitioning the IRC network, which is generally a {bad
 14661	   thing}.
 14662	   
 14663	:quad: n. 1. Two bits; syn. for {quarter}, {crumb},
 14664	   {tayste}.  2. A four-pack of anything (compare {hex}, sense 2).
 14665	   3. The rectangle or box glyph used in the APL language for various
 14666	   arcane purposes mostly related to I/O.  Former Ivy-Leaguers and
 14667	   Oxbridge types are said to associate it with nostalgic memories of
 14668	   dear old University.
 14669	
 14670	:quadruple bucky: n., obs. 1. On an MIT {space-cadet keyboard},
 14671	   use of all four of the shifting keys (control, meta, hyper, and
 14672	   super) while typing a character key.  2. On a Stanford or MIT
 14673	   keyboard in {raw mode}, use of four shift keys while typing a
 14674	   fifth character, where the four shift keys are the control and meta
 14675	   keys on *both* sides of the keyboard.  This was very difficult
 14676	   to do!  One accepted technique was to press the left-control and
 14677	   left-meta keys with your left hand, the right-control and
 14678	   right-meta keys with your right hand, and the fifth key with your
 14679	   nose.
 14680	
 14681	   Quadruple-bucky combinations were very seldom used in practice,
 14682	   because when one invented a new command one usually assigned it to
 14683	   some character that was easier to type.  If you want to imply that
 14684	   a program has ridiculously many commands or features, you can say
 14685	   something like: "Oh, the command that makes it spin the tapes
 14686	   while whistling Beethoven's Fifth Symphony is
 14687	   quadruple-bucky-cokebottle."  See {double bucky}, {bucky
 14688	   bits}, {cokebottle}.
 14689	
 14690	:quantifiers:: In techspeak and jargon, the standard metric
 14691	   prefixes used in the SI (Syst`eme International) conventions for
 14692	   scientific measurement have dual uses.  With units of time or
 14693	   things that come in powers of 10, such as money, they retain their
 14694	   usual meanings of multiplication by powers of 1000 = 10^3.
 14695	   But when used with bytes or other things that naturally come in
 14696	   powers of 2, they usually denote multiplication by powers of
 14697	   1024 = 2^(10).
 14698	
 14699	   Here are the SI magnifying prefixes, along with the corresponding
 14700	   binary interpretations in common use:
 14701	
 14702	     prefix  decimal  binary
 14703	     kilo-   1000^1   1024^1 = 2^10 = 1,024 
 14704	     mega-   1000^2   1024^2 = 2^20 = 1,048,576 
 14705	     giga-   1000^3   1024^3 = 2^30 = 1,073,741,824 
 14706	     tera-   1000^4   1024^4 = 2^40 = 1,099,511,627,776 
 14707	     peta-   1000^5   1024^5 = 2^50 = 1,125,899,906,842,624 
 14708	     exa-    1000^6   1024^6 = 2^60 = 1,152,921,504,606,846,976 
 14709	     zetta-  1000^7   1024^7 = 2^70 = 1,180,591,620,717,411,303,424 
 14710	     yotta-  1000^8   1024^8 = 2^80 = 1,208,925,819,614,629,174,706,176 
 14711	
 14712	   Here are the SI fractional prefixes:
 14713	
 14714	     *prefix  decimal     jargon usage*
 14715	     milli-  1000^-1     (seldom used in jargon)
 14716	     micro-  1000^-2     small or human-scale (see {micro-})
 14717	     nano-   1000^-3     even smaller (see {nano-})
 14718	     pico-   1000^-4     even smaller yet (see {pico-})
 14719	     femto-  1000^-5     (not used in jargon---yet)
 14720	     atto-   1000^-6     (not used in jargon---yet)
 14721	     zepto-     1000^-7     (not used in jargon---yet)
 14722	     yocto-     1000^-8     (not used in jargon---yet)
 14723	
 14724	   The prefixes zetta-, yotta-, zepto-, and yocto- have been included
 14725	   in these tables purely for completeness and giggle value; they were
 14726	   adopted in 1990 by the `19th Conference Generale des Poids et
 14727	   Mesures'.  The binary peta- and exa- loadings, though well
 14728	   established, are not in jargon use either --- yet.  The prefix
 14729	   milli-, denoting multiplication by 1000^(-1), has always
 14730	   been rare in jargon (there is, however, a standard joke about the
 14731	   `millihelen' --- notionally, the amount of beauty required to
 14732	   launch one ship).  See the entries on {micro-}, {pico-}, and
 14733	   {nano-} for more information on connotative jargon use of these
 14734	   terms.  `Femto' and `atto' (which, interestingly, derive not
 14735	   from Greek but from Danish) have not yet acquired jargon loadings,
 14736	   though it is easy to predict what those will be once computing
 14737	   technology enters the required realms of magnitude (however, see
 14738	   {attoparsec}).
 14739	
 14740	   There are, of course, some standard unit prefixes for powers of
 14741	   10.  In the following table, the `prefix' column is the
 14742	   international standard suffix for the appropriate power of ten; the
 14743	   `binary' column lists jargon abbreviations and words for the
 14744	   corresponding power of 2.  The B-suffixed forms are commonly used
 14745	   for byte quantities; the words `meg' and `gig' are nouns which may
 14746	   (but do not always) pluralize with `s'.
 14747	
 14748	     prefix   decimal   binary       pronunciation
 14749	     kilo-       k      K, KB,       /kay/
 14750	     mega-       M      M, MB, meg   /meg/
 14751	     giga-       G      G, GB, gig   /gig/,/jig/
 14752	
 14753	   Confusingly, hackers often use K or M as though they were suffix or
 14754	   numeric multipliers rather than a prefix; thus "2K dollars", "2M
 14755	   of disk space".  This is also true (though less commonly) of G.
 14756	
 14757	   Note that the formal SI metric prefix for 1000 is `k'; some use
 14758	   this strictly, reserving `K' for multiplication by 1024 (KB is
 14759	   `kilobytes').
 14760	
 14761	   K, M, and G used alone refer to quantities of bytes; thus, 64G is
 14762	   64 gigabytes and `a K' is a kilobyte (compare mainstream use of
 14763	   `a G' as short for `a grand', that is, $1000).  Whether one
 14764	   pronounces `gig' with hard or soft `g' depends on what one thinks
 14765	   the proper pronunciation of `giga-' is.
 14766	
 14767	   Confusing 1000 and 1024 (or other powers of 2 and 10 close in
 14768	   magnitude) --- for example, describing a memory in units of
 14769	   500K or 524K instead of 512K --- is a sure sign of the
 14770	   {marketroid}.
 14771	
 14772	:quantum bogodynamics: /kwon'tm boh`goh-di:-nam'iks/ n. A theory
 14773	   that characterizes the universe in terms of bogon sources (such as
 14774	   politicians, used-car salesmen, TV evangelists, and {suit}s in
 14775	   general), bogon sinks (such as taxpayers and computers), and
 14776	   bogosity potential fields.  Bogon absorption, of course, causes
 14777	   human beings to behave mindlessly and machines to fail (and may
 14778	   also cause both to emit secondary bogons); however, the precise
 14779	   mechanics of the bogon-computron interaction are not yet understood
 14780	   and remain to be elucidated.  Quantum bogodynamics is most often
 14781	   invoked to explain the sharp increase in hardware and software
 14782	   failures in the presence of suits; the latter emit bogons, which
 14783	   the former absorb.  See {bogon}, {computron}, {suit},
 14784	   {psyton}.
 14785	
 14786	:quarter: n. Two bits.  This in turn comes from the `pieces of
 14787	   eight' famed in pirate movies --- Spanish silver crowns that could
 14788	   be broken into eight pie-slice-shaped `bits' to make change.
 14789	   Early in American history the Spanish coin was considered equal to
 14790	   a dollar, so each of these `bits' was considered worth
 14791	   12.5 cents.  Syn.  {tayste}, {crumb}, {quad}.  Usage:
 14792	   rare.  See also {nickle}, {nybble}, {{byte}}, {dynner}.
 14793	
 14794	:ques: /kwes/ 1. n. The question mark character (`?', ASCII
 14795	   0111111).  2. interj.  What?  Also frequently verb-doubled as
 14796	   "Ques ques?"  See {wall}.
 14797	
 14798	:quick-and-dirty: adj. Describes a {crock} put together under time
 14799	   or user pressure.  Used esp. when you want to convey that you think
 14800	   the fast way might lead to trouble further down the road.  "I can
 14801	   have a quick-and-dirty fix in place tonight, but I'll have to
 14802	   rewrite the whole module to solve the underlying design problem."
 14803	   See also {kluge}.
 14804	
 14805	:quine: [from the name of the logician Willard V. Quine, via
 14806	   Douglas Hofstadter] n. A program which generates a copy of its
 14807	   source text as its complete output.  Devising the shortest possible
 14808	   quine in some given programming language is a common hackish
 14809	   amusement.  Here is one classic quine:
 14810	
 14811	     ((lambda (x)
 14812	       (list x (list (quote quote) x)))
 14813	      (quote
 14814	         (lambda (x)
 14815	           (list x (list (quote quote) x)))))
 14816	
 14817	   This one works in LISP or Scheme.  It's relatively easy to write
 14818	   quines in other languages such as Postscript which readily handle
 14819	   programs as data; much harder (and thus more challenging!) in
 14820	   languages like C which do not.  Here is a classic C quine:
 14821	
 14822	     char*f="char*f=%c%s%c;main(){printf(f,34,f,34,10);}%c";
 14823	     main(){printf(f,34,f,34,10);}
 14824	
 14825	   For excruciatingly exact quinishness, remove the line break after
 14826	   the second semicolon.  Some infamous {Obfuscated C Contest}
 14827	   entries have been quines that reproduced in exotic ways.
 14828	
 14829	:quote chapter and verse: [by analogy with the mainstream phrase]
 14830	   v.  To cite a relevant excerpt from an appropriate {bible}.  "I
 14831	   don't care if `rn' gets it wrong; `Followup-To: poster' is
 14832	   explicitly permitted by RFC-1036.  I'll quote chapter and verse if
 14833	   you don't believe me."
 14834	
 14835	:quotient: n. See {coefficient of X}.
 14836	
 14837	:quux: /kwuhks/ [Mythically, from the Latin semi-deponent verb
 14838	   quuxo, quuxare, quuxandum iri; noun form variously `quux' (plural
 14839	   `quuces', anglicized to `quuxes') and `quuxu' (genitive
 14840	   plural is `quuxuum', for four u-letters out of seven in all,
 14841	   using up all the `u' letters in Scrabble).]  1. Originally, a
 14842	   {metasyntactic variable} like {foo} and {foobar}.
 14843	   Invented by Guy Steele for precisely this purpose when he was young
 14844	   and na"ive and not yet interacting with the real computing
 14845	   community.  Many people invent such words; this one seems simply to
 14846	   have been lucky enough to have spread a little.  In an eloquent
 14847	   display of poetic justice, it has returned to the originator in the
 14848	   form of a nickname.  2. interj. See {foo}; however, denotes very
 14849	   little disgust, and is uttered mostly for the sake of the sound of
 14850	   it.  3. Guy Steele in his persona as `The Great Quux', which is
 14851	   somewhat infamous for light verse and for the `Crunchly' cartoons.
 14852	   4. In some circles, quux is used as a punning opposite of `crux'.
 14853	   "Ah, that's the quux of the matter!"  implies that the point is
 14854	   *not* crucial (compare {tip of the ice-cube}).  5. quuxy:
 14855	   adj. Of or pertaining to a quux.
 14856	
 14857	:qux: /kwuhks/ The fourth of the standard {metasyntactic
 14858	   variable}, after {baz} and before the quu(u...)x series.
 14859	   See {foo}, {bar}, {baz}, {quux}.  This appears to be a
 14860	   recent mutation from {quux}, and  many versions of the
 14861	   standard series just run {foo}, {bar}, {baz}, {quux},
 14862	   ....
 14863	
 14864	:QWERTY: /kwer'tee/ [from the keycaps at the upper left] adj.
 14865	   Pertaining to a standard English-language typewriter keyboard
 14866	   (sometimes called the Sholes keyboard after its inventor), as
 14867	   opposed to Dvorak or foreign-language layouts or a {space-cadet
 14868	   keyboard} or APL keyboard.
 14869	
 14870	   Historical note: The QWERTY layout is a fine example of a {fossil}.
 14871	   It is sometimes said that it was designed to slow down the typist,
 14872	   but this is wrong; it was designed to allow *faster* typing
 14873	   --- under a constraint now long obsolete.  In early typewriters,
 14874	   fast typing using nearby type-bars jammed the mechanism.  So Sholes
 14875	   fiddled the layout to separate the letters of many common digraphs
 14876	   (he did a far from perfect job, though; `th', `tr', `ed', and `er',
 14877	   for example, each use two nearby keys).  Also, putting the letters
 14878	   of `typewriter' on one line allowed it to be typed with particular
 14879	   speed and accuracy for {demo}s.  The jamming problem was
 14880	   essentially solved soon afterward by a suitable use of springs, but
 14881	   the keyboard layout lives on.
 14882	
 14883	= R =
 14884	=====
 14885	
 14886	:rain dance: n. 1. Any ceremonial action taken to correct a hardware
 14887	   problem, with the expectation that nothing will be accomplished.
 14888	   This especially applies to reseating printed circuit boards,
 14889	   reconnecting cables, etc.  "I can't boot up the machine.  We'll
 14890	   have to wait for Greg to do his rain dance."  2. Any arcane
 14891	   sequence of actions performed with computers or software in order
 14892	   to achieve some goal; the term is usually restricted to rituals
 14893	   that include both an {incantation} or two and physical activity
 14894	   or motion.  Compare {magic}, {voodoo programming}, {black
 14895	   art}.
 14896	
 14897	:rainbow series: n. Any of several series of technical manuals
 14898	   distinguished by cover color.  The original rainbow series was the
 14899	   NCSC security manuals (see {Orange Book}); the term has also
 14900	   been commonly applied to the PostScript reference set (see {Red
 14901	   Book}, {Green Book}, {Blue Book}, {White Book}).  Which
 14902	   books are meant by "`the' rainbow series" unqualified is thus
 14903	   dependent on one's local technical culture.
 14904	
 14905	:random: adj. 1. Unpredictable (closest to mathematical
 14906	   definition); weird.  "The system's been behaving pretty
 14907	   randomly."  2. Assorted; undistinguished.  "Who was at the
 14908	   conference?"  "Just a bunch of random business types."
 14909	   3. (pejorative) Frivolous; unproductive; undirected.  "He's just a
 14910	   random loser."  4. Incoherent or inelegant; poorly chosen; not
 14911	   well organized.  "The program has a random set of misfeatures."
 14912	   "That's a random name for that function."  "Well, all the names
 14913	   were chosen pretty randomly."  5. In no particular order, though
 14914	   deterministic.  "The I/O channels are in a pool, and when a file
 14915	   is opened one is chosen randomly."  6. Arbitrary.  "It generates
 14916	   a random name for the scratch file."  7. Gratuitously wrong, i.e.,
 14917	   poorly done and for no good apparent reason.  For example, a
 14918	   program that handles file name defaulting in a particularly useless
 14919	   way, or an assembler routine that could easily have been coded
 14920	   using only three registers, but redundantly uses seven for values
 14921	   with non-overlapping lifetimes, so that no one else can invoke it
 14922	   without first saving four extra registers.  What {randomness}!
 14923	   8. n. A random hacker; used particularly of high-school students
 14924	   who soak up computer time and generally get in the way.  9. n.
 14925	   Anyone who is not a hacker (or, sometimes, anyone not known to the
 14926	   hacker speaking); the noun form of sense 2.  "I went to the talk,
 14927	   but the audience was full of randoms asking bogus questions".
 14928	   10. n. (occasional MIT usage) One who lives at Random Hall.  See
 14929	   also {J. Random}, {some random X}.
 14930	
 14931	:random numbers:: n. When one wishes to specify a large but random
 14932	   number of things, and the context is inappropriate for {N}, certain
 14933	   numbers are preferred by hacker tradition (that is, easily
 14934	   recognized as placeholders).  These include the following:
 14935	
 14936	     17
 14937	          Long described at MIT as `the least random number'; see 23.
 14938	     23
 14939	          Sacred number of Eris, Goddess of Discord (along with 17 and
 14940	          5).
 14941	     42
 14942	          The Answer to the Ultimate Question of Life, the Universe, and
 14943	          Everything. (Note that this answer is completely fortuitous.
 14944	          `:-)')
 14945	     69
 14946	          From the sexual act.  This one was favored in MIT's ITS
 14947	          culture.
 14948	     105
 14949	          69 hex = 105 decimal, and 69 decimal = 105 octal.
 14950	     666
 14951	          The Number of the Beast.
 14952	
 14953	   For further enlightenment, study the `Principia Discordia',
 14954	   `{The Hitchhiker's Guide to the Galaxy}', `The Joy
 14955	   of Sex', and the Christian Bible (Revelation 13:8).  See also
 14956	   {Discordianism} or consult your pineal gland.  See also {for
 14957	   values of}.
 14958	
 14959	:randomness: n. 1. An inexplicable misfeature; gratuitous
 14960	   inelegance.  2. A {hack} or {crock} that depends on a complex
 14961	   combination of coincidences (or, possibly, the combination upon
 14962	   which the crock depends for its accidental failure to malfunction).
 14963	   "This hack can output characters 40--57 by putting the character
 14964	   in the four-bit accumulator field of an XCT and then extracting
 14965	   six bits --- the low 2 bits of the XCT opcode are the right
 14966	   thing."  "What randomness!"  3. Of people, synonymous with
 14967	   `flakiness'. The connotation is that the person so described is
 14968	   behaving weirdly, incompetently, or inappropriately for reasons
 14969	   which are (a) too tiresome to bother inquiring into, (b) are
 14970	   probably as inscrutable as quantum phenomena anyway, and (c) are
 14971	   likely to pass with time. "Maybe he has a real complaint, or maybe
 14972	   it's just randomness.  See if he calls back."
 14973	
 14974	:rape: vt. 1. To {screw} someone or something, violently; in
 14975	   particular, to destroy a program or information irrecoverably.
 14976	   Often used in describing file-system damage.  "So-and-so was
 14977	   running a program that did absolute disk I/O and ended up raping
 14978	   the master directory."  2. To strip a piece of hardware for parts.
 14979	   3. [CMU/Pitt] To mass-copy files from an anonymous ftp site.  
 14980	   "Last night I raped Simtel's dskutl directory."
 14981	
 14982	:rare mode: [UNIX] adj. CBREAK mode (character-by-character with
 14983	   interrupts enabled).  Distinguished from {raw mode} and {cooked
 14984	   mode}; the phrase "a sort of half-cooked (rare?) mode" is used
 14985	   in the V7/BSD manuals to describe the mode.  Usage: rare.
 14986	
 14987	:raster blaster: n. [Cambridge] Specialized hardware for
 14988	   {bitblt} operations (a {blitter}).  Allegedly inspired by
 14989	   `Rasta Blasta', British slang for the sort of portable stereo
 14990	   Americans call a `boom box' or `ghetto blaster'.
 14991	
 14992	:raster burn: n. Eyestrain brought on by too many hours of looking at
 14993	   low-res, poorly tuned, or glare-ridden monitors, esp. graphics
 14994	   monitors.  See {terminal illness}.
 14995	
 14996	:rat belt: n. A cable tie, esp. the sawtoothed, self-locking plastic
 14997	   kind that you can remove only by cutting (as opposed to a random
 14998	   twist of wire or a twist tie or one of those humongous metal clip
 14999	   frobs).  Small cable ties are `mouse belts'.
 15000	
 15001	:rave: [WPI] vi. 1. To persist in discussing a specific subject.
 15002	   2. To speak authoritatively on a subject about which one knows
 15003	   very little.  3. To complain to a person who is not in a position
 15004	   to correct the difficulty.  4. To purposely annoy another person
 15005	   verbally.  5. To evangelize.  See {flame}.  6. Also used to
 15006	   describe a less negative form of blather, such as friendly
 15007	   bullshitting.  `Rave' differs slightly from {flame} in that
 15008	   `rave' implies that it is the persistence or obliviousness of the
 15009	   person speaking that is annoying, while {flame} implies somewhat
 15010	   more strongly that the tone is offensive as well.
 15011	
 15012	:rave on!: imp. Sarcastic invitation to continue a {rave}, often by
 15013	   someone who wishes the raver would get a clue but realizes this is
 15014	   unlikely.
 15015	
 15016	:ravs: /ravz/, also `Chinese ravs' n. Jiao-zi (steamed or
 15017	   boiled) or Guo-tie (pan-fried).  A Chinese appetizer, known
 15018	   variously in the plural as dumplings, pot stickers (the literal
 15019	   translation of guo-tie), and (around Boston) `Peking Ravioli'.  The
 15020	   term `rav' is short for `ravioli', which among hackers always
 15021	   means the Chinese kind rather than the Italian kind.  Both consist
 15022	   of a filling in a pasta shell, but the Chinese kind includes no
 15023	   cheese, uses a thinner pasta, has a pork-vegetable filling (good
 15024	   ones include Chinese chives), and is cooked differently, either by
 15025	   steaming or frying.  A rav or dumpling can be cooked any way, but a
 15026	   potsticker is always the fried kind (so called because it sticks to
 15027	   the frying pot and has to be scraped off).  "Let's get
 15028	   hot-and-sour soup and three orders of ravs."  See also
 15029	   {{oriental food}}.
 15030	
 15031	:raw mode: n. A mode that allows a program to transfer bits
 15032	   directly to or from an I/O device (or, under {bogus} systems
 15033	   which make a distinction, a disk file) without any processing,
 15034	   abstraction, or interpretation by the operating system.  Compare
 15035	   {rare mode}, {cooked mode}.  This is techspeak under UNIX,
 15036	   jargon elsewhere.
 15037	
 15038	:rc file: /R-C fi:l/ [UNIX: from the startup script
 15039	   `/etc/rc', but this is commonly believed to have been named
 15040	   after older scripts to `run commands'] n. Script file containing
 15041	   startup instructions for an application program (or an entire
 15042	   operating system), usually a text file containing commands of the
 15043	   sort that might have been invoked manually once the system was
 15044	   running but are to be executed automatically each time the system
 15045	   starts up.  See also {dot file}.
 15046	
 15047	:RE: /R-E/ n. Common spoken and written shorthand for {regexp}.
 15048	
 15049	:read-only user: n. Describes a {luser} who uses computers almost
 15050	   exclusively for reading USENET, bulletin boards, and/or email,
 15051	   rather than writing code or purveying useful information.  See
 15052	   {twink}, {terminal junkie}, {lurker}.
 15053	
 15054	:README file: n. By convention, the top-level directory of a UNIX
 15055	   source distribution always contains a file named `README' (or
 15056	   READ.ME, or rarely ReadMe or some other variant), which is a
 15057	   hacker's-eye introduction containing a pointer to more detailed
 15058	   documentation, credits, miscellaneous revision history notes, etc.
 15059	   In the Mac and PC worlds, software is not usually distributed in
 15060	   source form and a README is more likely to contain user-oriented
 15061	   material like last-minute documentation changes, error workarounds,
 15062	   and restrictions.  When asked, hackers invariably relate the README
 15063	   convention to the famous scene in Lewis Carroll's `Alice's
 15064	   Adventures In Wonderland' in which Alice confronts magic munchies
 15065	   labeled "Eat Me" and "Drink Me".
 15066	
 15067	:real: adj. Not simulated.  Often used as a specific antonym to
 15068	   {virtual} in any of its jargon senses.
 15069	
 15070	:real estate: n. May be used for any critical resource measured in
 15071	   units of area.  Most frequently used of `chip real estate', the
 15072	   area available for logic on the surface of an integrated circuit
 15073	   (see also {nanoacre}).  May also be used of floor space in a
 15074	   {dinosaur pen}, or even space on a crowded desktop (whether
 15075	   physical or electronic).
 15076	
 15077	:real hack: n. A {crock}.  This is sometimes used affectionately;
 15078	   see {hack}.
 15079	
 15080	:real operating system: n. The sort the speaker is used to.  People
 15081	   from the BSDophilic academic community are likely to issue comments
 15082	   like "System V?  Why don't you use a *real* operating
 15083	   system?", people from the commercial/industrial UNIX sector are
 15084	   known to complain "BSD?  Why don't you use a *real*
 15085	   operating system?", and people from IBM object "UNIX?  Why don't
 15086	   you use a *real* operating system?"  See {holy wars},
 15087	   {religious issues}, {proprietary}, {Get a real computer!}
 15088	
 15089	:real programmer: [indirectly, from the book `Real Men Don't
 15090	   Eat Quiche'] n. A particular sub-variety of hacker: one possessed
 15091	   of a flippant attitude toward complexity that is arrogant even when
 15092	   justified by experience.  The archetypal `real programmer' likes
 15093	   to program on the {bare metal} and is very good at same,
 15094	   remembers the binary opcodes for every machine he has ever
 15095	   programmed, thinks that HLLs are sissy, and uses a debugger to edit
 15096	   his code because full-screen editors are for wimps.  Real
 15097	   Programmers aren't satisfied with code that hasn't been {bum}med
 15098	   into a state of {tense}ness just short of rupture.  Real
 15099	   Programmers never use comments or write documentation: "If it was
 15100	   hard to write", says the Real Programmer, "it should be hard to
 15101	   understand."  Real Programmers can make machines do things that
 15102	   were never in their spec sheets; in fact, they are seldom really
 15103	   happy unless doing so.  A Real Programmer's code can awe with its
 15104	   fiendish brilliance, even as its crockishness appalls.  Real
 15105	   Programmers live on junk food and coffee, hang line-printer art on
 15106	   their walls, and terrify the crap out of other programmers ---
 15107	   because someday, somebody else might have to try to understand
 15108	   their code in order to change it.  Their successors generally
 15109	   consider it a {Good Thing} that there aren't many Real
 15110	   Programmers around any more.  For a famous (and somewhat more
 15111	   positive) portrait of a Real Programmer, see "{The Story
 15112	   of Mel, a Real Programmer}" in {appendix A}.
 15113	
 15114	:Real Soon Now: [orig. from SF's fanzine community, popularized by
 15115	   Jerry Pournelle's column in `BYTE'] adv. 1. Supposed to be
 15116	   available (or fixed, or cheap, or whatever) real soon now according
 15117	   to somebody, but the speaker is quite skeptical.  2. When one's
 15118	   gods, fates, or other time commitments permit one to get to it (in
 15119	   other words, don't hold your breath).  Often abbreviated RSN.
 15120	
 15121	:real time: 1. [techspeak] adj. Describes an application which
 15122	   requires a program to respond to stimuli within some small upper
 15123	   limit of response time (typically milli- or microseconds).  Process
 15124	   control at a chemical plant is the classic example.  Such
 15125	   applications often require special operating systems (because
 15126	   everything else must take a back seat to response time) and
 15127	   speed-tuned hardware.  2. adv. In jargon, refers to doing something
 15128	   while people are watching or waiting.  "I asked her how to find
 15129	   the calling procedure's program counter on the stack and she came
 15130	   up with an algorithm in real time."
 15131	
 15132	:real user: n. 1. A commercial user.  One who is paying *real*
 15133	   money for his computer usage.  2. A non-hacker.  Someone using the
 15134	   system for an explicit purpose (a research project, a course, etc.)
 15135	   other than pure exploration.  See {user}.  Hackers who are also
 15136	   students may also be real users.  "I need this fixed so I can do a
 15137	   problem set.  I'm not complaining out of randomness, but as a real
 15138	   user."  See also {luser}.
 15139	
 15140	:Real World: n. 1. Those institutions at which `programming' may
 15141	   be used in the same sentence as `FORTRAN', `{COBOL}',
 15142	   `RPG', `{IBM}', `DBASE', etc.  Places where programs do such
 15143	   commercially necessary but intellectually uninspiring things as
 15144	   generating payroll checks and invoices.  2. The location of
 15145	   non-programmers and activities not related to programming.  3. A
 15146	   bizarre dimension in which the standard dress is shirt and tie and
 15147	   in which a person's working hours are defined as 9 to 5 (see
 15148	   {code grinder}).  4. Anywhere outside a university.  "Poor
 15149	   fellow, he's left MIT and gone into the Real World."  Used
 15150	   pejoratively by those not in residence there.  In conversation,
 15151	   talking of someone who has entered the Real World is not unlike
 15152	   speaking of a deceased person.  It is also noteworthy that on the
 15153	   campus of Cambridge University in England, there is a gaily-painted
 15154	   lamp-post which bears the label `REALITY CHECKPOINT'.  It marks the
 15155	   boundary between university and the Real World; check your notions
 15156	   of reality before passing.  See also {fear and loathing},
 15157	   {mundane}, and {uninteresting}.
 15158	
 15159	:reality check: n. 1. The simplest kind of test of software or
 15160	   hardware; doing the equivalent of asking it what 2 + 2 is
 15161	   and seeing if you get 4.  The software equivalent of a
 15162	   {smoke test}.  2. The act of letting a {real user} try out
 15163	   prototype software.  Compare {sanity check}.
 15164	
 15165	:reaper: n. A {prowler} that {GFR}s files.  A file removed in
 15166	   this way is said to have been `reaped'.
 15167	
 15168	:rectangle slinger: n. See {polygon pusher}.
 15169	
 15170	:recursion: n. See {recursion}.  See also {tail recursion}.
 15171	
 15172	:recursive acronym:: pl.n. A hackish (and especially MIT) tradition
 15173	   is to choose acronyms/abbreviations that refer humorously to
 15174	   themselves or to other acronyms/abbreviations.  The classic
 15175	   examples were two MIT editors called EINE ("EINE Is Not EMACS")
 15176	   and ZWEI ("ZWEI Was EINE Initially").  More recently, there is a
 15177	   Scheme compiler called LIAR (Liar Imitates Apply Recursively), and
 15178	   {GNU} (q.v., sense 1) stands for "GNU's Not UNIX!" --- and a
 15179	   company with the name CYGNUS, which expands to "Cygnus, Your GNU
 15180	   Support".  See also {mung}, {EMACS}.
 15181	
 15182	:Red Book: n. 1. Informal name for one of the three standard
 15183	   references on {PostScript} (`PostScript Language Reference
 15184	   Manual', Adobe Systems (Addison-Wesley, 1985; QA76.73.P67P67; ISBN
 15185	   0-201-10174-2, or the 1990 second edition ISBN 0-201-18127-4); the
 15186	   others are known as the {Green Book}, the {Blue Book}, and
 15187	   the {White Book} (sense 2).  2. Informal name for one of the 3
 15188	   standard references on Smalltalk (`Smalltalk-80: The
 15189	   Interactive Programming Environment' by Adele Goldberg
 15190	   (Addison-Wesley, 1984; QA76.8.S635G638; ISBN 0-201-11372-4); this
 15191	   too is associated with blue and green books).  3. Any of the
 15192	   1984 standards issued by the CCITT eighth plenary assembly.  Until
 15193	   now, these have changed color each review cycle (1988 was {Blue
 15194	   Book}, 1992 will be {Green Book}); however, it is rumored that
 15195	   this convention is going to be dropped before 1992.  These include,
 15196	   among other things, the X.400 email spec and the Group 1 through 4
 15197	   fax standards.  4. The new version of the {Green Book} (sense 4)
 15198	   --- IEEE 1003.1-1990, a.k.a ISO 9945-1 --- is (because of the color
 15199	   and the fact that it is printed on A4 paper) known in the U.S.A. as
 15200	   "the Ugly Red Book That Won't Fit On The Shelf" and in Europe as
 15201	   "the Ugly Red Book That's A Sensible Size".  5. The NSA
 15202	   `Trusted Network Interpretation' companion to the {Orange
 15203	   Book}.  See also {{book titles}}.
 15204	
 15205	:red wire: [IBM] n. Patch wires installed by programmers who have
 15206	   no business mucking with the hardware.  It is said that the only
 15207	   thing more dangerous then a hardware guy with a code patch is a
 15208	   {softy} with a soldering iron....
 15209	
 15210	:regexp: /reg'eksp/ [UNIX] n. (alt. `regex' or `reg-ex')
 15211	   1. Common written and spoken abbreviation for `regular
 15212	   expression', one of the wildcard patterns used, e.g., by UNIX
 15213	   utilities such as `grep(1)', `sed(1)', and `awk(1)'.
 15214	   These use conventions similar to but more elaborate than those
 15215	   described under {glob}.  For purposes of this lexicon, it is
 15216	   sufficient to note that regexps also allow complemented character
 15217	   sets using `^'; thus, one can specify `any non-alphabetic
 15218	   character' with `[^A-Za-z]'.  2. Name of a well-known PD
 15219	   regexp-handling package in portable C, written by revered USENETter
 15220	   Henry Spencer <henry@zoo.toronto.edu>.
 15221	
 15222	:register dancing: n. Many older processor architectures suffer
 15223	   from a serious shortage of general-purpose registers.  This is
 15224	   especially a problem for compiler-writers, because their generated
 15225	   code needs places to store temporaries for things like intermediate
 15226	   values in expression evaluation.  Some designs with this problem,
 15227	   like the Intel 80x86, do have a handful of special-purpose
 15228	   registers that can be pressed into service, providing suitable care
 15229	   is taken to avoid unpleasant side-effects on the state of the
 15230	   processor: while the special-purpose register is being used to hold
 15231	   an intermediate value, a delicate minuet is required in which the
 15232	   previous value of the register is saved and then restored just before
 15233	   the official function (and value) of the special-purpose register is
 15234	   again needed.
 15235	
 15236	:reincarnation, cycle of: n. See {cycle of reincarnation}.
 15237	
 15238	:reinvent the wheel: v. To design or implement a tool equivalent to
 15239	   an existing one or part of one, with the implication that doing so
 15240	   is silly or a waste of time.  This is often a valid criticism.
 15241	   On the other hand, automobiles don't use wooden rollers, and some
 15242	   kinds of wheel have to be reinvented many times before you get them
 15243	   right.  On the third hand, people reinventing the wheel do tend to
 15244	   come up with the moral equivalent of a trapezoid with an offset
 15245	   axle.
 15246	
 15247	:religious issues: n. Questions which seemingly cannot be raised
 15248	   without touching off {holy wars}, such as "What is the best
 15249	   operating system (or editor, language, architecture, shell, mail
 15250	   reader, news reader)?", "What about that Heinlein guy, eh?",
 15251	   "What should we add to the new Jargon File?"  See {holy wars};
 15252	   see also {theology}, {bigot}.
 15253	
 15254	   This term is an example of {ha ha only serious}.  People
 15255	   actually develop the most amazing and religiously intense
 15256	   attachments to their tools, even when the tools are intangible.
 15257	   The most constructive thing one can do when one stumbles into the
 15258	   crossfire is mumble {Get a life!} and leave --- unless, of course,
 15259	   one's *own* unassailably rational and obviously correct
 15260	   choices are being slammed.
 15261	
 15262	:replicator: n. Any construct that acts to produce copies of
 15263	   itself; this could be a living organism, an idea (see {meme}), a
 15264	   program (see {worm}, {wabbit}, {fork bomb}, and
 15265	   {virus}), a pattern in a cellular automaton (see {life},
 15266	   sense 1), or (speculatively) a robot or {nanobot}.  It is even
 15267	   claimed by some that {{UNIX}} and {C} are the symbiotic halves
 15268	   of an extremely successful replicator; see {UNIX conspiracy}.
 15269	
 15270	:reply: n. See {followup}.
 15271	
 15272	:reset: [the MUD community] v. In AberMUD, to bring all dead mobiles
 15273	   to life and move items back to their initial starting places. New
 15274	   players who can't find anything shout "Reset! Reset!" quite a bit.
 15275	   Higher-level players shout back "No way!" since they know where
 15276	   points are to be found.  Used in {RL}, it means to put things back
 15277	   to the way they were when you found them.
 15278	
 15279	:restriction: n. A {bug} or design error that limits a program's
 15280	   capabilities, and which is sufficiently egregious that nobody can
 15281	   quite work up enough nerve to describe it as a {feature}.  Often
 15282	   used (esp. by {marketroid} types) to make it sound as though
 15283	   some crippling bogosity had been intended by the designers all
 15284	   along, or was forced upon them by arcane technical constraints of a
 15285	   nature no mere user could possibly comprehend (these claims are
 15286	   almost invariably false).
 15287	
 15288	   Old-time hacker Joseph M. Newcomer advises that whenever choosing a
 15289	   quantifiable but arbitrary restriction, you should make it either a
 15290	   power of 2 or a power of 2 minus 1.  If you impose a limit of
 15291	   17 items in a list, everyone will know it is a random number --- on
 15292	   the other hand, a limit of 15 or 16 suggests some deep reason
 15293	   (involving 0- or 1-based indexing in binary) and you will get less
 15294	   {flamage} for it.  Limits which are round numbers in base 10 are
 15295	   always especially suspect.
 15296	
 15297	:retcon: /ret'kon/ [`retroactive continuity', from the USENET
 15298	   newsgroup rec.arts.comics] 1. n. The common situation in pulp
 15299	   fiction (esp. comics or soap operas) where a new story
 15300	   `reveals' things about events in previous stories, usually
 15301	   leaving the `facts' the same (thus preserving continuity) while
 15302	   completely changing their interpretation.  For example, revealing
 15303	   that a whole season of "Dallas" was a dream was a retcon.
 15304	   2. vt. To write such a story about a character or fictitious
 15305	   object.  "Byrne has retconned Superman's cape so that it is no
 15306	   longer unbreakable."  "Marvelman's old adventures were retconned
 15307	   into synthetic dreams."  "Swamp Thing was retconned from a
 15308	   transformed person into a sentient vegetable."  "Darth Vader was
 15309	   retconned into Luke Skywalker's father in "The Empire Strikes
 15310	   Back".
 15311	
 15312	   [This is included because it is a good example of hackish
 15313	   linguistic innovation in a field completely unrelated to computers.
 15314	   The word `retcon' will probably spread through comics fandom and
 15315	   lose its association with hackerdom within a couple of years; for
 15316	   the record, it started here. --- ESR]
 15317	
 15318	:RETI: v. Syn. {RTI}
 15319	
 15320	:retrocomputing: /ret'-roh-k*m-pyoo'ting/ n. Refers to emulations
 15321	   of way-behind-the-state-of-the-art hardware or software, or
 15322	   implementations of never-was-state-of-the-art; esp. if such
 15323	   implementations are elaborate practical jokes and/or parodies,
 15324	   written mostly for {hack value}, of more `serious' designs.
 15325	   Perhaps the most widely distributed retrocomputing utility was the
 15326	   `pnch(6)' or `bcd(6)' program on V7 and other early UNIX
 15327	   versions, which would accept up to 80 characters of text argument
 15328	   and display the corresponding pattern in {{punched card}} code.
 15329	   Other well-known retrocomputing hacks have included the programming
 15330	   language {INTERCAL}, a {JCL}-emulating shell for UNIX, the
 15331	   card-punch-emulating editor named 029, and various elaborate PDP-11
 15332	   hardware emulators and RT-11 OS emulators written just to keep an
 15333	   old, sourceless {Zork} binary running.
 15334	
 15335	:RFC: /R-F-C/ [Request For Comment] n. One of a long-established
 15336	   series of numbered Internet standards widely followed by commercial
 15337	   and PD software in the Internet and UNIX communities.  Perhaps the
 15338	   single most influential one has been RFC-822 (the Internet
 15339	   mail-format standard).  The RFCs are unusual in that they are
 15340	   floated by technical experts acting on their own initiative and
 15341	   reviewed by the Internet at large, rather than formally promulgated
 15342	   through an institution such as ANSI.  For this reason, they remain
 15343	   known as RFCs even once adopted.
 15344	
 15345	   The RFC tradition of pragmatic, experience-driven, after-the-fact
 15346	   standard-writing done by individuals or small working groups has
 15347	   important advantages over the more formal, committee-driven process
 15348	   typical of ANSI or ISO.  Emblematic of some of these is the
 15349	   existence of a flourishing tradition of `joke' RFCs; usually at
 15350	   least one a year is published, usually on April 1st.  Well-known
 15351	   joke RFCs have included 527 ("ARPAWOCKY", R. Merryman, UCSD; 22
 15352	   June 1973), 748 ("Telnet Randomly-Lose Option", Mark R. Crispin;
 15353	   1 April 1978), and 1149 ("A Standard for the Transmission of IP
 15354	   Datagrams on Avian Carriers", D. Waitzman, BBN STC; 1 April 1990).
 15355	   The first was a Lewis Carrol pastiche; the second a parody of the
 15356	   TCP-IP documentation style, and the third a deadpan skewering of
 15357	   standards-document legalese describing protocols for transmiitting
 15358	   Internet data packets by carrier pigeon.
 15359	
 15360	   The RFCs are most remarkable for how well they work --- they manage to
 15361	   have neither the ambiguities which are usually rife in informal
 15362	   specifications, nor the committee-perpetrated misfeatures which often
 15363	   haunt formal standards, and they define a network which has grown to
 15364	   truly worldwide proportions.
 15365	
 15366	:RFE: /R-F-E/ n. 1. [techspeak] Request For Enhancement.
 15367	   2. [from `Radio Free Europe', Bellcore and Sun] Radio Free
 15368	   Ethernet, a system (originated by Peter Langston) for broadcasting
 15369	   audio among Sun SPARCstations over the ethernet.
 15370	
 15371	:rib site: [by analogy with {backbone site}] n. A machine that
 15372	   has an on-demand high-speed link to a {backbone site} and serves
 15373	   as a regional distribution point for lots of third-party traffic in
 15374	   email and USENET news.  Compare {leaf site}, {backbone site}.
 15375	
 15376	:rice box: [from ham radio slang] n. Any Asian-made commodity
 15377	   computer, esp. an 80x86-based machine built to IBM PC-compatible
 15378	   ISA or EISA-bus standards.
 15379	
 15380	:Right Thing: n. That which is *compellingly* the correct or
 15381	   appropriate thing to use, do, say, etc.  Often capitalized, always
 15382	   emphasized in speech as though capitalized.  Use of this term often
 15383	   implies that in fact reasonable people may disagree.  "What's the
 15384	   right thing for LISP to do when it sees `(mod a 0)'?  Should
 15385	   it return `a', or give a divide-by-0 error?"  Oppose
 15386	   {Wrong Thing}.
 15387	
 15388	:RL: // [MUD community] n. Real Life.  "Firiss laughs in RL"
 15389	   means that Firiss's player is laughing.  Oppose {VR}.
 15390	
 15391	:roach: [Bell Labs] vt. To destroy, esp. of a data structure.  Hardware
 15392	   gets {toast}ed or {fried}, software gets roached.
 15393	
 15394	:robot: [IRC, MUD] n. An {IRC} or {MUD} user who is actually
 15395	   a program.  On IRC, typically the robot provides some useful
 15396	   service.  Examples are NickServ, which tries to prevent random
 15397	   users from adopting {nick}s already claimed by others, and
 15398	   MsgServ, which allows one to send asynchronous messages to be
 15399	   delivered when the recipient signs on.  Also common are
 15400	   "annoybots", such as KissServ, which perform no useful function
 15401	   except to send cute messages to other people.  Service robots are
 15402	   less common on MUDs; but some others, such as the `Julia' robot
 15403	   active in 1990-91, have been remarkably impressive Turing-test
 15404	   experiments, able to pass as human for as long as ten or fifteen
 15405	   minutes of conversation.
 15406	
 15407	:robust: adj. Said of a system that has demonstrated an ability to
 15408	   recover gracefully from the whole range of exceptional inputs and
 15409	   situations in a given environment.  One step below {bulletproof}.
 15410	   Carries the additional connotation of elegance in addition to just
 15411	   careful attention to detail.  Compare {smart}, oppose
 15412	   {brittle}.
 15413	
 15414	:rococo: adj. {Baroque} in the extreme.  Used to imply that a
 15415	   program has become so encrusted with the software equivalent of
 15416	   gold leaf and curlicues that they have completely swamped the
 15417	   underlying design.  Called after the later and more extreme forms
 15418	   of Baroque architecture and decoration prevalent during the
 15419	   mid-1700s in Europe.  Alan Perlis said: "Every program eventually
 15420	   becomes rococo, and then rubble."  Compare {critical
 15421	   mass}.
 15422	
 15423	:rogue: [UNIX] n. A Dungeons-and-Dragons-like game using character
 15424	   graphics, written under BSD UNIX and subsequently ported to other
 15425	   UNIX systems.  The original BSD `curses(3)' screen-handling
 15426	   package was hacked together by Ken Arnold to support
 15427	   `rogue(6)' and has since become one of UNIX's most important
 15428	   and heavily used application libraries.  Nethack, Omega, Larn, and
 15429	   an entire subgenre of computer dungeon games all took off from the
 15430	   inspiration provided by `rogue(6)'.  See {nethack}.
 15431	
 15432	:room-temperature IQ: [IBM] quant. 80 or below.  Used in describing the
 15433	   expected intelligence range of the {luser}.  "Well, but
 15434	   how's this interface going to play with the room-temperature IQ
 15435	   crowd?"  See {drool-proof paper}.  This is a much more insulting
 15436	   phrase in countries that use Celsius thermometers.
 15437	
 15438	:root: [UNIX] n. 1. The {superuser} account that ignores
 15439	   permission bits, user number 0 on a UNIX system.  This account
 15440	   has the user name `root'.  The term {avatar} is also used.
 15441	   2. The top node of the system directory structure (home directory
 15442	   of the root user).  3. By extension, the privileged
 15443	   system-maintenance login on any OS.  See {root mode}, {go root}.
 15444	
 15445	:root mode: n. Syn. with {wizard mode} or `wheel mode'.  Like
 15446	   these, it is often generalized to describe privileged states in
 15447	   systems other than OSes.
 15448	
 15449	:rot13: /rot ther'teen/ [USENET: from `rotate alphabet
 15450	   13 places'] n., v. The simple Caesar-cypher encryption that
 15451	   replaces each English letter with the one 13 places forward or back
 15452	   along the alphabet, so that "The butler did it!" becomes "Gur
 15453	   ohgyre qvq vg!"  Most USENET news reading and posting programs
 15454	   include a rot13 feature.  It is used to enclose the text in a
 15455	   sealed wrapper that the reader must choose to open --- e.g., for
 15456	   posting things that might offend some readers, or answers to
 15457	   puzzles.  A major advantage of rot13 over rot(N) for
 15458	   other N is that it is self-inverse, so the same code can be
 15459	   used for encoding and decoding.
 15460	
 15461	:rotary debugger: [Commodore] n. Essential equipment for those
 15462	   late-night or early-morning debugging sessions.  Mainly used as
 15463	   sustenance for the hacker.  Comes in many decorator colors, such as
 15464	   Sausage, Pepperoni, and Garbage.  See {pizza, ANSI standard}.
 15465	
 15466	:round tape: n. Industry-standard 1/2" magnetic tape (7- or
 15467	   9-track) on traditional circular reels; oppose {square tape}.
 15468	
 15469	:RSN: /R-S-N/ adj. See {Real Soon Now}.
 15470	
 15471	:RTBM: /R-T-B-M/ [UNIX] imp. Commonwealth Hackish variant of
 15472	   {RTFM}; expands to `Read The Bloody Manual'.  RTBM is often the
 15473	   entire text of the first reply to a question from a {newbie};
 15474	   the *second* would escalate to "RTFM".
 15475	
 15476	:RTFAQ: /R-T-F-A-Q/ [USENET: primarily written, by analogy with
 15477	   {RTFM}] imp. Abbrev. for `Read the FAQ!', an exhortation that
 15478	   the person addressed ought to read the newsgroup's {FAQ list}
 15479	   before posting questions.
 15480	
 15481	:RTFB: /R-T-F-B/ [UNIX] imp. Acronym for `Read The Fucking
 15482	   Binary'.  Used when neither documentation nor the the source for the
 15483	   problem at hand exists and the only thing to do is use some
 15484	   debugger or monitor and directly analyze the assembler or even
 15485	   the machine code.  "No source for the buggy port driver?  Aaargh! I
 15486	   *hate* proprietary operating systems.  Time to RTFB."
 15487	
 15488	:RTFM: /R-T-F-M/ [UNIX] imp. Acronym for `Read The Fucking
 15489	   Manual'.  1. Used by {guru}s to brush off questions they
 15490	   consider trivial or annoying.  Compare {Don't do that, then!}
 15491	   2. Used when reporting a problem to indicate that you aren't just
 15492	   asking out of {randomness}.  "No, I can't figure out how to
 15493	   interface UNIX to my toaster, and yes, I have RTFM."  Unlike
 15494	   sense 1, this use is considered polite.  See also {FM},
 15495	   {RTFAQ}, {RTFB}, {RTFS}, {RTM}, all of which mutated
 15496	   from RTFM, and compare {UTSL}.
 15497	
 15498	:RTFS: /R-T-F-S/ [UNIX] 1. imp. Acronym for `Read The Fucking
 15499	   Source'.  Stronger form of {RTFM}, used when the problem
 15500	   at hand is not necessarily obvious and not available from
 15501	   the manuals --- or the manuals are not yet written and maybe
 15502	   never will be.  For even more tricky situations, see {RTFB}.
 15503	   2. imp. `Read The Fucking Standard;' this oath can only be used when
 15504	   the problem area (e.g. a language or operating system interface) has
 15505	   actually been codified in a ratified standards document.  The
 15506	   existence of these standards documents (and the technically
 15507	   inappropriate but politically mandated compromises which they
 15508	   inevitably contain, and the stifling language in which they are
 15509	   invariably written, and the unbelievably tedious bureaucratic process
 15510	   by which they are produced) can be unnerving to hackers, who are used
 15511	   to a certain amount of ambiguity in the specifications of the systems
 15512	   they use.  (Hackers feel that such ambiguities are acceptable as long
 15513	   as the {Right Thing} to do is obvious to any thinking observer;
 15514	   sadly, this casual attitude towards specifications becomes unworkable
 15515	   when a system becomes popular in the {real world}.)  Since a hacker
 15516	   is likely to feel that a standards document is both unnecessary and
 15517	   technically deficient, the deprecation inherent in this term may be
 15518	   directed as much against the standard as against the person who ought
 15519	   to read it.
 15520	
 15521	:RTI: /R-T-I/ interj. The mnemonic for the `return from
 15522	   interrupt' instruction on many computers including the 6502 and
 15523	   6800.  The variant `RETI' is found among former Z80 hackers
 15524	   (almost nobody programs these things in assembler anymore).
 15525	   Equivalent to "Now, where was I?" or used to end a
 15526	   conversational digression.  See {pop}; see also {POPJ}.
 15527	
 15528	:RTM: /R-T-M/ [USENET: abbreviation for `Read The Manual']
 15529	   1. Politer variant of {RTFM}.  2. Robert T. Morris Jr.,
 15530	   perpetrator of the great Internet worm of 1988 (see {Great Worm,
 15531	   the}); villain to many, na"ive hacker gone wrong to a few.  Morris
 15532	   claimed that the worm that brought the Internet to its knees was a
 15533	   benign experiment that got out of control as the result of a coding
 15534	   error.  After the storm of negative publicity that followed this
 15535	   blunder, Morris's name on ITS was hacked from RTM to {RTFM}.
 15536	
 15537	:rude: [WPI] adj. 1. (of a program) Badly written.  2. Functionally
 15538	   poor, e.g., a program that is very difficult to use because of
 15539	   gratuitously poor (random?) design decisions.  Oppose {cuspy}.
 15540	   3. Anything that manipulates a shared resource without regard for
 15541	   its other users in such a way as to cause a (non-fatal) problem is
 15542	   said to be `rude'.  Examples: programs that change tty modes
 15543	   without resetting them on exit, or windowing programs that keep
 15544	   forcing themselves to the top of the window stack.  Compare
 15545	   {all-elbows}.
 15546	
 15547	:runes: pl.n. 1. Anything that requires {heavy wizardry} or
 15548	   {black art} to {parse}: core dumps, JCL commands, APL, or code
 15549	   in a language you haven't a clue how to read.  Compare {casting
 15550	   the runes}, {Great Runes}.  2. Special display characters (for
 15551	   example, the high-half graphics on an IBM PC).
 15552	
 15553	:runic: adj. Syn. {obscure}.  VMS fans sometimes refer to UNIX as
 15554	   `Runix'; UNIX fans return the compliment by expanding VMS to `Very
 15555	   Messy Syntax' or `Vachement Mauvais Syst`eme' (French; lit.
 15556	   "Cowlike Bad System", idiomatically "Bitchy Bad System").
 15557	
 15558	:rusty iron: n. Syn. {tired iron}.  It has been claimed that this
 15559	   is the inevitable fate of {water MIPS}.
 15560	
 15561	:rusty memory: n. Mass-storage that uses iron-oxide-based magnetic
 15562	   media (esp. tape and the pre-Winchester removable disk packs used
 15563	   in {washing machine}s).  Compare {donuts}.
 15564	
 15565	= S =
 15566	=====
 15567	
 15568	:S/N ratio: // n. (also `s/n ratio', `s:n ratio').  Syn.
 15569	   {signal-to-noise ratio}.  Often abbreviated `SNR'.
 15570	
 15571	:sacred: adj. Reserved for the exclusive use of something (an
 15572	   extension of the standard meaning).  Often means that anyone may
 15573	   look at the sacred object, but clobbering it will screw whatever it
 15574	   is sacred to.  The comment "Register 7 is sacred to the interrupt
 15575	   handler" appearing in a program would be interpreted by a hacker
 15576	   to mean that if any *other* part of the program changes the
 15577	   contents of register 7, dire consequences are likely to ensue.
 15578	
 15579	:saga: [WPI] n. A cuspy but bogus raving story about N random
 15580	   broken people.
 15581	
 15582	   Here is a classic example of the saga form, as told by Guy L.
 15583	   Steele:
 15584	
 15585	     Jon L. White (login name JONL) and I (GLS) were office mates at MIT
 15586	     for many years.  One April, we both flew from Boston to California
 15587	     for a week on research business, to consult face-to-face with some
 15588	     people at Stanford, particularly our mutual friend Richard P.
 15589	     Gabriel (RPG; see {Gabriel}).
 15590	
 15591	     RPG picked us up at the San Francisco airport and drove us back to
 15592	     Palo Alto (going {logical} south on route 101, parallel to {El
 15593	     Camino Bignum}).  Palo Alto is adjacent to Stanford University and
 15594	     about 40 miles south of San Francisco.  We ate at The Good Earth, a
 15595	     `health food' restaurant, very popular, the sort whose milkshakes
 15596	     all contain honey and protein powder.  JONL ordered such a shake
 15597	     --- the waitress claimed the flavor of the day was "lalaberry".  I
 15598	     still have no idea what that might be, but it became a running
 15599	     joke.  It was the color of raspberry, and JONL said it tasted
 15600	     rather bitter.  I ate a better tostada there than I have ever had
 15601	     in a Mexican restaurant.
 15602	
 15603	     After this we went to the local Uncle Gaylord's Old Fashioned Ice
 15604	     Cream Parlor.  They make ice cream fresh daily, in a variety of
 15605	     intriguing flavors.  It's a chain, and they have a slogan: "If you
 15606	     don't live near an Uncle Gaylord's --- MOVE!"  Also, Uncle Gaylord
 15607	     (a real person) wages a constant battle to force big-name ice cream
 15608	     makers to print their ingredients on the package (like air and
 15609	     plastic and other non-natural garbage).  JONL and I had first
 15610	     discovered Uncle Gaylord's the previous August, when we had flown
 15611	     to a computer-science conference in Berkeley, California, the first
 15612	     time either of us had been on the West Coast.  When not in the
 15613	     conference sessions, we had spent our time wandering the length of
 15614	     Telegraph Avenue, which (like Harvard Square in Cambridge) was
 15615	     lined with picturesque street vendors and interesting little shops.
 15616	     On that street we discovered Uncle Gaylord's Berkeley store.  The
 15617	     ice cream there was very good.  During that August visit JONL went
 15618	     absolutely bananas (so to speak) over one particular flavor, ginger
 15619	     honey.
 15620	
 15621	     Therefore, after eating at The Good Earth --- indeed, after every
 15622	     lunch and dinner and before bed during our April visit --- a trip
 15623	     to Uncle Gaylord's (the one in Palo Alto) was mandatory.  We had
 15624	     arrived on a Wednesday, and by Thursday evening we had been there
 15625	     at least four times.  Each time, JONL would get ginger honey ice
 15626	     cream, and proclaim to all bystanders that "Ginger was the spice
 15627	     that drove the Europeans mad!  That's why they sought a route to
 15628	     the East!  They used it to preserve their otherwise off-taste
 15629	     meat."  After the third or fourth repetition RPG and I were getting
 15630	     a little tired of this spiel, and began to paraphrase him: "Wow!
 15631	     Ginger!  The spice that makes rotten meat taste good!"  "Say!  Why
 15632	     don't we find some dog that's been run over and sat in the sun for
 15633	     a week and put some *ginger* on it for dinner?!"  "Right!  With a
 15634	     lalaberry shake!"  And so on.  This failed to faze JONL; he took it
 15635	     in good humor, as long as we kept returning to Uncle Gaylord's.  He
 15636	     loves ginger honey ice cream.
 15637	
 15638	     Now RPG and his then-wife KBT (Kathy Tracy) were putting us up
 15639	     (putting up with us?) in their home for our visit, so to thank them
 15640	     JONL and I took them out to a nice French restaurant of their
 15641	     choosing.  I unadventurously chose the filet mignon, and KBT had je
 15642	     ne sais quoi du jour, but RPG and JONL had lapin (rabbit).
 15643	     (Waitress: "Oui, we have fresh rabbit, fresh today."  RPG: "Well,
 15644	     JONL, I guess we won't need any *ginger*!")
 15645	
 15646	     We finished the meal late, about 11 P.M., which is 2 A.M Boston
 15647	     time, so JONL and I were rather droopy.  But it wasn't yet
 15648	     midnight.  Off to Uncle Gaylord's!
 15649	
 15650	     Now the French restaurant was in Redwood City, north of Palo Alto.
 15651	     In leaving Redwood City, we somehow got onto route 101 going north
 15652	     instead of south.  JONL and I wouldn't have known the difference
 15653	     had RPG not mentioned it.  We still knew very little of the local
 15654	     geography.  I did figure out, however, that we were headed in the
 15655	     direction of Berkeley, and half-jokingly suggested that we continue
 15656	     north and go to Uncle Gaylord's in Berkeley.
 15657	
 15658	     RPG said "Fine!" and we drove on for a while and talked.  I was
 15659	     drowsy, and JONL actually dropped off to sleep for 5 minutes.  When
 15660	     he awoke, RPG said, "Gee, JONL, you must have slept all the way
 15661	     over the bridge!", referring to the one spanning San Francisco Bay.
 15662	     Just then we came to a sign that said "University Avenue".  I
 15663	     mumbled something about working our way over to Telegraph Avenue;
 15664	     RPG said "Right!" and maneuvered some more.  Eventually we pulled
 15665	     up in front of an Uncle Gaylord's.
 15666	
 15667	     Now, I hadn't really been paying attention because I was so sleepy,
 15668	     and I didn't really understand what was happening until RPG let me
 15669	     in on it a few moments later, but I was just alert enough to notice
 15670	     that we had somehow come to the Palo Alto Uncle Gaylord's after
 15671	     all.
 15672	
 15673	     JONL noticed the resemblance to the Palo Alto store, but hadn't
 15674	     caught on.  (The place is lit with red and yellow lights at night,
 15675	     and looks much different from the way it does in daylight.)  He
 15676	     said, "This isn't the Uncle Gaylord's I went to in Berkeley!  It
 15677	     looked like a barn!  But this place looks *just like* the one back
 15678	     in Palo Alto!"
 15679	
 15680	     RPG deadpanned, "Well, this is the one *I* always come to when I'm
 15681	     in Berkeley.  They've got two in San Francisco, too.  Remember,
 15682	     they're a chain."
 15683	
 15684	     JONL accepted this bit of wisdom.  And he was not totally ignorant
 15685	     --- he knew perfectly well that University Avenue was in Berkeley,
 15686	     not far from Telegraph Avenue.  What he didn't know was that there
 15687	     is a completely different University Avenue in Palo Alto.
 15688	
 15689	     JONL went up to the counter and asked for ginger honey.  The guy at
 15690	     the counter asked whether JONL would like to taste it first,
 15691	     evidently their standard procedure with that flavor, as not too
 15692	     many people like it.
 15693	
 15694	     JONL said, "I'm sure I like it.  Just give me a cone."  The guy
 15695	     behind the counter insisted that JONL try just a taste first.
 15696	     "Some people think it tastes like soap."  JONL insisted, "Look, I
 15697	     *love* ginger.  I eat Chinese food.  I eat raw ginger roots.  I
 15698	     already went through this hassle with the guy back in Palo Alto.  I
 15699	     *know* I like that flavor!"
 15700	
 15701	     At the words "back in Palo Alto" the guy behind the counter got a
 15702	     very strange look on his face, but said nothing.  KBT caught his
 15703	     eye and winked.  Through my stupor I still hadn't quite grasped
 15704	     what was going on, and thought RPG was rolling on the floor
 15705	     laughing and clutching his stomach just because JONL had launched
 15706	     into his spiel ("makes rotten meat a dish for princes") for the
 15707	     forty-third time.  At this point, RPG clued me in fully.
 15708	
 15709	     RPG, KBT, and I retreated to a table, trying to stifle our
 15710	     chuckles.  JONL remained at the counter, talking about ice cream
 15711	     with the guy b.t.c., comparing Uncle Gaylord's to other ice cream
 15712	     shops and generally having a good old time.
 15713	
 15714	     At length the g.b.t.c. said, "How's the ginger honey?"  JONL said,
 15715	     "Fine!  I wonder what exactly is in it?"  Now Uncle Gaylord
 15716	     publishes all his recipes and even teaches classes on how to make
 15717	     his ice cream at home.  So the g.b.t.c. got out the recipe, and he
 15718	     and JONL pored over it for a while.  But the g.b.t.c. could contain
 15719	     his curiosity no longer, and asked again, "You really like that
 15720	     stuff, huh?"  JONL said, "Yeah, I've been eating it constantly back
 15721	     in Palo Alto for the past two days.  In fact, I think this batch is
 15722	     about as good as the cones I got back in Palo Alto!"
 15723	
 15724	     G.b.t.c. looked him straight in the eye and said, "You're *in* Palo
 15725	     Alto!"
 15726	
 15727	     JONL turned slowly around, and saw the three of us collapse in a
 15728	     fit of giggles.  He clapped a hand to his forehead and exclaimed,
 15729	     "I've been hacked!"
 15730	
 15731	   [My spies on the West Coast inform me that there is a close relative
 15732	   of the raspberry found out there called an `olallieberry' --- ESR]
 15733	
 15734	   [Ironic footnote: it appears that the {meme} about ginger vs.
 15735	   rotting meat may be an urban legend.  It's not borne out by an
 15736	   examination of medieval recipes or period purchase records for
 15737	   spices, and appears full-blown in the works of Samuel Pegge, a
 15738	   gourmand and notorious flake case who originated numerous food
 15739	   myths. --- ESR]
 15740	
 15741	:sagan: /say'gn/ [from Carl Sagan's TV series "Cosmos";
 15742	   think "billions and billions"] n. A large quantity of anything.
 15743	   "There's a sagan different ways to tweak EMACS."  "The
 15744	   U.S. Government spends sagans on bombs and welfare --- hard to say
 15745	   which is more destructive."
 15746	
 15747	:SAIL:: /sayl/, not /S-A-I-L/ n. 1. Stanford Artificial
 15748	   Intelligence Lab.  An important site in the early development of
 15749	   LISP; with the MIT AI Lab, BBN, CMU, XEROX PARC, and the UNIX
 15750	   community, one of the major wellsprings of technical innovation and
 15751	   hacker-culture traditions (see the {{WAITS}} entry for details).
 15752	   The SAIL machines were officially shut down in late May 1990, scant
 15753	   weeks after the MIT AI Lab's ITS cluster was officially
 15754	   decommissioned.  2. The Stanford Artificial Intelligence Language
 15755	   used at SAIL (sense 1).  It was an Algol-60 derivative with a
 15756	   coroutining facility and some new data types intended for building
 15757	   search trees and association lists.
 15758	
 15759	:salescritter: /sayls'kri`tr/ n. Pejorative hackerism for a computer
 15760	   salesperson.  Hackers tell the following joke:
 15761	
 15762	     Q. What's the difference between a used-car dealer and a
 15763	        computer salesman?
 15764	     A. The used-car dealer knows he's lying.  [Some versions add:
 15765	        ...and probably knows how to drive.]
 15766	
 15767	   This reflects the widespread hacker belief that salescritters are
 15768	   self-selected for stupidity (after all, if they had brains and the
 15769	   inclination to use them, they'd be in programming).  The terms
 15770	   `salesthing' and `salesdroid' are also common.  Compare
 15771	   {marketroid}, {suit}, {droid}.
 15772	
 15773	:salsman: /salz'm*n/ v. To flood a mailing list or newsgroup with
 15774	   huge amounts of useless, trivial or redundant information.  From
 15775	   the name of a hacker who has frequently done this on some widely
 15776	   distributed mailing lists.
 15777	
 15778	:salt mines: n. Dense quarters housing large numbers of programmers
 15779	   working long hours on grungy projects, with some hope of seeing the
 15780	   end of the tunnel in N years.  Noted for their absence of sunshine.
 15781	   Compare {playpen}, {sandbox}.
 15782	
 15783	:salt substrate: [MIT] n. Collective noun used to refer to potato
 15784	   chips, pretzels, saltines, or any other form of snack food
 15785	   designed primarily as a carrier for sodium chloride.  From the
 15786	   technical term `chip substrate', used to refer to the silicon on the
 15787	   top of which the active parts of integrated circuits are deposited.
 15788	
 15789	:same-day service: n. Ironic term used to describe long response
 15790	   time, particularly with respect to {{MS-DOS}} system calls (which
 15791	   ought to require only a tiny fraction of a second to execute).
 15792	   Such response time is a major incentive for programmers to write
 15793	   programs that are not {well-behaved}.  See also {PC-ism}.
 15794	
 15795	:samurai: n. A hacker who hires out for legal cracking jobs,
 15796	   snooping for factions in corporate political fights, lawyers
 15797	   pursuing privacy-rights and First Amendment cases, and other
 15798	   parties with legitimate reasons to need an electronic locksmith.
 15799	   In 1991, mainstream media reported the existence of a loose-knit
 15800	   culture of samurai that meets electronically on BBS systems, mostly
 15801	   bright teenagers with personal micros; they have modeled
 15802	   themselves explicitly on the historical samurai of Japan and on the
 15803	   "net cowboys" of William Gibson's {cyberpunk} novels.  Those
 15804	   interviewed claim to adhere to a rigid ethic of loyalty to their
 15805	   employers and to disdain the vandalism and theft practiced by
 15806	   criminal crackers as beneath them and contrary to the hacker ethic;
 15807	   some quote Miyamoto Musashi's `Book of Five Rings', a classic
 15808	   of historical samurai doctrine, in support of these principles.
 15809	   See also {Stupids}, {social engineering}, {cracker},
 15810	   {hacker ethic, the}, and {dark-side hacker}.
 15811	
 15812	:sandbender: [IBM] n. A person involved with silicon lithography and
 15813	   the physical design of chips.  Compare {ironmonger}, {polygon
 15814	   pusher}.
 15815	
 15816	:sandbox: n. 1. (also `sandbox, the') Common term for the
 15817	   R&D department at many software and computer companies (where hackers
 15818	   in commercial environments are likely to be found).  Half-derisive,
 15819	   but reflects the truth that research is a form of creative play.
 15820	   Compare {playpen}.  2. Syn. {link farm}
 15821	
 15822	:sanity check: n. 1. The act of checking a piece of code (or
 15823	   anything else, e.g., a USENET posting) for completely stupid mistakes.
 15824	   Implies that the check is to make sure the author was sane when it
 15825	   was written; e.g., if a piece of scientific software relied on a
 15826	   particular formula and was giving unexpected results, one might
 15827	   first look at the nesting of parentheses or the coding of the
 15828	   formula, as a `sanity check', before looking at the more complex
 15829	   I/O or data structure manipulation routines, much less the
 15830	   algorithm itself.  Compare {reality check}.  2. A run-time test,
 15831	   either validating input or ensuring that the program hasn't screwed
 15832	   up internally (producing an inconsistent value or state).
 15833	
 15834	:Saturday-night special: [from police slang for a cheap handgun] n.
 15835	   A program or feature kluged together during off hours, under a
 15836	   deadline, and in response to pressure from a {salescritter}.
 15837	   Such hacks are dangerously unreliable, but all too often sneak into
 15838	   a production release after insufficient review.
 15839	
 15840	:say: vt. 1. To type to a terminal.  "To list a directory
 15841	   verbosely, you have to say `ls -l'."  Tends to imply a
 15842	   {newline}-terminated command (a `sentence').  2. A computer
 15843	   may also be said to `say' things to you, even if it doesn't have
 15844	   a speech synthesizer, by displaying them on a terminal in response
 15845	   to your commands.  Hackers find it odd that this usage confuses
 15846	   {mundane}s.
 15847	
 15848	:scag: vt. To destroy the data on a disk, either by corrupting the
 15849	  filesystem or by causing media damage.  "That last power hit scagged
 15850	  the system disk."  Compare {scrog}, {roach}.
 15851	
 15852	:scanno: n. An error in a document caused by a scanner glitch,
 15853	   analgous to typo or {thinko}.
 15854	
 15855	:schroedinbug: [MIT: from the Schroedinger's Cat thought-experiment in
 15856	   quantum physics] n. A design or implementation bug in a program
 15857	   which doesn't manifest until someone reading source or using the
 15858	   program in an unusual way notices that it never should have worked,
 15859	   at which point the program promptly stops working for everybody
 15860	   until fixed.  Though this sounds impossible, it happens; some
 15861	   programs have harbored latent schroedinbugs for years.  Compare
 15862	   {heisenbug}, {Bohr bug}, {mandelbug}.
 15863	
 15864	:science-fiction fandom:: n. Another voluntary subculture having a
 15865	   very heavy overlap with hackerdom; most hackers read SF and/or
 15866	   fantasy fiction avidly, and many go to `cons' (SF conventions) or
 15867	   are involved in fandom-connected activities such as the Society for
 15868	   Creative Anachronism.  Some hacker jargon originated in SF fandom;
 15869	   see {defenestration}, {great-wall}, {cyberpunk}, {h}, {ha ha
 15870	   only serious}, {IMHO}, {mundane}, {neep-neep}, {Real
 15871	   Soon Now}.  Additionally, the jargon terms {cowboy},
 15872	   {cyberspace}, {de-rezz}, {go flatline}, {ice}, {virus},
 15873	   {wetware}, {wirehead}, and {worm} originated in SF
 15874	   stories.
 15875	
 15876	:scram switch: [from the nuclear power industry] n. An
 15877	   emergency-power-off switch (see {Big Red Switch}), esp. one
 15878	   positioned to be easily hit by evacuating personnel.  In general,
 15879	   this is *not* something you {frob} lightly; these often
 15880	   initiate expensive events (such as Halon dumps) and are installed
 15881	   in a {dinosaur pen} for use in case of electrical fire or in
 15882	   case some luckless {field servoid} should put 120 volts across
 15883	   himself while {Easter egging}.  (See also {molly-guard}.)
 15884	
 15885	:scratch: 1. [from `scratchpad'] adj. Describes a data
 15886	   structure or recording medium attached to a machine for testing or
 15887	   temporary-use purposes; one that can be {scribble}d on without
 15888	   loss.  Usually in the combining forms `scratch memory',
 15889	   `scratch register', `scratch disk', `scratch tape',
 15890	   `scratch volume'.  See {scratch monkey}.  2. [primarily
 15891	   IBM] vt. To delete (as in a file).
 15892	
 15893	:scratch monkey: n. As in "Before testing or reconfiguring, always
 15894	   mount a {scratch monkey}", a proverb used to advise caution
 15895	   when dealing with irreplaceable data or devices.  Used to refer to
 15896	   any scratch volume hooked to a computer during any risky operation
 15897	   as a replacement for some precious resource or data that might
 15898	   otherwise get trashed.
 15899	
 15900	   This term preserves the memory of Mabel, the Swimming Wonder
 15901	   Monkey, star of a biological research program at the University of
 15902	   Toronto ca. 1986.  Mabel was not (so the legend goes) your ordinary
 15903	   monkey; the university had spent years teaching her how to swim,
 15904	   breathing through a regulator, in order to study the effects of
 15905	   different gas mixtures on her physiology.  Mabel suffered an
 15906	   untimely demise one day when DEC {PM}ed the PDP-11 controlling
 15907	   her regulator (see also {provocative maintenance}).
 15908	
 15909	   It is recorded that, after calming down an understandably irate
 15910	   customer sufficiently to ascertain the facts of the matter, a DEC
 15911	   troubleshooter called up the {field circus} manager responsible
 15912	   and asked him sweetly, "Can you swim?"
 15913	
 15914	   Not all the consequences to humans were so amusing; the sysop of
 15915	   the machine in question was nearly thrown in jail at the behest of
 15916	   certain clueless droids at the local `humane' society.  The moral
 15917	   is clear: When in doubt, always mount a scratch monkey.
 15918	
 15919	:screw: [MIT] n. A {lose}, usually in software.  Especially used for
 15920	   user-visible misbehavior caused by a bug or misfeature.  This use
 15921	   has become quite widespread outside MIT.
 15922	
 15923	:screwage: /skroo'*j/ n. Like {lossage} but connotes that the
 15924	   failure is due to a designed-in misfeature rather than a simple
 15925	   inadequacy or a mere bug.
 15926	
 15927	:scribble: n. To modify a data structure in a random and
 15928	   unintentionally destructive way.  "Bletch! Somebody's
 15929	   disk-compactor program went berserk and scribbled on the i-node
 15930	   table."  "It was working fine until one of the allocation routines
 15931	   scribbled on low core."  Synonymous with {trash}; compare {mung},
 15932	   which conveys a bit more intention, and {mangle}, which is more
 15933	   violent and final.
 15934	
 15935	:scrog: /skrog/ [Bell Labs] vt. To damage, trash, or corrupt a
 15936	   data structure.  "The list header got scrogged."  Also reported
 15937	   as `skrog', and ascribed to the comic strip "The Wizard of
 15938	   Id".  Compare {scag}; possibly the two are related.  Equivalent
 15939	   to {scribble} or {mangle}.
 15940	
 15941	:scrool: /skrool/ [from the pioneering Roundtable chat system in
 15942	   Houston ca. 1984; prob. originated as a typo for `scroll'] n. The
 15943	   log of old messages, available for later perusal or to help one get
 15944	   back in synch with the conversation. It was originally called the
 15945	   `scrool monster', because an early version of the roundtable
 15946	   software had a bug where it would dump all 8K of scrool on a user's
 15947	   terminal.
 15948	
 15949	:scrozzle: /skroz'l/ vt. Used when a self-modifying code segment runs
 15950	   incorrectly and corrupts the running program or vital data.  "The
 15951	   damn compiler scrozzled itself again!"
 15952	
 15953	:scruffies: n.  See {neats vs. scruffies}.
 15954	
 15955	:SCSI: [Small Computer System Interface] n. A bus-independent
 15956	   standard for system-level interfacing between a computer and
 15957	   intelligent devices.  Typically annotated in literature with `sexy'
 15958	   (/sek'see/), `sissy' (/sis'ee/), and `scuzzy' (/skuh'zee/) as
 15959	   pronunciation guides --- the last being the overwhelmingly
 15960	   predominant form, much to the dismay of the designers and their
 15961	   marketing people.  One can usually assume that a person who
 15962	   pronounces it /S-C-S-I/ is clueless.
 15963	
 15964	:ScumOS: n. Unflattering hackerism for SunOS, the UNIX variant
 15965	   supported on Sun Microsystems's UNIX workstations (see also
 15966	   {sun-stools}), and compare {AIDX}, {terminak},
 15967	   {Macintrash} {Nominal Semidestructor}, {Open DeathTrap},
 15968	   {HP-SUX}.  Despite what this term might suggest, Sun was
 15969	   founded by hackers and still enjoys excellent relations with
 15970	   hackerdom; usage is more often in exasperation than outright
 15971	   loathing.
 15972	
 15973	:search-and-destroy mode: n. Hackerism for the search-and-replace
 15974	   facility in an editor, so called because an incautiously chosen
 15975	   match pattern can cause {infinite} damage.
 15976	
 15977	:second-system effect: n. (sometimes, more euphoniously,
 15978	   `second-system syndrome') When one is designing the successor to
 15979	   a relatively small, elegant, and successful system, there is a
 15980	   tendency to become grandiose in one's success and design an
 15981	   {elephantine} feature-laden monstrosity.  The term was first
 15982	   used by Fred Brooks in his classic `The Mythical Man-Month:
 15983	   Essays on Software Engineering' (Addison-Wesley, 1975; ISBN
 15984	   0-201-00650-2).  It described the jump from a set of nice, simple
 15985	   operating systems on the IBM 70xx series to OS/360 on the
 15986	   360 series.  A similar effect can also happen in an evolving
 15987	   system; see {Brooks's Law}, {creeping elegance}, {creeping
 15988	   featurism}.  See also {{Multics}}, {OS/2}, {X}, {software
 15989	   bloat}.
 15990	
 15991	   This version of the jargon lexicon has been described (with
 15992	   altogether too much truth for comfort) as an example of
 15993	   second-system effect run amok on jargon-1....
 15994	
 15995	:secondary damage: n. When a fatal error occurs (esp. a
 15996	   {segfault}) the immediate cause may be that a pointer has been
 15997	   trashed due to a previous {fandango on core}.  However, this
 15998	   fandango may have been due to an *earlier* fandango, so no
 15999	   amount of analysis will reveal (directly) how the damage occurred.
 16000	   "The data structure was clobbered, but it was secondary damage."
 16001	
 16002	   By extension, the corruption resulting from N cascaded
 16003	   fandangoes on core is `Nth-level damage'.  There is at least
 16004	   one case on record in which 17 hours of {grovel}ling with
 16005	   `adb' actually dug up the underlying bug behind an instance of
 16006	   seventh-level damage!  The hacker who accomplished this
 16007	   near-superhuman feat was presented with an award by his fellows.
 16008	
 16009	:security through obscurity: n. A name applied by hackers to most
 16010	   OS vendors' favorite way of coping with security holes --- namely,
 16011	   ignoring them and not documenting them and trusting that nobody
 16012	   will find out about them and that people who do find out about them
 16013	   won't exploit them.  This never works for long and occasionally
 16014	   sets the world up for debacles like the {RTM} worm of 1988 (see
 16015	   {Great Worm, the}), but once the brief moments of panic created
 16016	   by such events subside most vendors are all too willing to turn
 16017	   over and go back to sleep.  After all, actually fixing the bugs
 16018	   would siphon off the resources needed to implement the next
 16019	   user-interface frill on marketing's wish list --- and besides, if
 16020	   they started fixing security bugs customers might begin to
 16021	   *expect* it and imagine that their warranties of
 16022	   merchantability gave them some sort of *right* to a system
 16023	   with fewer holes in it than a shotgunned Swiss cheese, and
 16024	   *then* where would we be?
 16025	
 16026	   Historical note: There are conflicting stories about the origin of
 16027	   this term.  It has been claimed that it was first used in the
 16028	   USENET newsgroup in comp.sys.apollo during a campaign to get
 16029	   HP/Apollo to fix security problems in its UNIX-{clone}
 16030	   Aegis/DomainOS (they didn't change a thing).  {ITS} fans, on the
 16031	   other hand, say it was coined years earlier in opposition to the
 16032	   incredibly paranoid {Multics} people down the hall, for whom
 16033	   security was everything.  In the ITS culture it referred to (1) the
 16034	   fact that that by the time a tourist figured out how to make
 16035	   trouble he'd generally gotten over the urge to make it, because he
 16036	   felt part of the community; and (2) (self-mockingly) the poor
 16037	   coverage of the documentation and obscurity of many commands.  One
 16038	   instance of *deliberate* security through obscurity is
 16039	   recorded; the command to allow patching the running ITS system
 16040	   ({altmode} altmode control-R) echoed as $$^D.  If you actually
 16041	   typed alt alt ^D, that set a flag which would prevent patching the
 16042	   system even if you later got it right.
 16043	
 16044	:SED: [TMRC, from `Light-Emitting Diode'] /S-E-D/ n.
 16045	   Smoke-emitting diode.  A {friode} that lost the war. See
 16046	   {LER}.
 16047	
 16048	:segfault: n.,vi. Syn. {segment}, {seggie}.
 16049	
 16050	:seggie: /seg'ee/ [UNIX] n. Shorthand for {segmentation fault}
 16051	   reported from Britain.
 16052	
 16053	:segment: /seg'ment/ vi. To experience a {segmentation fault}.
 16054	   Confusingly, this is often pronounced more like the noun `segment'
 16055	   than like mainstream v. segment; this is because it is actually a
 16056	   noun shorthand that has been verbed.
 16057	
 16058	:segmentation fault: n. [UNIX] 1. An error in which a running program
 16059	   attempts to access memory not allocated to it and {core dump}s
 16060	   with a segmentation violation error.  2. To lose a train of
 16061	   thought or a line of reasoning.  Also uttered as an exclamation at
 16062	   the point of befuddlement.
 16063	
 16064	:segv: /seg'vee/ n.,vi. Yet another synonym for {segmentation
 16065	   fault} (actually, in this case, `segmentation violation').
 16066	
 16067	:self-reference: n. See {self-reference}.
 16068	
 16069	:selvage: /sel'v*j/ [from sewing] n. See {chad} (sense 1).
 16070	
 16071	:semi: /se'mee/ or /se'mi:/ 1. n. Abbreviation for
 16072	   `semicolon', when speaking.  "Commands to {grind} are
 16073	   prefixed by semi-semi-star" means that the prefix is `;;*',
 16074	   not 1/4 of a star.  2. A prefix used with words such as
 16075	   `immediately' as a qualifier.  "When is the system coming up?"
 16076	   "Semi-immediately." (That is, maybe not for an hour.)  "We did
 16077	   consider that possibility semi-seriously."  See also
 16078	   {infinite}.
 16079	
 16080	:semi-infinite: n. See {infinite}.
 16081	
 16082	:senior bit: [IBM] n. Syn. {meta bit}.
 16083	
 16084	:server: n. A kind of {daemon} that performs a service for the
 16085	   requester and which often runs on a computer other than the one on
 16086	   which the server runs.  A particularly common term on the Internet,
 16087	   which is rife with `name servers', `domain servers', `news
 16088	   servers', `finger servers', and the like.
 16089	
 16090	:SEX: /seks/ [Sun Users' Group & elsewhere] n. 1. Software
 16091	   EXchange.  A technique invented by the blue-green algae hundreds of
 16092	   millions of years ago to speed up their evolution, which had been
 16093	   terribly slow up until then.  Today, SEX parties are popular among
 16094	   hackers and others (of course, these are no longer limited to
 16095	   exchanges of genetic software).  In general, SEX parties are a
 16096	   {Good Thing}, but unprotected SEX can propagate a {virus}.
 16097	   See also {pubic directory}.  2. The rather Freudian mnemonic
 16098	   often used for Sign EXtend, a machine instruction found in the
 16099	   PDP-11 and many other architectures.  The RCA 1802 chip used in the
 16100	   early Elf and SuperElf personal computers had a `SEt X register'
 16101	   SEX instruction, but this seems to have had little folkloric
 16102	   impact.
 16103	
 16104	   DEC's engineers nearly got a PDP-11 assembler that used the
 16105	   `SEX' mnemonic out the door at one time, but (for once)
 16106	   marketing wasn't asleep and forced a change.  That wasn't the last
 16107	   time this happened, either.  The author of `The Intel 8086
 16108	   Primer', who was one of the original designers of the 8086, noted
 16109	   that there was originally a `SEX' instruction on that
 16110	   processor, too.  He says that Intel management got cold feet and
 16111	   decreed that it be changed, and thus the instruction was renamed
 16112	   `CBW' and `CWD' (depending on what was being extended).
 16113	   Amusingly, the Intel 8048 (the microcontroller used in IBM PC
 16114	   keyboards) is also missing straight `SEX' but has logical-or
 16115	   and logical-and instructions `ORL' and `ANL'.
 16116	
 16117	   The Motorola 6809, used in the U.K.'s `Dragon 32' personal
 16118	   computer, actually had an official `SEX' instruction; the 6502
 16119	   in the Apple II it competed with did not.  British hackers thought
 16120	   this made perfect mythic sense; after all, it was commonly
 16121	   observed, you could (on some theoretical level) have sex with a
 16122	   dragon, but you can't have sex with an apple.
 16123	
 16124	:sex changer: n. Syn. {gender mender}.
 16125	
 16126	:shambolic link: n. A UNIX symbolic link, particularly when it
 16127	   confuses you, points to nothing at all, or results in you ending up
 16128	   in some completely unexpected part of the filesystem....
 16129	
 16130	:shareware: /sheir'weir/ n. {Freeware} (sense 1) for which the
 16131	   author requests some payment, usually in the accompanying
 16132	   documentation files or in an announcement made by the software
 16133	   itself.  Such payment may or may not buy additional support or
 16134	   functionality.  See also {careware}, {charityware},
 16135	   {crippleware}, {guiltware}, {postcardware}, and
 16136	   {-ware}; compare {payware}.
 16137	
 16138	:shelfware: /shelfweir/ n. Software purchased on a whim (by an
 16139	   individual user) or in accordance with policy (by a corporation or
 16140	   government agency), but not actually required for any particular
 16141	   use.  Therefore, it often ends up on some shelf.
 16142	
 16143	:shell: [orig. {{Multics}} techspeak, widely propagated via UNIX] n.
 16144	   1. [techspeak] The command interpreter used to pass commands to an
 16145	   operating system; so called because it is the part of the operating
 16146	   system that interfaces with the outside world.  2. More generally,
 16147	   any interface program that mediates access to a special resource
 16148	   or {server} for convenience, efficiency, or security reasons; for
 16149	   this meaning, the usage is usually `a shell around' whatever.
 16150	   This sort of program is also called a `wrapper'.
 16151	
 16152	:shell out: [UNIX] n. To spawn an interactive {subshell} from
 16153	   within a program (e.g., a mailer or editor).  "Bang foo runs foo in
 16154	   a subshell, while bang alone shells out."
 16155	
 16156	:shift left (or right) logical: [from any of various machines'
 16157	   instruction sets] 1. vi. To move oneself to the left (right).  To
 16158	   move out of the way.  2. imper. "Get out of that (my) seat!  You
 16159	   can shift to that empty one to the left (right)."  Often
 16160	   used without the `logical', or as `left shift' instead of
 16161	   `shift left'.  Sometimes heard as LSH /lish/, from the {PDP-10}
 16162	   instruction set.  See {Programmer's Cheer}.
 16163	
 16164	:shim: n. A small piece of data inserted in order to achieve a
 16165	   desired memory alignment or other addressing property.  For
 16166	   example, the PDP-11 UNIX linker, in split I&D (instructions and
 16167	   data) mode, inserts a two-byte shim at location 0 in data space so
 16168	   that no data object will have an address of 0 (and be confused with
 16169	   the C null pointer). See also {loose bytes}.
 16170	
 16171	:shitogram: /shit'oh-gram/ n. A *really* nasty piece of email.
 16172	   Compare {nastygram}, {flame}.
 16173	
 16174	:short card: n. A half-length IBM PC expansion card or adapter that
 16175	   will fit in one of the two short slots located towards the right
 16176	   rear of a standard chassis (tucked behind the floppy disk drives).
 16177	   See also {tall card}.
 16178	
 16179	:shotgun debugging: n. The software equivalent of {Easter egging};
 16180	   the making of relatively undirected changes to software in the hope
 16181	   that a bug will be perturbed out of existence.  This almost never
 16182	   works, and usually introduces more bugs.
 16183	
 16184	:showstopper: n. A hardware or (especially) software bug that makes
 16185	   an implementation effectively unusable; one that absolutely has to
 16186	   be fixed before development can go on.  Opposite in connotation
 16187	   from its original theatrical use, which refers to something
 16188	   stunningly *good*.
 16189	
 16190	:shriek: n. See {excl}.  Occasional CMU usage, also in common use
 16191	   among APL fans and mathematicians, especially category theorists.
 16192	
 16193	:Shub-Internet: /shuhb in't*r-net/ [MUD: from H. P. Lovecraft's
 16194	   evil fictional deity `Shub-Niggurath', the Black Goat with a
 16195	   Thousand Young] n.  The harsh personification of the Internet,
 16196	   Beast of a Thousand Processes, Eater of Characters, Avatar of Line
 16197	   Noise, and Imp of Call Waiting; the hideous multi-tendriled entity
 16198	   formed of all the manifold connections of the net.  A sect of
 16199	   MUDders worships Shub-Internet, sacrificing objects and praying for
 16200	   good connections.  To no avail --- its purpose is malign and evil,
 16201	   and is the cause of all network slowdown.  Often heard as in
 16202	   "Freela casts a tac nuke at Shub-Internet for slowing her down."
 16203	   (A forged response often follows along the lines of:
 16204	   "Shub-Internet gulps down the tac nuke and burps happily.")  Also
 16205	   cursed by users of {FTP} and {telnet} when the system slows
 16206	   down.  The dread name of Shub-Internet is seldom spoken aloud, as
 16207	   it is said that repeating it three times will cause the being to
 16208	   wake, deep within its lair beneath the Pentagon.
 16209	
 16210	:sidecar: n. 1. Syn. {slap on the side}.  Esp. used of add-ons
 16211	   for the late and unlamented IBM PCjr.  2. The IBM PC compatibility
 16212	   box that could be bolted onto the side of an Amiga.  Designed and
 16213	   produced by Commodore, it broke all of the company's own rules.
 16214	   If it worked with any other peripherals, it was by {magic}.
 16215	
 16216	:SIG: n. The Association for Computing Machinery traditionally
 16217	   sponsors Special Interest Groups in various technical areas;
 16218	   well-known ones include SIGARCH (the Special Interest Group for
 16219	   Computer Architecture) and SIGGRAPH (the Special Interest Group for
 16220	   Computer Graphics).  Hackers, not surprisingly, like to overextend
 16221	   this naming convention to less formal associations like SIGBEER (at
 16222	   ACM conferences) and SIGFOOD (at University of Illinois).
 16223	
 16224	:sig block: /sig blok/ [UNIX; often written `.sig' there] n.
 16225	   Short for `signature', used specifically to refer to the
 16226	   electronic signature block that most UNIX mail- and news-posting
 16227	   software will {automagically} append to outgoing mail and news.
 16228	   The composition of one's sig can be quite an art form, including an
 16229	   ASCII logo or one's choice of witty sayings (see {sig quote},
 16230	   {fool file, the}); but many consider large sigs a waste of
 16231	   {bandwidth}, and it has been observed that the size of one's sig
 16232	   block is usually inversely proportional to one's longevity and
 16233	   level of prestige on the net.
 16234	
 16235	:sig quote: /sig kwoht/ [USENET] n. A maxim, quote, proverb, joke,
 16236	   or slogan embedded in one's {sig block} and intended to convey
 16237	   something of one's philosophical stance, pet peeves, or sense of
 16238	   humor. "Calm down, it's only ones and zeroes."
 16239	
 16240	:sig virus: n. A parasitic {meme} embedded in a {sig block}.
 16241	   There was a {meme plague} or fad for these on USENET in late
 16242	   1991.  Most were equivalents of "I am a .sig virus.  Please reproduce
 16243	   me in your .sig block.".  Of course, the .sig virus's memetic hook
 16244	   is the giggle value of going along with the gag; this, however,
 16245	   was a self-limiting phenomenon as more and more people picked up
 16246	   on the idea.  There were creative variants on it; some people
 16247	   stuck `sig virus antibody' texts in their sigs, and there was at
 16248	   least one instance of a sig virus eater.
 16249	
 16250	:signal-to-noise ratio: [from analog electronics] n. Used by hackers
 16251	   in a generalization of its technical meaning.  `Signal' refers to
 16252	   useful information conveyed by some communications medium, and
 16253	   `noise' to anything else on that medium.  Hence a low ratio implies
 16254	   that it is not worth paying attention to the medium in question.
 16255	   Figures for such metaphorical ratios are never given.  The term is
 16256	   most often applied to {USENET} newsgroups during {flame war}s.
 16257	   Compare {bandwidth}.  See also {coefficient of X}, {lost in
 16258	   the noise}.
 16259	
 16260	:silicon: n. Hardware, esp. ICs or microprocessor-based computer
 16261	   systems (compare {iron}).  Contrasted with software.  See also
 16262	   {sandbender}.
 16263	
 16264	:silicon foundry: n. A company that {fab}s chips to the designs
 16265	   of others.  As of the late 1980s, the combination of silicon
 16266	   foundries and good computer-aided design software made it much
 16267	   easier for hardware-designing startup companies to come into being.
 16268	   The downside of using a silicon foundry is that the distance from
 16269	   the actual chip-fabrication processes reduces designers' control of
 16270	   detail.  This is somewhat analogous to the use of {HLL}s versus
 16271	   coding in assembler.
 16272	
 16273	:silly walk: [from Monty Python's Flying Circus] vi. 1. A ridiculous
 16274	   procedure required to accomplish a task.  Like {grovel}, but more
 16275	   {random} and humorous.  "I had to silly-walk through half the
 16276	   /usr directories to find the maps file."  2. Syn. {fandango on
 16277	   core}.
 16278	
 16279	:silo: n. The FIFO input-character buffer in an RS-232 line card.  So
 16280	   called from DEC terminology used on DH and DZ line cards for the
 16281	   VAX and PDP-11, presumably because it was a storage space for
 16282	   fungible stuff that you put in the top and took out the bottom.
 16283	
 16284	:Silver Book: n. Jensen and Wirth's infamous `Pascal User Manual
 16285	   and Report', so called because of the silver cover of the
 16286	   widely distributed Springer-Verlag second edition of 1978 (ISBN
 16287	   0-387-90144-2).  See {{book titles}}, {Pascal}.
 16288	
 16289	:since time T equals minus infinity: adj. A long time ago; for as
 16290	   long as anyone can remember; at the time that some particular frob
 16291	   was first designed.  Usually the word `time' is omitted.  See also
 16292	   {time T}.
 16293	
 16294	:sitename: /si:t'naym/ [UNIX/Internet] n. The unique electronic
 16295	   name of a computer system, used to identify it in UUCP mail,
 16296	   USENET, or other forms of electronic information interchange.  The
 16297	   folklore interest of sitenames stems from the creativity and humor
 16298	   they often display.  Interpreting a sitename is not unlike
 16299	   interpreting a vanity license plate; one has to mentally unpack it,
 16300	   allowing for mono-case and length restrictions and the lack of
 16301	   whitespace.  Hacker tradition deprecates dull,
 16302	   institutional-sounding names in favor of punchy, humorous, and
 16303	   clever coinages (except that it is considered appropriate for the
 16304	   official public gateway machine of an organization to bear the
 16305	   organization's name or acronym).  Mythological references, cartoon
 16306	   characters, animal names, and allusions to SF or fantasy literature
 16307	   are probably the most popular sources for sitenames (in roughly
 16308	   descending order).  The obligatory comment when discussing these is
 16309	   Harris's Lament: "All the good ones are taken!"  See also
 16310	   {network address}.
 16311	
 16312	:skrog: v. Syn. {scrog}.
 16313	
 16314	:skulker: n. Syn. {prowler}.
 16315	
 16316	:slap on the side: n. (also called a {sidecar}, or abbreviated
 16317	   `SOTS'.)  A type of external expansion hardware marketed by
 16318	   computer manufacturers (e.g., Commodore for the Amiga 500/1000
 16319	   series and IBM for the hideous failure called `PCjr').  Various
 16320	   SOTS boxes provided necessities such as memory, hard drive
 16321	   controllers, and conventional expansion slots.
 16322	
 16323	:slash: n. Common name for the slant (`/', ASCII 0101111)
 16324	   character.  See {ASCII} for other synonyms.
 16325	
 16326	:sleep: vi. 1. [techspeak] On a timesharing system, a process that
 16327	   relinquishes its claim on the scheduler until some given event
 16328	   occurs or a specified time delay elapses is said to `go to
 16329	   sleep'.  2. In jargon, used very similarly to v. {block}; also
 16330	   in `sleep on', syn. with `block on'.  Often used to
 16331	   indicate that the speaker has relinquished a demand for resources
 16332	   until some (possibly unspecified) external event: "They can't get
 16333	   the fix I've been asking for into the next release, so I'm going to
 16334	   sleep on it until the release, then start hassling them again."
 16335	
 16336	:slim: n. A small, derivative change (e.g., to code).
 16337	
 16338	:slop: n. 1. A one-sided {fudge factor}, that is, an allowance for
 16339	   error but in only one of two directions.  For example, if you need
 16340	   a piece of wire 10 feet long and have to guess when you cut it,
 16341	   you make very sure to cut it too long, by a large amount if
 16342	   necessary, rather than too short by even a little bit, because you
 16343	   can always cut off the slop but you can't paste it back on again.
 16344	   When discrete quantities are involved, slop is often introduced to
 16345	   avoid the possibility of being on the losing side of a {fencepost
 16346	   error}.  2. The percentage of `extra' code generated by a compiler
 16347	   over the size of equivalent assembler code produced by
 16348	   {hand-hacking}; i.e., the space (or maybe time) you lose because
 16349	   you didn't do it yourself.  This number is often used as a measure
 16350	   of the goodness of a compiler; slop below 5% is very good, and
 16351	   10% is usually acceptable.  With modern compiler technology, esp.
 16352	   on RISC machines, the compiler's slop may actually be
 16353	   *negative*; that is, humans may be unable to generate code as
 16354	   good.  This is one of the reasons assembler programming is no
 16355	   longer common.
 16356	
 16357	:slopsucker: /slop'suhk-r/ n. A lowest-priority task that must
 16358	   wait around until everything else has `had its fill' of machine
 16359	   resources.  Only when the machine would otherwise be idle is the
 16360	   task allowed to `suck up the slop'.  Also called a `hungry puppy'
 16361	   or `bottom feeder'.  One common variety of slopsucker hunts for
 16362	   large prime numbers.  Compare {background}.
 16363	
 16364	:slurp: vt. To read a large data file entirely into {core} before
 16365	   working on it.  This may be contrasted with the strategy of reading
 16366	   a small piece at a time, processing it, and then reading the next
 16367	   piece.  "This program slurps in a 1K-by-1K matrix and does
 16368	   an FFT."  See also {sponge}.
 16369	
 16370	:smart: adj. Said of a program that does the {Right Thing} in a
 16371	   wide variety of complicated circumstances.  There is a difference
 16372	   between calling a program smart and calling it intelligent; in
 16373	   particular, there do not exist any intelligent programs (yet ---
 16374	   see {AI-complete}).  Compare {robust} (smart programs can be
 16375	   {brittle}).
 16376	
 16377	:smart terminal: n. 1. A terminal that has enough computing capability
 16378	   to render graphics or to offload some kind of front-end processing
 16379	   from the computer it talks to.  The development of workstations and
 16380	   personal computers has made this term and the product it describes
 16381	   semi-obsolescent, but one may still hear variants of the phrase
 16382	   `act like a smart terminal' used to describe the behavior of
 16383	   workstations or PCs with respect to programs that execute almost
 16384	   entirely out of a remote {server}'s storage, using said devices
 16385	   as displays.  Compare {glass tty}.  2. obs. Any terminal with an
 16386	   addressable cursor; the opposite of a {glass tty}.  Today, a
 16387	   terminal with merely an addressable cursor, but with none of the
 16388	   more-powerful features mentioned in sense 1, is called a {dumb
 16389	   terminal}.
 16390	
 16391	   There is a classic quote from Rob Pike (inventor of the {blit}
 16392	   terminal): "A smart terminal is not a smart*ass* terminal,
 16393	   but rather a terminal you can educate."  This illustrates a common
 16394	   design problem: The attempt to make peripherals (or anything else)
 16395	   intelligent sometimes results in finicky, rigid `special
 16396	   features' that become just so much dead weight if you try to use
 16397	   the device in any way the designer didn't anticipate.  Flexibility
 16398	   and programmability, on the other hand, are *really* smart.
 16399	   Compare {hook}.
 16400	
 16401	:smash case: vi. To lose or obliterate the uppercase/lowercase
 16402	   distinction in text input.  "MS-DOS will automatically smash case
 16403	   in the names of all the files you create."  Compare {fold case}.
 16404	
 16405	:smash the stack: [C programming] n. On many C implementations it
 16406	   is possible to corrupt the execution stack by writing past the end
 16407	   of an array declared `auto' in a routine.  Code that does this
 16408	   is said to `smash the stack', and can cause return from the
 16409	   routine to jump to a random address.  This can produce some of the
 16410	   most insidious data-dependent bugs known to mankind.  Variants
 16411	   include `trash' the stack, {scribble} the stack, {mangle}
 16412	   the stack; the term *{mung} the stack is not used, as this is
 16413	   never done intentionally.  See {spam}; see also {aliasing
 16414	   bug}, {fandango on core}, {memory leak}, {memory smash},
 16415	   {precedence lossage}, {overrun screw}.
 16416	
 16417	:smiley: n. See {emoticon}.
 16418	
 16419	:smoke and mirrors: n. Marketing deceptions.  The term is
 16420	   mainstream in this general sense.  Among hackers it's strongly
 16421	   associated with bogus demos and crocked {benchmark}s (see also
 16422	   {MIPS}, {machoflops}).  "They claim their new box cranks 5
 16423	   MIPS for under $5000, but didn't specify the instruction mix ---
 16424	   sounds like smoke and mirrors to me."  The phrase has been said to
 16425	   derive from carnie slang for magic acts and `freak show' displays
 16426	   that depend on `trompe l'oeil' effects, but also calls to mind
 16427	   the fierce Aztec god Tezcatlipoca (lit. "Smoking Mirror") to whom
 16428	   mass human sacrifices were regularly made.  Upon hearing about a
 16429	   rigged demo or yet another round of fantasy-based marketing
 16430	   promises hackers often feel similarly disheartened.
 16431	
 16432	:smoke test: n. 1. A rudimentary form of testing applied to
 16433	   electronic equipment following repair or reconfiguration, in which
 16434	   power is applied and the tester checks for sparks, smoke, or other
 16435	   dramatic signs of fundamental failure.  See {magic smoke}.
 16436	   2. By extension, the first run of a piece of software after
 16437	   construction or a critical change.  See and compare {reality
 16438	   check}.
 16439	
 16440	   There is an interesting semi-parallel to this term among
 16441	   typographers and printers: When new typefaces are being punch-cut by
 16442	   hand, a `smoke test' (hold the letter in candle smoke, then press
 16443	   it onto paper) is used to check out new dies.
 16444	
 16445	:smoking clover: [ITS] n. A {display hack} originally due to
 16446	   Bill Gosper.  Many convergent lines are drawn on a color monitor in
 16447	   {AOS} mode (so that every pixel struck has its color
 16448	   incremented).  The lines all have one endpoint in the middle of the
 16449	   screen; the other endpoints are spaced one pixel apart around the
 16450	   perimeter of a large square.  The color map is then repeatedly
 16451	   rotated.  This results in a striking, rainbow-hued, shimmering
 16452	   four-leaf clover.  Gosper joked about keeping it hidden from the
 16453	   FDA (the U.S.'s Food and Drug Administration) lest its
 16454	   hallucinogenic properties cause it to be banned.
 16455	
 16456	:SMOP: /S-M-O-P/ [Simple (or Small) Matter of Programming] n.
 16457	   1. A piece of code, not yet written, whose anticipated length is
 16458	   significantly greater than its complexity.  Used to refer to a
 16459	   program that could obviously be written, but is not worth the
 16460	   trouble.  Also used ironically to imply that a difficult problem
 16461	   can be easily solved because a program can be written to do it; the
 16462	   irony is that it is very clear that writing such a program will be
 16463	   a great deal of work.  "It's easy to enhance a FORTRAN compiler to
 16464	   compile COBOL as well; it's just a SMOP."  2. Often used
 16465	   ironically by the intended victim when a suggestion for a program
 16466	   is made which seems easy to the suggester, but is obviously (to the
 16467	   victim) a lot of work.
 16468	
 16469	:smurf: /smerf/ [from the soc.motss newsgroup on USENET,
 16470	   after some obnoxiously gooey cartoon characters] n.  A newsgroup
 16471	   regular with a habitual style that is irreverent, silly, and
 16472	   cute.  Like many other hackish terms for people, this one may
 16473	   be praise or insult depending on who uses it.  In general, being
 16474	   referred to as a smurf is probably not going to make your day
 16475	   unless you've previously adopted the label yourself in a spirit of
 16476	   irony.  Compare {old fart}.
 16477	
 16478	:SNAFU principle: /sna'foo prin'si-pl/ [from WWII Army acronym
 16479	   for `Situation Normal, All Fucked Up'] n. "True communication is
 16480	   possible only between equals, because inferiors are more
 16481	   consistently rewarded for telling their superiors pleasant lies
 16482	   than for telling the truth." --- a central tenet of
 16483	   {Discordianism}, often invoked by hackers to explain why
 16484	   authoritarian hierarchies screw up so reliably and systematically.
 16485	   The effect of the SNAFU principle is a progressive disconnection of
 16486	   decision-makers from reality.  This lightly adapted version of a
 16487	   fable dating back to the early 1960s illustrates the phenomenon
 16488	   perfectly:
 16489	
 16490	     In the beginning was the plan,
 16491	            and then the specification;
 16492	     And the plan was without form,
 16493	            and the specification was void.
 16494	
 16495	     And darkness
 16496	            was on the faces of the implementors thereof;
 16497	     And they spake unto their leader,
 16498	            saying:
 16499	     "It is a crock of shit,
 16500	            and smells as of a sewer."
 16501	
 16502	     And the leader took pity on them,
 16503	            and spoke to the project leader:
 16504	     "It is a crock of excrement,
 16505	            and none may abide the odor thereof."
 16506	
 16507	     And the project leader
 16508	            spake unto his section head, saying:
 16509	     "It is a container of excrement,
 16510	            and it is very strong, such that none may abide it."
 16511	
 16512	     The section head then hurried to his department manager,
 16513	            and informed him thus:
 16514	     "It is a vessel of fertilizer,
 16515	            and none may abide its strength."
 16516	
 16517	     The department manager carried these words
 16518	           to his general manager,
 16519	     and spoke unto him
 16520	           saying:
 16521	     "It containeth that which aideth the growth of plants,
 16522	           and it is very strong."
 16523	
 16524	     And so it was that the general manager rejoiced
 16525	           and delivered the good news unto the Vice President.
 16526	     "It promoteth growth,
 16527	           and it is very powerful."
 16528	
 16529	     The Vice President rushed to the President's side,
 16530	           and joyously exclaimed:
 16531	     "This powerful new software product
 16532	           will promote the growth of the company!"
 16533	
 16534	     And the President looked upon the product,
 16535	           and saw that it was very good.
 16536	
 16537	   After the subsequent disaster, the {suit}s protect themselves by
 16538	   saying "I was misinformed!", and the implementors are demoted or
 16539	   fired.
 16540	
 16541	:snail: vt. To {snail-mail} something. "Snail me a copy of those
 16542	   graphics, will you?"
 16543	
 16544	:snail-mail: n. Paper mail, as opposed to electronic.  Sometimes
 16545	   written as the single word `SnailMail'.  One's postal address is,
 16546	   correspondingly, a `snail address'.  Derives from earlier coinage
 16547	   `USnail' (from `U.S. Mail'), for which there have been
 16548	   parody posters and stamps made.  Oppose {email}.
 16549	
 16550	:snap: v. To replace a pointer to a pointer with a direct pointer;
 16551	   to replace an old address with the forwarding address found there.
 16552	   If you telephone the main number for an institution and ask for a
 16553	   particular person by name, the operator may tell you that person's
 16554	   extension before connecting you, in the hopes that you will `snap
 16555	   your pointer' and dial direct next time.  The underlying metaphor
 16556	   may be that of a rubber band stretched through a number of
 16557	   intermediate points; if you remove all the thumbtacks in the
 16558	   middle, it snaps into a straight line from first to last.  See
 16559	   {chase pointers}.
 16560	
 16561	   Often, the behavior of a {trampoline} is to perform an error
 16562	   check once and then snap the pointer that invoked it so as
 16563	   henceforth to bypass the trampoline (and its one-shot error check).
 16564	   In this context one also speaks of `snapping links'.  For
 16565	   example, in a Lisp implementation, a function interface trampoline
 16566	   might check to make sure that the caller is passing the correct
 16567	   number of arguments; if it is, and if the caller and the callee are
 16568	   both compiled, then snapping the link allows that particular path
 16569	   to use a direct procedure-call instruction with no further
 16570	   overhead.
 16571	
 16572	:snarf: /snarf/ vt. 1. To grab, esp. to grab a large document
 16573	   or file for the purpose of using it with or without the author's
 16574	   permission.  See also {BLT}.  2. [in the UNIX community] To
 16575	   fetch a file or set of files across a network.  See also
 16576	   {blast}.  This term was mainstream in the late 1960s, meaning
 16577	   `to eat piggishly'.  It may still have this connotation in context.
 16578	   "He's in the snarfing phase of hacking --- {FTP}ing megs of
 16579	   stuff a day."  3. To acquire, with little concern for legal forms
 16580	   or politesse (but not quite by stealing).  "They were giving
 16581	   away samples, so I snarfed a bunch of them."  4. Syn. for
 16582	   {slurp}.  "This program starts by snarfing the entire database
 16583	   into core, then...."
 16584	
 16585	:snarf & barf: /snarf'n-barf`/ n. Under a {WIMP environment},
 16586	   the act of grabbing a region of text and then stuffing the contents
 16587	   of that region into another region (or the same one) to avoid
 16588	   retyping a command line.  In the late 1960s, this was a mainstream
 16589	   expression for an `eat now, regret it later' cheap-restaurant
 16590	   expedition.
 16591	
 16592	:snarf down: v. To {snarf}, with the connotation of absorbing,
 16593	   processing, or understanding.  "I'll  snarf down the latest
 16594	   version of the {nethack} user's guide --- It's been a while
 16595	   since I played last and I don't know what's changed recently."
 16596	
 16597	:snark: [Lewis Carroll, via the Michigan Terminal System] n. 1. A
 16598	   system failure.  When a user's process bombed, the operator would
 16599	   get the message "Help, Help, Snark in MTS!"  2. More generally,
 16600	   any kind of unexplained or threatening event on a computer
 16601	   (especially if it might be a boojum).  Often used to refer to an
 16602	   event or a log file entry that might indicate an attempted security
 16603	   violation.  See {snivitz}.  3. UUCP name of
 16604	   snark.thyrsus.com, home site of the Jargon File 2.*.* versions
 16605	   (i.e., this lexicon).
 16606	
 16607	:sneakernet: /snee'ker-net/ n. Term used (generally with ironic
 16608	   intent) for transfer of electronic information by physically
 16609	   carrying tape, disks, or some other media from one machine to
 16610	   another.  "Never underestimate the bandwidth of a station wagon
 16611	   filled with magtape, or a 747 filled with CD-ROMs."  Also called
 16612	   `Tennis-Net', `Armpit-Net', `Floppy-Net' or `Shoenet'.
 16613	
 16614	:sniff: v.,n. Synonym for {poll}.
 16615	
 16616	:snivitz: /sniv'itz/ n. A hiccup in hardware or software; a small,
 16617	   transient problem of unknown origin (less serious than a
 16618	   {snark}).  Compare {glitch}.
 16619	
 16620	:SO: /S-O/ n. 1. (also `S.O.') Abbrev. for Significant
 16621	   Other, almost invariably written abbreviated and pronounced
 16622	   /S-O/ by hackers.  Used to refer to one's primary
 16623	   relationship, esp. a live-in to whom one is not married.  See
 16624	   {MOTAS}, {MOTOS}, {MOTSS}.  2. The Shift Out control
 16625	   character in ASCII (Control-N, 0001110).
 16626	
 16627	:social engineering: n. Term used among {cracker}s and
 16628	   {samurai} for cracking techniques that rely on weaknesses in
 16629	   {wetware} rather than software; the aim is to trick people into
 16630	   revealing passwords or other information that compromises a target
 16631	   system's security.  Classic scams include phoning up a mark who has
 16632	   the required information and posing as a field service tech or a
 16633	   fellow employee with an urgent access problem.  See also the
 16634	   {tiger team} story in the {patch} entry.
 16635	
 16636	:social science number: [IBM] n. A statistic that is
 16637	   {content-free}, or nearly so.  A measure derived via methods of
 16638	   questionable validity from data of a dubious and vague nature.
 16639	   Predictively, having a social science number in hand is seldom much
 16640	   better than nothing, and can be considerably worse.  {Management}
 16641	   loves them.  See also {numbers}, {math-out}, {pretty
 16642	   pictures}.
 16643	
 16644	:soft boot: n. See {boot}.
 16645	
 16646	:softcopy: /soft'ko-pee/ n. [by analogy with `hardcopy'] A
 16647	   machine-readable form of corresponding hardcopy.  See {bits},
 16648	   {machinable}.
 16649	
 16650	:software bloat: n. The results of {second-system effect} or
 16651	   {creeping featuritis}.  Commonly cited examples include
 16652	   `ls(1)', {X}, {BSD}, {Missed'em-five}, and {OS/2}.
 16653	
 16654	:software rot: n. Term used to describe the tendency of software
 16655	   that has not been used in a while to {lose}; such failure may be
 16656	   semi-humorously ascribed to {bit rot}.  More commonly,
 16657	   `software rot' strikes when a program's assumptions become out
 16658	   of date.  If the design was insufficiently {robust}, this may
 16659	   cause it to fail in mysterious ways.
 16660	
 16661	   For example, owing to endemic shortsightedness in the design of
 16662	   COBOL programs, most will succumb to software rot when their
 16663	   2-digit year counters {wrap around} at the beginning of the
 16664	   year 2000.  Actually, related lossages often afflict centenarians
 16665	   who have to deal with computer software designed by unimaginative
 16666	   clods.  One such incident became the focus of a minor public flap
 16667	   in 1990, when a gentleman born in 1889 applied for a driver's
 16668	   license renewal in Raleigh, North Carolina.  The new system
 16669	   refused to issue the card, probably because with 2-digit years the
 16670	   ages 101 and 1 cannot be distinguished.
 16671	
 16672	   Historical note: Software rot in an even funnier sense than the
 16673	   mythical one was a real problem on early research computers (e.g.,
 16674	   the R1; see {grind crank}).  If a program that depended on a
 16675	   peculiar instruction hadn't been run in quite a while, the user
 16676	   might discover that the opcodes no longer did the same things they
 16677	   once did.  ("Hey, so-and-so needs an instruction to do
 16678	   such-and-such.  We can {snarf} this opcode, right?  No one uses
 16679	   it.")
 16680	
 16681	   Another classic example of this sprang from the time an MIT hacker
 16682	   found a simple way to double the speed of the unconditional jump
 16683	   instruction on a PDP-6, so he patched the hardware.  Unfortunately,
 16684	   this broke some fragile timing software in a music-playing program,
 16685	   throwing its output out of tune.  This was fixed by adding a
 16686	   defensive initialization routine to compare the speed of a timing
 16687	   loop with the real-time clock; in other words, it figured out how
 16688	   fast the PDP-6 was that day, and corrected appropriately.
 16689	
 16690	   Compare {bit rot}.
 16691	
 16692	:softwarily: /soft-weir'i-lee/ adv. In a way pertaining to software.
 16693	   "The system is softwarily unreliable."  The adjective
 16694	   `softwary' is *not* used.  See {hardwarily}.
 16695	
 16696	:softy: [IBM] n. Hardware hackers' term for a software expert who
 16697	   is largely ignorant of the mysteries of hardware.
 16698	
 16699	:some random X: adj. Used to indicate a member of class X, with the
 16700	   implication that Xs are interchangeable.  "I think some random
 16701	   cracker tripped over the guest timeout last night."  See also
 16702	   {J. Random}.
 16703	
 16704	:sorcerer's apprentice mode: [from Friedrich Schiller's `Der
 16705	   Zauberlehrling' via the film "Fantasia"] n. A bug in a
 16706	   protocol where, under some circumstances, the receipt of a message
 16707	   causes multiple messages to be sent, each of which, when received,
 16708	   triggers the same bug.  Used esp. of such behavior caused by
 16709	   {bounce message} loops in {email} software.  Compare
 16710	   {broadcast storm}, {network meltdown}.
 16711	
 16712	:SOS: n.,obs. /S-O-S/ 1. An infamously {losing} text editor.
 16713	   Once, back in the 1960s, when a text editor was needed for the
 16714	   PDP-6, a hacker crufted together a {quick-and-dirty} `stopgap
 16715	   editor' to be used until a better one was written.  Unfortunately,
 16716	   the old one was never really discarded when new ones (in
 16717	   particular, {TECO}) came along.  SOS is a descendant (`Son of
 16718	   Stopgap') of that editor, and many PDP-10 users gained the dubious
 16719	   pleasure of its acquaintance.  Since then other programs similar in
 16720	   style to SOS have been written, notably the early font editor BILOS
 16721	   /bye'lohs/, the Brother-In-Law Of Stopgap (the alternate expansion
 16722	   `Bastard Issue, Loins of Stopgap' has been proposed).  2. /sos/
 16723	   n. To decrease; inverse of {AOS}, from the PDP-10 instruction
 16724	   set.
 16725	
 16726	:source of all good bits: n. A person from whom (or a place from
 16727	   which) useful information may be obtained.  If you need to know
 16728	   about a program, a {guru} might be the source of all good bits.
 16729	   The title is often applied to a particularly competent secretary.
 16730	
 16731	:space-cadet keyboard: n. A now-legendary device used on MIT LISP
 16732	   machines, which inspired several still-current jargon terms and
 16733	   influenced the design of {EMACS}.  It was equipped with no
 16734	   fewer than *seven* shift keys: four keys for {bucky bits}
 16735	   (`control', `meta', `hyper', and `super') and three like
 16736	   regular shift keys, called `shift', `top', and `front'.  Many
 16737	   keys had three symbols on them: a letter and a symbol on the top,
 16738	   and a Greek letter on the front.  For example, the `L' key had an
 16739	   `L' and a two-way arrow on the top, and the Greek letter lambda on
 16740	   the front.  By pressing this key with the right hand while playing
 16741	   an appropriate `chord' with the left hand on the shift keys, you
 16742	   can get the following results:
 16743	
 16744	     L               
 16745	          lowercase l
 16746	
 16747	     shift-L         
 16748	          uppercase L
 16749	
 16750	     front-L         
 16751	          lowercase lambda
 16752	
 16753	     front-shift-L   
 16754	          uppercase lambda
 16755	
 16756	     top-L           
 16757	          two-way arrow
 16758	          (front and shift are ignored)
 16759	
 16760	   And of course each of these might also be typed with any
 16761	   combination of the control, meta, hyper, and super keys.  On this
 16762	   keyboard, you could type over 8000 different characters!  This
 16763	   allowed the user to type very complicated mathematical text, and
 16764	   also to have thousands of single-character commands at his
 16765	   disposal.  Many hackers were actually willing to memorize the
 16766	   command meanings of that many characters if it reduced typing time
 16767	   (this attitude obviously shaped the interface of EMACS).  Other
 16768	   hackers, however, thought having that many bucky bits was overkill,
 16769	   and objected that such a keyboard can require three or four hands
 16770	   to operate.  See {bucky bits}, {cokebottle}, {double bucky},
 16771	   {meta bit}, {quadruple bucky}.
 16772	
 16773	   Note: early versions of this entry incorrectly identified the
 16774	   space-cadet keyboard with the `Knight keyboard'.  Though both
 16775	   were designed by Tom Knight, the latter term was properly applied
 16776	   only to a keyboard used for ITS on the PDP-10 and modeled 
 16777	   on the Stanford keyboard (as described under {bucky bits}).  The
 16778	   true space-cadet keyboard evolved from the Knight keyboard.
 16779	
 16780	:SPACEWAR: n. A space-combat simulation game, inspired by
 16781	   E. E. "Doc" Smith's "Lensman" books, in which two spaceships
 16782	   duel around a central sun, shooting torpedoes at each other and
 16783	   jumping through hyperspace.  This game was first implemented on the
 16784	   PDP-1 at MIT in 1960--61.  SPACEWAR aficionados formed the core of
 16785	   the early hacker culture at MIT.  Nine years later, a descendant
 16786	   of the game motivated Ken Thompson to build, in his spare time on a
 16787	   scavenged PDP-7, the operating system that became {{UNIX}}.  Less
 16788	   than nine years after that, SPACEWAR was commercialized as one of
 16789	   the first video games; descendants are still {feep}ing in video
 16790	   arcades everywhere.
 16791	
 16792	:spaghetti code: n. Code with a complex and tangled control
 16793	   structure, esp. one using many GOTOs, exceptions, or other
 16794	   `unstructured' branching constructs.  Pejorative.  The synonym
 16795	   `kangaroo code' has been reported, doubtless because such code
 16796	   has many jumps in it.
 16797	
 16798	:spaghetti inheritance: n. [encountered among users of object-oriented
 16799	   languages that use inheritance, such as Smalltalk] A convoluted
 16800	   class-subclass graph, often resulting from carelessly deriving
 16801	   subclasses from other classes just for the sake of reusing their
 16802	   code.  Coined in a (successful) attempt to discourage such
 16803	   practice, through guilt-by-association with {spaghetti code}.
 16804	
 16805	:spam: [from the {MUD} community] vt. To crash a program by overrunning
 16806	   a fixed-size buffer with excessively large input data.  See also
 16807	   {buffer overflow}, {overrun screw}, {smash the stack}.
 16808	
 16809	:special-case: vt. To write unique code to handle input to or
 16810	   situations arising in program that are somehow distinguished from
 16811	   normal processing.  This would be used for processing of mode
 16812	   switches or interrupt characters in an interactive interface (as
 16813	   opposed, say, to text entry or normal commands), or for processing
 16814	   of {hidden flag}s in the input of a batch program or {filter}.
 16815	
 16816	:speedometer: n. A pattern of lights displayed on a linear set of
 16817	   LEDs (today) or nixie tubes (yesterday, on ancient mainframes).
 16818	   The pattern is shifted left every N times the software goes
 16819	   through its main loop.  A swiftly moving pattern indicates that the
 16820	   system is mostly idle; the speedometer slows down as the system
 16821	   becomes overloaded.  The speedometer on Sun Microsystems hardware
 16822	   bounces back and forth like the eyes on one of the Cylons from the
 16823	   wretched "Battlestar Galactica" TV series.
 16824	
 16825	   Historical note: One computer, the Honeywell 6000 (later GE 600)
 16826	   actually had an *analog* speedometer on the front panel,
 16827	   calibrated in instructions executed per second.
 16828	
 16829	:spell: n. Syn. {incantation}.
 16830	
 16831	:spiffy: /spi'fee/ adj. 1. Said of programs having a pretty,
 16832	   clever, or exceptionally well-designed interface. "Have you seen
 16833	   the spiffy {X} version of {empire} yet?"  2. Said
 16834	   sarcastically of a program that is perceived to have little more
 16835	   than a flashy interface going for it.  Which meaning should be
 16836	   drawn depends delicately on tone of voice and context.  This word
 16837	   was common mainstream slang during the 1940s, in a sense close to #1.
 16838	
 16839	:spike: v. To defeat a selection mechanism by introducing a
 16840	   (sometimes temporary) device which forces a specific result.  The
 16841	   word is used in several industries; telephone engineers refer to
 16842	   spiking a relay by inserting a pin to hold the relay in either the
 16843	   closed or open state, and railroaders refer to spiking a
 16844	   track switch so that it cannot be moved.  In programming
 16845	   environments it normally refers to a temporary change, usually for
 16846	   testing purposes (as opposed to a permanent change which would be
 16847	   called {hardwired}).
 16848	
 16849	:spin: vi. Equivalent to {buzz}.  More common among C and UNIX
 16850	   programmers.
 16851	
 16852	:spl: /S-P-L/ [abbrev, from Set Priority Level] The way
 16853	   traditional UNIX kernels implement mutual exclusion by running code
 16854	   at high interrupt levels.  Used in jargon to describe the act of
 16855	   tuning in or tuning out ordinary communication.  Classically, spl
 16856	   levels run from 1 to 7; "Fred's at spl 6 today." would mean
 16857	   that he is very hard to interrupt.  "Wait till I finish this; I'll
 16858	   spl down then."  See also {interrupts locked out}.
 16859	
 16860	:splat: n. 1. Name used in many places (DEC, IBM, and others) for
 16861	   the asterisk (`*') character (ASCII 0101010).  This may derive
 16862	   from the `squashed-bug' appearance of the asterisk on many early
 16863	   line printers.  2. [MIT] Name used by some people for the
 16864	   `#' character (ASCII 0100011).  3. [Rochester Institute of
 16865	   Technology] The {feature key} on a Mac (same as {alt},
 16866	   sense 2).  4. [Stanford] Name used by some people for the
 16867	   Stanford/ITS extended ASCII
 16868	   circle-x
 16869	   character.  This character is also called `blobby' and `frob',
 16870	   among other names; it is sometimes used by mathematicians as a
 16871	   notation for `tensor product'.  5. [Stanford] Name for the
 16872	   semi-mythical extended ASCII
 16873	   circle-plus
 16874	   character.  6. Canonical name for an output routine that outputs
 16875	   whatever the local interpretation of `splat' is.
 16876	
 16877	   With ITS and WAITS gone, senses 4--6 are now nearly obsolete.  See
 16878	   also {{ASCII}}.
 16879	
 16880	:spod: [Great Britain] n. A lower form of life found on {talker
 16881	   system}s and {MUD}s.  The spod has few friends in {RL} and
 16882	   uses talkers instead, finding communication easier and preferable
 16883	   over the net.  He has all the negative traits of the {computer
 16884	   geek} without having any interest in computers per se.  Lacking any
 16885	   knowledge of or interest in how networks work, and considering his
 16886	   access a God-given right, he is a major irritant to sysadmins,
 16887	   clogging up lines in order to reach new MUDs, following passed-on
 16888	   instructions on how to sneak his way onto Internet ("Wow!  It's in
 16889	   America!") and complaining when he is not allowed to use busy
 16890	   routes.  A true spod will start any conversation with "Are you
 16891	   male or female?" (and follow it up with "Got any good
 16892	   numbers/IDs/passwords?") and will not talk to someone physically
 16893	   present in the same terminal room until they log onto the same
 16894	   machine that he is using and enter talk mode.  Compare {newbie},
 16895	   {tourist}, {weenie}, {twink}, {terminal junkie}.
 16896	   
 16897	
 16898	:sponge: [UNIX] n. A special case of a {filter} that reads its
 16899	   entire input before writing any output; the canonical example is a
 16900	   sort utility.  Unlike most filters, a sponge can conveniently
 16901	   overwrite the input file with the output data stream.  If your file
 16902	   system has versioning (as ITS did and VMS does now) the
 16903	   sponge/filter distinction loses its usefulness, because directing
 16904	   filter output would just write a new version.  See also {slurp}.
 16905	
 16906	:spooge: /spooj/ 1. n. Inexplicable or arcane code, or random
 16907	   and probably incorrect output from a computer program.  2. vi. To
 16908	   generate spooge (sense 1).
 16909	
 16910	:spool: [from early IBM `Simultaneous Peripheral Operation
 16911	   On-Line', but this acronym is widely thought to have been contrived
 16912	   for effect] vt. To send files to some device or program (a
 16913	   `spooler') that queues them up and does something useful with
 16914	   them later.  The spooler usually understood is the `print
 16915	   spooler' controlling output of jobs to a printer, but the term has
 16916	   been used in connection with other peripherals (especially plotters
 16917	   and graphics devices) and occasionally even for input devices.  See
 16918	   also {demon}.
 16919	
 16920	:spool file: n. Any file to which data is {spool}ed to await the
 16921	   next stage of processing.  Especially used in circumstances where
 16922	   spooling the data copes with a mismatch between speeds in two
 16923	   devices or pieces of software.  For example, when you send mail
 16924	   under UNIX, it's typically copied to a spool file to await a
 16925	   transport {demon}'s attentions.  This is borderline techspeak.
 16926	
 16927	:square tape: n. Mainframe magnetic tape cartridges for use with IBM 3480
 16928	   or compatible tape drives.  The term comes from the square (actually
 16929	   rectangular) shape of the cartridges; contrast {round tape}.
 16930	
 16931	:stack: n. A person's stack is the set of things he or she has to do
 16932	   in the future.  One speaks of the next project to be attacked as
 16933	   having risen to the top of the stack.  "I'm afraid I've got real
 16934	   work to do, so this'll have to be pushed way down on my stack."
 16935	   "I haven't done it yet because every time I pop my stack something
 16936	   new gets pushed."  If you are interrupted several times in the
 16937	   middle of a conversation, "My stack overflowed" means "I
 16938	   forget what we were talking about."  The implication is that more
 16939	   items were pushed onto the stack than could be remembered, so the
 16940	   least recent items were lost.  The usual physical example of a
 16941	   stack is to be found in a cafeteria: a pile of plates or trays
 16942	   sitting on a spring in a well, so that when you put one on the top
 16943	   they all sink down, and when you take one off the top the rest
 16944	   spring up a bit.  See also {push} and {pop}.
 16945	
 16946	   At MIT, {pdl} used to be a more common synonym for {stack} in
 16947	   all these contexts, and this may still be true.  Everywhere else
 16948	   {stack} seems to be the preferred term.  {Knuth}
 16949	   (`The Art of Computer Programming', second edition, vol. 1,
 16950	   p. 236) says:
 16951	
 16952	        Many people who realized the importance of stacks and queues
 16953	        independently have given other names to these structures:
 16954	        stacks have been called push-down lists, reversion storages,
 16955	        cellars, nesting stores, piles, last-in-first-out ("LIFO")
 16956	        lists, and even yo-yo lists!
 16957	
 16958	:stack puke: n. Some processor architectures are said to `puke their
 16959	   guts onto the stack' to save their internal state during exception
 16960	   processing.  The Motorola 68020, for example, regurgitates up to
 16961	   92 bytes on a bus fault.  On a pipelined machine, this can take a
 16962	   while.
 16963	
 16964	:stale pointer bug: n. Synonym for {aliasing bug} used esp. among
 16965	   microcomputer hackers.
 16966	
 16967	:state: n. 1. Condition, situation.  "What's the state of your
 16968	   latest hack?"  "It's winning away."  "The system tried to read
 16969	   and write the disk simultaneously and got into a totally wedged
 16970	   state."  The standard question "What's your state?"  means
 16971	   "What are you doing?" or "What are you about to do?"  Typical
 16972	   answers are "about to gronk out", or "hungry".  Another
 16973	   standard question is "What's the state of the world?", meaning
 16974	   "What's new?" or "What's going on?".  The more terse and
 16975	   humorous way of asking these questions would be "State-p?".
 16976	   Another way of phrasing the first question under sense 1 would be
 16977	   "state-p latest hack?".  2. Information being maintained in
 16978	   non-permanent memory (electronic or human).
 16979	
 16980	:steam-powered: adj. Old-fashioned or underpowered; archaic.  This
 16981	   term does not have a strong negative loading and may even be used
 16982	   semi-affectionately for something that clanks and wheezes a lot
 16983	   but hangs in there doing the job.
 16984	
 16985	:stiffy: [University of Lowell, Massachusetts.] n. 3.5-inch
 16986	   {microfloppies}, so called because their jackets are more firm
 16987	   than those of the 5.25-inch and the 8-inch floppy.  Elsewhere this
 16988	   might be called a `firmy'.
 16989	
 16990	:stir-fried random: alt. `stir-fried mumble' n. Term used for the 
 16991	   best dish of many of those hackers who can cook.  Consists of
 16992	   random fresh veggies and meat wokked with random spices.  Tasty and
 16993	   economical.  See {random}, {great-wall}, {ravs}, {{laser
 16994	   chicken}}, {{oriental food}}; see also {mumble}.
 16995	
 16996	:stomp on: vt. To inadvertently overwrite something important, usually
 16997	   automatically.  "All the work I did this weekend got
 16998	   stomped on last night by the nightly server script."  Compare
 16999	   {scribble}, {mangle}, {trash}, {scrog}, {roach}.
 17000	
 17001	:Stone Age: n., adj. 1. In computer folklore, an ill-defined period
 17002	   from ENIAC (ca. 1943) to the mid-1950s; the great age of
 17003	   electromechanical {dinosaur}s.  Sometimes used for the entire
 17004	   period up to 1960--61 (see {Iron Age}); however, it is funnier
 17005	   and more descriptive to characterize the latter period in terms of
 17006	   a `Bronze Age' era of transistor-logic, pre-ferrite-{core}
 17007	   machines with drum or CRT mass storage (as opposed to just mercury
 17008	   delay lines and/or relays).  See also {Iron Age}.  2. More
 17009	   generally, a pejorative for any crufty, ancient piece of hardware
 17010	   or software technology.  Note that this is used even by people who
 17011	   were there for the {Stone Age} (sense 1).
 17012	
 17013	:stone knives and bearskins: [ITS, prob. from the Star Trek Classic
 17014	   episode "The City on the Edge of Forever"] n. A term traditionally
 17015	   used by {ITS} fans to describe (and deprecate) computing
 17016	   environments they regard as less advanced, with the (often
 17017	   correct) implication that said environments were grotesquely
 17018	   primitive in light of what is known about good ways to design
 17019	   things.  As in "Don't get too used to the facilities here.  Once
 17020	   you leave MIT it's stone knives and bearskins as far as the eye can
 17021	   see".  Compare {steam-powered}.
 17022	
 17023	:stoppage: /sto'p*j/ n. Extreme {lossage} that renders
 17024	   something (usually something vital) completely unusable.  "The
 17025	   recent system stoppage was caused by a {fried} transformer."
 17026	
 17027	:store: [prob. from techspeak `main store'] n. Preferred Commonwealth
 17028	   synonym for {core}.  Thus, `bringing a program into store' means
 17029	   not that one is returning shrink-wrapped software but that a
 17030	   program is being {swap}ped in.
 17031	
 17032	:stroke: n. Common name for the slant (`/', ASCII 0101111)
 17033	   character.  See {ASCII} for other synonyms.
 17034	
 17035	:strudel: n. Common (spoken) name for the at-sign (`@', ASCII
 17036	   1000000) character.  See {ASCII} for other synonyms.
 17037	
 17038	:stubroutine: /stuhb'roo-teen/ [contraction of `stub
 17039	   subroutine'] n.  Tiny, often vacuous placeholder for a subroutine
 17040	   that is to be written or fleshed out later.
 17041	
 17042	:studlycaps: /stuhd'lee-kaps/ n. A hackish form of silliness
 17043	   similar to {BiCapitalization} for trademarks, but applied
 17044	   randomly and to arbitrary text rather than to trademarks.  ThE
 17045	   oRigiN and SigNificaNce of thIs pRacTicE iS oBscuRe.
 17046	
 17047	:stunning: adj. Mind-bogglingly stupid.  Usually used in sarcasm.
 17048	   "You want to code *what* in ADA?  That's ... a stunning
 17049	   idea!"
 17050	
 17051	:stupid-sort: n. Syn. {bogo-sort}.
 17052	
 17053	:Stupids: n. Term used by {samurai} for the {suit}s who
 17054	   employ them; succinctly expresses an attitude at least as common,
 17055	   though usually better disguised, among other subcultures of
 17056	   hackers.  There may be intended reference here to an SF story
 17057	   originally published in 1952 but much anthologized since, Mark
 17058	   Clifton's `Star, Bright'.  In it, a super-genius child
 17059	   classifies humans into a very few `Brights' like herself, a huge
 17060	   majority of `Stupids', and a minority of `Tweens', the merely
 17061	   ordinary geniuses.
 17062	
 17063	:subshell: /suhb'shel/ [UNIX, MS-DOS] n. An OS command interpreter
 17064	   (see {shell}) spawned from within a program, such that exit from
 17065	   the command interpreter returns one to the parent program in a
 17066	   state that allows it to continue execution.  Compare {shell out};
 17067	   oppose {chain}.
 17068	
 17069	:sucking mud: [Applied Data Research] adj. (also `pumping
 17070	   mud') Crashed or wedged.  Usually said of a machine that provides
 17071	   some service to a network, such as a file server.  This Dallas
 17072	   regionalism derives from the East Texas oilfield lament, "Shut
 17073	   'er down, Ma, she's a-suckin' mud".  Often used as a query.  "We
 17074	   are going to reconfigure the network, are you ready to suck mud?"
 17075	
 17076	:sufficiently small: adj. Syn. {suitably small}.
 17077	
 17078	:suit: n. 1. Ugly and uncomfortable `business clothing' often
 17079	   worn by non-hackers.  Invariably worn with a `tie', a
 17080	   strangulation device that partially cuts off the blood supply to
 17081	   the brain.  It is thought that this explains much about the
 17082	   behavior of suit-wearers.  Compare {droid}.  2. A person who
 17083	   habitually wears suits, as distinct from a techie or hacker.  See
 17084	   {loser}, {burble}, {management}, {Stupids}, {SNAFU
 17085	   Principle}, and {brain-damaged}.  English, by the way, is
 17086	   relatively kind; our Moscow correspondent informs us that the
 17087	   corresponding idiom in Russian hacker jargon is `sovok', lit.  a
 17088	   tool for grabbing garbage.
 17089	
 17090	:suitable win: n. See {win}.
 17091	
 17092	:suitably small: [perverted from mathematical jargon] adj. An
 17093	   expression used ironically to characterize unquantifiable
 17094	   behavior that differs from expected or required behavior.  For
 17095	   example, suppose a newly created program came up with a correct
 17096	   full-screen display, and one publicly exclaimed: "It works!"
 17097	   Then, if the program dumps core on the first mouse click, one might
 17098	   add: "Well, for suitably small values of `works'."  Compare
 17099	   the characterization of pi under {{random numbers}}.
 17100	
 17101	:sun lounge: [Great Britain] n. The room where all the Sun
 17102	   workstations live.  The humor in this term comes from the fact
 17103	   that it's also in mainstream use to describe a solarium, and all
 17104	   those Sun workstations clustered together give off an amazing
 17105	   amount of heat.
 17106	
 17107	:sun-stools: n. Unflattering hackerism for SunTools, a pre-X
 17108	   windowing environment notorious in its day for size, slowness, and
 17109	   misfeatures.  {X}, however, is larger and slower; see
 17110	   {second-system effect}.
 17111	
 17112	:sunspots: n. 1. Notional cause of an odd error.  "Why did the
 17113	   program suddenly turn the screen blue?"  "Sunspots, I guess."
 17114	   2. Also the cause of {bit rot} --- from the myth that sunspots
 17115	   will increase {cosmic rays}, which can flip single bits in memory.
 17116	   See {cosmic rays}, {phase of the moon}.
 17117	
 17118	:superprogrammer: n. A prolific programmer; one who can code
 17119	   exceedingly well and quickly.  Not all hackers are
 17120	   superprogrammers, but many are.  (Productivity can vary from one
 17121	   programmer to another by three orders of magnitude.  For example,
 17122	   one programmer might be able to write an average of 3 lines of
 17123	   working code in one day, while another, with the proper tools,
 17124	   might be able to write 3,000.  This range is astonishing; it is
 17125	   matched in very few other areas of human endeavor.)  The term
 17126	   `superprogrammer' is more commonly used within such places as IBM
 17127	   than in the hacker community.  It tends to stress na"ive measures
 17128	   of productivity and to underweight creativity, ingenuity, and
 17129	   getting the job *done* --- and to sidestep the question of
 17130	   whether the 3,000 lines of code do more or less useful work than
 17131	   three lines that do the {Right Thing}.  Hackers tend to prefer
 17132	   the terms {hacker} and {wizard}.
 17133	
 17134	:superuser: [UNIX] n. Syn. {root}, {avatar}.  This usage has
 17135	   spread to non-UNIX environments; the superuser is any account with
 17136	   all {wheel} bits on.  A more specific term than {wheel}.
 17137	
 17138	:support: n. After-sale handholding; something many software
 17139	   vendors promise but few deliver.  To hackers, most support people
 17140	   are useless --- because by the time a hacker calls support he or
 17141	   she will usually know the relevant manuals better than the support
 17142	   people (sadly, this is *not* a joke or exaggeration).  A
 17143	   hacker's idea of `support' is a t^ete-`a-t^ete with the
 17144	   software's designer.
 17145	
 17146	:Suzie COBOL: /soo'zee koh'bol/ 1. [IBM: prob. from Frank Zappa's
 17147	   `Suzy Creamcheese'] n. A coder straight out of training school who
 17148	   knows everything except the value of comments in plain English.
 17149	   Also (fashionable among personkind wishing to avoid accusations of
 17150	   sexism) `Sammy Cobol' or (in some non-IBM circles) `Cobol Charlie'.
 17151	   2. [proposed] Meta-name for any {code grinder}, analogous to
 17152	   {J. Random Hacker}.
 17153	
 17154	:swab: /swob/ [From the mnemonic for the PDP-11 `SWAp Byte'
 17155	   instruction, as immortalized in the `dd(1)' option `conv=swab'
 17156	   (see {dd})] 1. vt. To solve the {NUXI problem} by swapping
 17157	   bytes in a file.  2. n. The program in V7 UNIX used to perform this
 17158	   action, or anything functionally equivalent to it.  See also
 17159	   {big-endian}, {little-endian}, {middle-endian},
 17160	   {bytesexual}.
 17161	
 17162	:swap: vt. 1. [techspeak] To move information from a fast-access
 17163	   memory to a slow-access memory (`swap out'), or vice versa
 17164	   (`swap in').  Often refers specifically to the use of disks as
 17165	   `virtual memory'.  As pieces of data or program are needed, they
 17166	   are swapped into {core} for processing; when they are no longer
 17167	   needed they may be swapped out again.  2. The jargon use of these
 17168	   terms analogizes people's short-term memories with core.  Cramming
 17169	   for an exam might be spoken of as swapping in.  If you temporarily
 17170	   forget someone's name, but then remember it, your excuse is that it
 17171	   was swapped out.  To `keep something swapped in' means to keep it
 17172	   fresh in your memory: "I reread the TECO manual every few months
 17173	   to keep it swapped in."  If someone interrupts you just as you got
 17174	   a good idea, you might say "Wait a moment while I swap this
 17175	   out", implying that the piece of paper is your extra-somatic
 17176	   memory and if you don't swap the info out by writing it down it
 17177	   will get overwritten and lost as you talk.  Compare {page in},
 17178	   {page out}.
 17179	
 17180	:swap space: n. Storage space, especially temporary storage space
 17181	   used during a move or reconfiguration.  "I'm just using that corner
 17182	   of the machine room for swap space."
 17183	
 17184	:swapped in: n. See {swap}.  See also {page in}.
 17185	
 17186	:swapped out: n. See {swap}.  See also {page out}.
 17187	
 17188	:swizzle: v. To convert external names, array indices, or references
 17189	   within a data structure into address pointers when the data
 17190	   structure is brought into main memory from external storage (also
 17191	   called `pointer swizzling'); this may be done for speed in
 17192	   chasing references or to simplify code (e.g., by turning lots of
 17193	   name lookups into pointer dereferences).  The converse operation is
 17194	   sometimes termed `unswizzling'.  See also {snap}.
 17195	
 17196	:sync: /sink/ (var. `synch') n., vi. 1. To synchronize, to
 17197	   bring into synchronization.  2. [techspeak] To force all pending
 17198	   I/O to the disk; see {flush}, sense 2.  3. More generally, to
 17199	   force a number of competing processes or agents to a state that
 17200	   would be `safe' if the system were to crash; thus, to checkpoint
 17201	   (in the database-theory sense).
 17202	
 17203	:syntactic sugar: [coined by Peter Landin] n. Features added to a
 17204	   language or other formalism to make it `sweeter' for humans,
 17205	   that do not affect the expressiveness of the formalism (compare
 17206	   {chrome}).  Used esp. when there is an obvious and trivial
 17207	   translation of the `sugar' feature into other constructs already
 17208	   present in the notation.  C's `a[i]' notation is syntactic
 17209	   sugar for `*(a + i)'.  "Syntactic sugar causes cancer of the
 17210	   semicolon."  --- Alan Perlis.
 17211	
 17212	   The variants `syntactic saccharine' and `syntactic syrup' are
 17213	   also recorded.  These denotes something even more gratuitous, in
 17214	   that syntactic sugar serves a purpose (making something more
 17215	   acceptable to humans) but syntactic saccharine or syrup serves no
 17216	   purpose at all.  Compare {candygrammar}.
 17217	
 17218	:sys-frog: /sis'frog/ [the PLATO system] n. Playful variant of
 17219	   `sysprog', which is in turn short for `systems programmer'.
 17220	
 17221	:sysadmin: /sis'ad-min/ n. Common contraction of `system
 17222	   admin'; see {admin}.
 17223	
 17224	:sysape: /sysape/ n. A rather derogatory term for a computer
 17225	   operator; a play on {sysop} common at sites that use the banana
 17226	   hierarchy of problem complexity (see {one-banana
 17227	   problem}).
 17228	
 17229	:sysop: /sis'op/ n. [esp. in the BBS world] The operator (and
 17230	   usually the owner) of a bulletin-board system.  A common neophyte
 17231	   mistake on {FidoNet} is to address a message to `sysop' in an
 17232	   international {echo}, thus sending it to hundreds of sysops
 17233	   around the world.
 17234	
 17235	:system: n. 1. The supervisor program or OS on a computer.  2. The
 17236	   entire computer system, including input/output devices, the
 17237	   supervisor program or OS, and possibly other software.  3. Any
 17238	   large-scale program.  4. Any method or algorithm.  5. `System
 17239	   hacker': one who hacks the system (in senses 1 and 2 only; for
 17240	   sense 3 one mentions the particular program: e.g., `LISP
 17241	   hacker')
 17242	
 17243	:systems jock: n. See {jock}, (sense 2).
 17244	
 17245	:system mangler: n. Humorous synonym for `system manager', poss.
 17246	   from the fact that one major IBM OS had a {root} account called
 17247	   SYSMANGR.  Refers specifically to a systems programmer in charge of
 17248	   administration, software maintenance, and updates at some site.
 17249	   Unlike {admin}, this term emphasizes the technical end of the
 17250	   skills involved.
 17251	
 17252	:SysVile: /sis-vi:l'/ n. See {Missed'em-five}.
 17253	
 17254	= T =
 17255	=====
 17256	
 17257	:T: /T/ 1. [from LISP terminology for `true'] Yes.  Used in
 17258	   reply to a question (particularly one asked using the `-P'
 17259	   convention).  In LISP, the constant T means `true', among other
 17260	   things.  Some hackers use `T' and `NIL' instead of `Yes' and `No'
 17261	   almost reflexively.  This sometimes causes misunderstandings.  When
 17262	   a waiter or flight attendant asks whether a hacker wants coffee, he
 17263	   may well respond `T', meaning that he wants coffee; but of course
 17264	   he will be brought a cup of tea instead.  As it happens, most
 17265	   hackers (particularly those who frequent Chinese restaurants) like
 17266	   tea at least as well as coffee --- so it is not that big a problem.
 17267	   2. See {time T} (also {since time T equals minus infinity}).
 17268	   3. [techspeak] In transaction-processing circles, an abbreviation
 17269	   for the noun `transaction'.  4. [Purdue] Alternate spelling of
 17270	   {tee}. 5. A dialect of {LISP} developed at Yale.
 17271	
 17272	:tail recursion: n. If you aren't sick of it already, see {tail
 17273	   recursion}.
 17274	
 17275	:talk mode: n. A feature supported by UNIX, ITS, and some other
 17276	   OSes that allows two or more logged-in users to set up a real-time
 17277	   on-line conversation.  It combines the immediacy of talking with
 17278	   all the precision (and verbosity) that written language entails.
 17279	   It is difficult to communicate inflection, though conventions have
 17280	   arisen for some of these (see the section on writing style in the
 17281	   Prependices for details).
 17282	
 17283	   Talk mode has a special set of jargon words, used to save typing,
 17284	   which are not used orally.  Some of these are identical to (and
 17285	   probably derived from) Morse-code jargon used by ham-radio amateurs
 17286	   since the 1920s.
 17287	
 17288	     BCNU    
 17289	          be seeing you
 17290	     BTW
 17291	          by the way
 17292	     BYE?
 17293	          are you ready to unlink?  (this is the standard way to end a
 17294	          talk-mode conversation; the other person types `BYE' to
 17295	          confirm, or else continues the conversation)
 17296	     CUL     
 17297	          see you later
 17298	     ENQ?
 17299	          are you busy?  (expects `ACK' or `NAK' in return)
 17300	     FOO?
 17301	          are you there? (often used on unexpected links, meaning also
 17302	          "Sorry if I butted in ..." (linker) or "What's up?"  (linkee))
 17303	     FYI     
 17304	          for your information
 17305	     FYA     
 17306	          for your amusement
 17307	     GA
 17308	          go ahead (used when two people have tried to type
 17309	          simultaneously; this cedes the right to type to the other)
 17310	     GRMBL   
 17311	          grumble (expresses disquiet or disagreement)
 17312	     HELLOP
 17313	          hello? (an instance of the `-P' convention)
 17314	     JAM
 17315	          just a minute (equivalent to `SEC....')
 17316	     MIN     
 17317	          same as `JAM'
 17318	     NIL     
 17319	          no (see {NIL})
 17320	     O
 17321	          over to you
 17322	     OO      
 17323	          over and out
 17324	     /
 17325	          another form of "over to you" (from x/y as "x over y")
 17326	     \
 17327	          lambda (used in discussing LISPy things)
 17328	     OBTW  
 17329	          oh, by the way
 17330	     R U THERE?
 17331	          are you there?
 17332	     SEC     
 17333	          wait a second (sometimes written `SEC...')
 17334	     T
 17335	          yes (see the main entry for {T})
 17336	     TNX     
 17337	          thanks
 17338	     TNX 1.0E6
 17339	          thanks a million (humorous)
 17340	     TNXE6
 17341	          another form of "thanks a million"
 17342	     WRT     
 17343	          with regard to, or with respect to.
 17344	     WTF
 17345	          the universal interrogative particle; WTF knows what it means?
 17346	     WTH     
 17347	          what the hell?
 17348	     <double newline>
 17349	          When the typing party has finished, he/she types two newlines
 17350	          to signal that he/she is done; this leaves a blank line
 17351	          between `speeches' in the conversation, making it easier to
 17352	          reread the preceding text.
 17353	     <name>:
 17354	          When three or more terminals are linked, it is conventional
 17355	          for each typist to {prepend} his/her login name or handle and
 17356	          a colon (or a hyphen) to each line to indicate who is typing
 17357	          (some conferencing facilities do this automatically).  The
 17358	          login name is often shortened to a unique prefix (possibly a
 17359	          single letter) during a very long conversation.
 17360	     /\/\/\
 17361	          A giggle or chuckle.  On a MUD, this usually means `earthquake
 17362	          fault'.
 17363	
 17364	   Most of the above sub-jargon is used at both Stanford and MIT.
 17365	   Several of these expressions are also common in {email}, esp.
 17366	   FYI, FYA, BTW, BCNU, WTF, and CUL.  A few other abbreviations have
 17367	   been reported from commercial networks, such as GEnie and
 17368	   CompuServe, where on-line `live' chat including more than two
 17369	   people is common and usually involves a more `social' context,
 17370	   notably the following:
 17371	
 17372	     <g>
 17373	          grin
 17374	     <gr&d>
 17375	          grinning, running, and ducking
 17376	     BBL
 17377	          be back later
 17378	     BRB
 17379	          be right back
 17380	     HHOJ
 17381	          ha ha only joking
 17382	     HHOK
 17383	          ha ha only kidding
 17384	     HHOS
 17385	          {ha ha only serious}
 17386	     IMHO
 17387	          in my humble opinion (see {IMHO})
 17388	     LOL
 17389	          laughing out loud
 17390	     NHOH
 17391	          Never Heard of Him/Her (often used in {initgame})
 17392	     ROTF
 17393	          rolling on the floor
 17394	     ROTFL
 17395	          rolling on the floor laughing
 17396	     AFK
 17397	          away from keyboard
 17398	     b4
 17399	          before
 17400	     CU l8tr
 17401	          see you later
 17402	     MORF
 17403	          male or female?
 17404	     TTFN
 17405	          ta-ta for now
 17406	     TTYL
 17407	          talk to you later
 17408	     OIC
 17409	          oh, I see
 17410	     rehi
 17411	          hello again
 17412	
 17413	   Most of these are not used at universities or in the UNIX world,
 17414	   though ROTF and TTFN have gained some currency there and IMHO is
 17415	   common; conversely, most of the people who know these are
 17416	   unfamiliar with FOO?, BCNU, HELLOP, {NIL}, and {T}.
 17417	
 17418	   The {MUD} community uses a mixture of USENET/Internet emoticons,
 17419	   a few of the more natural of the old-style talk-mode abbrevs, and
 17420	   some of the `social' list above; specifically, MUD respondents
 17421	   report use of BBL, BRB, LOL, b4, BTW, WTF, TTFN, and WTH.  The use
 17422	   of `rehi' is also common; in fact, mudders are fond of re-
 17423	   compounds and will frequently `rehug' or `rebonk' (see
 17424	   {bonk/oif}) people.  The word `re' by itself is taken as
 17425	   `regreet'.  In general, though, MUDders express a preference for
 17426	   typing things out in full rather than using abbreviations; this may
 17427	   be due to the relative youth of the MUD cultures, which tend to
 17428	   include many touch typists and to assume high-speed links.  The
 17429	   following uses specific to MUDs are reported:
 17430	
 17431	     UOK?
 17432	          are you OK?
 17433	     THX
 17434	          thanks (mutant of `TNX'; clearly this comes in batches of 1138
 17435	          (the Lucasian K)).
 17436	     CU l8er
 17437	          see you later (mutant of `CU l8tr')
 17438	     OTT
 17439	          over the top (excessive, uncalled for)
 17440	     FOAD
 17441	          fuck off and die (use of this is often OTT)
 17442	
 17443	   Some {BIFF}isms (notably the variant spelling `d00d')
 17444	   appear to be passing into wider use among some subgroups of
 17445	   MUDders.
 17446	
 17447	   One final note on talk mode style: neophytes, when in talk mode,
 17448	   often seem to think they must produce letter-perfect prose because
 17449	   they are typing rather than speaking.  This is not the best
 17450	   approach.  It can be very frustrating to wait while your partner
 17451	   pauses to think of a word, or repeatedly makes the same spelling
 17452	   error and backs up to fix it.  It is usually best just to leave
 17453	   typographical errors behind and plunge forward, unless severe
 17454	   confusion may result; in that case it is often fastest just to type
 17455	   "xxx" and start over from before the mistake.
 17456	
 17457	   See also {hakspek}, {emoticon}, {bonk/oif}.
 17458	
 17459	:talker system: n. British hackerism for software that enables
 17460	   real-time chat or {talk mode}.
 17461	
 17462	:tall card: n. A PC/AT-size expansion card (these can be larger
 17463	   than IBM PC or XT cards because the AT case is bigger).  See also
 17464	   {short card}.  When IBM introduced the PS/2 model 30 (its last
 17465	   gasp at supporting the ISA) they made the case lower and many
 17466	   industry-standard tall cards wouldn't fit; this was felt to be a
 17467	   reincarnation of the {connector conspiracy}, done with less
 17468	   style.
 17469	
 17470	:tanked: adj. Same as {down}, used primarily by UNIX hackers.  See
 17471	   also {hosed}.  Popularized as a synonym for `drunk' by Steve
 17472	   Dallas in the late lamented "Bloom County" comic strip.
 17473	
 17474	:TANSTAAFL: /tan'stah-fl/ [acronym, from Robert Heinlein's
 17475	   classic `The Moon is a Harsh Mistress'.]  "There Ain't No
 17476	   Such Thing As A Free Lunch", often invoked when someone is balking
 17477	   at an ugly design requirement or the prospect of using an
 17478	   unpleasantly {heavyweight} technique.  "What? Don't tell me I
 17479	   have to implement a database back end to get my address book
 17480	   program to work!"  "Well, TANSTAAFL you know."  This phrase owes
 17481	   some of its popularity to the high concentration of science-fiction
 17482	   fans and political libertarians in hackerdom (see Appendix
 17483	   B).
 17484	
 17485	:tar and feather: [from UNIX `tar(1)'] vt. To create a
 17486	   transportable archive from a group of files by first sticking them
 17487	   together with `tar(1)' (the Tape ARchiver) and then
 17488	   compressing the result (see {compress}).  The latter action is
 17489	   dubbed `feathering' by analogy to what you do with an airplane
 17490	   propeller to decrease wind resistance, or with an oar to reduce
 17491	   water resistance; smaller files, after all, slip through comm links
 17492	   more easily.
 17493	
 17494	:taste: [primarily MIT] n. 1. The quality in a program that tends
 17495	   to be inversely proportional to the number of features, hacks, and
 17496	   kluges programmed into it.  Also `tasty', `tasteful',
 17497	   `tastefulness'.  "This feature comes in N tasty flavors."
 17498	   Although `tasteful' and `flavorful' are essentially
 17499	   synonyms, `taste' and {flavor} are not.  Taste refers to
 17500	   sound judgment on the part of the creator; a program or feature
 17501	   can *exhibit* taste but cannot *have* taste.  On the other
 17502	   hand, a feature can have {flavor}.  Also, {flavor} has the
 17503	   additional meaning of `kind' or `variety' not shared by
 17504	   `taste'.  {Flavor} is a more popular word than `taste',
 17505	   though both are used.  See also {elegant}.  2. Alt. sp. of
 17506	   {tayste}.
 17507	
 17508	:tayste: /tayst/ n. Two bits; also as {taste}.  Syn. {crumb},
 17509	   {quarter}.  Compare {{byte}}, {dynner}, {playte},
 17510	   {nybble}, {quad}.
 17511	
 17512	:TCB: /T-C-B/ [IBM] n. 1. Trouble Came Back.  An intermittent or
 17513	   difficult-to-reproduce problem that has failed to respond to
 17514	   neglect.  Compare {heisenbug}.  Not to be confused with:
 17515	   2. Trusted Computing Base, an `official' jargon term from the
 17516	   {Orange Book}.
 17517	
 17518	:tea, ISO standard cup of: [South Africa] n. A cup of tea with milk
 17519	   and one teaspoon of sugar, where the milk is poured into the cup
 17520	   before the tea.  Variations are ISO 0, with no sugar; ISO 2, with
 17521	   two spoons of sugar; and so on.
 17522	
 17523	   Like many ISO standards, this one has a faintly alien ring in North
 17524	   America, where hackers generally shun the decadent British practice
 17525	   of adulterating perfectly good tea with dairy products and
 17526	   prefer instead to add a wedge of lemon, if anything.  If one were
 17527	   feeling extremely silly, one might hypothesize an analogous `ANSI
 17528	   standard cup of tea' and wind up with a political situation
 17529	   distressingly similar to several that arise in much more serious
 17530	   technical contexts.  Milk and lemon don't mix very well.
 17531	
 17532	:TechRef: /tek'ref/ [MS-DOS] n. The original `IBM PC
 17533	   Technical Reference Manual', including the BIOS listing and
 17534	   complete schematics for the PC.  The only PC documentation in the
 17535	   issue package that's considered serious by real hackers.
 17536	
 17537	:TECO: /tee'koh/ obs. 1. vt. Originally, to edit using the TECO
 17538	   editor in one of its infinite variations (see below).  2. vt.,obs.
 17539	   To edit even when TECO is *not* the editor being used!  This
 17540	   usage is rare and now primarily historical.  2. [originally an
 17541	   acronym for `[paper] Tape Editor and COrrector'; later, `Text
 17542	   Editor and COrrector'] n. A text editor developed at MIT and
 17543	   modified by just about everybody.  With all the dialects included,
 17544	   TECO might have been the most prolific editor in use before
 17545	   {EMACS}, to which it was directly ancestral.  Noted for its
 17546	   powerful programming-language-like features and its unspeakably
 17547	   hairy syntax.  It is literally the case that every string of
 17548	   characters is a valid TECO program (though probably not a useful
 17549	   one); one common hacker game used to be mentally working out what
 17550	   the TECO commands corresponding to human names did.  As an example
 17551	   of TECO's obscurity, here is a TECO program that takes a list of
 17552	   names such as:
 17553	
 17554	     Loser, J. Random
 17555	     Quux, The Great
 17556	     Dick, Moby
 17557	
 17558	   sorts them alphabetically according to surname, and then puts the
 17559	   surname last, removing the comma, to produce the following:
 17560	
 17561	     Moby Dick
 17562	     J. Random Loser
 17563	     The Great Quux
 17564	
 17565	   The program is
 17566	
 17567	     [1 J^P$L$$
 17568	     J <.-Z; .,(S,$ -D .)FX1 @F^B $K :L I $ G1 L>$$
 17569	
 17570	   (where ^B means `Control-B' (ASCII 0000010) and $ is actually
 17571	   an {alt} or escape (ASCII 0011011) character).
 17572	
 17573	   In fact, this very program was used to produce the second, sorted
 17574	   list from the first list.  The first hack at it had a {bug}: GLS
 17575	   (the author) had accidentally omitted the `@' in front
 17576	   of `F^B', which as anyone can see is clearly the {Wrong Thing}.  It
 17577	   worked fine the second time.  There is no space to describe all the
 17578	   features of TECO, but it may be of interest that `^P' means
 17579	   `sort' and `J<.-Z; ... L>' is an idiomatic series of commands
 17580	   for `do once for every line'.
 17581	
 17582	   In mid-1991, TECO is pretty much one with the dust of history,
 17583	   having been replaced in the affections of hackerdom by {EMACS}.
 17584	   Descendants of an early (and somewhat lobotomized) version adopted
 17585	   by DEC can still be found lurking on VMS and a couple of crufty
 17586	   PDP-11 operating systems, however, and ports of the more advanced
 17587	   MIT versions remain the focus of some antiquarian interest.  See
 17588	   also {retrocomputing}, {write-only language}.
 17589	
 17590	:tee: n.,vt. [Purdue] A carbon copy of an electronic transmission.
 17591	   "Oh, you're sending him the {bits} to that?  Slap on a tee for
 17592	   me."  From the UNIX command `tee(1)', itself named after a
 17593	   pipe fitting (see {plumbing}).  Can also mean `save one for me',
 17594	   as in "Tee a slice for me!"  Also spelled `T'.
 17595	
 17596	:Telerat: /tel'*-rat/ n. Unflattering hackerism for `Teleray', a
 17597	   line of extremely losing terminals.  Compare {AIDX}, {terminak},
 17598	   {Macintrash} {Nominal Semidestructor}, {Open DeathTrap},
 17599	   {ScumOS}, {sun-stools}, {HP-SUX}.
 17600	
 17601	:TELNET: /tel'net/ vt. To communicate with another Internet host
 17602	   using the {TELNET} protocol (usually using a program of the same
 17603	   name).  TOPS-10 people used the word IMPCOM, since that was the
 17604	   program name for them.  Sometimes abbreviated to TN /T-N/.  "I
 17605	   usually TN over to SAIL just to read the AP News."
 17606	
 17607	:ten-finger interface: n. The interface between two networks that
 17608	   cannot be directly connected for security reasons; refers to the
 17609	   practice of placing two terminals side by side and having an
 17610	   operator read from one and type into the other.
 17611	
 17612	:tense: adj. Of programs, very clever and efficient.  A tense piece
 17613	   of code often got that way because it was highly {bum}med, but
 17614	   sometimes it was just based on a great idea.  A comment in a clever
 17615	   routine by Mike Kazar, once a grad-student hacker at CMU: "This
 17616	   routine is so tense it will bring tears to your eyes."  A tense
 17617	   programmer is one who produces tense code.
 17618	
 17619	:tenured graduate student: n. One who has been in graduate school
 17620	   for 10 years (the usual maximum is 5 or 6): a `ten-yeared'
 17621	   student (get it?).  Actually, this term may be used of any grad
 17622	   student beginning in his seventh year.  Students don't really get
 17623	   tenure, of course, the way professors do, but a tenth-year graduate
 17624	   student has probably been around the university longer than any
 17625	   untenured professor.
 17626	
 17627	:tera-: /te'r*/ [SI] pref. See {{quantifiers}}.
 17628	
 17629	:teraflop club: /te'r*-flop kluhb/ [FLOP = Floating Point
 17630	   Operation] n. A mythical association of people who consume
 17631	   outrageous amounts of computer time in order to produce a few
 17632	   simple pictures of glass balls with intricate ray-tracing
 17633	   techniques.  Caltech professor James Kajiya is said to have been
 17634	   the founder.
 17635	
 17636	:terminak: /ter'mi-nak`/ [Caltech, ca. 1979] n. Any
 17637	   malfunctioning computer terminal.  A common failure mode of
 17638	   Lear-Siegler ADM 3a terminals caused the `L' key to produce the
 17639	   `K' code instead; complaints about this tended to look like
 17640	   "Terminak #3 has a bad keyboard.  Pkease fix."  See {AIDX},
 17641	   {Nominal Semidestructor}, {Open DeathTrap}, {ScumOS},
 17642	   {sun-stools}, {Telerat}, {HP-SUX}.
 17643	
 17644	:terminal brain death: n. The extreme form of {terminal illness}
 17645	   (sense 1).  What someone who has obviously been hacking
 17646	   continuously for far too long is said to be suffering from.
 17647	
 17648	:terminal illness: n. 1. Syn. {raster burn}.  2. The `burn-in'
 17649	   condition your CRT tends to get if you don't have a screen saver.
 17650	
 17651	:terminal junkie: [UK] n. A {wannabee} or early
 17652	   {larval stage} hacker who spends most of his or her time wandering
 17653	   the directory tree and writing {noddy} programs just to get
 17654	   a fix of computer time.  Variants include `terminal
 17655	   jockey', `console junkie', and {console jockey}.  The term
 17656	   `console jockey' seems to imply more expertise than the other
 17657	   three (possibly because of the exalted status of the {{console}}
 17658	   relative to an ordinary terminal).  See also {twink},
 17659	   {read-only user}.
 17660	
 17661	:terpri: /ter'pree/ [from LISP 1.5 (and later, MacLISP)] vi. To
 17662	   output a {newline}.  Now rare as jargon, though still used as
 17663	   techspeak in Common LISP.  It is a contraction of `TERminate PRInt
 17664	   line', named for the fact that, on some early OSes and hardware, no
 17665	   characters would be printed until a complete line was formed, so
 17666	   this operation terminated the line and emitted the output.
 17667	
 17668	:test: n. 1. Real users bashing on a prototype long enough to get
 17669	   thoroughly acquainted with it, with careful monitoring and followup
 17670	   of the results.  2. Some bored random user trying a couple of the
 17671	   simpler features with a developer looking over his or her shoulder,
 17672	   ready to pounce on mistakes.  Judging by the quality of most
 17673	   software, the second definition is far more prevalent.  See also
 17674	   {demo}.
 17675	
 17676	:TeX: /tekh/ n. An extremely powerful {macro}-based
 17677	   text formatter written by Donald E. {Knuth}, very popular in the
 17678	   computer-science community (it is good enough to have displaced
 17679	   UNIX `troff(1)', the other favored formatter, even at many
 17680	   UNIX installations).  TeX fans insist on the correct (guttural)
 17681	   pronunciation, and the correct spelling (all caps, squished
 17682	   together, with the E depressed below the baseline; the
 17683	   mixed-case `TeX' is considered an acceptable kluge on ASCII-only
 17684	   devices).  Fans like to proliferate names from the word `TeX'
 17685	   --- such as TeXnician (TeX user), TeXhacker (TeX
 17686	   programmer), TeXmaster (competent TeX programmer), TeXhax,
 17687	   and TeXnique.
 17688	
 17689	   Knuth began TeX because he had become annoyed at the declining
 17690	   quality of the typesetting in volumes I--III of his monumental
 17691	   `Art of Computer Programming' (see {Knuth}, also
 17692	   {bible}).  In a manifestation of the typical hackish urge to
 17693	   solve the problem at hand once and for all, he began to design his
 17694	   own typesetting language.  He thought he would finish it on his
 17695	   sabbatical in 1978; he was wrong by only about 8 years.  The
 17696	   language was finally frozen around 1985, but volume IV of `The
 17697	   Art of Computer Programming' has yet to appear as of mid-1991.  The
 17698	   impact and influence of TeX's design has been such that nobody
 17699	   minds this very much.  Many grand hackish projects have started as
 17700	   a bit of tool-building on the way to something else; Knuth's
 17701	   diversion was simply on a grander scale than most.
 17702	
 17703	   TeX{} has also been a noteworthy example of free, shared, but
 17704	   high-quality software.  Knuth used to offer monetary awards to people
 17705	   who found and reported bugs in it; as the years wore on and the few
 17706	   remaining bugs were fixed (and new ones even harder to find), the
 17707	   bribe went up.  Though well-written, TeX{} is so large (and so full of
 17708	   cutting edge technique) that it is said to have unearthed at least
 17709	   one bug in every Pascal it has been compiled with.
 17710	
 17711	:text: n. 1. [techspeak] Executable code, esp. a `pure code'
 17712	   portion shared between multiple instances of a program running in a
 17713	   multitasking OS (compare {English}).  2. Textual material in the
 17714	   mainstream sense; data in ordinary {{ASCII}} or {{EBCDIC}}
 17715	   representation (see {flat-ASCII}).  "Those are text files;
 17716	   you can review them using the editor."  These two contradictory
 17717	   senses confuse hackers, too.
 17718	
 17719	:thanks in advance: [USENET] Conventional net.politeness ending a
 17720	   posted request for information or assistance.  Sometimes written
 17721	   `advTHANKSance' or `aTdHvAaNnKcSe' or abbreviated `TIA'.  See
 17722	   {net.-}, {netiquette}.
 17723	
 17724	:That's not a bug, that's a feature!: The {canonical} first
 17725	   parry in a debate about a purported bug.  The complainant, if
 17726	   unconvinced, is likely to retort that the bug is then at best a
 17727	   {misfeature}.  See also {feature}.
 17728	
 17729	:the X that can be Y is not the true X: Yet another instance of
 17730	   hackerdom's peculiar attraction to mystical references --- a common
 17731	   humorous way of making exclusive statements about a class of
 17732	   things.  The template is from the `Tao te Ching': "The
 17733	   Tao which can be spoken of is not the true Tao."  The implication
 17734	   is often that the X is a mystery accessible only to the
 17735	   enlightened.  See the {trampoline} entry for an example, and
 17736	   compare {has the X nature}.
 17737	
 17738	:theology: n. 1. Ironically or humorously used to refer to
 17739	   {religious issues}.  2. Technical fine points of an abstruse
 17740	   nature, esp. those where the resolution is of theoretical
 17741	   interest but is relatively {marginal} with respect to actual use of
 17742	   a design or system.  Used esp. around software issues with a
 17743	   heavy AI or language-design component, such as the smart-data vs.
 17744	   smart-programs dispute in AI.
 17745	
 17746	:theory: n. The consensus, idea, plan, story, or set of rules that
 17747	   is currently being used to inform a behavior.  This is a
 17748	   generalization and abuse of the technical meaning.  "What's the
 17749	   theory on fixing this TECO loss?"  "What's the theory on dinner
 17750	   tonight?"  ("Chinatown, I guess.")  "What's the current theory
 17751	   on letting lusers on during the day?"  "The theory behind this
 17752	   change is to fix the following well-known screw...."
 17753	
 17754	:thinko: /thing'koh/ [by analogy with `typo'] n. A momentary,
 17755	   correctable glitch in mental processing, especially one involving
 17756	   recall of information learned by rote; a bubble in the stream of
 17757	   consciousness.  Syn. {braino}; see also {brain fart}.
 17758	   Compare {mouso}.
 17759	
 17760	:This can't happen: Less clipped variant of {can't happen}.
 17761	
 17762	:This time, for sure!: excl. Ritual affirmation frequently uttered
 17763	   during protracted debugging sessions involving numerous small
 17764	   obstacles (e.g., attempts to bring up a UUCP connection).  For the
 17765	   proper effect, this must be uttered in a fruity imitation of
 17766	   Bullwinkle J. Moose.  Also heard: "Hey, Rocky!  Watch me pull a
 17767	   rabbit out of my hat!"  The {canonical} response is, of course,
 17768	   "But that trick *never* works!"  See {{Humor, Hacker}}.
 17769	
 17770	:thrash: vi. To move wildly or violently, without accomplishing
 17771	   anything useful.  Paging or swapping systems that are overloaded
 17772	   waste most of their time moving data into and out of core (rather
 17773	   than performing useful computation) and are therefore said to
 17774	   thrash.  Someone who keeps changing his mind (esp. about what to
 17775	   work on next) is said to be thrashing.  A person frantically trying
 17776	   to execute too many tasks at once (and not spending enough time on
 17777	   any single task) may also be described as thrashing.  Compare
 17778	   {multitask}.
 17779	
 17780	:thread: n. [USENET, GEnie, CompuServe] Common abbreviation of
 17781	   `topic thread', a more or less continuous chain of postings on a
 17782	   single topic.  To `follow a thread' is to read a series of USENET
 17783	   postings sharing a common subject or (more correctly) which are
 17784	   connected by Reference headers.  The better newsreaders present
 17785	   news in thread order.
 17786	
 17787	:three-finger salute: n. Syn. {Vulcan nerve pinch}.
 17788	
 17789	:thud: n. 1. Yet another {metasyntactic variable} (see {foo}).
 17790	   It is reported that at CMU from the mid-1970s the canonical series of
 17791	   these was `foo', `bar', `thud', `blat'.  2. Rare term
 17792	   for the hash character, `#' (ASCII 0100011).  See {ASCII} for
 17793	   other synonyms.
 17794	
 17795	:thumb: n. The slider on a window-system scrollbar.  So called
 17796	   because moving it allows you to browse through the contents of a
 17797	   text window in a way analogous to thumbing through a book.
 17798	
 17799	:thunk: /thuhnk/ n. 1. "A piece of coding which provides an
 17800	   address", according to P. Z. Ingerman, who invented thunks
 17801	   in 1961 as a way of binding actual parameters to their formal
 17802	   definitions in Algol-60 procedure calls.  If a procedure is called
 17803	   with an expression in the place of a formal parameter, the compiler
 17804	   generates a {thunk} to compute the expression and leave the
 17805	   address of the result in some standard location.  2. Later
 17806	   generalized into: an expression, frozen together with its
 17807	   environment, for later evaluation if and when needed (similar to
 17808	   what in techspeak is called a `closure').  The process of
 17809	   unfreezing these thunks is called `forcing'.  3. A
 17810	   {stubroutine}, in an overlay programming environment, that loads
 17811	   and jumps to the correct overlay.  Compare {trampoline}.
 17812	   4. People and activities scheduled in a thunklike manner.  "It
 17813	   occurred to me the other day that I am rather accurately modeled by
 17814	   a thunk --- I frequently need to be forced to completion." ---
 17815	   paraphrased from a {plan file}.
 17816	
 17817	   Historical note: There are a couple of onomatopoeic myths
 17818	   circulating about the origin of this term.  The most common is that
 17819	   it is the sound made by data hitting the stack; another holds that
 17820	   the sound is that of the data hitting an accumulator.  Yet another
 17821	   holds that it is the sound of the expression being unfrozen at
 17822	   argument-evaluation time.  In fact, according to the inventors, it
 17823	   was coined after they realized (in the wee hours after hours of
 17824	   discussion) that the type of an argument in Algol-60 could be
 17825	   figured out in advance with a little compile-time thought,
 17826	   simplifying the evaluation machinery.  In other words, it had
 17827	   `already been thought of'; thus it was christened a `thunk',
 17828	   which is "the past tense of `think' at two in the morning".
 17829	
 17830	:tick: n. 1. A {jiffy} (sense 1).  2. In simulations, the
 17831	   discrete unit of time that passes between iterations of the
 17832	   simulation mechanism.  In AI applications, this amount of time is
 17833	   often left unspecified, since the only constraint of interest is
 17834	   the ordering of events.  This sort of AI simulation is often
 17835	   pejoratively referred to as `tick-tick-tick' simulation,
 17836	   especially when the issue of simultaneity of events with long,
 17837	   independent chains of causes is {handwave}d. 3. In the FORTH
 17838	   language, a single quote character.
 17839	
 17840	:tick-list features: [Acorn Computers] n. Features in software or
 17841	   hardware that customers insist on but never use (calculators in
 17842	   desktop TSRs and that sort of thing).  The American equivalent
 17843	   would be `checklist features', but this jargon sense of the
 17844	   phrase has not been reported.
 17845	
 17846	:tickle a bug: vt. To cause a normally hidden bug to manifest
 17847	   through some known series of inputs or operations.  "You can
 17848	   tickle the bug in the Paradise VGA card's highlight handling by
 17849	   trying to set bright yellow reverse video."
 17850	
 17851	:tiger team: [U.S. military jargon] n. 1. Originally, a team whose
 17852	   purpose is to penetrate security, and thus test security measures.
 17853	   These people are paid professionals who do hacker-type tricks,
 17854	   e.g., leave cardboard signs saying "bomb" in critical defense
 17855	   installations, hand-lettered notes saying "Your codebooks have
 17856	   been stolen" (they usually haven't been) inside safes, etc.  After
 17857	   a successful penetration, some high-ranking security type shows up
 17858	   the next morning for a `security review' and finds the sign,
 17859	   note, etc., and all hell breaks loose.  Serious successes of tiger
 17860	   teams sometimes lead to early retirement for base commanders and
 17861	   security officers (see the {patch} entry for an example).
 17862	   2. Recently, and more generally, any official inspection team or
 17863	   special {firefighting} group called in to look at a problem.
 17864	
 17865	   A subset of tiger teams are professional {cracker}s, testing the
 17866	   security of military computer installations by attempting remote
 17867	   attacks via networks or supposedly `secure' comm channels.  Some of
 17868	   their escapades, if declassified, would probably rank among the
 17869	   greatest hacks of all times.  The term has been adopted in
 17870	   commercial computer-security circles in this more specific sense.
 17871	
 17872	:time sink: [poss. by analogy with `heat sink' or `current sink'] n.
 17873	   A project that consumes unbounded amounts of time.
 17874	
 17875	:time T: /ti:m T/ n. 1. An unspecified but usually well-understood
 17876	   time, often used in conjunction with a later time T+1.
 17877	   "We'll meet on campus at time T or at Louie's at
 17878	   time T+1" means, in the context of going out for dinner:
 17879	   "We can meet on campus and go to Louie's, or we can meet at Louie's
 17880	   itself a bit later."  (Louie's was a Chinese restaurant in Palo Alto
 17881	   that was a favorite with hackers.)  Had the number 30 been used instead
 17882	   of the number 1, it would have implied that the travel time from
 17883	   campus to Louie's is 30 minutes; whatever time T is (and
 17884	   that hasn't been decided on yet), you can meet half an hour later at
 17885	   Louie's than you could on campus and end up eating at the same time.
 17886	   See also {since time T equals minus infinity}.
 17887	
 17888	:times-or-divided-by: [by analogy with `plus-or-minus'] quant.
 17889	   Term occasionally used when describing the uncertainty associated
 17890	   with a scheduling estimate, for either humorous or brutally honest
 17891	   effect.  For a software project, the scheduling uncertainty factor
 17892	   is usually at least 2.
 17893	
 17894	:tinycrud: /ti:'nee-kruhd/ n. 1. A pejorative used by habitues of older
 17895	   game-oriented {MUD} versions for TinyMUDs and other
 17896	   user-extensible {MUD} variants; esp. common among users of the
 17897	   rather violent and competitive AberMUD and MIST systems.  These
 17898	   people justify the slur on the basis of how (allegedly)
 17899	   inconsistent and lacking in genuine atmosphere the scenarios
 17900	   generated in user extensible MUDs can be.  Other common knocks on
 17901	   them are that they feature little overall plot, bad game topology,
 17902	   little competitive interaction, etc. --- not to mention the alleged
 17903	   horrors of the TinyMUD code itself.  This dispute is one of the MUD
 17904	   world's hardiest perennial {holy wars}.  2. TinyMud-oriented
 17905	   chat on the USENET group rec.games.mud and elsewhere,
 17906	   especially {newbie} questions and flamage.
 17907	
 17908	:tip of the ice-cube: [IBM] n. The visible part of something small and
 17909	   insignificant.  Used as an ironic comment in situations where `tip
 17910	   of the iceberg' might be appropriate if the subject were at all
 17911	   important.
 17912	
 17913	:tired iron: [IBM] n. Hardware that is perfectly functional but
 17914	   far enough behind the state of the art to have been superseded by new
 17915	   products, presumably with sufficient improvement in bang-per-buck that
 17916	   the old stuff is starting to look a bit like a {dinosaur}.
 17917	
 17918	:tits on a keyboard: n. Small bumps on certain keycaps to keep
 17919	   touch-typists registered (usually on the `5' of a numeric
 17920	   keypad, and on the `F' and `J' of a QWERTY keyboard; but
 17921	   the Mac, perverse as usual, has them on the `D' and `K'
 17922	   keys).
 17923	
 17924	:TLA: /T-L-A/ [Three-Letter Acronym] n. 1. Self-describing
 17925	   abbreviation for a species with which computing terminology is
 17926	   infested.  2. Any confusing acronym.  Examples include MCA, FTP,
 17927	   SNA, CPU, MMU, SCCS, DMU, FPU, NNTP, TLA.  People who like this
 17928	   looser usage argue that not all TLAs have three letters, just as
 17929	   not all four-letter words have four letters.  One also hears of
 17930	   `ETLA' (Extended Three-Letter Acronym, pronounced /ee tee el
 17931	   ay/) being used to describe four-letter acronyms.  The term
 17932	   `SFLA' (Stupid Four-Letter Acronym) has also been reported.  See
 17933	   also {YABA}.
 17934	
 17935	   The self-effacing phrase "TDM TLA" (Too Damn Many...) is
 17936	   often used to bemoan the plethora of TLAs in use.  In 1989, a
 17937	   random of the journalistic persuasion asked hacker Paul Boutin
 17938	   "What do you think will be the biggest problem in computing in
 17939	   the 90s?"  Paul's straight-faced response: "There are only
 17940	   17,000 three-letter acronyms." (To be exact, there are 26^3
 17941	   = 17,576.)
 17942	
 17943	:TMRC: /tmerk'/ n. The Tech Model Railroad Club at MIT, one of
 17944	   the wellsprings of hacker culture.  The 1959 `Dictionary of
 17945	   the TMRC Language' compiled by Peter Samson included several terms
 17946	   which became basics of the hackish vocabulary (see esp. {foo}
 17947	   and {frob}).
 17948	
 17949	   By 1962, TMRC's legendary layout was already a marvel of complexity
 17950	   (and has grown in the thirty years since; all the features
 17951	   described here are still present).  The control system alone
 17952	   featured about 1200 relays.  There were {scram switch}es located
 17953	   at numerous places around the room that could be thwacked if
 17954	   something undesirable was about to occur, such as a train going
 17955	   full-bore at an obstruction.  Another feature of the system was a
 17956	   digital clock on the dispatch, board, which was itself something of
 17957	   a wonder in those bygone days before cheap LEDS and seven-segment
 17958	   displays (no model railroad can begin to approximate the scale
 17959	   distances between towns and stations, so model railroad timetables
 17960	   assume a fast clock so that it seems to take about the right amount
 17961	   of time for a train to complete its journey).  When someone hit a
 17962	   scram switch the clock stopped and the display was replaced with the
 17963	   word `FOO'; at TMRC the scram switches are therefore called `foo
 17964	   switches'.
 17965	
 17966	   Steven Levy, in his book `Hackers' (see the Bibliography in
 17967	   {appendix C}), gives a stimulating account of those early
 17968	   years.  TMRC's Power and Signals group included most of the early
 17969	   PDP-1 hackers and the people who later bacame the core of the MIT
 17970	   AI Lab staff.  Thirty years later that connection is still very
 17971	   much alive, and this lexicon accordingly includes a number of
 17972	   entries from a recent revision of the TMRC Dictionary.
 17973	
 17974	:TMRCie: /tmerk'ee/, /tuh-merk'ee/ [MIT] n. A denizen of {TMRC}.
 17975	
 17976	:to a first approximation: 1. [techspeak] When one is doing certain
 17977	   numerical computations, an approximate solution may be computed by
 17978	   any of several heuristic methods, then refined to a final value.
 17979	   By using the starting point of a first approximation of the answer,
 17980	   one can write an algorithm that converges more quickly to the
 17981	   correct result.  2. In jargon, a preface to any comment that
 17982	   indicates that the comment is only approximately true.  The remark
 17983	   "To a first approximation, I feel good" might indicate that
 17984	   deeper questioning would reveal that not all is perfect (e.g., a
 17985	   nagging cough still remains after an illness).
 17986	
 17987	:to a zeroth approximation: [from `to a first approximation'] A
 17988	   *really* sloppy approximation; a wild guess.  Compare
 17989	   {social science number}.
 17990	
 17991	:toast: 1. n. Any completely inoperable system or component, esp.
 17992	   one that has just crashed and burned: "Uh, oh ... I think the
 17993	   serial board is toast."  2. vt. To cause a system to crash
 17994	   accidentally, especially in a manner that requires manual
 17995	   rebooting.  "Rick just toasted the {firewall machine} again."
 17996	
 17997	:toaster: n. 1. The archetypal really stupid application for an
 17998	   embedded microprocessor controller; often used in comments that
 17999	   imply that a scheme is inappropriate technology (but see
 18000	   {elevator controller}).  "{DWIM} for an assembler?  That'd be
 18001	   as silly as running UNIX on your toaster!"  2. A very, very dumb
 18002	   computer. "You could run this program on any dumb toaster."  See
 18003	   {bitty box}, {Get a real computer!}, {toy}, {beige toaster}.
 18004	   3. A Macintosh, esp. the Classic Mac.  Some hold that this is
 18005	   implied by sense 2.  4. A peripheral device.  "I bought my box
 18006	   without toasters, but since then I've added two boards and a second
 18007	   disk drive."
 18008	
 18009	:toeprint: n. A {footprint} of especially small size.
 18010	
 18011	:toggle: vt. To change a {bit} from whatever state it is in to the
 18012	   other state; to change from 1 to 0 or from 0 to 1.  This comes from
 18013	   `toggle switches', such as standard light switches, though the
 18014	   word `toggle' actually refers to the mechanism that keeps the
 18015	   switch in the position to which it is flipped rather than to the
 18016	   fact that the switch has two positions.  There are four things you
 18017	   can do to a bit: set it (force it to be 1), clear (or zero) it,
 18018	   leave it alone, or toggle it.  (Mathematically, one would say that
 18019	   there are four distinct boolean-valued functions of one boolean
 18020	   argument, but saying that is much less fun than talking about
 18021	   toggling bits.)
 18022	
 18023	:tool: 1. n. A program used primarily to create, manipulate, modify,
 18024	   or analyze other programs, such as a compiler or an editor or a
 18025	   cross-referencing program.  Oppose {app}, {operating system}.
 18026	   2. [UNIX] An application program with a simple, `transparent'
 18027	   (typically text-stream) interface designed specifically to be used
 18028	   in programmed combination with other tools (see {filter}).
 18029	   3. [MIT: general to students there] vi. To work; to study (connotes
 18030	   tedium).  The TMRC Dictionary defined this as "to set one's brain
 18031	   to the grindstone".  See {hack}.  4. [MIT] n. A student who
 18032	   studies too much and hacks too little.  (MIT's student humor
 18033	   magazine rejoices in the name `Tool and Die'.)
 18034	
 18035	:toolsmith: n. The software equivalent of a tool-and-die
 18036	   specialist; one who specializes in making the {tool}s with which
 18037	   other programmers create applications.  Many hackers consider this
 18038	   more fun than applications per se; to understand why, see
 18039	   {uninteresting}.   Jon Bentley, in the "Bumper-Sticker Computer
 18040	   Science" chapter of his book `More Programming Pearls', quotes Dick
 18041	   Sites from DEC as saying "I'd rather write programs to write programs
 18042	   than write programs".
 18043	
 18044	:topic drift: n. Term used on GEnie, USENET and other electronic
 18045	   fora to describe the tendency of a {thread} to drift away from
 18046	   the original subject of discussion (and thus, from the Subject
 18047	   header of the originating message), or the results of that
 18048	   tendency.  Often used in gentle reminders that the discussion has
 18049	   strayed off any useful track.  "I think we started with a question
 18050	   about Niven's last book, but we've ended up discussing the sexual
 18051	   habits of the common marmoset.  Now *that's* topic drift!"
 18052	
 18053	:topic group: n. Syn. {forum}.
 18054	
 18055	:TOPS-10:: /tops-ten/ n. DEC's proprietary OS for the fabled {PDP-10}
 18056	   machines, long a favorite of hackers but now effectively extinct.
 18057	   A fountain of hacker folklore; see {appendix A}.  See also {{ITS}},
 18058	   {{TOPS-20}}, {{TWENEX}}, {VMS}, {operating system}.  TOPS-10 was
 18059	   sometimes called BOTS-10 (from `bottoms-ten') as a comment on the
 18060	   inappropriateness of describing it as the top of anything.
 18061	
 18062	:TOPS-20:: /tops-twen'tee/ n. See {{TWENEX}}.
 18063	
 18064	:toto: /toh'toh/ n. This is reported to be the default scratch
 18065	   file name among French-speaking programmers --- in other words, a
 18066	   francophone {foo}.  It is reported that the phonetic mutations
 18067	   "titi", "tata", and "tutu" canonically follow `toto',
 18068	   analogously to {bar}, {baz} and {quux} in English.
 18069	
 18070	:tourist: [ITS] n. A guest on the system, especially one who
 18071	   generally logs in over a network from a remote location for {comm
 18072	   mode}, email, games, and other trivial purposes.  One step below
 18073	   {luser}.  Hackers often spell this {turist}, perhaps by
 18074	   some sort of tenuous analogy with {luser} (this also expresses the
 18075	   ITS culture's penchant for six-letterisms).  Compare {twink},
 18076	   {read-only user}.
 18077	
 18078	:tourist information: n. Information in an on-line display that is
 18079	   not immediately useful, but contributes to a viewer's gestalt of
 18080	   what's going on with the software or hardware behind it.  Whether a
 18081	   given piece of info falls in this category depends partly on what
 18082	   the user is looking for at any given time.  The `bytes free'
 18083	   information at the bottom of an MS-DOS `dir' display is
 18084	   tourist information; so (most of the time) is the TIME information
 18085	   in a UNIX `ps(1)' display.
 18086	
 18087	:touristic: adj. Having the quality of a {tourist}.  Often used
 18088	   as a pejorative, as in `losing touristic scum'.  Often spelled
 18089	   `turistic' or `turistik', so that phrase might be more properly
 18090	   rendered `lusing turistic scum'.
 18091	
 18092	:toy: n. A computer system; always used with qualifiers.
 18093	   1. `nice toy': One that supports the speaker's hacking style
 18094	   adequately.  2. `just a toy': A machine that yields
 18095	   insufficient {computron}s for the speaker's preferred uses.  This
 18096	   is not condemnatory, as is {bitty box}; toys can at least be fun.
 18097	   It is also strongly conditioned by one's expectations; Cray XMP
 18098	   users sometimes consider the Cray-1 a `toy', and certainly all RISC
 18099	   boxes and mainframes are toys by their standards.  See also {Get
 18100	   a real computer!}.
 18101	
 18102	:toy language: n. A language useful for instructional purposes or
 18103	   as a proof-of-concept for some aspect of computer-science theory,
 18104	   but inadequate for general-purpose programming.  {Bad Thing}s
 18105	   can result when a toy language is promoted as a general purpose
 18106	   solution for programming (see {bondage-and-discipline
 18107	   language}); the classic example is {{Pascal}}.  Several moderately
 18108	   well-known formalisms for conceptual tasks such as programming Turing
 18109	   machines also qualify as toy languages in a less negative sense.
 18110	   See also {MFTL}.
 18111	
 18112	:toy problem: [AI] n. A deliberately oversimplified case of a
 18113	   challenging problem used to investigate, prototype, or test
 18114	   algorithms for a real problem.  Sometimes used pejoratively.  See
 18115	   also {gedanken}, {toy program}.
 18116	
 18117	:toy program: n. 1. One that can be readily comprehended; hence, a
 18118	   trivial program (compare {noddy}).  2. One for which the effort
 18119	   of initial coding dominates the costs through its life cycle.
 18120	   See also {noddy}.
 18121	
 18122	:trampoline: n. An incredibly {hairy} technique, found in some
 18123	   {HLL} and program-overlay implementations (e.g., on the
 18124	   Macintosh), that involves on-the-fly generation of small executable
 18125	   (and, likely as not, self-modifying) code objects to do indirection
 18126	   between code sections.  These pieces of {live data} are called
 18127	   `trampolines'.  Trampolines are notoriously difficult to understand
 18128	   in action; in fact, it is said by those who use this term that the
 18129	   trampoline that doesn't bend your brain is not the true
 18130	   trampoline.  See also {snap}.
 18131	
 18132	:trap: 1. n. A program interrupt, usually an interrupt caused by
 18133	   some exceptional situation in the user program.  In most cases, the
 18134	   OS performs some action, then returns control to the program.
 18135	   2. vi. To cause a trap.  "These instructions trap to the
 18136	   monitor."  Also used transitively to indicate the cause of the
 18137	   trap.  "The monitor traps all input/output instructions."
 18138	
 18139	   This term is associated with assembler programming (`interrupt'
 18140	   or `exception' is more common among {HLL} programmers) and
 18141	   appears to be fading into history among programmers as the role of
 18142	   assembler continues to shrink.  However, it is still important to
 18143	   computer architects and systems hackers (see {system},
 18144	   sense 1), who use it to distinguish deterministically repeatable
 18145	   exceptions from timing-dependent ones (such as I/O interrupts).
 18146	
 18147	:trap door: alt. `trapdoor' n. 1. Syn. {back door} --- a
 18148	   {Bad Thing}.  2. [techspeak] A `trap-door function' is one
 18149	   which is easy to compute but very difficult to compute the inverse
 18150	   of.  Such functions are {Good Thing}s with important
 18151	   applications in cryptography, specifically in the construction of
 18152	   public-key cryptosystems.
 18153	
 18154	:trash: vt. To destroy the contents of (said of a data structure).
 18155	   The most common of the family of near-synonyms including {mung},
 18156	   {mangle}, and {scribble}.
 18157	
 18158	:trawl: v. To sift through large volumes of data (e.g. USENET
 18159	   postings or FTP archives) looking for something of interest.
 18160	
 18161	:tree-killer: [Sun] n. 1. A printer.  2. A person who wastes paper.
 18162	   This should be interpreted in a broad sense; `wasting paper'
 18163	   includes the production of {spiffy} but {content-free}
 18164	   documents.  Thus, most {suit}s are tree-killers.  The negative
 18165	   loading of this term may reflect the epithet `tree-killer'
 18166	   applied by Treebeard the Ent to the Orcs in J.R.R. Tolkien's
 18167	   `Lord of the Rings' trilogy (see also {elvish}, {elder
 18168	   days}).
 18169	
 18170	:trit: /trit/ [by analogy with `bit'] n. One base-3 digit; the
 18171	   amount of information conveyed by a selection among one of three
 18172	   equally likely outcomes (see also {bit}).  These arise, for
 18173	   example, in the context of a {flag} that should actually be able
 18174	   to assume *three* values --- such as yes, no, or unknown.  Trits are
 18175	   sometimes jokingly called `3-state bits'.  A trit may be
 18176	   semi-seriously referred to as `a bit and a half', although it is
 18177	   linearly equivalent to 1.5849625 bits (that is,
 18178	   log2(3)
 18179	   bits).
 18180	
 18181	:trivial: adj. 1. Too simple to bother detailing.  2. Not worth the
 18182	   speaker's time.  3. Complex, but solvable by methods so well known
 18183	   that anyone not utterly {cretinous} would have thought of them
 18184	   already.  4. Any problem one has already solved (some claim that
 18185	   hackish `trivial' usually evaluates to `I've seen it before').
 18186	   Hackers' notions of triviality may be quite at variance with those
 18187	   of non-hackers.  See {nontrivial}, {uninteresting}.
 18188	
 18189	:troff: /tee'rof/ or /trof/ [UNIX] n. The gray eminence of UNIX
 18190	   text processing; a formatting and phototypesetting program, written
 18191	   originally in PDP-11 assembler and then in barely-structured early
 18192	   C by the late Joseph Ossana, modeled after the earlier ROFF which
 18193	   was in turn modeled after Multics' RUNOFF.  A companion program,
 18194	   `nroff', formats output for terminals and line printers.
 18195	
 18196	   In 1979, Brian Kernighan modified TROFF so that it could drive
 18197	   phototypesetters other than the Graphic Systems CAT.  His paper
 18198	   describing that work ("A Typesetter-independent TROFF," AT&T CSTR
 18199	   #97) explains `troff''s durability.  After discussing the
 18200	   program's "obvious deficiencies --- a rebarbative input syntax,
 18201	   mysterious and undocumented properties in some areas, and a
 18202	   voracious appetite for computer resources" and noting the ugliness
 18203	   and extreme hairiness of the code and internals, Kernighan
 18204	   concludes:
 18205	
 18206	     None of these remarks should be taken as denigrating
 18207	     Ossana's accomplishment with TROFF.  It has proven a
 18208	     remarkably robust tool, taking unbelievable abuse from a
 18209	     variety of preprocessors and being forced into uses that
 18210	     were never conceived of in the original design, all with
 18211	     considerable grace under fire.
 18212	
 18213	   The success of TeX and desktop publishing systems have reduced
 18214	   `troff''s relative importance, but this tribute perfectly
 18215	   captures the strengths that secured `troff' a place in hacker
 18216	   folklore; indeed, it could be taken more generally as an indication
 18217	   of those qualities of good programs which, in the long run, hackers
 18218	   most admire.
 18219	
 18220	:troglodyte: [Commodore] n. 1. A hacker who never leaves his
 18221	   cubicle.  The term `Gnoll' (from Dungeons & Dragons) is also
 18222	   reported.  2. A curmudgeon attached to an obsolescent computing
 18223	   environment.  The combination `ITS troglodyte' was flung around
 18224	   some during the USENET and email wringle-wrangle attending the
 18225	   2.x.x revision of the Jargon File; at least one of the people it
 18226	   was intended to describe adopted it with pride.
 18227	
 18228	:troglodyte mode: [Rice University] n. Programming with the lights
 18229	   turned off, sunglasses on, and the terminal inverted (black on
 18230	   white) because you've been up for so many days straight that your
 18231	   eyes hurt (see {raster burn}).  Loud music blaring from a stereo
 18232	   stacked in the corner is optional but recommended.  See {larval
 18233	   stage}, {hack mode}.
 18234	
 18235	:Trojan horse: [coined by MIT-hacker-turned-NSA-spook Dan Edwards]
 18236	   n. A program designed to break security or damage a system that is
 18237	   disguised as something else benign, such as a directory lister,
 18238	   archiver, a game, or (in one notorious 1990 case on the Mac) a
 18239	   program to find and destroy viruses!  See {back door}, {virus},
 18240	   {worm}.
 18241	
 18242	:tron: [NRL, CMU; prob. fr. the movie `Tron'] v. To become
 18243	   inaccessible except via email or `talk(1)', especially when
 18244	   one is normally available via telephone or in person.  Frequently
 18245	   used in the past tense, as in: "Ran seems to have tronned on us
 18246	   this week" or "Gee, Ran, glad you were able to un-tron
 18247	   yourself".  One may also speak of `tron mode'.
 18248	
 18249	:true-hacker: [analogy with `trufan' from SF fandom] n. One who
 18250	   exemplifies the primary values of hacker culture, esp. competence
 18251	   and helpfulness to other hackers.  A high compliment.  "He spent
 18252	   6 hours helping me bring up UUCP and netnews on my FOOBAR 4000
 18253	   last week --- manifestly the act of a true-hacker."  Compare
 18254	   {demigod}, oppose {munchkin}.
 18255	
 18256	:tty: /T-T-Y/ [UNIX], /tit'ee/ [ITS, but some UNIX people say it
 18257	   this way as well; this pronunciation is not considered to have
 18258	   sexual undertones] n. 1. A terminal of the teletype variety,
 18259	   characterized by a noisy mechanical printer, a very limited
 18260	   character set, and poor print quality.  Usage: antiquated (like the
 18261	   TTYs themselves).  See also {bit-paired keyboard}.
 18262	   2. [especially UNIX] Any terminal at all; sometimes used to refer
 18263	   to the particular terminal controlling a given job.  3. [UNIX] Any
 18264	   serial port, whether or not the device connected to it is a
 18265	   terminal; so called because under UNIX such devices have names of
 18266	   the form tty*.  Ambiguity between senses 2 and 3 is common but
 18267	   seldom bothersome.
 18268	
 18269	:tube: 1. n. A CRT terminal.  Never used in the mainstream sense of
 18270	   TV; real hackers don't watch TV, except for Loony Toons, Rocky &
 18271	   Bullwinkle, Trek Classic, the Simpsons, and the occasional cheesy
 18272	   old swashbuckler movie (see {appendix B}).  2. [IBM] To send
 18273	   a copy of something to someone else's terminal.  "Tube me that
 18274	   note?"
 18275	
 18276	:tube time: n. Time spent at a terminal or console.  More inclusive
 18277	   than hacking time; commonly used in discussions of what parts of
 18278	   one's environment one uses most heavily.  "I find I'm spending too
 18279	   much of my tube time reading mail since I started this revision."
 18280	
 18281	:tunafish: n. In hackish lore, refers to the mutated punchline of
 18282	   an age-old joke to be found at the bottom of the manual pages of
 18283	   `tunefs(8)' in the original {BSD} 4.2 distribution.  The
 18284	   joke was removed in later releases once commercial sites started
 18285	   using 4.2.  Tunefs relates to the `tuning' of file-system
 18286	   parameters for optimum performance, and at the bottom of a few
 18287	   pages of wizardly inscriptions was a `BUGS' section consisting of
 18288	   the line "You can tune a file system, but you can't tunafish".
 18289	   Variants of this can be seen in other BSD versions, though it has
 18290	   been excised from some versions by humorless management
 18291	   {droid}s.  The [nt]roff source for SunOS 4.1.1 contains a
 18292	   comment apparently designed to prevent this: "Take this out and a
 18293	   Unix Demon will dog your steps from now until the `time_t''s
 18294	   wrap around."
 18295	
 18296	:tune: [from automotive or musical usage] vt. To optimize a program
 18297	   or system for a particular environment, esp. by adjusting numerical
 18298	   parameters designed as {hook}s for tuning, e.g., by changing
 18299	   `#define' lines in C.  One may `tune for time' (fastest
 18300	   execution), `tune for space' (least memory use), or
 18301	   `tune for configuration' (most efficient use of hardware).  See
 18302	   {bum}, {hot spot}, {hand-hacking}.
 18303	
 18304	:turbo nerd: n. See {computer geek}.
 18305	
 18306	:Turing tar-pit: n. 1. A place where anything is possible but
 18307	   nothing of interest is practical.  Alan Turing helped lay the
 18308	   foundations of computer science by showing that all machines and
 18309	   languages capable of expressing a certain very primitive set of
 18310	   operations are logically equivalent in the kinds of computations
 18311	   they can carry out, and in principle have capabilities that differ
 18312	   only in speed from those of the most powerful and
 18313	   elegantly-designed computers.  However, no machine or language
 18314	   exactly matching Turing's primitive set has ever been built (other
 18315	   than possibly as a classroom exercise), because it would be
 18316	   horribly slow and far too painful to use.  A `Turing tar-pit' is
 18317	   any computer language or other tool which shares this property.
 18318	   That is, it's theoretically universal --- but in practice, the
 18319	   harder you struggle to get any real work done, the deeper its
 18320	   inadequacies suck you in.  Compare {bondage-and-discipline
 18321	   language}.  2. The perennial {holy wars} over whether language A
 18322	   or B is the "most powerful".
 18323	
 18324	:turist: /too'rist/ n. Var. sp. of {tourist}, q.v.  Also in
 18325	   adjectival form, `turistic'.  Poss. influenced by {luser} and
 18326	   `Turing'.
 18327	
 18328	:tweak: vt. 1. To change slightly, usually in reference to a value.
 18329	   Also used synonymously with {twiddle}.  If a program is almost
 18330	   correct, rather than figure out the precise problem you might
 18331	   just keep tweaking it until it works.  See {frobnicate} and
 18332	   {fudge factor}; also see {shotgun debugging}.  2. To {tune}
 18333	   or {bum} a program; preferred usage in the U.K.
 18334	
 18335	:tweeter: [University of Waterloo] n. Syn. {perf}, {chad}
 18336	   (sense 1).  This term (like {woofer}) has been in use at
 18337	   Waterloo since 1972, but is elsewhere unknown.  In audio jargon, the word
 18338	   refers to the treble speaker(s) on a hi-fi.
 18339	
 18340	:TWENEX:: /twe'neks/ n. The TOPS-20 operating system by DEC ---
 18341	   the second proprietary OS for the PDP-10 --- preferred by most
 18342	   PDP-10 hackers over TOPS-10 (that is, by those who were not
 18343	   {{ITS}} or {{WAITS}} partisans).  TOPS-20 began in 1969 as Bolt,
 18344	   Beranek & Newman's TENEX operating system using special paging
 18345	   hardware.  By the early 1970s, almost all of the systems on the
 18346	   ARPANET ran TENEX.  DEC purchased the rights to TENEX from BBN and
 18347	   began work to make it their own.  The first in-house code name for
 18348	   the operating system was VIROS (VIRtual memory Operating System);
 18349	   when customers started asking questions, the name was changed to
 18350	   SNARK so DEC could truthfully deny that there was any project
 18351	   called VIROS.  When the name SNARK became known, the name was
 18352	   briefly reversed to become KRANS; this was quickly abandoned when
 18353	   it was discovered that `krans' meant `funeral wreath' in
 18354	   Swedish.  Ultimately DEC picked TOPS-20 as the name of the
 18355	   operating system, and it was as TOPS-20 that it was marketed.  The
 18356	   hacker community, mindful of its origins, quickly dubbed it
 18357	   {{TWENEX}} (a contraction of `twenty TENEX'), even though by this
 18358	   point very little of the original TENEX code remained (analogously
 18359	   to the differences between AT&T V6 UNIX and BSD).  DEC people
 18360	   cringed when they heard "TWENEX", but the term caught on
 18361	   nevertheless (the written abbreviation `20x' was also used).
 18362	   TWENEX was successful and very popular; in fact, there was a period
 18363	   in the early 1980s when it commanded as fervent a culture of
 18364	   partisans as UNIX or ITS --- but DEC's decision to scrap all the
 18365	   internal rivals to the VAX architecture and its relatively stodgy
 18366	   VMS OS killed the DEC-20 and put a sad end to TWENEX's brief day in
 18367	   the sun.  DEC attempted to convince TOPS-20 hackers to convert to
 18368	   {VMS}, but instead, by the late 1980s, most of the TOPS-20
 18369	   hackers had migrated to UNIX.
 18370	
 18371	:twiddle: n. 1. Tilde (ASCII 1111110, `~').  Also
 18372	   called `squiggle', `sqiggle' (sic --- pronounced /skig'l/),
 18373	   and `twaddle', but twiddle is the most common term.  2. A small
 18374	   and insignificant change to a program.  Usually fixes one bug and
 18375	   generates several new ones.  3. vt. To change something in a small
 18376	   way.  Bits, for example, are often twiddled.  Twiddling a switch or
 18377	   knob implies much less sense of purpose than toggling or tweaking
 18378	   it; see {frobnicate}.  To speak of twiddling a bit connotes
 18379	   aimlessness, and at best doesn't specify what you're doing to the
 18380	   bit; `toggling a bit' has a more specific meaning (see {bit
 18381	   twiddling}, {toggle}).
 18382	
 18383	:twilight zone: [IRC] n.  Notionally, the area of cyberspace where {IRC}
 18384	   operators live.  An {op} is said to have a "connection to the
 18385	   twilight zone".
 18386	   
 18387	:twink: /twink/ [UCSC] n. Equivalent to {read-only user}.
 18388	   Also reported on the USENET group soc.motss; may derive from
 18389	   gay slang for a cute young thing with nothing upstairs (compare
 18390	   mainstream `chick').
 18391	
 18392	:two pi: quant. The number of years it takes to finish one's
 18393	   thesis.  Occurs in stories in the following form: "He started on
 18394	   his thesis; 2 pi years later..."
 18395	
 18396	:two-to-the-N: quant. An amount much larger than {N} but smaller
 18397	   than {infinity}.  "I have 2-to-the-N things to do before I can
 18398	   go out for lunch" means you probably won't show up.
 18399	
 18400	:twonkie: /twon'kee/ n. The software equivalent of a Twinkie (a
 18401	   variety of sugar-loaded junk food, or (in gay slang) the male
 18402	   equivalent of `chick'); a useless `feature' added to look sexy
 18403	   and placate a {marketroid} (compare {Saturday-night
 18404	   special}).  This may also be related to "The Twonky", title menace
 18405	   of a classic SF short story by Lewis Padgett (Henry Kuttner and
 18406	   C. L. Moore), first published in the September 1942
 18407	   `Astounding Science Fiction' and subsequently much
 18408	   anthologized.
 18409	
 18410	= U =
 18411	=====
 18412	
 18413	:UBD: /U-B-D/ [abbreviation for `User Brain Damage'] An
 18414	   abbreviation used to close out trouble reports obviously due to
 18415	   utter cluelessness on the user's part.  Compare {pilot error};
 18416	   oppose {PBD}; see also {brain-damaged}.
 18417	
 18418	:UN*X: n. Used to refer to the UNIX operating system (a trademark of
 18419	   AT&T) in writing, but avoiding the need for the ugly
 18420	   {(TM)} typography.
 18421	   Also used to refer to any or all varieties of Unixoid operating
 18422	   systems.  Ironically, lawyers now say (1990) that the requirement
 18423	   for the TM-postfix has no legal force, but the asterisk usage
 18424	   is entrenched anyhow.  It has been suggested that there may be a
 18425	   psychological connection to practice in certain religions
 18426	   (especially Judaism) in which the name of the deity is never
 18427	   written out in full, e.g., `YHWH' or `G--d' is used.  See also
 18428	   {glob}.
 18429	
 18430	:undefined external reference: excl. [UNIX] A message from UNIX's
 18431	   linker.  Used in speech to flag loose ends or dangling references
 18432	   in an argument or discussion.
 18433	
 18434	:under the hood: prep. [hot-rodder talk] 1. Used to introduce the
 18435	   underlying implementation of a product (hardware, software, or
 18436	   idea).  Implies that the implementation is not intuitively obvious
 18437	   from the appearance, but the speaker is about to enable the
 18438	   listener to {grok} it.  "Let's now look under the hood to see
 18439	   how ...." 2. Can also imply that the implementation is much
 18440	   simpler than the appearance would indicate: "Under the hood, we
 18441	   are just fork/execing the shell."  3. Inside a chassis, as in
 18442	   "Under the hood, this baby has a 40MHz 68030!"
 18443	
 18444	:undocumented feature: n. See {feature}.
 18445	
 18446	:uninteresting: adj. 1. Said of a problem that, although
 18447	   {nontrivial}, can be solved simply by throwing sufficient
 18448	   resources at it.  2. Also said of problems for which a solution
 18449	   would neither advance the state of the art nor be fun to design and
 18450	   code.
 18451	
 18452	   Hackers regard uninteresting problems as intolerable wastes of
 18453	   time, to be solved (if at all) by lesser mortals.  *Real*
 18454	   hackers (see {toolsmith}) generalize uninteresting problems
 18455	   enough to make them interesting and solve them --- thus solving the
 18456	   original problem as a special case (and, it must be admitted,
 18457	   occasionally turning a molehill into a mountain, or a mountain into
 18458	   a tectonic plate).  See {WOMBAT}, {SMOP}; compare {toy
 18459	   problem}, oppose {interesting}.
 18460	
 18461	:UNIX:: /yoo'niks/ [In the authors' words, "A weak pun on
 18462	   Multics"] n. (also `Unix') An interactive time-sharing system
 18463	   originally invented in 1969 by Ken Thompson after Bell Labs left
 18464	   the Multics project, originally so he could play games on his
 18465	   scavenged PDP-7.  Dennis Ritchie, the inventor of C, is considered
 18466	   a co-author of the system.  The turning point in UNIX's history
 18467	   came when it was reimplemented almost entirely in C during
 18468	   1972--1974, making it the first source-portable OS.  UNIX
 18469	   subsequently underwent mutations and expansions at the hands of
 18470	   many different people, resulting in a uniquely flexible and
 18471	   developer-friendly environment.  In 1991, UNIX is the most widely
 18472	   used multiuser general-purpose operating system in the world.  Many
 18473	   people consider this the most important victory yet of hackerdom
 18474	   over industry opposition (but see {UNIX weenie} and {UNIX
 18475	   conspiracy} for an opposing point of view).  See {Version 7},
 18476	   {BSD}, {USG UNIX}.
 18477	
 18478	:UNIX brain damage: n. Something that has to be done to break a  
 18479	   network program (typically a mailer) on a non-UNIX system so that
 18480	   it will interoperate with UNIX systems. The hack may qualify as
 18481	   `UNIX brain damage' if the program conforms to published standards
 18482	   and the UNIX program in question does not.  UNIX brain damage
 18483	   happens because it is much easier for other (minority) systems to
 18484	   change their ways to match non-conforming behavior than it is to
 18485	   change all the hundreds of thousands of UNIX systems out there.
 18486	
 18487	   An example of UNIX brain damage is a {kluge} in a mail server to 
 18488	   recognize bare line feed (the UNIX newline) as an equivalent form
 18489	   to the Internet standard newline, which is a carriage return
 18490	   followed by a line feed.  Such things can make even a hardened
 18491	   {jock} weep.
 18492	
 18493	:UNIX conspiracy: [ITS] n. According to a conspiracy theory long
 18494	   popular among {{ITS}} and {{TOPS-20}} fans, UNIX's growth is the
 18495	   result of a plot, hatched during the 1970s at Bell Labs, whose
 18496	   intent was to hobble AT&T's competitors by making them dependent
 18497	   upon a system whose future evolution was to be under AT&T's
 18498	   control.  This would be accomplished by disseminating an operating
 18499	   system that is apparently inexpensive and easily portable, but also
 18500	   relatively unreliable and insecure (so as to require continuing
 18501	   upgrades from AT&T).  This theory was lent a substantial impetus
 18502	   in 1984 by the paper referenced in the {back door} entry.
 18503	
 18504	   In this view, UNIX was designed to be one of the first computer
 18505	   viruses (see {virus}) --- but a virus spread to computers indirectly
 18506	   by people and market forces, rather than directly through disks and
 18507	   networks.  Adherents of this `UNIX virus' theory like to cite the
 18508	   fact that the well-known quotation "UNIX is snake oil" was
 18509	   uttered by DEC president Kenneth Olsen shortly before DEC began
 18510	   actively promoting its own family of UNIX workstations.  (Olsen now
 18511	   claims to have been misquoted.)
 18512	
 18513	:UNIX weenie: [ITS] n. 1. A derogatory play on `UNIX wizard', common
 18514	   among hackers who use UNIX by necessity but would prefer
 18515	   alternatives.  The implication is that although the person in question
 18516	   may consider mastery of UNIX arcana to be a wizardly skill, the
 18517	   only real skill involved is the ability to tolerate (and the bad
 18518	   taste to wallow in) the incoherence and needless complexity that is
 18519	   alleged to infest many UNIX programs.  "This shell script tries to
 18520	   parse its arguments in 69 bletcherous ways.  It must have been
 18521	   written by a real UNIX weenie."  2. A derogatory term for anyone
 18522	   who engages in uncritical praise of UNIX.  Often appearing in the
 18523	   context "stupid UNIX weenie".  See {Weenix}, {UNIX
 18524	   conspiracy}.  See also {weenie}.
 18525	
 18526	:unixism: n. A piece of code or a coding technique that depends on the
 18527	   protected multi-tasking environment with relatively low
 18528	   process-spawn overhead that exists on virtual-memory UNIX systems.
 18529	   Common {unixism}s include: gratuitous use of `fork(2)'; the
 18530	   assumption that certain undocumented but well-known features of
 18531	   UNIX libraries such as `stdio(3)' are supported elsewhere;
 18532	   reliance on {obscure} side-effects of system calls (use of
 18533	   `sleep(2)' with a 0 argument to clue the scheduler that
 18534	   you're willing to give up your time-slice, for example); the
 18535	   assumption that freshly allocated memory is zeroed; and the assumption
 18536	   that fragmentation problems won't arise from never `free()'ing
 18537	   memory.  Compare {vaxocentrism}; see also {New Jersey}.
 18538	
 18539	:unleaded: adj. Said of decaffeinated coffee, diet coke, and other
 18540	   imitation {programming fluid}s. "Do you want regular or
 18541	   unleaded?".  Appears to be widespread among programmers associated
 18542	   with the oil industry in Texas (and probably elsewhere).  Usage:
 18543	   silly, and probably unintelligable to the next generation of
 18544	   hackers.
 18545	
 18546	:unroll: v. To repeat the body of a loop several times in succession.
 18547	   This optimization technique reduces the number of times the
 18548	   loop-termination test has to be executed.  But it only works if
 18549	   the number of iterations desired is a multiple of the number of
 18550	   repetitions of the body.  Something has to be done to take care
 18551	   of any leftover iterations --- such as {Duff's device}.
 18552	
 18553	:unswizzle: v. See {swizzle}.
 18554	
 18555	:unwind the stack: vi. 1. [techspeak] During the execution of a
 18556	   procedural language, one is said to `unwind the stack' from a
 18557	   called procedure up to a caller when one discards the stack frame
 18558	   and any number of frames above it, popping back up to the level of
 18559	   the given caller.  In C this is done with
 18560	   `longjmp'/`setjmp', in LISP with `throw/catch'.
 18561	   See also {smash the stack}.  2. People can unwind the stack as
 18562	   well, by quickly dealing with a bunch of problems: "Oh heck, let's
 18563	   do lunch.  Just a second while I unwind my stack."
 18564	
 18565	:unwind-protect: [MIT: from the name of a LISP operator] n. A task you
 18566	   must remember to perform before you leave a place or finish a
 18567	   project.  "I have an unwind-protect to call my advisor."
 18568	
 18569	:up: adj. 1. Working, in order.  "The down escalator is up."
 18570	   Oppose {down}.  2. `bring up': vt. To create a working
 18571	   version and start it.  "They brought up a down system." 
 18572	   3. `come up' vi. To become ready for production use.
 18573	
 18574	:upload: /uhp'lohd/ v. 1. [techspeak] To transfer programs or data
 18575	   over a digital communications link from a smaller or peripheral
 18576	   `client' system to a larger or central `host' one.  A transfer in
 18577	   the other direction is, of course, called a {download} (but see
 18578	   the note about ground-to-space comm under that entry).
 18579	   2. [speculatively] To move the essential patterns and algorithms
 18580	   that make up one's mind from one's brain into a computer.  Only
 18581	   those who are convinced that such patterns and algorithms capture
 18582	   the complete essence of the self view this prospect with
 18583	   gusto.
 18584	
 18585	:upthread: adv. Earlier in the discussion (see {thread}), i.e.,
 18586	   `above'. "As Joe pointed out upthread, ..."  See also
 18587	   {followup}.
 18588	
 18589	:urchin: n. See {munchkin}.
 18590	
 18591	:USENET: /yoos'net/ or /yooz'net/ [from `Users' Network'] n.
 18592	   A distributed {bboard} (bulletin board) system supported mainly
 18593	   by UNIX machines.  Originally implemented in 1979-1980 by Steve
 18594	   Bellovin, Jim Ellis, Tom Truscott, and Steve Daniel at Duke
 18595	   University, it has swiftly grown to become international in scope
 18596	   and is now probably the largest decentralized information utility
 18597	   in existence.  As of early 1991, it hosts well over
 18598	   700 {newsgroup}s and an average of 16 megabytes (the equivalent
 18599	   of several thousand paper pages) of new technical articles, news,
 18600	   discussion, chatter, and {flamage} every day.
 18601	
 18602	:user: n. 1. Someone doing `real work' with the computer, using
 18603	   it as a means rather than an end.  Someone who pays to use a
 18604	   computer.  See {real user}.  2. A programmer who will believe
 18605	   anything you tell him.  One who asks silly questions.  [GLS
 18606	   observes: This is slightly unfair.  It is true that users ask
 18607	   questions (of necessity).  Sometimes they are thoughtful or deep.
 18608	   Very often they are annoying or downright stupid, apparently
 18609	   because the user failed to think for two seconds or look in the
 18610	   documentation before bothering the maintainer.]  See {luser}.
 18611	   3. Someone who uses a program from the outside, however skillfully,
 18612	   without getting into the internals of the program.  One who reports
 18613	   bugs instead of just going ahead and fixing them.
 18614	
 18615	   The general theory behind this term is that there are two classes
 18616	   of people who work with a program: there are implementors (hackers)
 18617	   and {luser}s.  The users are looked down on by hackers to some
 18618	   extent because they don't understand the full ramifications of the
 18619	   system in all its glory.  (The few users who do are known as
 18620	   `real winners'.)  The term is a relative one: a skilled hacker
 18621	   may be a user with respect to some program he himself does not
 18622	   hack.  A LISP hacker might be one who maintains LISP or one who
 18623	   uses LISP (but with the skill of a hacker).  A LISP user is one who
 18624	   uses LISP, whether skillfully or not.  Thus there is some overlap
 18625	   between the two terms; the subtle distinctions must be resolved by
 18626	   context.
 18627	
 18628	:user-friendly: adj. Programmer-hostile.  Generally used by hackers in
 18629	   a critical tone, to describe systems that hold the user's hand so
 18630	   obsessively that they make it painful for the more experienced and
 18631	   knowledgeable to get any work done.  See {menuitis}, {drool-proof
 18632	   paper}, {Macintrash}, {user-obsequious}.
 18633	
 18634	:user-obsequious: adj. Emphatic form of {user-friendly}.  Connotes
 18635	   a system so verbose, inflexible, and determinedly simple-minded
 18636	   that it is nearly unusable.  "Design a system any fool can use and
 18637	   only a fool will want to use it."  See {WIMP environment},
 18638	   {Macintrash}.
 18639	
 18640	:USG UNIX: /U-S-G yoo'niks/ n. Refers to AT&T UNIX
 18641	   commercial versions after {Version 7}, especially System III and
 18642	   System V releases 1, 2, and 3.  So called because during most of
 18643	   the life-span of those versions AT&T's support crew was called the
 18644	   `UNIX Support Group'.  See {BSD}, {{UNIX}}.
 18645	
 18646	:UTSL: // [UNIX] n. On-line acronym for `Use the Source, Luke' (a
 18647	   pun on Obi-Wan Kenobi's "Use the Force, Luke!" in `Star
 18648	   Wars') --- analogous to {RTFM} but more polite.  This is a
 18649	   common way of suggesting that someone would be best off reading the
 18650	   source code that supports whatever feature is causing confusion,
 18651	   rather than making yet another futile pass through the manuals or
 18652	   broadcasting questions that haven't attracted {wizard}s to
 18653	   answer them.  In theory, this is appropriately directed only at
 18654	   associates of some outfit with a UNIX source license; in practice,
 18655	   bootlegs of UNIX source code (made precisely for reference
 18656	   purposes) are so ubiquitous that one may utter this at almost
 18657	   anyone on the network without concern.  In the near future
 18658	   (this written in 1991) source licenses may become even less
 18659	   important; after the recent release of the Mach 3.0 microkernel,
 18660	   given the continuing efforts of the {GNU} project, and with the
 18661	   4.4BSD release on the horizon, complete free source code for
 18662	   UNIX-clone toolsets and kernels should soon be widely available.
 18663	
 18664	:UUCPNET: n. The store-and-forward network consisting of all the
 18665	   world's connected UNIX machines (and others running some clone of
 18666	   the UUCP (UNIX-to-UNIX CoPy) software).  Any machine reachable only
 18667	   via a {bang path} is on UUCPNET.  See {network address}.
 18668	
 18669	= V =
 18670	=====
 18671	
 18672	:vadding: /vad'ing/ [from VAD, a permutation of ADV (i.e.,
 18673	   {ADVENT}), used to avoid a particular {admin}'s continual
 18674	   search-and-destroy sweeps for the game] n. A leisure-time activity
 18675	   of certain hackers involving the covert exploration of the
 18676	   `secret' parts of large buildings --- basements, roofs, freight
 18677	   elevators, maintenance crawlways, steam tunnels, and the like.  A
 18678	   few go so far as to learn locksmithing in order to synthesize
 18679	   vadding keys.  The verb is `to vad' (compare {phreaking}; see
 18680	   also {hack}, sense 9).  This term dates from the late 1970s,
 18681	   before which such activity was simply called `hacking'; the older
 18682	   usage is still prevalent at MIT.
 18683	
 18684	   The most extreme and dangerous form of vadding is `elevator
 18685	   rodeo', a.k.a. `elevator surfing', a sport played by wrasslin'
 18686	   down a thousand-pound elevator car with a 3-foot piece of
 18687	   string, and then exploiting this mastery in various stimulating
 18688	   ways (such as elevator hopping, shaft exploration, rat-racing, and
 18689	   the ever-popular drop experiments).  Kids, don't try this at home! 
 18690	   See also {hobbit} (sense 2).
 18691	
 18692	:vanilla: [from the default flavor of ice cream in the U.S.] adj.
 18693	   Ordinary {flavor}, standard.  When used of food, very often does
 18694	   not mean that the food is flavored with vanilla extract!  For
 18695	   example, `vanilla wonton soup' means ordinary wonton soup, as
 18696	   opposed to hot-and-sour wonton soup.  Applied to hardware and
 18697	   software, as in "Vanilla Version 7 UNIX can't run on a
 18698	   vanilla 11/34."  Also used to orthogonalize chip nomenclature; for
 18699	   instance, a 74V00 means what TI calls a 7400, as distinct from
 18700	   a 74LS00, etc.  This word differs from {canonical} in that the
 18701	   latter means `default', whereas vanilla simply means `ordinary'.
 18702	   For example, when hackers go on a {great-wall}, hot-and-sour
 18703	   wonton soup is the {canonical} wonton soup to get (because that
 18704	   is what most of them usually order) even though it isn't the
 18705	   vanilla wonton soup.
 18706	
 18707	:vannevar: /van'*-var/ n. A bogus technological prediction or a
 18708	   foredoomed engineering concept, esp. one that fails by implicitly
 18709	   assuming that technologies develop linearly, incrementally, and in
 18710	   isolation from one another when in fact the learning curve tends to
 18711	   be highly nonlinear, revolutions are common, and competition is the
 18712	   rule.  The prototype was Vannevar Bush's prediction of
 18713	   `electronic brains' the size of the Empire State Building with a
 18714	   Niagara-Falls-equivalent cooling system for their tubes and relays,
 18715	   made at a time when the semiconductor effect had already been
 18716	   demonstrated.  Other famous vannevars have included magnetic-bubble
 18717	   memory, LISP machines, {videotex}, and a paper from the
 18718	   late 1970s that computed a purported ultimate limit on areal
 18719	   density for ICs that was in fact less than the routine densities of
 18720	   5 years later.
 18721	
 18722	:vaporware: /vay'pr-weir/ n. Products announced far in advance of
 18723	   any release (which may or may not actually take place).
 18724	
 18725	:var: /veir/ or /var/ n. Short for `variable'.  Compare {arg},
 18726	   {param}.
 18727	
 18728	:VAX: /vaks/ n. 1. [from Virtual Address eXtension] The most
 18729	   successful minicomputer design in industry history, possibly
 18730	   excepting its immediate ancestor, the PDP-11.  Between its release
 18731	   in 1978 and its eclipse by {killer micro}s after about 1986, the
 18732	   VAX was probably the hacker's favorite machine of them all, esp.
 18733	   after the 1982 release of 4.2 BSD UNIX (see {BSD}).  Esp.
 18734	   noted for its large, assembler-programmer-friendly instruction set
 18735	   --- an asset that became a liability after the RISC revolution.
 18736	   2. A major brand of vacuum cleaner in Britain.  Cited here because
 18737	   its alleged sales pitch, "Nothing sucks like a VAX!" became a
 18738	   sort of battle-cry of RISC partisans.  It is sometimes claimed that
 18739	   this slogan was *not* actually used by the Vax vacuum-cleaner
 18740	   people, but was actually that of a rival brand called Electrolux
 18741	   (as in "Nothing sucks like..."); your editors have not yet
 18742	   been able to verify either version of the legend.  It is also
 18743	   claimed that DEC actually entered a cross-licensing deal with the
 18744	   vacuum-Vax people that allowed them to market VAX computers in the
 18745	   U.K. in return for not challenging the vacuum cleaner trademark in
 18746	   the U.S.
 18747	
 18748	:VAXectomy: /vak-sek't*-mee/ [by analogy with `vasectomy'] n. A
 18749	   VAX removal.  DEC's Microvaxen, especially, are much slower than
 18750	   newer RISC-based workstations such as the SPARC.  Thus, if one knows
 18751	   one has a replacement coming, VAX removal can be cause for
 18752	   celebration.
 18753	
 18754	:VAXen: /vak'sn/ [from `oxen', perhaps influenced by `vixen'] n.
 18755	   (alt. `vaxen') The plural canonically used among hackers for the
 18756	   DEC VAX computers.  "Our installation has four PDP-10s and twenty
 18757	   vaxen."  See {boxen}.
 18758	
 18759	:vaxherd: n. /vaks'herd/ [from `oxherd'] A VAX operator.
 18760	
 18761	:vaxism: /vak'sizm/ n. A piece of code that exhibits
 18762	   {vaxocentrism} in critical areas.  Compare {PC-ism},
 18763	   {unixism}.
 18764	
 18765	:vaxocentrism: /vak`soh-sen'trizm/ [analogy with
 18766	   `ethnocentrism'] n. A notional disease said to afflict
 18767	   C programmers who persist in coding according to certain
 18768	   assumptions that are valid (esp. under UNIX) on {VAXen} but
 18769	   false elsewhere. Among these are:
 18770	
 18771	  1. The assumption that dereferencing a null pointer is safe because it
 18772	     is all bits 0, and location 0 is readable and 0.  Problem: this may
 18773	     instead cause an illegal-address trap on non-VAXen, and even on
 18774	     VAXen under OSes other than BSD UNIX.  Usually this is an implicit
 18775	     assumption of sloppy code (forgetting to check the pointer before
 18776	     using it), rather than deliberate exploitation of a misfeature.)
 18777	
 18778	  2. The assumption that characters are signed.
 18779	
 18780	  3. The assumption that a pointer to any one type can freely be cast
 18781	     into a pointer to any other type.  A stronger form of this is the
 18782	     assumption that all pointers are the same size and format, which
 18783	     means you don't have to worry about getting the types correct in
 18784	     calls.  Problem: this fails on word-oriented machines or others
 18785	     with multiple pointer formats.
 18786	
 18787	  4. The assumption that the parameters of a routine are stored in
 18788	     memory, contiguously, and in strictly ascending or descending
 18789	     order.  Problem: this fails on many RISC architectures.
 18790	
 18791	  5. The assumption that pointer and integer types are the same size,
 18792	     and that pointers can be stuffed into integer variables (and
 18793	     vice-versa) and drawn back out without being truncated or mangled.
 18794	     Problem: this fails on segmented architectures or word-oriented
 18795	     machines with funny pointer formats.
 18796	
 18797	  6. The assumption that a data type of any size may begin at any byte
 18798	     address in memory (for example, that you can freely construct and
 18799	     dereference a pointer to a word- or greater-sized object at an odd
 18800	     char address).  Problem: this fails on many (esp. RISC)
 18801	     architectures better optimized for {HLL} execution speed, and can
 18802	     cause an illegal address fault or bus error.
 18803	
 18804	  7. The (related) assumption that there is no padding at the end of
 18805	     types and that in an array you can thus step right from the last
 18806	     byte of a previous component to the first byte of the next one.
 18807	     This is not only machine- but compiler-dependent.
 18808	
 18809	  8. The assumption that memory address space is globally flat and that
 18810	     the array reference `foo[-1]' is necessarily valid.  Problem: this
 18811	     fails at 0, or other places on segment-addressed machines like
 18812	     Intel chips (yes, segmentation is universally considered a
 18813	     {brain-damaged} way to design machines (see {moby}), but that is a
 18814	     separate issue).
 18815	
 18816	  9. The assumption that objects can be arbitrarily large with no
 18817	     special considerations.  Problem: this fails on segmented
 18818	     architectures and under non-virtual-addressing environments.
 18819	
 18820	 10. The assumption that the stack can be as large as memory.  Problem:
 18821	     this fails on segmented architectures or almost anything else
 18822	     without virtual addressing and a paged stack.
 18823	
 18824	 11. The assumption that bits and addressable units within an object are
 18825	     ordered in the same way and that this order is a constant of
 18826	     nature.  Problem: this fails on {big-endian} machines.
 18827	
 18828	 12. The assumption that it is meaningful to compare pointers to
 18829	     different objects not located within the same array, or to objects
 18830	     of different types.  Problem: the former fails on segmented
 18831	     architectures, the latter on word-oriented machines or others with
 18832	     multiple pointer formats.
 18833	
 18834	 13. The assumption that an `int' is 32 bits, or (nearly equivalently)
 18835	     the assumption that `sizeof(int) == sizeof(long)'.  Problem: this
 18836	     fails on PDP-11s, 286-based systems and even on 386 and 68000
 18837	     systems under some compilers.
 18838	
 18839	 14. The assumption that `argv[]' is writable.  Problem: this fails in
 18840	     many embedded-systems C environments and even under a few flavors
 18841	     of UNIX.
 18842	
 18843	   Note that a programmer can validly be accused of vaxocentrism
 18844	   even if he or she has never seen a VAX.  Some of these assumptions
 18845	   (esp. 2--5) were valid on the PDP-11, the original C machine, and
 18846	   became endemic years before the VAX.  The terms `vaxocentricity'
 18847	   and `all-the-world's-a-VAX syndrome' have been used synonymously.
 18848	
 18849	:vdiff: /vee'dif/ v.,n. Visual diff.  The operation of finding
 18850	   differences between two files by {eyeball search}.  The term
 18851	   `optical diff' has also been reported, and is sometimes more
 18852	   specifically used for the act of superimposing two nearly identical
 18853	   printouts on one another and holding them up to a light to spot
 18854	   differences.  Though this method is poor for detecting omissions in
 18855	   the `rear' file, it can also be used with printouts of graphics, a
 18856	   claim few if any diff programs can make.  See {diff}.
 18857	
 18858	:veeblefester: /vee'b*l-fes`tr/ [from the "Born Loser"
 18859	   comix via Commodore; prob. originally from `Mad' Magazine's
 18860	   `Veeblefeetzer' parodies ca. 1960] n. Any obnoxious person engaged
 18861	   in the (alleged) professions of marketing or management.  Antonym
 18862	   of {hacker}.  Compare {suit}, {marketroid}.
 18863	
 18864	:Venus flytrap: [after the insect-eating plant] n. See {firewall
 18865	   machine}.
 18866	
 18867	:verbage: /ver'b*j/ n. A deliberate misspelling and mispronunciation of
 18868	   {verbiage} that assimilates it to the word `garbage'.  Compare
 18869	   {content-free}.  More pejorative than `verbiage'.
 18870	
 18871	:verbiage: n. When the context involves a software or hardware
 18872	   system, this refers to {{documentation}}.  This term borrows the
 18873	   connotations of mainstream `verbiage' to suggest that the
 18874	   documentation is of marginal utility and that the motives behind
 18875	   its production have little to do with the ostensible subject.
 18876	
 18877	:Version 7: alt. V7 /vee' se'vn/ n. The 1978 unsupported release of
 18878	   {{UNIX}} ancestral to all current commercial versions.  Before
 18879	   the release of the POSIX/SVID standards, V7's features were often
 18880	   treated as a UNIX portability baseline.  See {BSD}, {USG UNIX},
 18881	   {{UNIX}}.  Some old-timers impatient with commercialization and
 18882	   kernel bloat still maintain that V7 was the Last True UNIX.
 18883	
 18884	:vgrep: /vee'grep/ v.,n. Visual grep.  The operation of finding
 18885	   patterns in a file optically rather than digitally (also called an
 18886	   `optical grep').  See {grep}; compare {vdiff}.
 18887	
 18888	:vi: /V-I/, *not* /vi:/ and *never* /siks/ [from
 18889	   `Visual Interface'] n. A screen editor crufted together by Bill Joy
 18890	   for an early {BSD} release.  Became the de facto standard
 18891	   UNIX editor and a nearly undisputed hacker favorite outside of MIT
 18892	   until the rise of {EMACS} after about 1984.  Tends to frustrate
 18893	   new users no end, as it will neither take commands while expecting
 18894	   input text nor vice versa, and the default setup provides no
 18895	   indication of which mode one is in (one correspondent accordingly
 18896	   reports that he has often heard the editor's name pronounced
 18897	   /vi:l/).  Nevertheless it is still widely used (about half the
 18898	   respondents in a 1991 USENET poll preferred it), and even EMACS
 18899	   fans often resort to it as a mail editor and for small editing jobs
 18900	   (mainly because it starts up faster than the bulkier versions of
 18901	   EMACS).  See {holy wars}.
 18902	
 18903	:videotex: n. obs. An electronic service offering people the
 18904	   privilege of paying to read the weather on their television screens
 18905	   instead of having somebody read it to them for free while they
 18906	   brush their teeth.  The idea bombed everywhere it wasn't
 18907	   government-subsidized, because by the time videotex was practical
 18908	   the installed base of personal computers could hook up to
 18909	   timesharing services and do the things for which videotex might
 18910	   have been worthwhile better and cheaper.  Videotex planners badly
 18911	   overestimated both the appeal of getting information from a
 18912	   computer and the cost of local intelligence at the user's end.
 18913	   Like the {gorilla arm} effect, this has been a cautionary tale
 18914	   to hackers ever since.  See also {vannevar}.
 18915	
 18916	:virgin: adj. Unused; pristine; in a known initial state.  "Let's
 18917	   bring up a virgin system and see if it crashes again."  (Esp.
 18918	   useful after contracting a {virus} through {SEX}.)  Also, by
 18919	   extension, buffers and the like within a program that have not yet
 18920	   been used.
 18921	
 18922	:virtual: [via the technical term `virtual memory', prob. from
 18923	   the term `virtual image' in optics] adj. 1. Common alternative
 18924	   to {logical}; often used to refer to the artificial objects
 18925	   created by a computer system to help the system control access to
 18926	   shared resources.  2. Simulated; performing the functions of
 18927	   something that isn't really there.  An imaginative child's doll may
 18928	   be a virtual playmate.  Oppose {real}.
 18929	
 18930	:virtual Friday: n. The last day before an extended weekend, if
 18931	   that day is not a `real' Friday.  For example, the U.S. holiday
 18932	   Thanksgiving is always on a Thursday.  The next day is often also a
 18933	   holiday or taken as an extra day off, in which case Wednesday of
 18934	   that week is a virtual Friday (and Thursday is a virtual Saturday,
 18935	   as is Friday).  There are also `virtual Mondays' that are
 18936	   actually Tuesdays, after the three-day weekends associated with
 18937	   many national holidays in the U.S.
 18938	
 18939	:virtual reality: n. 1. Computer simulations that use 3-D graphics
 18940	   and devices such as the Dataglove to allow the user to interact
 18941	   with the simulation.  See {cyberspace}.  2. A form of network
 18942	   interaction incorporating aspects of role-playing games,
 18943	   interactive theater, improvisational comedy, and `true confessions'
 18944	   magazines.  In a virtual reality forum (such as USENET's
 18945	   alt.callahans newsgroup or the {MUD} experiments on Internet),
 18946	   interaction between the participants is written like a shared novel
 18947	   complete with scenery, `foreground characters' that may be
 18948	   personae utterly unlike the people who write them, and common
 18949	   `background characters' manipulable by all parties.  The one
 18950	   iron law is that you may not write irreversible changes to a
 18951	   character without the consent of the person who `owns' it.
 18952	   Otherwise anything goes.  See {bamf}, {cyberspace}.
 18953	
 18954	:virus: [from the obvious analogy with biological viruses, via SF]
 18955	   n. A cracker program that searches out other programs and `infects'
 18956	   them by embedding a copy of itself in them, so that they become
 18957	   {Trojan Horse}s.  When these programs are executed, the embedded
 18958	   virus is executed too, thus propagating the `infection'.  This
 18959	   normally happens invisibly to the user.  Unlike a {worm}, a
 18960	   virus cannot infect other computers without assistance.  It is
 18961	   propagated by vectors such as humans trading programs with their
 18962	   friends (see {SEX}).  The virus may do nothing but propagate
 18963	   itself and then allow the program to run normally.  Usually,
 18964	   however, after propagating silently for a while, it starts doing
 18965	   things like writing cute messages on the terminal or playing
 18966	   strange tricks with your display (some viruses include nice
 18967	   {display hack}s).  Many nasty viruses, written by particularly
 18968	   perversely minded {cracker}s, do irreversible damage, like
 18969	   nuking all the user's files.
 18970	
 18971	   In the 1990s, viruses have become a serious problem, especially
 18972	   among IBM PC and Macintosh users (the lack of security on these
 18973	   machines enables viruses to spread easily, even infecting the
 18974	   operating system).  The production of special anti-virus software
 18975	   has become an industry, and a number of exaggerated media reports
 18976	   have caused outbreaks of near hysteria among users; many
 18977	   {luser}s tend to blame *everything* that doesn't work as
 18978	   they had expected on virus attacks.  Accordingly, this sense of
 18979	   `virus' has passed not only into techspeak but into also popular
 18980	   usage (where it is often incorrectly used to denote a {worm} or
 18981	   even a {Trojan horse}).  Compare {back door}; see also
 18982	   {UNIX conspiracy}.
 18983	
 18984	:visionary: n. 1. One who hacks vision, in the sense of an
 18985	   Artificial Intelligence researcher working on the problem of
 18986	   getting computers to `see' things using TV cameras.  (There isn't
 18987	   any problem in sending information from a TV camera to a computer.
 18988	   The problem is, how can the computer be programmed to make use of
 18989	   the camera information?  See {SMOP}, {AI-complete}.)  2. [IBM]
 18990	   One who reads the outside literature.  At IBM, apparently, such a
 18991	   penchant is viewed with awe and wonder.
 18992	
 18993	:VMS: /V-M-S/ n. DEC's proprietary operating system for its VAX
 18994	   minicomputer; one of the seven or so environments that loom largest
 18995	   in hacker folklore.  Many UNIX fans generously concede that VMS
 18996	   would probably be the hacker's favorite commercial OS if UNIX
 18997	   didn't exist; though true, this makes VMS fans furious.  One major
 18998	   hacker gripe with VMS concerns its slowness --- thus the following
 18999	   limerick:
 19000	
 19001	        There once was a system called VMS
 19002	        Of cycles by no means abstemious.
 19003	             It's chock-full of hacks
 19004	             And runs on a VAX
 19005	        And makes my poor stomach all squeamious.
 19006	                                         --- The Great Quux
 19007	
 19008	   See also {VAX}, {{TOPS-10}}, {{TOPS-20}}, {{UNIX}}, {runic}.
 19009	
 19010	:voice: vt. To phone someone, as opposed to emailing them or
 19011	   connecting in {talk mode}.  "I'm busy now; I'll voice you later."
 19012	
 19013	:voice-net: n. Hackish way of referring to the telephone system,
 19014	   analogizing it to a digital network.  USENET {sig block}s not
 19015	   uncommonly include the sender's phone next to a "Voice:" or
 19016	   "Voice-Net:" header; common variants of this are "Voicenet" and
 19017	   "V-Net".  Compare {paper-net}, {snail-mail}.
 19018	
 19019	:voodoo programming: [from George Bush's "voodoo economics"] n.
 19020	   The use by guess or cookbook of an {obscure} or {hairy} system,
 19021	   feature, or algorithm that one does not truly understand.  The
 19022	   implication is that the technique may not work, and if it doesn't,
 19023	   one will never know why.  Almost synonymous with {black magic},
 19024	   except that black magic typically isn't documented and
 19025	   *nobody* understands it.  Compare {magic}, {deep magic},
 19026	   {heavy wizardry}, {rain dance}, {cargo cult programming},
 19027	   {wave a dead chicken}.
 19028	
 19029	:VR: // [MUD] n. On-line abbrev for {virtual reality}, as
 19030	   opposed to {RL}.
 19031	
 19032	:Vulcan nerve pinch: n. [from the old "Star Trek" TV series via
 19033	   Commodore Amiga hackers] The keyboard combination that forces a
 19034	   soft-boot or jump to ROM monitor (on machines that support such a
 19035	   feature).  On many micros this is Ctrl-Alt-Del; on Suns, L1-A; on
 19036	   some Macintoshes, it is <Cmd>-<Power switch>!  Also called
 19037	   {three-finger salute}.  Compare {quadruple bucky}.
 19038	
 19039	:vulture capitalist: n. Pejorative hackerism for `venture
 19040	   capitalist', deriving from the common practice of pushing contracts
 19041	   that deprive inventors of control over their own innovations and
 19042	   most of the money they ought to have made from them.
 19043	
 19044	= W =
 19045	=====
 19046	
 19047	:wabbit: /wab'it/ [almost certainly from Elmer Fudd's immortal
 19048	   line "You wascawwy wabbit!"] n. 1. A legendary early hack
 19049	   reported on a System/360 at RPI and elsewhere around 1978; this may
 19050	   have descended (if only by inspiration) from hack called RABBITS
 19051	   reported from 1969 on a Burroughs 55000 at the University of
 19052	   Washington Computer Center.  The program would make two copies of
 19053	   itself every time it was run, eventually crashing the system.
 19054	   2. By extension, any hack that includes infinite self-replication
 19055	   but is not a {virus} or {worm}.  See {fork bomb}, see also
 19056	   {cookie monster}.
 19057	
 19058	:WAITS:: /wayts/ n. The mutant cousin of {{TOPS-10}} used on a
 19059	   handful of systems at {{SAIL}} up to 1990.  There was never an
 19060	   `official' expansion of WAITS (the name itself having been arrived
 19061	   at by a rather sideways process), but it was frequently glossed as
 19062	   `West-coast Alternative to ITS'.  Though WAITS was less visible
 19063	   than ITS, there was frequent exchange of people and ideas between
 19064	   the two communities, and innovations pioneered at WAITS exerted
 19065	   enormous indirect influence.  The early screen modes of {EMACS},
 19066	   for example, were directly inspired by WAITS's `E' editor --- one
 19067	   of a family of editors that were the first to do `real-time
 19068	   editing', in which the editing commands were invisible and where
 19069	   one typed text at the point of insertion/overwriting.  The modern
 19070	   style of multi-region windowing is said to have originated there,
 19071	   and WAITS alumni at XEROX PARC and elsewhere played major roles in
 19072	   the developments that led to the XEROX Star, the Macintosh, and the
 19073	   Sun workstations.  {Bucky bits} were also invented there ---
 19074	   thus, the ALT key on every IBM PC is a WAITS legacy.  One notable
 19075	   WAITS feature seldom duplicated elsewhere was a news-wire interface
 19076	   that allowed WAITS hackers to read, store, and filter AP and UPI
 19077	   dispatches from their terminals; the system also featured a
 19078	   still-unusual level of support for what is now called `multimedia'
 19079	   computing, allowing analog audio and video signals to be switched
 19080	   to programming terminals.
 19081	
 19082	:waldo: /wol'doh/ [From Robert A. Heinlein's story "Waldo"]
 19083	   1. A mechanical agent, such as a gripper arm, controlled by a human
 19084	   limb.  When these were developed for the nuclear industry in the
 19085	   mid-1940s they were named after the invention described by Heinlein
 19086	   in the story, which he wrote in 1942.  Now known by the more
 19087	   generic term `telefactoring', this technology is of intense
 19088	   interest to NASA for tasks like space station maintenance.  2. At
 19089	   Harvard (particularly by Tom Cheatham and students), this is used
 19090	   instead of {foobar} as a metasyntactic variable and general
 19091	   nonsense word.  See {foo}, {bar}, {foobar}, {quux}.
 19092	
 19093	:walk: n.,vt. Traversal of a data structure, especially an array or
 19094	   linked-list data structure in {core}.  See also {codewalker},
 19095	   {silly walk}, {clobber}.
 19096	
 19097	:walk off the end of: vt. To run past the end of an array, list, or
 19098	   medium after stepping through it --- a good way to land in trouble.
 19099	   Often the result of an {off-by-one error}.  Compare
 19100	   {clobber}, {roach}, {smash the stack}.
 19101	
 19102	:walking drives: n. An occasional failure mode of magnetic-disk
 19103	   drives back in the days when they were huge, clunky {washing
 19104	   machine}s.  Those old {dinosaur} parts carried terrific angular
 19105	   momentum; the combination of a misaligned spindle or worn bearings
 19106	   and stick-slip interactions with the floor could cause them to
 19107	   `walk' across a room, lurching alternate corners forward a couple
 19108	   of millimeters at a time.  There is a legend about a drive that
 19109	   walked over to the only door to the computer room and jammed it
 19110	   shut; the staff had to cut a hole in the wall in order to get at
 19111	   it!  Walking could also be induced by certain patterns of drive
 19112	   access (a fast seek across the whole width of the disk, followed by
 19113	   a slow seek in the other direction).  Some bands of old-time
 19114	   hackers figured out how to induce disk-accessing patterns that
 19115	   would do this to particular drive models and held disk-drive races.
 19116	
 19117	:wall: [WPI] interj. 1. An indication of confusion, usually spoken
 19118	   with a quizzical tone:  "Wall??"  2. A request for further
 19119	   explication.  Compare {octal forty}.  3. [UNIX] v. To send a message
 19120	   to everyone currently logged in, esp. with the wall(8) utility.
 19121	
 19122	   It is said that sense 1 came from the idiom `like talking to a
 19123	   blank wall'.  It was originally used in situations where, after you
 19124	   had carefully answered a question, the questioner stared at you
 19125	   blankly, clearly having understood nothing that was explained.  You
 19126	   would then throw out a "Hello, wall?" to elicit some sort of
 19127	   response from the questioner.  Later, confused questioners began
 19128	   voicing "Wall?" themselves.
 19129	
 19130	:wall follower: n. A person or algorithm that compensates for lack
 19131	   of sophistication or native stupidity by efficiently following some
 19132	   simple procedure shown to have been effective in the past.  Used of
 19133	   an algorithm, this is not necessarily pejorative; it recalls
 19134	   `Harvey Wallbanger', the winning robot in an early AI contest
 19135	   (named, of course, after the cocktail).  Harvey successfully solved
 19136	   mazes by keeping a `finger' on one wall and running till it came
 19137	   out the other end.  This was inelegant, but it was mathematically
 19138	   guaranteed to work on simply-connected mazes --- and, in fact,
 19139	   Harvey outperformed more sophisticated robots that tried to
 19140	   `learn' each maze by building an internal representation of it.
 19141	   Used of humans, the term *is* pejorative and implies an
 19142	   uncreative, bureaucratic, by-the-book mentality.  See also {code
 19143	   grinder}, {droid}.
 19144	
 19145	:wall time: n. (also `wall clock time') 1. `Real world' time (what
 19146	   the clock on the wall shows), as opposed to the system clock's idea
 19147	   of time.  2. The real running time of a program, as opposed to the
 19148	   number of {clocks} required to execute it (on a timesharing
 19149	   system these will differ, as no one program gets all the
 19150	   {clocks}, and on multiprocessor systems with good thread support
 19151	   one may get more processor clocks than real-time clocks).
 19152	
 19153	:wallpaper: n. 1. A file containing a listing (e.g., assembly
 19154	   listing) or a transcript, esp. a file containing a transcript of
 19155	   all or part of a login session.  (The idea was that the paper for
 19156	   such listings was essentially good only for wallpaper, as evidenced
 19157	   at Stanford, where it was used to cover windows.)  Now rare,
 19158	   esp. since other systems have developed other terms for it (e.g.,
 19159	   PHOTO on TWENEX).  However, the UNIX world doesn't have an
 19160	   equivalent term, so perhaps {wallpaper} will take hold there.
 19161	   The term probably originated on ITS, where the commands to begin
 19162	   and end transcript files were `:WALBEG' and `:WALEND',
 19163	   with default file `WALL PAPER' (the space was a path
 19164	   delimiter).  2. The background pattern used on graphical
 19165	   workstations (this is techspeak under the `Windows' graphical user
 19166	   interface to MS-DOS).  3. `wallpaper file' n. The file that
 19167	   contains the wallpaper information before it is actually printed on
 19168	   paper.  (Even if you don't intend ever to produce a real paper copy
 19169	   of the file, it is still called a wallpaper file.)
 19170	
 19171	:wango: /wang'goh/ n. Random bit-level {grovel}ling going on in
 19172	   a system during some unspecified operation.  Often used in
 19173	   combination with {mumble}.  For example: "You start with the `.o'
 19174	   file, run it through this postprocessor that does mumble-wango ---
 19175	   and it comes out a snazzy object-oriented executable."
 19176	
 19177	:wank: /wangk/ [Columbia University: prob. by mutation from
 19178	   Commonwealth slang v. `wank', to masturbate] n.,v. Used much as
 19179	   {hack} is elsewhere, as a noun denoting a clever technique or
 19180	   person or the result of such cleverness.  May describe (negatively)
 19181	   the act of hacking for hacking's sake ("Quit wanking, let's go get
 19182	   supper!")  or (more positively) a {wizard}.  Adj.  `wanky'
 19183	   describes something particularly clever (a person, program, or
 19184	   algorithm).  Conversations can also get wanky when there are too
 19185	   many wanks involved.  This excess wankiness is signalled by an
 19186	   overload of the `wankometer' (compare {bogometer}).  When the
 19187	   wankometer overloads, the conversation's subject must be changed,
 19188	   or all non-wanks will leave.  Compare `neep-neeping' (under
 19189	   {neep-neep}).  Usage: U.S. only.  In Britain and the Commonwealth
 19190	   this word is *extremely* rude and is best avoided unless one
 19191	   intends to give offense.
 19192	
 19193	:wannabee: /won'*-bee/ (also, more plausibly, spelled
 19194	   `wannabe') [from a term recently used to describe Madonna fans
 19195	   who dress, talk, and act like their idol; prob. originally from
 19196	   biker slang] n. A would-be {hacker}.  The connotations of this
 19197	   term differ sharply depending on the age and exposure of the
 19198	   subject.  Used of a person who is in or might be entering
 19199	   {larval stage}, it is semi-approving; such wannabees can be
 19200	   annoying but most hackers remember that they, too, were once such
 19201	   creatures.  When used of any professional programmer, CS academic,
 19202	   writer, or {suit}, it is derogatory, implying that said person
 19203	   is trying to cuddle up to the hacker mystique but doesn't,
 19204	   fundamentally, have a prayer of understanding what it is all about.
 19205	   Overuse of terms from this lexicon is often an indication of the
 19206	   {wannabee} nature.  Compare {newbie}.
 19207	
 19208	   Historical note: The wannabee phenomenon has a slightly different
 19209	   flavor now (1991) than it did ten or fifteen years ago.  When the
 19210	   people who are now hackerdom's tribal elders were in {larval
 19211	   stage}, the process of becoming a hacker was largely unconscious
 19212	   and unaffected by models known in popular culture --- communities
 19213	   formed spontaneously around people who, *as individuals*, felt
 19214	   irresistibly drawn to do hackerly things, and what wannabees
 19215	   experienced was a fairly pure, skill-focused desire to become
 19216	   similarly wizardly.  Those days of innocence are gone forever;
 19217	   society's adaptation to the advent of the microcomputer after 1980
 19218	   included the elevation of the hacker as a new kind of folk hero,
 19219	   and the result is that some people semi-consciously set out to
 19220	   *be hackers* and borrow hackish prestige by fitting the
 19221	   popular image of hackers.  Fortunately, to do this really well, one
 19222	   has to actually become a wizard.  Nevertheless, old-time hackers
 19223	   tend to share a poorly articulated disquiet about the change; among
 19224	   other things, it gives them mixed feelings about the effects of
 19225	   public compendia of lore like this one.
 19226	
 19227	:warlording: [from the USENET group alt.fan.warlord] v. The act
 19228	   of excoriating a bloated, ugly, or derivative {sig block}.
 19229	   Common grounds for warlording include the presence of a signature
 19230	   rendered in a {BUAF}, over-used or cliched {sig quote}s, ugly
 19231	   {ASCII art}, or simply excessive size.  The original `Warlord'
 19232	   was a {BIFF}-like {newbie} c.1991 who featured in his sig a
 19233	   particularly large and obnoxious ASCII graphic resembling the sword
 19234	   of Conan the Barbarian in the 1981 John Milius movie; the group
 19235	   name alt.fan.warlord was sarcasm, and the characteristic mode
 19236	   of warlording is devastatingly sarcastic praise.
 19237	
 19238	:warm boot: n. See {boot}.
 19239	
 19240	:wart: n. A small, {crock}y {feature} that sticks out of an
 19241	   otherwise {clean} design.  Something conspicuous for localized
 19242	   ugliness, especially a special-case exception to a general rule.
 19243	   For example, in some versions of `csh(1)', single quotes
 19244	   literalize every character inside them except `!'.  In ANSI C,
 19245	   the `??' syntax used obtaining ASCII characters in a foreign
 19246	   environment is a wart.  See also {miswart}.
 19247	
 19248	:washing machine: n. Old-style 14-inch hard disks in floor-standing
 19249	   cabinets.  So called because of the size of the cabinet and the
 19250	   `top-loading' access to the media packs --- and, of course, they
 19251	   were always set on `spin cycle'.  The washing-machine idiom
 19252	   transcends language barriers; it is even used in Russian hacker
 19253	   jargon.  See also {walking drives}.  The thick channel cables
 19254	   connecting these were called `bit hoses' (see {hose}).
 19255	
 19256	:water MIPS: n. (see {MIPS}, sense 2) Large, water-cooled
 19257	   machines of either today's ECL-supercomputer flavor or yesterday's
 19258	   traditional {mainframe} type.
 19259	
 19260	
 19261	:wave a dead chicken: v. To perform a ritual in the direction of
 19262	   crashed software or hardware that one believes to be futile but
 19263	   is nevertheless necessary so that others are satisfied that an
 19264	   appropriate degree of effort has been expended.  "I'll wave a dead
 19265	   chicken over the source code, but I really think we've run into an
 19266	   OS bug."  Compare {voodoo programming}, {rain dance}.
 19267	
 19268	:weasel: n. [Cambridge] A na"ive user, one who deliberately or
 19269	   accidentally does things that are stupid or ill-advised.  Roughly
 19270	   synonymous with {loser}.
 19271	
 19272	:wedged: [from a common description of recto-cranial inversion]
 19273	   adj.  1. To be stuck, incapable of proceeding without help.  This
 19274	   is different from having crashed.  If the system has crashed, then
 19275	   it has become totally non-functioning.  If the system is wedged, it
 19276	   is trying to do something but cannot make progress; it may be
 19277	   capable of doing a few things, but not be fully operational.  For
 19278	   example, a process may become wedged if it {deadlock}s with
 19279	   another (but not all instances of wedging are deadlocks).  See also
 19280	   {gronk}, {locked up}, {hosed}.  Describes a
 19281	   {deadlock}ed condition.  2. Often refers to humans suffering
 19282	   misconceptions.  "He's totally wedged --- he's convinced that he
 19283	   can levitate through meditation."  3. [UNIX] Specifically used to
 19284	   describe the state of a TTY left in a losing state by abort of a
 19285	   screen-oriented program or one that has messed with the line
 19286	   discipline in some obscure way.
 19287	
 19288	:wedgie: [Fairchild] n. A bug.  Prob. related to {wedged}.
 19289	
 19290	:wedgitude: /wedj'i-t[y]ood/ n. The quality or state of being
 19291	   {wedged}.
 19292	
 19293	:weeble: /weeb'l/ [Cambridge] interj. Used to denote frustration,
 19294	   usually at amazing stupidity.  "I stuck the disk in upside down."
 19295	   "Weeble...." Compare {gurfle}.
 19296	
 19297	:weeds: n. 1. Refers to development projects or algorithms that have
 19298	   no possible relevance or practical application.  Comes from `off in
 19299	   the weeds'.  Used in phrases like "lexical analysis for microcode
 19300	   is serious weeds...."  2. At CDC/ETA before its demise, the
 19301	   phrase `go off in the weeds' was equivalent to IBM's {branch to
 19302	   Fishkill} and mainstream hackerdom's {jump off into never-never
 19303	   land}.
 19304	
 19305	:weenie: n. 1. [on BBSes] Any of a species of luser resembling a
 19306	   less amusing version of {BIFF} that infests many {BBS}
 19307	   systems.  The typical weenie is a teenage boy with poor social
 19308	   skills travelling under a grandiose {handle} derived from
 19309	   fantasy or heavy-metal rock lyrics.  Among sysops, `the weenie
 19310	   problem' refers to the marginally literate and profanity-laden
 19311	   {flamage} weenies tend to spew all over a newly-discovered BBS.
 19312	   Compare {spod}, {computer geek}, {terminal junkie}.
 19313	   2. [Among hackers] When used with a qualifier (for example, as in
 19314	   {UNIX weenie}, VMS weenie, IBM weenie) this can be either an
 19315	   insult or a term of praise, depending on context, tone of voice,
 19316	   and whether or not it is applied by a person who considers him or
 19317	   herself to be the same sort of weenie.  Implies that the weenie has
 19318	   put a major investment of time, effort, and concentration into the
 19319	   area indicated; whether this is positive or negative depends on the
 19320	   hearer's judgment of how the speaker feels about that area.  See
 19321	   also {bigot}.  3. The semicolon character, `;' (ASCII
 19322	   0111011).
 19323	
 19324	:Weenix: /wee'niks/ [ITS] n. A derogatory term for {{UNIX}},
 19325	   derived from {UNIX weenie}.  According to one noted ex-ITSer, it
 19326	   is "the operating system preferred by Unix Weenies: typified by
 19327	   poor modularity, poor reliability, hard file deletion, no file
 19328	   version numbers, case sensitivity everywhere, and users who believe
 19329	   that these are all advantages".  Some ITS fans behave as though
 19330	   they believe UNIX stole a future that rightfully belonged to them.
 19331	   See {{ITS}}, sense 2.
 19332	
 19333	:well-behaved: adj. 1. [primarily {{MS-DOS}}] Said of software
 19334	   conforming to system interface guidelines and standards.
 19335	   Well-behaved software uses the operating system to do chores such
 19336	   as keyboard input, allocating memory and drawing graphics.  Oppose
 19337	   {ill-behaved}.  2. Software that does its job quietly and
 19338	   without counterintuitive effects.  Esp. said of software having
 19339	   an interface spec sufficiently simple and well-defined that it can
 19340	   be used as a {tool} by other software. See {cat}.
 19341	
 19342	:well-connected: adj. Said of a computer installation, this means
 19343	   that it has reliable email links with the network and/or that
 19344	   it relays a large fraction of available {USENET} newsgroups.
 19345	   `Well-known' can be almost synonymous, but also implies that the
 19346	   site's name is familiar to many (due perhaps to an archive service
 19347	   or active USENET users).
 19348	
 19349	:wetware: /wet'weir/ [prob. from the novels of Rudy Rucker] n.
 19350	   1. The human nervous system, as opposed to computer hardware or
 19351	   software.  "Wetware has 7 plus or minus 2 temporary registers."
 19352	   2. Human beings (programmers, operators, administrators) attached
 19353	   to a computer system, as opposed to the system's hardware or
 19354	   software.  See {liveware}, {meatware}.
 19355	
 19356	:whack: v. According to arch-hacker James Gosling, to "...modify a
 19357	   program with no idea whatsoever how it works." (See {whacker}.)
 19358	   It is actually possible to do this in nontrivial circumstances if
 19359	   the change is small and well-defined and you are very good at
 19360	   {glark}ing things from context.  As a trivial example, it is
 19361	   relatively easy to change all `stderr' writes to `stdout'
 19362	   writes in a piece of C filter code which remains otherwise
 19363	   mysterious.
 19364	
 19365	:whacker: [University of Maryland: from {hacker}] n. 1. A person,
 19366	   similar to a {hacker}, who enjoys exploring the details of
 19367	   programmable systems and how to stretch their capabilities.
 19368	   Whereas a hacker tends to produce great hacks, a whacker only ends
 19369	   up whacking the system or program in question.  Whackers are often
 19370	   quite egotistical and eager to claim {wizard} status,
 19371	   regardless of the views of their peers.  2. A person who is good at
 19372	   programming quickly, though rather poorly and ineptly.
 19373	
 19374	:whales: n. See {like kicking dead whales down the beach}.
 19375	
 19376	:whalesong: n. The peculiar clicking and whooshing sounds made by a
 19377	   PEP modem such as the Telebit Trailblazer as it tries to
 19378	   synchronize with another PEP modem for their special high-speed
 19379	   mode.  This sound isn't anything like the normal two-tone handshake
 19380	   between conventional modems and is instantly recognizable to anyone
 19381	   who has heard it more than once.  It sounds, in fact, very much
 19382	   like whale songs.  This noise is also called "the moose call" or
 19383	   "moose tones".
 19384	
 19385	:What's a spline?: [XEROX PARC] This phrase expands to: "You have
 19386	   just used a term that I've heard for a year and a half, and I feel
 19387	   I should know, but don't.  My curiosity has finally overcome my
 19388	   guilt."  The PARC lexicon adds "Moral: don't hesitate to ask
 19389	   questions, even if they seem obvious."
 19390	
 19391	:wheel: [from slang `big wheel' for a powerful person] n. A
 19392	   person who has an active {wheel bit}.  "We need to find a
 19393	   wheel to unwedge the hung tape drives." (see {wedged}, sense
 19394	   1.)
 19395	
 19396	:wheel bit: n. A privilege bit that allows the possessor to perform
 19397	   some restricted operation on a timesharing system, such as read or
 19398	   write any file on the system regardless of protections, change or
 19399	   look at any address in the running monitor, crash or reload the
 19400	   system, and kill or create jobs and user accounts.  The term was
 19401	   invented on the TENEX operating system, and carried over to
 19402	   TOPS-20, XEROX-IFS, and others.  The state of being in a privileged
 19403	   logon is sometimes called `wheel mode'.  This term entered the
 19404	   UNIX culture from TWENEX in the mid-1980s and has been gaining
 19405	   popularity there (esp. at university sites).  See also {root}.
 19406	
 19407	:wheel wars: [Stanford University] A period in {larval stage}
 19408	   during which student hackers hassle each other by attempting to log
 19409	   each other out of the system, delete each other's files, and
 19410	   otherwise wreak havoc, usually at the expense of the lesser users.
 19411	
 19412	:White Book: n. 1. Syn. {K&R}.  2. Adobe's fourth book in the
 19413	   PostScript series, describing the previously-secret format of Type
 19414	   1 fonts; `Adobe Type 1 Font Format, version 1.1',
 19415	   (Addison-Wesley, 1990, ISBN 0-201-57044-0). See also {Red Book},
 19416	   {Green Book}, {Blue Book}.
 19417	
 19418	:whizzy: [Sun] adj. (alt. `wizzy') Describes a {cuspy} program;
 19419	   one that is feature-rich and well presented.
 19420	
 19421	:WIBNI: // [Bell Labs: Wouldn't It Be Nice If] n. What most
 19422	   requirements documents and specifications consist entirely of.
 19423	   Compare {IWBNI}.
 19424	
 19425	:widget: n. 1. A meta-thing.  Used to stand for a real object in
 19426	   didactic examples (especially database tutorials).  Legend has it
 19427	   that the original widgets were holders for buggy whips.  "But
 19428	   suppose the parts list for a widget has 52 entries...."
 19429	   2. [poss. evoking `window gadget'] A user interface object in
 19430	   {X} graphical user interfaces.
 19431	
 19432	:wiggles: n. [scientific computation] In solving partial differential
 19433	   equations by finite difference and similar methods, wiggles are
 19434	   sawtooth (up-down-up-down) oscillations at the shortest wavelength
 19435	   representable on the grid.  If an algorithm is unstable, this is
 19436	   often the most unstable waveform, so it grows to dominate the
 19437	   solution.  Alternatively, stable (though inaccurate) wiggles can be
 19438	   generated near a discontinuity by a Gibbs phenomenon.
 19439	
 19440	:WIMP environment: n. [acronymic from `Window, Icon, Menu, Pointing
 19441	   device (or Pull-down menu)'] A graphical-user-interface-based
 19442	   environment such as {X} or the Macintosh interface, as described
 19443	   by a hacker who prefers command-line interfaces for their superior
 19444	   flexibility and extensibility.  See {menuitis},
 19445	   {user-obsequious}.
 19446	
 19447	:win: [MIT] 1. vi. To succeed.  A program wins if no unexpected
 19448	   conditions arise, or (especially) if it sufficiently {robust} to
 19449	   take exceptions in stride.  2. n. Success, or a specific instance
 19450	   thereof.  A pleasing outcome.  A {feature}.  Emphatic forms:
 19451	   `moby win', `super win', `hyper-win' (often used
 19452	   interjectively as a reply).  For some reason `suitable win' is
 19453	   also common at MIT, usually in reference to a satisfactory solution
 19454	   to a problem.  Oppose {lose}; see also {big win}, which isn't
 19455	   quite just an intensification of `win'.
 19456	
 19457	:win big: vi. To experience serendipity.  "I went shopping and won
 19458	   big; there was a 2-for-1 sale." See {big win}.
 19459	
 19460	:win win: interj. Expresses pleasure at a {win}.
 19461	
 19462	:Winchester:: n. Informal generic term for `floating-head'
 19463	   magnetic-disk drives in which the read-write head planes over the
 19464	   disk surface on an air cushion.  The name arose because the
 19465	   original 1973 engineering prototype for what later became the
 19466	   IBM 3340 featured two 30-megabyte volumes; 30--30 became
 19467	   `Winchester' when somebody noticed the similarity to the common
 19468	   term for a famous Winchester rifle (in the latter, the first 30
 19469	   referred to caliber and the second to the grain weight of the
 19470	   charge).
 19471	
 19472	:winged comments: n. Comments set on the same line as code, as
 19473	   opposed to {boxed comments}.  In C, for example:
 19474	
 19475	     d = sqrt(x*x + y*y);  /* distance from origin */
 19476	
 19477	   Generally these refer only to the action(s) taken on that line.
 19478	
 19479	:winkey: n. (alt. `winkey face')  See {emoticon}.
 19480	
 19481	:winnage: /win'*j/ n. The situation when a lossage is corrected, or
 19482	   when something is winning.
 19483	
 19484	:winner: 1. n. An unexpectedly good situation, program, programmer,
 19485	   or person.  "So it turned out I could use a {lexer} generator
 19486	   instead of hand-coding my own pattern recognizer.  What a win!"
 19487	   2. `real winner': Often sarcastic, but also used as high praise
 19488	   (see also the note under {user}). "He's a real winner --- never
 19489	   reports a bug till he can duplicate it and send in an
 19490	   example."
 19491	
 19492	:winnitude: /win'*-t[y]ood/ n. The quality of winning (as opposed
 19493	   to {winnage}, which is the result of winning).  "Guess what?
 19494	   They tweaked the microcode and now the LISP interpreter runs twice
 19495	   as fast as it used to."  "That's really great!  Boy, what
 19496	   winnitude!"  "Yup. I'll probably get a half-hour's winnage on the
 19497	   next run of my program."  Perhaps curiously, the obvious antonym
 19498	   `lossitude' is rare.
 19499	
 19500	:wired: n. See {hardwired}.
 19501	
 19502	:wirehead: /wi:r'hed/ n. [prob. from SF slang for an
 19503	   electrical-brain-stimulation addict] 1. A hardware hacker,
 19504	   especially one who concentrates on communications hardware.  2. An
 19505	   expert in local-area networks.  A wirehead can be a network
 19506	   software wizard too, but will always have the ability to deal with
 19507	   network hardware, down to the smallest component.  Wireheads are
 19508	   known for their ability to lash up an Ethernet terminator from
 19509	   spare resistors, for example.
 19510	
 19511	:wirewater: n. Syn. {programming fluid}.  This melds the
 19512	   mainstream slang adjective `wired' (stimulated, up, hyperactive)
 19513	   with `firewater'.
 19514	
 19515	:wish list: n. A list of desired features or bug fixes that probably
 19516	   won't get done for a long time, usually because the person
 19517	   responsible for the code is too busy or can't think of a clean way
 19518	   to do it.  "OK, I'll add automatic filename completion to the wish
 19519	   list for the new interface." Compare {tick-list features}.
 19520	
 19521	:within delta of: adj. See {delta}.
 19522	
 19523	:within epsilon of: adj. See {epsilon}.
 19524	
 19525	:wizard: n. 1. A person who knows how a complex piece of software
 19526	   or hardware works (that is, who {grok}s it); esp. someone who
 19527	   can find and fix bugs quickly in an emergency.  Someone is a
 19528	   {hacker} if he or she has general hacking ability, but is a wizard
 19529	   with respect to something only if he or she has specific detailed
 19530	   knowledge of that thing.  A good hacker could become a wizard for
 19531	   something given the time to study it.  2. A person who is permitted
 19532	   to do things forbidden to ordinary people; one who has {wheel}
 19533	   privileges on a system.  3. A UNIX expert, esp. a UNIX systems
 19534	   programmer.  This usage is well enough established that `UNIX
 19535	   Wizard' is a recognized job title at some corporations and to most
 19536	   headhunters.  See {guru}, {lord high fixer}.  See also
 19537	   {deep magic}, {heavy wizardry}, {incantation}, {magic},
 19538	   {mutter}, {rain dance}, {voodoo programming}, {wave a
 19539	   dead chicken}.
 19540	
 19541	:Wizard Book: n. Hal Abelson and Jerry Sussman's `Structure
 19542	   and Interpretation of Computer Programs' (MIT Press, 1984; ISBN
 19543	   0-262-01077-1, an excellent computer science text used in
 19544	   introductory courses at MIT.  So called because of the wizard on
 19545	   the jacket.  One of the {bible}s of the LISP/Scheme
 19546	   world.  Also, less commonly, known as the {Purple Book}.
 19547	
 19548	:wizard mode: [from {rogue}] n. A special access mode of a program or
 19549	   system, usually passworded, that permits some users godlike
 19550	   privileges.  Generally not used for operating systems themselves
 19551	   (`root mode' or `wheel mode' would be used instead).
 19552	
 19553	:wizardly: adj. Pertaining to wizards.  A wizardly {feature} is one
 19554	   that only a wizard could understand or use properly.
 19555	
 19556	:womb box: n. 1. [TMRC] Storage space for equipment.  2. [proposed]
 19557	   A variety of hard-shell equipment case with heavy interior padding
 19558	   and/or shaped carrier cutouts in a foam-rubber matrix; mundanely
 19559	   called a `flight case'.  Used for delicate test equipment,
 19560	   electronics, and musical instruments.
 19561	
 19562	:WOMBAT: [Waste Of Money, Brains, And Time] adj. Applied to problems
 19563	   which are both profoundly {uninteresting} in themselves and
 19564	   unlikely to benefit anyone interesting even if solved.  Often used
 19565	   in fanciful constructions such as `wrestling with a wombat'.  See
 19566	   also {crawling horror}, {SMOP}.  Also note the rather different
 19567	   usage as a metasyntactic variable in {{Commonwealth Hackish}}.
 19568	
 19569	:wonky: /wong'kee/ [from Australian slang] adj. Yet another
 19570	   approximate synonym for {broken}.  Specifically connotes a
 19571	   malfunction that produces behavior seen as crazy, humorous, or
 19572	   amusingly perverse.  "That was the day the printer's font logic
 19573	   went wonky and everybody's listings came out in Tengwar."  Also in
 19574	   `wonked out'.  See {funky}, {demented}, {bozotic}.
 19575	
 19576	:woofer: [University of Waterloo] n. Some varieties of wide paper
 19577	   for printers have a perforation 8.5 inches from the left margin
 19578	   that allows the excess on the right-hand side to be torn off when
 19579	   the print format is 80 columns or less wide.  The right-hand excess
 19580	   may be called `woofer'.  This term (like {tweeter}, which see)
 19581	   has been in use at Waterloo since 1972, but is elsewhere unknown.
 19582	   In audio jargon, the word refers to the bass speaker(s) on a
 19583	   hi-fi.
 19584	
 19585	:workaround: n. A temporary {kluge} inserted in a system under
 19586	   development or test in order to avoid the effects of a {bug} or
 19587	   {misfeature} so that work can continue.  Theoretically,
 19588	   workarounds are always replaced by {fix}es; in practice,
 19589	   customers often find themselves living with workarounds in the
 19590	   first couple of releases.  "The code died on NUL characters in the
 19591	   input, so I fixed it to interpret them as spaces."  "That's not a
 19592	   fix, that's a workaround!"
 19593	
 19594	:working as designed: [IBM] adj. 1. In conformance to a wrong or
 19595	   inappropriate specification; useful, but misdesigned.
 19596	   2. Frequently used as a sardonic comment on a program's utility.
 19597	   3. Unfortunately also used as a bogus reason for not accepting a
 19598	   criticism or suggestion.  At {IBM}, this sense is used in
 19599	   official documents!  See {BAD}.
 19600	
 19601	:worm: [from `tapeworm' in John Brunner's novel `The
 19602	   Shockwave Rider', via XEROX PARC] n. A program that propagates
 19603	   itself over a network, reproducing itself as it goes.  Compare
 19604	   {virus}.  Nowadays the term has negative connotations, as it is
 19605	   assumed that only {cracker}s write worms.  Perhaps the
 19606	   best-known example was Robert T. Morris's `Internet Worm' of 1988,
 19607	   a `benign' one that got out of control and hogged hundreds of
 19608	   Suns and VAXen across the U.S.  See also {cracker}, {RTM},
 19609	   {Trojan horse}, {ice}, and {Great Worm, the}.
 19610	
 19611	:wound around the axle: adj. In an infinite loop.  Often used by older
 19612	   computer types.
 19613	
 19614	:wrap around: vi. (also n. `wraparound' and v. shorthand
 19615	   `wrap') 1. [techspeak] The action of a counter that starts over
 19616	   at zero or at `minus infinity' (see {infinity}) after its
 19617	   maximum value has been reached, and continues incrementing, either
 19618	   because it is programmed to do so or because of an overflow (as
 19619	   when a car's odometer starts over at 0).  2. To change {phase}
 19620	   gradually and continuously by maintaining a steady wake-sleep cycle
 19621	   somewhat longer than 24 hours, e.g., living six long (28-hour) days
 19622	   in a week (or, equivalently, sleeping at the rate of
 19623	   10 microhertz).  See also {phase-wrapping}.
 19624	
 19625	:write-only code: [a play on `read-only memory'] n. Code so
 19626	   arcane, complex, or ill-structured that it cannot be modified or
 19627	   even comprehended by anyone but its author, and possibly not even
 19628	   by him/her.  A {Bad Thing}.
 19629	
 19630	:write-only language: n. A language with syntax (or semantics)
 19631	   sufficiently dense and bizarre that any routine of significant size
 19632	   is {write-only code}.  A sobriquet applied occasionally to C and
 19633	   often to APL, though {INTERCAL} and {TECO} certainly deserve it
 19634	   more.
 19635	
 19636	:write-only memory: n. The obvious antonym to `read-only
 19637	   memory'.  Out of frustration with the long and seemingly useless
 19638	   chain of approvals required of component specifications, during
 19639	   which no actual checking seemed to occur, an engineer at Signetics
 19640	   once created a specification for a write-only memory and included
 19641	   it with a bunch of other specifications to be approved.  This
 19642	   inclusion came to the attention of Signetics {management} only
 19643	   when regular customers started calling and asking for pricing
 19644	   information.  Signetics published a corrected edition of the data
 19645	   book and requested the return of the `erroneous' ones.  Later,
 19646	   around 1974, Signetics bought a double-page spread in `Electronics'
 19647	   magazine's April issue and used the spec as an April Fools' Day
 19648	   joke.  Instead of the more conventional characteristic curves, the
 19649	   25120 "fully encoded, 9046 x N, Random Access, write-only-memory"
 19650	   data sheet included diagrams of "bit capacity vs. Temp.",
 19651	   "Iff vs. Vff", "Number of pins remaining vs. number of socket
 19652	   insertions", and "AQL vs. selling price".  The 25120 required a
 19653	   6.3 VAC VFF supply, a +10V VCC, and VDD of 0V, +/- 2%.
 19654	
 19655	:Wrong Thing: n. A design, action, or decision that is clearly
 19656	   incorrect or inappropriate.  Often capitalized; always emphasized
 19657	   in speech as if capitalized.  The opposite of the {Right Thing};
 19658	   more generally, anything that is not the Right Thing.  In cases
 19659	   where `the good is the enemy of the best', the merely good ---
 19660	   although good --- is nevertheless the Wrong Thing. "In C, the
 19661	   default is for module-level declarations to be visible everywhere,
 19662	   rather than just within the module.  This is clearly the Wrong
 19663	   Thing."
 19664	
 19665	:wugga wugga: /wuh'g* wuh'g*/ n. Imaginary sound that a computer
 19666	   program makes as it labors with a tedious or difficult task.
 19667	   Compare {cruncha cruncha cruncha}, {grind} (sense 4).
 19668	
 19669	:WYSIAYG: /wiz'ee-ayg/ adj. Describes a user interface under
 19670	   which "What You See Is *All* You Get"; an unhappy variant of
 19671	   {WYSIWYG}.  Visual, `point-and-shoot'-style interfaces tend to
 19672	   have easy initial learning curves, but also to lack depth; they
 19673	   often frustrate advanced users who would be better served by a
 19674	   command-style interface.  When this happens, the frustrated user
 19675	   has a WYSIAYG problem.  This term is most often used of editors,
 19676	   word processors, and document formatting programs.  WYSIWYG
 19677	   `desktop publishing' programs, for example, are a clear win for
 19678	   creating small documents with lots of fonts and graphics in them,
 19679	   especially things like newsletters and presentation slides.  When
 19680	   typesetting book-length manuscripts, on the other hand, scale
 19681	   changes the nature of the task; one quickly runs into WYSIAYG
 19682	   limitations, and the increased power and flexibility of a
 19683	   command-driven formatter like TeX or UNIX's `troff(1)' becomes
 19684	   not just desirable but a necessity.
 19685	
 19686	:WYSIWYG: /wiz'ee-wig/ adj. Describes a user interface under
 19687	   which "What You See Is What You Get", as opposed to one that uses
 19688	   more-or-less obscure commands which do not result in immediate
 19689	   visual feedback.  True WYSIWYG in environments supporting multiple
 19690	   fonts or graphics is a a rarely-attained ideal; there are variants
 19691	   of this term to express real-world manifestations including
 19692	   WYSIAWYG (What You See Is *Almost* What You Get) and
 19693	   WYSIMOLWYG (What You See Is More or Less What You Get).  All these
 19694	   can be mildly derogatory, as they are often used to refer to
 19695	   dumbed-down {user-friendly} interfaces targeted at
 19696	   non-programmers; a hacker has no fear of obscure commands (compare
 19697	   {WYSIAYG}).  On the other hand, {EMACS} was one of the very first
 19698	   WYSIWYG editors, replacing (actually, at first overlaying) the
 19699	   extremely obscure, command-based {TECO}.  See also {WIMP
 19700	   environment}.  [Oddly enough, WYSIWYG has already made it into the
 19701	   OED, in lower case yet. --- ESR]
 19702	
 19703	= X =
 19704	=====
 19705	
 19706	:X: /X/ n. 1. Used in various speech and writing contexts (also
 19707	   in lowercase) in roughly its algebraic sense of `unknown within a
 19708	   set defined by context' (compare {N}).  Thus, the abbreviation
 19709	   680x0 stands for 68000, 68010, 68020, 68030, or 68040, and 80x86
 19710	   stands for 80186, 80286 80386 or 80486 (note that a UNIX hacker
 19711	   might write these as 680[0-4]0 and 80[1-4]86 or 680?0 and 80?86
 19712	   respectively; see {glob}).  2. [after the name of an earlier
 19713	   window system called `W'] An over-sized, over-featured,
 19714	   over-engineered and incredibly over-complicated window system
 19715	   developed at MIT and widely used on UNIX systems.
 19716	
 19717	:XEROX PARC: The famed Palo Alto Research Center.  For more than a
 19718	   decade, from the early 1970s into the mid-1980s, PARC yielded an
 19719	   astonishing volume of groundbreaking hardware and software
 19720	   innovations.  The modern mice, windows, and icons style of software
 19721	   interface was invented there.  So was the laser printer, and the
 19722	   local-area network; and PARC's series of D machines anticipated the
 19723	   poweful personal computers of the 1980s by a decade.  Sadly, these
 19724	   prophets were without honor in their own company; so much so that
 19725	   it became a standard joke to describe PARC as a place characterized
 19726	   by developing brilliant ideas for everyone else.
 19727	
 19728	:XOFF: /X'of/ n. Syn. {control-S}.
 19729	
 19730	:XON: /X'on/ n. Syn. {control-Q}.
 19731	
 19732	:xor: /X'or/, /kzor/ conj. Exclusive or.  `A xor B' means
 19733	   `A or B, but not both'.  "I want to get cherry pie xor a
 19734	   banana split."  This derives from the technical use of the term as
 19735	   a function on truth-values that is true if exactly one of its two
 19736	   arguments is true.
 19737	
 19738	:xref: /X'ref/ vt., n. Hackish standard abbreviation for
 19739	   `cross-reference'.
 19740	
 19741	:XXX: /X-X-X/ n. A marker that attention is needed.
 19742	   Commonly used in program comments to indicate areas that are kluged
 19743	   up or need to be.  Some hackers liken `XXX' to the notional
 19744	   heavy-porn movie rating.
 19745	
 19746	:xyzzy: /X-Y-Z-Z-Y/, /X-Y-ziz'ee/, /ziz'ee/, or /ik-ziz'ee/
 19747	   [from the ADVENT game] adj.  The {canonical} `magic word'.
 19748	   This comes from {ADVENT}, in which the idea is to explore an
 19749	   underground cave with many rooms and to collect the treasures you
 19750	   find there.  If you type `xyzzy' at the appropriate time, you can
 19751	   move instantly between two otherwise distant points.  If,
 19752	   therefore, you encounter some bit of {magic}, you might remark
 19753	   on this quite succinctly by saying simply "Xyzzy!"  "Ordinarily
 19754	   you can't look at someone else's screen if he has protected it, but
 19755	   if you type quadruple-bucky-clear the system will let you do it
 19756	   anyway."  "Xyzzy!"  Xyzzy has actually been implemented as an
 19757	   undocumented no-op command on several OSes; in Data General's
 19758	   AOS/VS, for example, it would typically respond "Nothing
 19759	   happens", just as {ADVENT} did if the magic was invoked at the
 19760	   wrong spot or before a player had performed the action that enabled
 19761	   the word.  In more recent 32-bit versions, by the way, AOS/VS
 19762	   responds "Twice as much happens".  See also {plugh}.
 19763	
 19764	= Y =
 19765	=====
 19766	
 19767	:YA-: [Yet Another] abbrev. In hackish acronyms this almost
 19768	   invariably expands to {Yet Another}, following the precedent set
 19769	   by UNIX `yacc(1)' (Yet Another Compiler-Compiler).  See
 19770	   {YABA}.
 19771	
 19772	:YABA: /ya'b*/ [Cambridge] n. Yet Another Bloody Acronym.
 19773	   Whenever some program is being named, someone invariably suggests
 19774	   that it be given a name that is acronymic.  The response from those
 19775	   with a trace of originality is to remark ironically that the
 19776	   proposed name would then be `YABA-compatible'.  Also used in
 19777	   response to questions like "What is WYSIWYG?"  See also
 19778	   {TLA}.
 19779	
 19780	:YAUN: /yawn/ [Acronym for `Yet Another UNIX Nerd'] n. Reported
 19781	   from the San Diego Computer Society (predominantly a microcomputer
 19782	   users' group) as a good-natured punning insult aimed at UNIX
 19783	   zealots.
 19784	
 19785	:Yellow Book: [proposed] n. The print version of this Jargon File;
 19786	   `The New Hacker's Dictionary', MIT Press, 1991 (ISBN
 19787	   0-262-68069-6).  Includes all the material in the 2.9.6 version of
 19788	   the File, plus a Foreword by Guy L. Steele Jr. and a Preface by
 19789	   Eric S. Raymond.  Most importantly, the book version is nicely
 19790	   typeset and includes almost all of the infamous Crunchly cartoons
 19791	   by the Great Quux, each attached to an appropriate entry.
 19792	
 19793	:yellow wire: [IBM] n. Repair wires used when connectors
 19794	   (especially ribbon connectors) got broken due to some schlemiel
 19795	   pinching them, or to reconnect cut traces after the FE mistakenly
 19796	   cut one.  Compare {blue wire}, {purple wire}, {red wire}.
 19797	
 19798	:Yet Another: adj. [From UNIX's `yacc(1)', `Yet Another
 19799	   Compiler-Compiler', a LALR parser generator] 1. Of your own work: A
 19800	   humorous allusion often used in titles to acknowledge that the
 19801	   topic is not original, though the content is.  As in `Yet Another
 19802	   AI Group' or `Yet Another Simulated Annealing Algorithm'.  2. Of
 19803	   others' work: Describes something of which there are already far
 19804	   too many.  See also {YA-}, {YABA}, {YAUN}.
 19805	
 19806	:You are not expected to understand this: cav. [UNIX] The canonical
 19807	   comment describing something {magic} or too complicated to
 19808	   bother explaining properly.  From an infamous comment in the
 19809	   context-switching code of the V6 UNIX kernel.
 19810	
 19811	:You know you've been hacking too long when...: The set-up line
 19812	   for a genre of one-liners told by hackers about themselves.  These
 19813	   include the following:
 19814	
 19815	   *    not only do you check your email more often than your paper
 19816	        mail, but you remember your {network address} faster than your
 19817	        postal one.
 19818	   *    your {SO} kisses you on the neck and the first thing you
 19819	        think is "Uh, oh, {priority interrupt}."
 19820	   *    you go to balance your checkbook and discover that you're
 19821	        doing it in octal.
 19822	   *    your computers have a higher street value than your car.
 19823	   *    in your universe, `round numbers' are powers of 2, not 10.
 19824	   *    more than once, you have woken up recalling a dream in
 19825	        some programming language.
 19826	   *    you realize you have never seen half of your best friends.
 19827	
 19828	   [An early version of this entry said "All but one of these
 19829	   have been reliably reported as hacker traits (some of them quite
 19830	   often).  Even hackers may have trouble spotting the ringer."  The
 19831	   ringer was balancing one's checkbook in octal, which I made up out
 19832	   of whole cloth.  Although more respondents picked that one
 19833	   out as fiction than any of the others, I also received multiple
 19834	   independent reports of its actually happening. --- ESR]
 19835	
 19836	:Your mileage may vary: cav. [from the standard disclaimer attached
 19837	   to EPA mileage ratings by American car manufacturers] 1. A ritual
 19838	   warning often found in UNIX freeware distributions.  Translates
 19839	   roughly as "Hey, I tried to write this portably, but who
 19840	   *knows* what'll happen on your system?"  2. A qualifier more
 19841	   generally attached to advice.  "I find that sending flowers works
 19842	   well, but your mileage may vary."
 19843	
 19844	:Yow!: /yow/ [from "Zippy the Pinhead" comix] interj. A favored hacker
 19845	   expression of humorous surprise or emphasis.  "Yow!  Check out what
 19846	   happens when you twiddle the foo option on this display hack!"
 19847	   Compare {gurfle}.
 19848	
 19849	:yoyo mode: n. The state in which the system is said to be when it
 19850	   rapidly alternates several times between being up and being down.
 19851	   Interestingly (and perhaps not by coincidence), many hardware
 19852	   vendors give out free yoyos at Usenix exhibits.
 19853	
 19854	   Sun Microsystems gave out logoized yoyos at SIGPLAN '88.  Tourists
 19855	   staying at one of Atlanta's most respectable hotels were
 19856	   subsequently treated to the sight of 200 of the country's top
 19857	   computer scientists testing yo-yo algorithms in the lobby.
 19858	
 19859	:Yu-Shiang Whole Fish: /yoo-shyang hohl fish/ n. obs. The
 19860	   character gamma (extended SAIL ASCII 0001001), which with a loop in
 19861	   its tail looks like a little fish swimming down the page.  The term
 19862	   is actually the name of a Chinese dish in which a fish is cooked
 19863	   whole (not {parse}d) and covered with Yu-Shiang (or Yu-Hsiang)
 19864	   sauce.  Usage: primarily by people on the MIT LISP Machine, which
 19865	   could display this character on the screen.  Tends to elicit
 19866	   incredulity from people who hear about it second-hand.
 19867	
 19868	= Z =
 19869	=====
 19870	
 19871	:zap: 1. n. Spiciness.  2. vt. To make food spicy.  3. vt. To make
 19872	   someone `suffer' by making his food spicy.  (Most hackers love
 19873	   spicy food.  Hot-and-sour soup is considered wimpy unless it makes
 19874	   you wipe your nose for the rest of the meal.)  See {zapped}.
 19875	   4. vt. To modify, usually to correct; esp. used when the action
 19876	   is performed with a debugger or binary patching tool.  Also implies
 19877	   surgical precision.  "Zap the debug level to 6 and run it again."
 19878	   In the IBM mainframe world, binary patches are applied to programs
 19879	   or to the OS with a program called `superzap', whose file name is
 19880	   `IMASPZAP' (possibly contrived from I M A SuPerZAP).  5. vt. To
 19881	   erase or reset.  6. To {fry} a chip with static electricity.
 19882	   "Uh oh --- I think that lightning strike may have zapped the disk
 19883	   controller."
 19884	
 19885	:zapped: adj. Spicy.  This term is used to distinguish between food
 19886	   that is hot (in temperature) and food that is *spicy*-hot.
 19887	   For example, the Chinese appetizer Bon Bon Chicken is a kind of
 19888	   chicken salad that is cold but zapped; by contrast, {vanilla}
 19889	   wonton soup is hot but not zapped.  See also {{oriental food}},
 19890	   {laser chicken}.  See {zap}, senses 1 and 2.
 19891	
 19892	:zen: vt. To figure out something by meditation or by a sudden flash
 19893	   of enlightenment.  Originally applied to bugs, but occasionally
 19894	   applied to problems of life in general.  "How'd you figure out the
 19895	   buffer allocation problem?"  "Oh, I zenned it."  Contrast {grok},
 19896	   which connotes a time-extended version of zenning a system.
 19897	   Compare {hack mode}.  See also {guru}.
 19898	
 19899	:zero: vt. 1. To set to 0.  Usually said of small pieces of data,
 19900	   such as bits or words (esp. in the construction `zero out').  2. To
 19901	   erase; to discard all data from.  Said of disks and directories,
 19902	   where `zeroing' need not involve actually writing zeroes throughout
 19903	   the area being zeroed.  One may speak of something being
 19904	   `logically zeroed' rather than being `physically zeroed'.  See
 19905	   {scribble}.
 19906	
 19907	:zero-content: adj. Syn. {content-free}.
 19908	
 19909	:zeroth: /zee'rohth/ adj. First.  Among software designers, comes
 19910	   from C's and LISP's 0-based indexing of arrays.  Hardware people
 19911	   also tend to start counting at 0 instead of 1; this is natural
 19912	   since, e.g., the 256 states of 8 bits correspond to the binary
 19913	   numbers 0, 1, ..., 255 and the digital devices known as `counters'
 19914	   count in this way.
 19915	
 19916	   Hackers and computer scientists often like to call the first
 19917	   chapter of a publication `chapter 0', especially if it is of an
 19918	   introductory nature (one of the classic instances was in the First
 19919	   Edition of {K&R}).  In recent years this trait has also been
 19920	   observed among many pure mathematicians (who have an independent
 19921	   tradition of numbering from 0).  Zero-based numbering tends to
 19922	   reduce {fencepost error}s, though it cannot eliminate them
 19923	   entirely.
 19924	
 19925	:zigamorph: /zig'*-morf/ n. Hex FF (11111111) when used as a
 19926	   delimiter or {fence} character.  Usage: primarily at IBM
 19927	   shops.
 19928	
 19929	:zip: [primarily MS-DOS] vt. To create a compressed archive from a
 19930	   group of files using PKWare's PKZIP or a compatible archiver.  Its
 19931	   use is spreading now that portable implementations of the algorithm
 19932	   have been written.  Commonly used as follows: "I'll zip it up and
 19933	   send it to you."  See {arc}, {tar and feather}.
 19934	
 19935	:zipperhead: [IBM] n. A person with a closed mind.
 19936	
 19937	:zombie: [UNIX] n. A process that has died but has not yet
 19938	   relinquished its process table slot (because the parent process
 19939	   hasn't executed a `wait(2)' for it yet).  These can be seen in
 19940	   `ps(1)' listings occasionally.  Compare {orphan}.
 19941	
 19942	:zorch: /zorch/ 1. [TMRC] v. To attack with an inverse heat sink.
 19943	   2. [TMRC] v. To travel, with v approaching c [that
 19944	   is, with velocity approaching lightspeed --- ESR].  3. [MIT] v. To
 19945	   propel something very quickly.  "The new comm software is very
 19946	   fast; it really zorches files through the network."  4. [MIT] n.
 19947	   Influence.  Brownie points.  Good karma.  The intangible and fuzzy
 19948	   currency in which favors are measured.  "I'd rather not ask him
 19949	   for that just yet; I think I've used up my quota of zorch with him
 19950	   for the week."  5. [MIT] n. Energy, drive, or ability.  "I think
 19951	   I'll {punt} that change for now; I've been up for 30 hours
 19952	   and I've run out of zorch."
 19953	
 19954	:Zork: /zork/ n. The second of the great early experiments in computer
 19955	   fantasy gaming; see {ADVENT}.  Originally written on MIT-DM
 19956	   during the late 1970s, later distributed with BSD UNIX (as a patched,
 19957	   sourceless RT-11 Fortran binary; see {retrocomputing}) and
 19958	   commercialized as `The Zork Trilogy' by Infocom.
 19959	
 19960	:zorkmid: /zork'mid/ n. The canonical unit of currency in
 19961	   hacker-written games.  This originated in {zork} but has spread
 19962	   to {nethack} and is referred to in several other games.
 19963	
 19964	= [^A-Za-z] (see {regexp}) =
 19965	============================
 19966	
 19967	:'Snooze: /snooz/ [FidoNet] n. Fidonews, the weekly official on-line
 19968	   newsletter of FidoNet.  As the editorial policy of Fidonews is
 19969	   "anything that arrives, we print", there are often large articles
 19970	   completely unrelated to FidoNet, which in turn tend to elicit
 19971	   {flamage} in subsequent issues.
 19972	
 19973	:(TM): // [USENET] ASCII rendition of the trademark-superscript symbol
 19974	   appended to phrases that the author feels should be recorded for
 19975	   posterity, perhaps in future editions of this lexicon.  Sometimes
 19976	   used ironically as a form of protest against the recent spate of
 19977	   software and algorithm patents and `look and feel' lawsuits.  See
 19978	   also {UN*X}.
 19979	
 19980	:-oid: [from `android'] suff. 1. This suffix is used as in
 19981	   mainstream English to indicate a poor imitation, a counterfeit, or
 19982	   some otherwise slightly bogus resemblance.  Hackers will happily
 19983	   use it with all sorts of non-Greco/Latin stem words that wouldn't
 19984	   keep company with it in mainstream English.  For example, "He's a
 19985	   nerdoid" means that he superficially resembles a nerd but can't
 19986	   make the grade; a `modemoid' might be a 300-baud box (Real Modems
 19987	   run at 9600); a `computeroid' might be any {bitty box}.  The
 19988	   word `keyboid' could be used to describe a {chiclet keyboard},
 19989	   but would have to be written; spoken, it would confuse the listener
 19990	   as to the speaker's city of origin.  2. There is a more specific
 19991	   sense of `oid' as an indicator for `resembling an android'
 19992	   which in the past has been confined to science-fiction fans and
 19993	   hackers.  It too has recently (in 1991) started to go mainstream
 19994	   (most notably in the term `trendoid' for victims of terminal
 19995	   hipness).  This is probably traceable to the popularization of the
 19996	   term {droid} in "Star Wars" and its sequels.
 19997	
 19998	   Coinages in both forms have been common in science fiction for at
 19999	   least fifty years, and hackers (who are often SF fans) have
 20000	   probably been making `-oid' jargon for almost that long
 20001	   [though GLS and I can personally confirm only that they were
 20002	   already common in the mid-1970s --- ESR].
 20003	
 20004	:-ware: [from `software'] suff. Commonly used to form jargon terms
 20005	   for classes of software.  For examples, see {careware},
 20006	   {crippleware}, {crudware}, {freeware}, {fritterware},
 20007	   {guiltware}, {liveware}, {meatware}, {payware},
 20008	   {psychedelicware}, {shareware}, {shelfware}, {vaporware},
 20009	   {wetware}.
 20010	
 20011	:/dev/null: /dev-nuhl/ [from the UNIX null device, used as a data
 20012	   sink] n. A notional `black hole' in any information space being
 20013	   discussed, used, or referred to.  A controversial posting, for
 20014	   example, might end "Kudos to rasputin@kremlin.org, flames to
 20015	   /dev/null".  See {bit bucket}.
 20016	
 20017	:0: Numeric zero, as opposed to `O' (the 15th letter of the English
 20018	   alphabet).  In their unmodified forms they look a lot alike, and
 20019	   various kluges invented to make them visually distinct have
 20020	   compounded the confusion.  If your zero is center-dotted and
 20021	   letter-O is not, or if letter-O looks almost rectangular but zero
 20022	   more like an American football stood on end, you're probably
 20023	   looking at a modern character display (though the dotted zero seems
 20024	   to have originated as an option on IBM 3270 controllers).  If your
 20025	   zero is slashed but letter-O is not, you're probably looking at an
 20026	   old-style ASCII graphic set descended from the default typewheel on
 20027	   the venerable ASR-33 Teletype (Scandinavians, for whom slashed-O is
 20028	   a letter, curse this arrangement).  If letter-O has a slash across
 20029	   it and the zero does not, your display is tuned for a very old
 20030	   convention used at IBM and a few other early mainframe makers
 20031	   (Scandinavians curse *this* arrangement even more, because it
 20032	   means two of their letters collide).  Some Burroughs/Unisys
 20033	   equipment displays a zero with a *reversed* slash.  And yet
 20034	   another convention common on early line printers left zero
 20035	   unornamented but added a tail or hook to the letter-O so that it
 20036	   resembled an inverted Q or cursive capital letter-O.  Are we
 20037	   sufficiently confused yet?
 20038	
 20039	:1TBS: // n. The "One True Brace Style"; see {indent style}.
 20040	
 20041	:120 reset: /wuhn-twen'tee ree'set/ [from 120 volts, U.S. wall
 20042	   voltage] n. To cycle power on a machine in order to reset or unjam
 20043	   it.  Compare {Big Red Switch}, {power cycle}.
 20044	
 20045	:2: infix. In translation software written by hackers, infix 2 often
 20046	   represents the syllable *to* with the connotation
 20047	   `translate to': as in dvi2ps (DVI to PostScript), int2string
 20048	   (integer to string), and texi2roff (Texinfo to [nt]roff).
 20049	
 20050	:@-party: /at'par`tee/ [from the @-sign in an Internet address]
 20051	   n.  (alt. `@-sign party' /at'si:n par`tee/) A semi-closed
 20052	   party thrown for hackers at a science-fiction convention (esp.
 20053	   the annual Worldcon); one must have a {network address} to
 20054	   get in, or at least be in company with someone who does.  One of
 20055	   the most reliable opportunities for hackers to meet face to face
 20056	   with people who might otherwise be represented by mere phosphor
 20057	   dots on their screens.  Compare {boink}.
 20058	
 20059	:@Begin: // See {\begin}.
 20060	
 20061	:\begin: // [from the LaTeX command] With \end, used
 20062	   humorously in writing to indicate a context or to remark on the
 20063	   surrounded text.  For example:
 20064	
 20065	     \begin{flame}
 20066	     Predicate logic is the only good programming
 20067	     language.  Anyone who would use anything else
 20068	     is an idiot.  Also, all computers should be
 20069	     tredecimal instead of binary.
 20070	     \end{flame}
 20071	
 20072	   The Scribe users at CMU and elsewhere used to use @Begin/@End in
 20073	   an identical way (LaTeX was built to resemble Scribe).  On USENET,
 20074	   this construct would more frequently be rendered as `<FLAME ON>'
 20075	   and `<FLAME OFF>'.
 20076	
 20077	:(Lexicon Entries End Here):
 20078	
 20079	:Appendix A: Hacker Folklore
 20080	****************************
 20081	
 20082	This appendix contains several legends and fables that illuminate the
 20083	meaning of various entries in the lexicon.
 20084	
 20085	:The Meaning of `Hack':
 20086	=======================
 20087	
 20088	"The word {hack} doesn't really have 69 different meanings", according
 20089	to MIT hacker Phil Agre.  "In fact, {hack} has only one meaning, an
 20090	extremely subtle and profound one which defies articulation.  Which
 20091	connotation is implied by a given use of the word depends in similarly
 20092	profound ways on the context.  Similar remarks apply to a couple of
 20093	other hacker words, most notably {random}."
 20094	
 20095	Hacking might be characterized as `an appropriate application of
 20096	ingenuity'.  Whether the result is a quick-and-dirty patchwork job or a
 20097	carefully crafted work of art, you have to admire the cleverness that
 20098	went into it.
 20099	
 20100	An important secondary meaning of {hack} is `a creative practical joke'.
 20101	This kind of hack is easier to explain to non-hackers than the
 20102	programming kind.  Of course, some hacks have both natures; see the
 20103	lexicon entries for {pseudo} and {kgbvax}.  But here are some examples
 20104	of pure practical jokes that illustrate the hacking spirit:
 20105	
 20106	     In 1961, students from Caltech (California Institute of Technology,
 20107	     in Pasadena) hacked the Rose Bowl football game.  One student posed
 20108	     as a reporter and `interviewed' the director of the University of
 20109	     Washington card stunts (such stunts involve people in the stands
 20110	     who hold up colored cards to make pictures).  The reporter learned
 20111	     exactly how the stunts were operated, and also that the director
 20112	     would be out to dinner later.
 20113	
 20114	     While the director was eating, the students (who called themselves
 20115	     the `Fiendish Fourteen') picked a lock and stole a blank direction
 20116	     sheet for the card stunts.  They then had a printer run off 2300
 20117	     copies of the blank.  The next day they picked the lock again and
 20118	     stole the master plans for the stunts --- large sheets of graph
 20119	     paper colored in with the stunt pictures.  Using these as a guide,
 20120	     they made new instructions for three of the stunts on the
 20121	     duplicated blanks.  Finally, they broke in once more, replacing the
 20122	     stolen master plans and substituting the stack of diddled
 20123	     instruction sheets for the original set.
 20124	
 20125	     The result was that three of the pictures were totally different.
 20126	     Instead of `WASHINGTON', the word ``CALTECH' was flashed.  Another
 20127	     stunt showed the word `HUSKIES', the Washington nickname, but
 20128	     spelled it backwards.  And what was supposed to have been a picture
 20129	     of a husky instead showed a beaver.  (Both Caltech and MIT use the
 20130	     beaver --- nature's engineer --- as a mascot.)
 20131	
 20132	     After the game, the Washington faculty athletic representative
 20133	     said: "Some thought it ingenious; others were indignant."  The
 20134	     Washington student body president remarked: "No hard feelings, but
 20135	     at the time it was unbelievable.  We were amazed."
 20136	
 20137	This is now considered a classic hack, particularly because revising the
 20138	direction sheets constituted a form of programming.
 20139	
 20140	Here is another classic hack:
 20141	
 20142	     On November 20, 1982, MIT hacked the Harvard-Yale football game.
 20143	     Just after Harvard's second touchdown against Yale, in the first
 20144	     quarter, a small black ball popped up out of the ground at the
 20145	     40-yard line, and grew bigger, and bigger, and bigger.  The letters
 20146	     `MIT' appeared all over the ball.  As the players and officials
 20147	     stood around gawking, the ball grew to six feet in diameter and
 20148	     then burst with a bang and a cloud of white smoke.
 20149	
 20150	     The `Boston Globe' later reported: "If you want to know the truth,
 20151	     MIT won The Game."
 20152	
 20153	     The prank had taken weeks of careful planning by members of MIT's
 20154	     Delta Kappa Epsilon fraternity.  The device consisted of a weather
 20155	     balloon, a hydraulic ram powered by Freon gas to lift it out of the
 20156	     ground, and a vacuum-cleaner motor to inflate it.  They made eight
 20157	     separate expeditions to Harvard Stadium between 1 and 5 A.M.,
 20158	     locating an unused 110-volt circuit in the stadium and running
 20159	     buried wires from the stadium circuit to the 40-yard line, where
 20160	     they buried the balloon device.  When the time came to activate the
 20161	     device, two fraternity members had merely to flip a circuit breaker
 20162	     and push a plug into an outlet.
 20163	
 20164	     This stunt had all the earmarks of a perfect hack: surprise,
 20165	     publicity, the ingenious use of technology, safety, and
 20166	     harmlessness.  The use of manual control allowed the prank to be
 20167	     timed so as not to disrupt the game (it was set off between plays,
 20168	     so the outcome of the game would not be unduly affected).  The
 20169	     perpetrators had even thoughtfully attached a note to the balloon
 20170	     explaining that the device was not dangerous and contained no
 20171	     explosives.
 20172	
 20173	     Harvard president Derek Bok commented: "They have an awful lot of
 20174	     clever people down there at MIT, and they did it again."  President
 20175	     Paul E. Gray of MIT said: "There is absolutely no truth to the
 20176	     rumor that I had anything to do with it, but I wish there were."
 20177	
 20178	The hacks above are verifiable history; they can be proved to have
 20179	happened.  Many other classic-hack stories from MIT and elsewhere,
 20180	though retold as history, have the characteristics of what Jan Brunvand
 20181	has called `urban folklore' (see {FOAF}).  Perhaps the best known of
 20182	these is the legend of the infamous trolley-car hack, an alleged
 20183	incident in which engineering students are said to have welded a trolley
 20184	car to its tracks with thermite.  Numerous versions of this have been
 20185	recorded from the 1940s to the present, most set at MIT but at least one
 20186	very detailed version set at CMU.
 20187	
 20188	Brian Leibowitz has researched MIT hacks both real and mythical
 20189	extensively; the interested reader is referred to his delightful
 20190	pictorial compendium `The Journal of the Institute for Hacks,
 20191	Tomfoolery, and Pranks' (MIT Museum, 1990; ISBN 0-917027-03-5).
 20192	
 20193	Finally, here is a story about one of the classic computer hacks.
 20194	
 20195	     Back in the mid-1970s, several of the system support staff at
 20196	     Motorola discovered a relatively simple way to crack system
 20197	     security on the Xerox CP-V timesharing system.  Through a simple
 20198	     programming strategy, it was possible for a user program to trick
 20199	     the system into running a portion of the program in `master mode'
 20200	     (supervisor state), in which memory protection does not apply.  The
 20201	     program could then poke a large value into its `privilege level'
 20202	     byte (normally write-protected) and could then proceed to bypass
 20203	     all levels of security within the file-management system, patch the
 20204	     system monitor, and do numerous other interesting things.  In
 20205	     short, the barn door was wide open.
 20206	
 20207	     Motorola quite properly reported this problem to Xerox via an
 20208	     official `level 1 SIDR' (a bug report with an intended urgency of
 20209	     `needs to be fixed yesterday').  Because the text of each SIDR was
 20210	     entered into a database that could be viewed by quite a number of
 20211	     people, Motorola followed the approved procedure: they simply
 20212	     reported the problem as `Security SIDR', and attached all of the
 20213	     necessary documentation, ways-to-reproduce, etc.
 20214	
 20215	     The CP-V people at Xerox sat on their thumbs; they either didn't
 20216	     realize the severity of the problem, or didn't assign the necessary
 20217	     operating-system-staff resources to develop and distribute an
 20218	     official patch.
 20219	
 20220	     Months passed.  The Motorola guys pestered their Xerox
 20221	     field-support rep, to no avail.  Finally they decided to take
 20222	     direct action, to demonstrate to Xerox management just how easily
 20223	     the system could be cracked and just how thoroughly the security
 20224	     safeguards could be subverted.
 20225	
 20226	     They dug around in the operating-system listings and devised a
 20227	     thoroughly devilish set of patches.  These patches were then
 20228	     incorporated into a pair of programs called `Robin Hood' and `Friar
 20229	     Tuck'.  Robin Hood and Friar Tuck were designed to run as `ghost
 20230	     jobs' (daemons, in UNIX terminology); they would use the existing
 20231	     loophole to subvert system security, install the necessary patches,
 20232	     and then keep an eye on one another's statuses in order to keep the
 20233	     system operator (in effect, the superuser) from aborting them.
 20234	
 20235	     One fine day, the system operator on the main CP-V software
 20236	     development system in El Segundo was surprised by a number of
 20237	     unusual phenomena.  These included the following:
 20238	
 20239	        * Tape drives would rewind and dismount their tapes in the
 20240	          middle of a job.
 20241	        * Disk drives would seek back and forth so rapidly that they
 20242	          would attempt to walk across the floor (see {walking drives}).
 20243	        * The card-punch output device would occasionally start up of
 20244	          itself and punch a {lace card}.  These would usually jam in
 20245	          the punch.
 20246	        * The console would print snide and insulting messages from
 20247	          Robin Hood to Friar Tuck, or vice versa.
 20248	        * The Xerox card reader had two output stackers; it could be
 20249	          instructed to stack into A, stack into B, or stack into A
 20250	          (unless a card was unreadable, in which case the bad card was
 20251	          placed into stacker B).  One of the patches installed by the
 20252	          ghosts added some code to the card-reader driver... after
 20253	          reading a card, it would flip over to the opposite stacker.
 20254	          As a result, card decks would divide themselves in half when
 20255	          they were read, leaving the operator to recollate them
 20256	          manually.
 20257	
 20258	     Naturally, the operator called in the operating-system developers.
 20259	     They found the bandit ghost jobs running, and X'ed them... and were
 20260	     once again surprised.  When Robin Hood was X'ed, the following
 20261	     sequence of events took place:
 20262	
 20263	          !X id1
 20264	
 20265	          id1: Friar Tuck... I am under attack!  Pray save me!
 20266	          id1: Off (aborted)
 20267	
 20268	          id2: Fear not, friend Robin!  I shall rout the Sheriff
 20269	               of Nottingham's men!
 20270	
 20271	          id1: Thank you, my good fellow!
 20272	
 20273	     Each ghost-job would detect the fact that the other had been
 20274	     killed, and would start a new copy of the recently slain program
 20275	     within a few milliseconds.  The only way to kill both ghosts was to
 20276	     kill them simultaneously (very difficult) or to deliberately crash
 20277	     the system.
 20278	
 20279	     Finally, the system programmers did the latter --- only to find
 20280	     that the bandits appeared once again when the system rebooted!  It
 20281	     turned out that these two programs had patched the boot-time OS
 20282	     image (the kernel file, in UNIX terms) and had added themselves to
 20283	     the list of programs that were to be started at boot time.
 20284	
 20285	     The Robin Hood and Friar Tuck ghosts were finally eradicated when
 20286	     the system staff rebooted the system from a clean boot-tape and
 20287	     reinstalled the monitor.  Not long thereafter, Xerox released a
 20288	     patch for this problem.
 20289	
 20290	     It is alleged that Xerox filed a complaint with Motorola's management
 20291	     about the merry-prankster actions of the two employees in question.
 20292	     It is not recorded that any serious disciplinary action was taken
 20293	     against either of them.
 20294	
 20295	:TV Typewriters: A Tale of Hackish Ingenuity
 20296	============================================
 20297	
 20298	Here is a true story about a glass tty: One day an MIT hacker was in a
 20299	motorcycle accident and broke his leg.  He had to stay in the hospital
 20300	quite a while, and got restless because he couldn't {hack}.  Two of his
 20301	friends therefore took a terminal and a modem for it to the hospital, so
 20302	that he could use the computer by telephone from his hospital bed.
 20303	
 20304	Now this happened some years before the spread of home computers, and
 20305	computer terminals were not a familiar sight to the average person.
 20306	When the two friends got to the hospital, a guard stopped them and asked
 20307	what they were carrying.  They explained that they wanted to take a
 20308	computer terminal to their friend who was a patient.
 20309	
 20310	The guard got out his list of things that patients were permitted to
 20311	have in their rooms: TV, radio, electric razor, typewriter, tape player,
 20312	... no computer terminals.  Computer terminals weren't on the list, so
 20313	the guard wouldn't let it in.  Rules are rules, you know.  (This guard
 20314	was clearly a {droid}.)
 20315	
 20316	Fair enough, said the two friends, and they left again.  They were
 20317	frustrated, of course, because they knew that the terminal was as
 20318	harmless as a TV or anything else on the list... which gave them an
 20319	idea.
 20320	
 20321	The next day they returned, and the same thing happened: a guard stopped
 20322	them and asked what they were carrying.  They said: "This is a TV
 20323	typewriter!"  The guard was skeptical, so they plugged it in and
 20324	demonstrated it.  "See?  You just type on the keyboard and what you type
 20325	shows up on the TV screen."  Now the guard didn't stop to think about
 20326	how utterly useless a typewriter would be that didn't produce any paper
 20327	copies of what you typed; but this was clearly a TV typewriter, no doubt
 20328	about it.  So he checked his list: "A TV is all right, a typewriter is
 20329	all right ... okay, take it on in!"
 20330	
 20331	[Historical note: Many years ago, `Popular Electronics' published
 20332	solder-it-yourself plans for a TV typewriter.  Despite the essential
 20333	uselessness of the device, it was an enormously popular project.
 20334	Steve Ciarcia, the man behind `Byte' magazine's "Circuit Cellar"
 20335	feature, resurrected this ghost in one of his books of the early
 20336	1980s.  He ascribed its popularity (no doubt correctly) to the
 20337	feeling of power the builder could achieve by being able to decide
 20338	himself what would be shown on the TV. --- ESR]
 20339	
 20340	:A Story About `Magic': (by GLS)
 20341	================================
 20342	
 20343	Some years ago, I was snooping around in the cabinets that housed the
 20344	MIT AI Lab's PDP-10, and noticed a little switch glued to the frame of
 20345	one cabinet.  It was obviously a homebrew job, added by one of the lab's
 20346	hardware hackers (no one knows who).
 20347	
 20348	You don't touch an unknown switch on a computer without knowing what it
 20349	does, because you might crash the computer.  The switch was labeled in a
 20350	most unhelpful way.  It had two positions, and scrawled in pencil on the
 20351	metal switch body were the words `magic' and `more magic'.  The switch
 20352	was in the `more magic' position.
 20353	
 20354	I called another hacker over to look at it.  He had never seen the
 20355	switch before either.  Closer examination revealed that the switch had
 20356	only one wire running to it!  The other end of the wire did disappear
 20357	into the maze of wires inside the computer, but it's a basic fact of
 20358	electricity that a switch can't do anything unless there are two wires
 20359	connected to it.  This switch had a wire connected on one side and no
 20360	wire on its other side.
 20361	
 20362	It was clear that this switch was someone's idea of a silly joke.
 20363	Convinced by our reasoning that the switch was inoperative, we flipped
 20364	it.  The computer instantly crashed.
 20365	
 20366	Imagine our utter astonishment.  We wrote it off as coincidence, but
 20367	nevertheless restored the switch to the `more magic' position before
 20368	reviving the computer.
 20369	
 20370	A year later, I told this story to yet another hacker, David Moon as I
 20371	recall.  He clearly doubted my sanity, or suspected me of a supernatural
 20372	belief in the power of this switch, or perhaps thought I was fooling him
 20373	with a bogus saga.  To prove it to him, I showed him the very switch,
 20374	still glued to the cabinet frame with only one wire connected to it,
 20375	still in the `more magic' position.  We scrutinized the switch and its
 20376	lone connection, and found that the other end of the wire, though
 20377	connected to the computer wiring, was connected to a ground pin.  That
 20378	clearly made the switch doubly useless: not only was it electrically
 20379	nonoperative, but it was connected to a place that couldn't affect
 20380	anything anyway.  So we flipped the switch.
 20381	
 20382	The computer promptly crashed.
 20383	
 20384	This time we ran for Richard Greenblatt, a long-time MIT hacker, who was
 20385	close at hand.  He had never noticed the switch before, either.  He
 20386	inspected it, concluded it was useless, got some diagonal cutters and
 20387	{dike}d it out.  We then revived the computer and it has run fine ever
 20388	since.
 20389	
 20390	We still don't know how the switch crashed the machine.  There is a
 20391	theory that some circuit near the ground pin was marginal, and
 20392	flipping the switch changed the electrical capacitance enough to upset
 20393	the circuit as millionth-of-a-second pulses went through it.  But
 20394	we'll never know for sure; all we can really say is that the switch
 20395	was {magic}.
 20396	
 20397	I still have that switch in my basement.  Maybe I'm silly, but I
 20398	usually keep it set on `more magic'.
 20399	
 20400	:A Selection of AI Koans:
 20401	=========================
 20402	
 20403	These are some of the funniest examples of a genre of jokes told at the
 20404	MIT AI Lab about various noted hackers.  The original koans were
 20405	composed by Danny Hillis.  In reading these, it is at least useful to
 20406	know that Minsky, Sussman, and Drescher are AI researchers of note, that
 20407	Tom Knight was one of the Lisp machine's principal designers, and that
 20408	David Moon wrote much of Lisp machine Lisp.
 20409	
 20410	                                 * * *
 20411	
 20412	   A novice was trying to fix a broken Lisp machine by turning the power
 20413	off and on.
 20414	
 20415	   Knight, seeing what the student was doing, spoke sternly: "You cannot
 20416	fix a machine by just power-cycling it with no understanding of what is
 20417	going wrong."
 20418	
 20419	   Knight turned the machine off and on.
 20420	
 20421	   The machine worked.
 20422	
 20423	                                 * * *
 20424	
 20425	   One day a student came to Moon and said: "I understand how to make a
 20426	better garbage collector.  We must keep a reference count of the
 20427	pointers to each cons."
 20428	
 20429	Moon patiently told the student the following story:
 20430	
 20431	     "One day a student came to Moon and said: `I understand how to make
 20432	     a better garbage collector...
 20433	
 20434	[Ed. note: Pure reference-count garbage collectors have problems with
 20435	circular structures that point to themselves.]
 20436	
 20437	                                 * * *
 20438	
 20439	In the days when Sussman was a novice, Minsky once came to him as he sat
 20440	hacking at the PDP-6.
 20441	
 20442	   "What are you doing?", asked Minsky.
 20443	
 20444	   "I am training a randomly wired neural net to play Tic-Tac-Toe"
 20445	Sussman replied.
 20446	
 20447	   "Why is the net wired randomly?", asked Minsky.
 20448	
 20449	   "I do not want it to have any preconceptions of how to play", Sussman
 20450	said.
 20451	
 20452	   Minsky then shut his eyes.
 20453	
 20454	   "Why do you close your eyes?", Sussman asked his teacher.
 20455	
 20456	   "So that the room will be empty."
 20457	
 20458	   At that moment, Sussman was enlightened.
 20459	
 20460	                                 * * *
 20461	
 20462	   A disciple of another sect once came to Drescher as he was eating his
 20463	morning meal.
 20464	
 20465	   "I would like to give you this personality test", said the outsider,
 20466	"because I want you to be happy."
 20467	
 20468	   Drescher took the paper that was offered him and put it into the
 20469	toaster, saying: "I wish the toaster to be happy, too."
 20470	
 20471	:OS and JEDGAR:
 20472	===============
 20473	
 20474	This story says a lot about the the ITS ethos. 
 20475	
 20476	On the ITS system there was a program that allowed you to see what was
 20477	being printed on someone else's terminal.  It spied on the other guy's
 20478	output by examining the insides of the monitor system.  The output spy
 20479	program was called OS.  Throughout the rest of the computer science (and
 20480	at IBM too) OS means `operating system', but among old-time ITS hackers
 20481	it almost always meant `output spy'.
 20482	
 20483	OS could work because ITS purposely had very little in the way of
 20484	`protection' that prevented one user from trespassing on another's
 20485	areas.  Fair is fair, however.  There was another program that would
 20486	automatically notify you if anyone started to spy on your output.  It
 20487	worked in exactly the same way, by looking at the insides of the
 20488	operating system to see if anyone else was looking at the insides that
 20489	had to do with your output.  This `counterspy' program was called JEDGAR
 20490	(a six-letterism pronounced as two syllables: /jed'gr/), in honor of the
 20491	former head of the FBI.
 20492	
 20493	But there's more.  JEDGAR would ask the user for `license to kill'.  If
 20494	the user said yes, then JEDGAR would actually {gun} the job of the
 20495	{luser} who was spying.  Unfortunately, people found that this made life
 20496	too violent, especially when tourists learned about it.  One of the
 20497	systems hackers solved the problem by replacing JEDGAR with another
 20498	program that only pretended to do its job.  It took a long time to do
 20499	this, because every copy of JEDGAR had to be patched.  To this day no
 20500	one knows how many people never figured out that JEDGAR had been
 20501	defanged.
 20502	
 20503	:The Story of Mel, a Real Programmer:
 20504	=====================================
 20505	
 20506	This was posted to USENET by its author, Ed Nather (utastro!nather), on
 20507	May 21, 1983.
 20508	
 20509	
 20510	     A recent article devoted to the *macho* side of programming
 20511	     made the bald and unvarnished statement:
 20512	
 20513	         Real Programmers write in FORTRAN.
 20514	
 20515	     Maybe they do now,
 20516	     in this decadent era of
 20517	     Lite beer, hand calculators, and "user-friendly" software
 20518	     but back in the Good Old Days,
 20519	     when the term "software" sounded funny
 20520	     and Real Computers were made out of drums and vacuum tubes,
 20521	     Real Programmers wrote in machine code.
 20522	     Not FORTRAN. Not RATFOR.  Not, even, assembly language.
 20523	     Machine Code.
 20524	     Raw, unadorned, inscrutable hexadecimal numbers.
 20525	     Directly.
 20526	
 20527	     Lest a whole new generation of programmers
 20528	     grow up in ignorance of this glorious past,
 20529	     I feel duty-bound to describe,
 20530	     as best I can through the generation gap,
 20531	     how a Real Programmer wrote code.
 20532	     I'll call him Mel,
 20533	     because that was his name.
 20534	
 20535	     I first met Mel when I went to work for Royal McBee Computer Corp.,
 20536	     a now-defunct subsidiary of the typewriter company.
 20537	     The firm manufactured the LGP-30,
 20538	     a small, cheap (by the standards of the day)
 20539	     drum-memory computer,
 20540	     and had just started to manufacture
 20541	     the RPC-4000, a much-improved,
 20542	     bigger, better, faster --- drum-memory computer.
 20543	     Cores cost too much,
 20544	     and weren't here to stay, anyway.
 20545	     (That's why you haven't heard of the company, or the computer.)
 20546	
 20547	     I had been hired to write a FORTRAN compiler
 20548	     for this new marvel and Mel was my guide to its wonders.
 20549	     Mel didn't approve of compilers.
 20550	
 20551	     "If a program can't rewrite its own code",
 20552	     he asked, "what good is it?"
 20553	
 20554	     Mel had written,
 20555	     in hexadecimal,
 20556	     the most popular computer program the company owned.
 20557	     It ran on the LGP-30
 20558	     and played blackjack with potential customers
 20559	     at computer shows.
 20560	     Its effect was always dramatic.
 20561	     The LGP-30 booth was packed at every show,
 20562	     and the IBM salesmen stood around
 20563	     talking to each other.
 20564	     Whether or not this actually sold computers
 20565	     was a question we never discussed.
 20566	
 20567	     Mel's job was to re-write
 20568	     the blackjack program for the RPC-4000.
 20569	     (Port?  What does that mean?)
 20570	     The new computer had a one-plus-one
 20571	     addressing scheme,
 20572	     in which each machine instruction,
 20573	     in addition to the operation code
 20574	     and the address of the needed operand,
 20575	     had a second address that indicated where, on the revolving drum,
 20576	     the next instruction was located.
 20577	
 20578	     In modern parlance,
 20579	     every single instruction was followed by a GO TO!
 20580	     Put *that* in Pascal's pipe and smoke it.
 20581	
 20582	     Mel loved the RPC-4000
 20583	     because he could optimize his code:
 20584	     that is, locate instructions on the drum
 20585	     so that just as one finished its job,
 20586	     the next would be just arriving at the "read head"
 20587	     and available for immediate execution.
 20588	     There was a program to do that job,
 20589	     an "optimizing assembler",
 20590	     but Mel refused to use it.
 20591	
 20592	     "You never know where it's going to put things",
 20593	     he explained, "so you'd have to use separate constants".
 20594	
 20595	     It was a long time before I understood that remark.
 20596	     Since Mel knew the numerical value
 20597	     of every operation code,
 20598	     and assigned his own drum addresses,
 20599	     every instruction he wrote could also be considered
 20600	     a numerical constant.
 20601	     He could pick up an earlier "add" instruction, say,
 20602	     and multiply by it,
 20603	     if it had the right numeric value.
 20604	     His code was not easy for someone else to modify.
 20605	
 20606	     I compared Mel's hand-optimized programs
 20607	     with the same code massaged by the optimizing assembler program,
 20608	     and Mel's always ran faster.
 20609	     That was because the "top-down" method of program design
 20610	     hadn't been invented yet,
 20611	     and Mel wouldn't have used it anyway.
 20612	     He wrote the innermost parts of his program loops first,
 20613	     so they would get first choice
 20614	     of the optimum address locations on the drum.
 20615	     The optimizing assembler wasn't smart enough to do it that way.
 20616	
 20617	     Mel never wrote time-delay loops, either,
 20618	     even when the balky Flexowriter
 20619	     required a delay between output characters to work right.
 20620	     He just located instructions on the drum
 20621	     so each successive one was just *past* the read head
 20622	     when it was needed;
 20623	     the drum had to execute another complete revolution
 20624	     to find the next instruction.
 20625	     He coined an unforgettable term for this procedure.
 20626	     Although "optimum" is an absolute term,
 20627	     like "unique", it became common verbal practice
 20628	     to make it relative:
 20629	     "not quite optimum" or "less optimum"
 20630	     or "not very optimum".
 20631	     Mel called the maximum time-delay locations
 20632	     the "most pessimum".
 20633	
 20634	     After he finished the blackjack program
 20635	     and got it to run
 20636	     ("Even the initializer is optimized",
 20637	     he said proudly),
 20638	     he got a Change Request from the sales department.
 20639	     The program used an elegant (optimized)
 20640	     random number generator
 20641	     to shuffle the "cards" and deal from the "deck",
 20642	     and some of the salesmen felt it was too fair,
 20643	     since sometimes the customers lost.
 20644	     They wanted Mel to modify the program
 20645	     so, at the setting of a sense switch on the console,
 20646	     they could change the odds and let the customer win.
 20647	
 20648	     Mel balked.
 20649	     He felt this was patently dishonest,
 20650	     which it was,
 20651	     and that it impinged on his personal integrity as a programmer,
 20652	     which it did,
 20653	     so he refused to do it.
 20654	     The Head Salesman talked to Mel,
 20655	     as did the Big Boss and, at the boss's urging,
 20656	     a few Fellow Programmers.
 20657	     Mel finally gave in and wrote the code,
 20658	     but he got the test backwards,
 20659	     and, when the sense switch was turned on,
 20660	     the program would cheat, winning every time.
 20661	     Mel was delighted with this,
 20662	     claiming his subconscious was uncontrollably ethical,
 20663	     and adamantly refused to fix it.
 20664	
 20665	     After Mel had left the company for greener pa$ture$,
 20666	     the Big Boss asked me to look at the code
 20667	     and see if I could find the test and reverse it.
 20668	     Somewhat reluctantly, I agreed to look.
 20669	     Tracking Mel's code was a real adventure.
 20670	
 20671	     I have often felt that programming is an art form,
 20672	     whose real value can only be appreciated
 20673	     by another versed in the same arcane art;
 20674	     there are lovely gems and brilliant coups
 20675	     hidden from human view and admiration, sometimes forever,
 20676	     by the very nature of the process.
 20677	     You can learn a lot about an individual
 20678	     just by reading through his code,
 20679	     even in hexadecimal.
 20680	     Mel was, I think, an unsung genius.
 20681	
 20682	     Perhaps my greatest shock came
 20683	     when I found an innocent loop that had no test in it.
 20684	     No test.  *None*.
 20685	     Common sense said it had to be a closed loop,
 20686	     where the program would circle, forever, endlessly.
 20687	     Program control passed right through it, however,
 20688	     and safely out the other side.
 20689	     It took me two weeks to figure it out.
 20690	
 20691	     The RPC-4000 computer had a really modern facility
 20692	     called an index register.
 20693	     It allowed the programmer to write a program loop
 20694	     that used an indexed instruction inside;
 20695	     each time through,
 20696	     the number in the index register
 20697	     was added to the address of that instruction,
 20698	     so it would refer
 20699	     to the next datum in a series.
 20700	     He had only to increment the index register
 20701	     each time through.
 20702	     Mel never used it.
 20703	
 20704	     Instead, he would pull the instruction into a machine register,
 20705	     add one to its address,
 20706	     and store it back.
 20707	     He would then execute the modified instruction
 20708	     right from the register.
 20709	     The loop was written so this additional execution time
 20710	     was taken into account ---
 20711	     just as this instruction finished,
 20712	     the next one was right under the drum's read head,
 20713	     ready to go.
 20714	     But the loop had no test in it.
 20715	
 20716	     The vital clue came when I noticed
 20717	     the index register bit,
 20718	     the bit that lay between the address
 20719	     and the operation code in the instruction word,
 20720	     was turned on ---
 20721	     yet Mel never used the index register,
 20722	     leaving it zero all the time.
 20723	     When the light went on it nearly blinded me.
 20724	
 20725	     He had located the data he was working on
 20726	     near the top of memory ---
 20727	     the largest locations the instructions could address ---
 20728	     so, after the last datum was handled,
 20729	     incrementing the instruction address
 20730	     would make it overflow.
 20731	     The carry would add one to the
 20732	     operation code, changing it to the next one in the instruction set:
 20733	     a jump instruction.
 20734	     Sure enough, the next program instruction was
 20735	     in address location zero,
 20736	     and the program went happily on its way.
 20737	
 20738	     I haven't kept in touch with Mel,
 20739	     so I don't know if he ever gave in to the flood of
 20740	     change that has washed over programming techniques
 20741	     since those long-gone days.
 20742	     I like to think he didn't.
 20743	     In any event,
 20744	     I was impressed enough that I quit looking for the
 20745	     offending test,
 20746	     telling the Big Boss I couldn't find it.
 20747	     He didn't seem surprised.
 20748	
 20749	     When I left the company,
 20750	     the blackjack program would still cheat
 20751	     if you turned on the right sense switch,
 20752	     and I think that's how it should be.
 20753	     I didn't feel comfortable
 20754	     hacking up the code of a Real Programmer.
 20755	
 20756	
 20757	This is one of hackerdom's great heroic epics, free verse or no.  In a
 20758	few spare images it captures more about the esthetics and psychology of
 20759	hacking than all the scholarly volumes on the subject put together.  For
 20760	an opposing point of view, see the entry for {real programmer}.
 20761	
 20762	[1992 postscript --- the author writes: "The original submission to
 20763	the net was not in free verse, nor any approximation to it --- it was
 20764	straight prose style, in non-justified paragraphs.  In bouncing around
 20765	the net it apparently got modified into the `free verse' form now
 20766	popular.  In other words, it got hacked on the net.  That seems
 20767	appropriate, somehow."]
 20768	
 20769	:Appendix B: A Portrait of J. Random Hacker
 20770	*******************************************
 20771	
 20772	This profile reflects detailed comments on an earlier `trial balloon'
 20773	version from about a hundred USENET respondents.  Where comparatives are
 20774	used, the implicit `other' is a randomly selected segment of the
 20775	non-hacker population of the same size as hackerdom.
 20776	
 20777	An important point: Except in some relatively minor respects such as
 20778	slang vocabulary, hackers don't get to be the way they are by imitating
 20779	each other.  Rather, it seems to be the case that the combination of
 20780	personality traits that makes a hacker so conditions one's outlook on
 20781	life that one tends to end up being like other hackers whether one wants
 20782	to or not (much as bizarrely detailed similarities in behavior and
 20783	preferences are found in genetic twins raised separately).
 20784	
 20785	
 20786	:General Appearance:
 20787	====================
 20788	
 20789	Intelligent.  Scruffy.  Intense.  Abstracted.  Surprisingly for a
 20790	sedentary profession, more hackers run to skinny than fat; both
 20791	extremes are more common than elsewhere.  Tans are rare.
 20792	
 20793	
 20794	:Dress:
 20795	=======
 20796	
 20797	Casual, vaguely post-hippie; T-shirts, jeans, running shoes,
 20798	Birkenstocks (or bare feet).  Long hair, beards, and moustaches are
 20799	common.  High incidence of tie-dye and intellectual or humorous `slogan'
 20800	T-shirts (only rarely computer related; that would be too obvious).
 20801	
 20802	A substantial minority prefers `outdoorsy' clothing --- hiking boots
 20803	("in case a mountain should suddenly spring up in the machine room", as
 20804	one famous parody put it), khakis, lumberjack or chamois shirts, and the
 20805	like.
 20806	
 20807	Very few actually fit the `National Lampoon' Nerd stereotype, though it
 20808	lingers on at MIT and may have been more common before 1975.  These
 20809	days, backpacks are more common than briefcases, and the hacker `look'
 20810	is more whole-earth than whole-polyester.
 20811	
 20812	Hackers dress for comfort, function, and minimal maintenance hassles
 20813	rather than for appearance (some, perhaps unfortunately, take this to
 20814	extremes and neglect personal hygiene).  They have a very low tolerance
 20815	of suits and other `business' attire; in fact, it is not uncommon for
 20816	hackers to quit a job rather than conform to a dress code.
 20817	
 20818	Female hackers almost never wear visible makeup, and many use none at
 20819	all.
 20820	
 20821	
 20822	:Reading Habits:
 20823	================
 20824	
 20825	Omnivorous, but usually includes lots of science and science fiction.
 20826	The typical hacker household might subscribe to `Analog', `Scientific
 20827	American', `Co-Evolution Quarterly', and `Smithsonian'.  Hackers often
 20828	have a reading range that astonishes liberal arts people but tend not to
 20829	talk about it as much.  Many hackers spend as much of their spare time
 20830	reading as the average American burns up watching TV, and often keep
 20831	shelves and shelves of well-thumbed books in their homes.
 20832	
 20833	
 20834	:Other Interests:
 20835	=================
 20836	
 20837	Some hobbies are widely shared and recognized as going with the culture:
 20838	science fiction, music, medievalism (in the active form practiced by the
 20839	Society for Creative Anachronism and similar organizations), chess, go,
 20840	backgammon, wargames, and intellectual games of all kinds.
 20841	(Role-playing games such as Dungeons and Dragons used to be extremely
 20842	popular among hackers but they lost a bit of their luster as they moved
 20843	into the mainstream and became heavily commercialized.)  Logic puzzles.
 20844	Ham radio.  Other interests that seem to correlate less strongly but
 20845	positively with hackerdom include linguistics and theater teching.
 20846	
 20847	
 20848	:Physical Activity and Sports:
 20849	==============================
 20850	
 20851	Many (perhaps even most) hackers don't follow or do sports at all and
 20852	are determinedly anti-physical.  Among those who do, interest in
 20853	spectator sports is low to non-existent; sports are something one
 20854	*does*, not something one watches on TV.
 20855	
 20856	Further, hackers avoid most team sports like the plague (volleyball is a
 20857	notable exception, perhaps because it's non-contact and relatively
 20858	friendly).  Hacker sports are almost always primarily self-competitive
 20859	ones involving concentration, stamina, and micromotor skills: martial
 20860	arts, bicycling, auto racing, kite flying, hiking, rock climbing,
 20861	aviation, target-shooting, sailing, caving, juggling, skiing, skating
 20862	(ice and roller).  Hackers' delight in techno-toys also tends to draw
 20863	them towards hobbies with nifty complicated equipment that they can
 20864	tinker with.
 20865	
 20866	
 20867	:Education:
 20868	===========
 20869	
 20870	Nearly all hackers past their teens are either college-degreed or
 20871	self-educated to an equivalent level.  The self-taught hacker is often
 20872	considered (at least by other hackers) to be better-motivated, and may
 20873	be more respected, than his school-shaped counterpart.  Academic areas
 20874	from which people often gravitate into hackerdom include (besides the
 20875	obvious computer science and electrical engineering) physics,
 20876	mathematics, linguistics, and philosophy.
 20877	
 20878	
 20879	:Things Hackers Detest and Avoid:
 20880	=================================
 20881	
 20882	IBM mainframes.  Smurfs, Ewoks, and other forms of offensive cuteness.
 20883	Bureaucracies.  Stupid people.  Easy listening music.  Television
 20884	(except for cartoons, movies, the old "Star Trek", and the new
 20885	"Simpsons").  Business suits.  Dishonesty.  Incompetence.
 20886	Boredom.  COBOL. BASIC.  Character-based menu interfaces.
 20887	
 20888	
 20889	:Food:
 20890	======
 20891	
 20892	Ethnic.  Spicy.  Oriental, esp. Chinese and most esp. Szechuan, Hunan,
 20893	and Mandarin (hackers consider Cantonese vaguely d'eclass'e).  Hackers
 20894	prefer the exotic; for example, the Japanese-food fans among them will
 20895	eat with gusto such delicacies as fugu (poisonous pufferfish) and whale.
 20896	Thai food has experienced flurries of popularity.  Where available,
 20897	high-quality Jewish delicatessen food is much esteemed.  A visible
 20898	minority of Southwestern and Pacific Coast hackers prefers Mexican.
 20899	
 20900	For those all-night hacks, pizza and microwaved burritos are big.
 20901	Interestingly, though the mainstream culture has tended to think of
 20902	hackers as incorrigible junk-food junkies, many have at least mildly
 20903	health-foodist attitudes and are fairly discriminating about what they
 20904	eat.  This may be generational; anecdotal evidence suggests that the
 20905	stereotype was more on the mark 10--15 years ago.
 20906	
 20907	
 20908	:Politics:
 20909	==========
 20910	
 20911	Vaguely left of center, except for the strong libertarian contingent
 20912	which rejects conventional left-right politics entirely.  The only safe
 20913	generalization is that hackers tend to be rather anti-authoritarian;
 20914	thus, both conventional conservatism and `hard' leftism are rare.
 20915	Hackers are far more likely than most non-hackers to either (a) be
 20916	aggressively apolitical or (b) entertain peculiar or idiosyncratic
 20917	political ideas and actually try to live by them day-to-day.
 20918	
 20919	
 20920	:Gender and Ethnicity:
 20921	======================
 20922	
 20923	Hackerdom is still predominantly male.  However, the percentage of women
 20924	is clearly higher than the low-single-digit range typical for technical
 20925	professions, and female hackers are generally respected and dealt with
 20926	as equals.
 20927	
 20928	In the U.S., hackerdom is predominantly Caucasian with strong minorities
 20929	of Jews (East Coast) and Orientals (West Coast).  The Jewish contingent
 20930	has exerted a particularly pervasive cultural influence (see {Food},
 20931	above, and note that several common jargon terms are obviously mutated
 20932	Yiddish).
 20933	
 20934	The ethnic distribution of hackers is understood by them to be a
 20935	function of which ethnic groups tend to seek and value education.
 20936	Racial and ethnic prejudice is notably uncommon and tends to be met with
 20937	freezing contempt.
 20938	
 20939	When asked, hackers often ascribe their culture's gender- and
 20940	color-blindness to a positive effect of text-only network channels,
 20941	and this is doubtless a powerful influence.  Also, the ties many
 20942	hackers have to AI research and SF literature may have helped them to
 20943	develop an idea of personhood that is inclusive rather than exclusive
 20944	--- after all, if one's imagination readily grants full human rights to AI
 20945	programs, robots, dolphins, and extraterrestrial aliens, mere color and
 20946	gender can't seem very important any more.
 20947	
 20948	
 20949	:Religion:
 20950	==========
 20951	
 20952	
 20953	Agnostic.  Atheist.  Non-observant Jewish.  Neo-pagan.  Very commonly,
 20954	three or more of these are combined in the same person.  Conventional
 20955	faith-holding Christianity is rare though not unknown.
 20956	
 20957	Even hackers who identify with a religious affiliation tend to be
 20958	relaxed about it, hostile to organized religion in general and all forms
 20959	of religious bigotry in particular.  Many enjoy `parody' religions such
 20960	as Discordianism and the Church of the SubGenius.
 20961	
 20962	Also, many hackers are influenced to varying degrees by Zen Buddhism or
 20963	(less commonly) Taoism, and blend them easily with their `native'
 20964	religions.
 20965	
 20966	There is a definite strain of mystical, almost Gnostic sensibility that
 20967	shows up even among those hackers not actively involved with
 20968	neo-paganism, Discordianism, or Zen.  Hacker folklore that pays homage
 20969	to `wizards' and speaks of incantations and demons has too much
 20970	psychological truthfulness about it to be entirely a joke.
 20971	
 20972	
 20973	:Ceremonial Chemicals:
 20974	======================
 20975	
 20976	Most hackers don't smoke tobacco, and use alcohol in moderation if at
 20977	all (though there is a visible contingent of exotic-beer fanciers, and a
 20978	few hackers are serious oenophiles).  Limited use of non-addictive
 20979	psychedelic drugs, such as cannabis, LSD, psilocybin, and nitrous oxide,
 20980	etc., used to be relatively common and is still regarded with more
 20981	tolerance than in the mainstream culture.  Use of `downers' and opiates,
 20982	on the other hand, appears to be particularly rare; hackers seem in
 20983	general to dislike drugs that `dumb them down'.  On the third hand, many
 20984	hackers regularly wire up on caffeine and/or sugar for all-night hacking
 20985	runs.
 20986	
 20987	
 20988	:Communication Style:
 20989	=====================
 20990	
 20991	See the discussions of speech and writing styles near the beginning of
 20992	this File.  Though hackers often have poor person-to-person
 20993	communication skills, they are as a rule extremely sensitive to nuances
 20994	of language and very precise in their use of it.  They are often better
 20995	at writing than at speaking.
 20996	
 20997	
 20998	:Geographical Distribution:
 20999	===========================
 21000	
 21001	In the United States, hackerdom revolves on a Bay Area-to-Boston axis;
 21002	about half of the hard core seems to live within a hundred miles of
 21003	Cambridge (Massachusetts) or Berkeley (California), although there are
 21004	significant contingents in Los Angeles, in the Pacific Northwest, and
 21005	around Washington DC.  Hackers tend to cluster around large cities,
 21006	especially `university towns' such as the Raleigh-Durham area in North
 21007	Carolina or Princeton, New Jersey (this may simply reflect the fact that
 21008	many are students or ex-students living near their alma maters).
 21009	
 21010	
 21011	:Sexual Habits:
 21012	===============
 21013	
 21014	Hackerdom tolerates a much wider range of sexual and lifestyle variation
 21015	than the mainstream culture.  It includes a relatively large gay and bi
 21016	contingent.  Hackers are somewhat more likely to live in polygynous or
 21017	polyandrous relationships, practice open marriage, or live in communes
 21018	or group houses.  In this, as in general appearance, hackerdom
 21019	semi-consciously maintains `counterculture' values.
 21020	
 21021	
 21022	:Personality Characteristics:
 21023	=============================
 21024	
 21025	The most obvious common `personality' characteristics of hackers are
 21026	high intelligence, consuming curiosity, and facility with intellectual
 21027	abstractions.  Also, most hackers are `neophiles', stimulated by and
 21028	appreciative of novelty (especially intellectual novelty).  Most are
 21029	also relatively individualistic and anti-conformist.
 21030	
 21031	Although high general intelligence is common among hackers, it is not
 21032	the sine qua non one might expect.  Another trait is probably even more
 21033	important: the ability to mentally absorb, retain, and reference large
 21034	amounts of `meaningless' detail, trusting to later experience to give it
 21035	context and meaning.  A person of merely average analytical intelligence
 21036	who has this trait can become an effective hacker, but a creative genius
 21037	who lacks it will swiftly find himself outdistanced by people who
 21038	routinely upload the contents of thick reference manuals into their
 21039	brains.  [During the production of the book version of this document,
 21040	for example, I learned most of the rather complex typesetting language
 21041	TeX over about four working days, mainly by inhaling Knuth's 477-page
 21042	manual.  My editor's flabbergasted reaction to this genuinely surprised
 21043	me, because years of associating with hackers have conditioned me to
 21044	consider such performances routine and to be expected. --- ESR]
 21045	
 21046	Contrary to stereotype, hackers are *not* usually intellectually narrow;
 21047	they tend to be interested in any subject that can provide mental
 21048	stimulation, and can often discourse knowledgeably and even
 21049	interestingly on any number of obscure subjects --- if you can get them
 21050	to talk at all, as opposed to, say, going back to their hacking.
 21051	
 21052	It is noticeable (and contrary to many outsiders' expectations) that the
 21053	better a hacker is at hacking, the more likely he or she is to have
 21054	outside interests at which he or she is more than merely competent.
 21055	
 21056	Hackers are `control freaks' in a way that has nothing to do with the
 21057	usual coercive or authoritarian connotations of the term.  In the same
 21058	way that children delight in making model trains go forward and back by
 21059	moving a switch, hackers love making complicated things like computers
 21060	do nifty stuff for them.  But it has to be *their* nifty stuff.  They
 21061	don't like tedium, nondeterminism, or most of the fussy, boring,
 21062	ill-defined little tasks that go with maintaining a normal existence.
 21063	Accordingly, they tend to be careful and orderly in their intellectual
 21064	lives and chaotic elsewhere.  Their code will be beautiful, even if
 21065	their desks are buried in 3 feet of crap.
 21066	
 21067	Hackers are generally only very weakly motivated by conventional rewards
 21068	such as social approval or money.  They tend to be attracted by
 21069	challenges and excited by interesting toys, and to judge the interest of
 21070	work or other activities in terms of the challenges offered and the toys
 21071	they get to play with.
 21072	
 21073	In terms of Myers-Briggs and equivalent psychometric systems, hackerdom
 21074	appears to concentrate the relatively rare INTJ and INTP types; that is,
 21075	introverted, intuitive, and thinker types (as opposed to the
 21076	extroverted-sensate personalities that predominate in the mainstream
 21077	culture).  ENT[JP] types are also concentrated among hackers but are in
 21078	a minority.
 21079	
 21080	
 21081	:Weaknesses of the Hacker Personality:
 21082	======================================
 21083	
 21084	Hackers have relatively little ability to identify emotionally with
 21085	other people.  This may be because hackers generally aren't much like
 21086	`other people'.  Unsurprisingly, hackers also tend towards
 21087	self-absorption, intellectual arrogance, and impatience with people and
 21088	tasks perceived to be wasting their time.
 21089	
 21090	As cynical as hackers sometimes wax about the amount of idiocy in the
 21091	world, they tend by reflex to assume that everyone is as rational,
 21092	`cool', and imaginative as they consider themselves.  This bias often
 21093	contributes to weakness in communication skills.  Hackers tend to be
 21094	especially poor at confrontation and negotiation.
 21095	
 21096	Because of their passionate embrace of (what they consider to be) the
 21097	{Right Thing}, hackers can be unfortunately intolerant and bigoted on
 21098	technical issues, in marked contrast to their general spirit of
 21099	camaraderie and tolerance of alternative viewpoints otherwise.  Old-time
 21100	{{ITS}} partisans look down on the ever-growing hordes of {{UNIX}}
 21101	hackers; UNIX aficionados despise {VMS} and {{MS-DOS}}; and hackers who
 21102	are used to conventional command-line user interfaces loathe
 21103	mouse-and-menu based systems such as the Macintosh.  Hackers who don't
 21104	indulge in {USENET} consider it a huge waste of time and {bandwidth};
 21105	fans of old adventure games such as {ADVENT} and {Zork} consider {MUD}s
 21106	to be glorified chat systems devoid of atmosphere or interesting
 21107	puzzles; hackers who are willing to devote endless hours to USENET or
 21108	MUDs consider {IRC} to be a *real* waste of time; IRCies think MUDs
 21109	might be okay if there weren't all those silly puzzles in the way.  And,
 21110	of course, there are the perennial {holy wars} -- {EMACS} vs. {vi},
 21111	{big-endian} vs.  {little-endian}, RISC vs. CISC, etc., etc., etc.  As
 21112	in society at large, the intensity and duration of these debates is
 21113	usually inversely proportional to the number of objective, factual
 21114	arguments available to buttress any position.
 21115	
 21116	As a result of all the above traits, many hackers have difficulty
 21117	maintaining stable relationships.  At worst, they can produce the
 21118	classic {computer geek}: withdrawn, relationally incompetent, sexually
 21119	frustrated, and desperately unhappy when not submerged in his or her
 21120	craft.  Fortunately, this extreme is far less common than mainstream
 21121	folklore paints it --- but almost all hackers will recognize something
 21122	of themselves in the unflattering paragraphs above.
 21123	
 21124	Hackers are often monumentally disorganized and sloppy about dealing
 21125	with the physical world.  Bills don't get paid on time, clutter piles up
 21126	to incredible heights in homes and offices, and minor maintenance tasks
 21127	get deferred indefinitely.
 21128	
 21129	The sort of person who uses phrases like `incompletely socialized'
 21130	usually thinks hackers are.  Hackers regard such people with contempt
 21131	when they notice them at all.
 21132	
 21133	
 21134	:Miscellaneous:
 21135	===============
 21136	
 21137	Hackers are more likely to have cats than dogs (in fact, it is widely
 21138	grokked that cats have the hacker nature).  Many drive incredibly
 21139	decrepit heaps and forget to wash them; richer ones drive spiffy
 21140	Porsches and RX-7s and then forget to have them washed.  Almost all
 21141	hackers have terribly bad handwriting, and often fall into the habit of
 21142	block-printing everything like junior draftsmen.
 21143	
 21144	:Appendix C: Bibliography
 21145	*************************
 21146	
 21147	Here are some other books you can read to help you understand the hacker
 21148	mindset.
 21149	
 21150	
 21151	:G"odel, Escher, Bach: An Eternal Golden Braid:
 21152	Douglas Hofstadter
 21153	Basic Books, 1979
 21154	ISBN 0-394-74502-7
 21155	
 21156	This book reads like an intellectual Grand Tour of hacker
 21157	preoccupations.  Music, mathematical logic, programming, speculations on
 21158	the nature of intelligence, biology, and Zen are woven into a brilliant
 21159	tapestry themed on the concept of encoded self-reference.  The perfect
 21160	left-brain companion to `Illuminatus'.
 21161	
 21162	
 21163	:Illuminatus!:
 21164	    I.   `The Eye in the Pyramid'
 21165	    II.  `The Golden Apple'
 21166	    III. `Leviathan'.
 21167	Robert Shea and Robert Anton Wilson
 21168	Dell, 1988
 21169	ISBN 0-440-53981-1
 21170	
 21171	This work of alleged fiction is an incredible berserko-surrealist
 21172	rollercoaster of world-girdling conspiracies, intelligent dolphins, the
 21173	fall of Atlantis, who really killed JFK, sex, drugs, rock'n'roll, and
 21174	the Cosmic Giggle Factor.  First published in three volumes, but there
 21175	is now a one-volume trade paperback, carried by most chain bookstores
 21176	under SF.  The perfect right-brain companion to Hofstadter's `G"odel,
 21177	Escher, Bach'.  See {Eris}, {Discordianism}, {random numbers}, {Church
 21178	Of The SubGenius}.
 21179	
 21180	
 21181	:The Hitchhiker's Guide to the Galaxy:
 21182	Douglas Adams
 21183	Pocket Books, 1981
 21184	ISBN 0-671-46149-4
 21185	
 21186	This `Monty Python in Space' spoof of SF genre traditions has been
 21187	popular among hackers ever since the original British radio show.  Read
 21188	it if only to learn about Vogons (see {bogon}) and the significance of
 21189	the number 42 (see {random numbers}) --- and why the winningest chess
 21190	program of 1990 was called `Deep Thought'.
 21191	
 21192	
 21193	:The Tao of Programming:
 21194	James Geoffrey
 21195	Infobooks, 1987
 21196	ISBN 0-931137-07-1
 21197	
 21198	This gentle, funny spoof of the `Tao Te Ching' contains much that is
 21199	illuminating about the hacker way of thought.  "When you have learned to
 21200	snatch the error code from the trap frame, it will be time for you to
 21201	leave."
 21202	
 21203	
 21204	:Hackers:
 21205	Steven Levy
 21206	Anchor/Doubleday 1984
 21207	ISBN 0-385-19195-2
 21208	
 21209	Levy's book is at its best in describing the early MIT hackers at the
 21210	Model Railroad Club and the early days of the microcomputer revolution.
 21211	He never understood UNIX or the networks, though, and his enshrinement
 21212	of Richard Stallman as "the last true hacker" turns out (thankfully) to
 21213	have been quite misleading.  Numerous minor factual errors also mar the
 21214	text; for example, Levy's claim that the original Jargon File derived
 21215	from the TMRC Dictionary (the File originated at Stanford and was
 21216	brought to MIT in 1976; the co-authors of the first edition had never
 21217	seen the dictionary in question).  There are also numerous misspellings
 21218	in the book that inflame the passions of old-timers; as Dan Murphy, the
 21219	author of TECO, once said: "You would have thought he'd take the trouble
 21220	to spell the name of a winning editor right."  Nevertheless, this
 21221	remains a useful and stimulating book that captures the feel of several
 21222	important hackish subcultures.
 21223	
 21224	
 21225	:The Devil's DP Dictionary:
 21226	Stan Kelly-Bootle
 21227	McGraw-Hill, 1981
 21228	ISBN 0-07-034022-6
 21229	
 21230	This pastiche of Ambrose Bierce's famous work is similar in format to
 21231	the Jargon File (and quotes several entries from jargon-1) but somewhat
 21232	different in tone and intent.  It is more satirical and less
 21233	anthropological, and is largely a product of the author's literate and
 21234	quirky imagination.  For example, it defines `computer science' as "a
 21235	study akin to numerology and astrology, but lacking the precision of the
 21236	former and the success of the latter" and "the boring art of coping with
 21237	a large number of trivialities."
 21238	
 21239	
 21240	:The Devouring Fungus: Tales from the Computer Age:
 21241	Karla Jennings
 21242	Norton, 1990
 21243	ISBN 0-393-30732-8
 21244	
 21245	The author of this pioneering compendium knits together a great deal of
 21246	computer- and hacker-related folklore with good writing and a few
 21247	well-chosen cartoons.  She has a keen eye for the human aspects of the
 21248	lore and is very good at illuminating the psychology and evolution of
 21249	hackerdom.  Unfortunately, a number of small errors and awkwardnesses
 21250	suggest that she didn't have the final manuscript checked over by a
 21251	native speaker; the glossary in the back is particularly embarrassing,
 21252	and at least one classic tale (the Magic Switch story, retold here under
 21253	{A Story About `Magic'} in {appendix A}) is given in incomplete and
 21254	badly mangled form.  Nevertheless, this book is a win overall and can be
 21255	enjoyed by hacker and non-hacker alike.
 21256	
 21257	
 21258	:The Soul of a New Machine:
 21259	Tracy Kidder
 21260	Little, Brown, 1981
 21261	(paperback: Avon, 1982
 21262	ISBN 0-380-59931-7)
 21263	
 21264	This book (a 1982 Pulitzer Prize winner) documents the adventure of the
 21265	design of a new Data General computer, the Eclipse.  It is an amazingly
 21266	well-done portrait of the hacker mindset --- although largely the
 21267	hardware hacker --- done by a complete outsider.  It is a bit thin in
 21268	spots, but with enough technical information to be entertaining to the
 21269	serious hacker while providing non-technical people a view of what
 21270	day-to-day life can be like --- the fun, the excitement, the disasters.
 21271	During one period, when the microcode and logic were glitching at the
 21272	nanosecond level, one of the overworked engineers departed the company,
 21273	leaving behind a note on his terminal as his letter of resignation: "I
 21274	am going to a commune in Vermont and will deal with no unit of time
 21275	shorter than a season."
 21276	
 21277	
 21278	:Life with UNIX: a Guide for Everyone:
 21279	Don Libes and Sandy Ressler
 21280	Prentice-Hall, 1989
 21281	ISBN 0-13-536657-7
 21282	
 21283	The authors of this book set out to tell you all the things about UNIX
 21284	that tutorials and technical books won't.  The result is gossipy, funny,
 21285	opinionated, downright weird in spots, and invaluable.  Along the way
 21286	they expose you to enough of UNIX's history, folklore and humor to
 21287	qualify as a first-class source for these things.  Because so much of
 21288	today's hackerdom is involved with UNIX, this in turn illuminates many
 21289	of its in-jokes and preoccupations.
 21290	
 21291	
 21292	:True Names ... and Other Dangers:
 21293	Vernor Vinge
 21294	Baen Books, 1987
 21295	ISBN 0-671-65363-6
 21296	
 21297	Hacker demigod Richard Stallman believes the title story of this book
 21298	"expresses the spirit of hacking best".  This may well be true; it's
 21299	certainly difficult to recall a better job.  The other stories in this
 21300	collection are also fine work by an author who is perhaps one of today's
 21301	very best practitioners of hard SF.
 21302	
 21303	
 21304	:Cyberpunk: Outlaws and Hackers on the Computer Frontier:
 21305	Katie Hafner & John Markoff
 21306	Simon & Schuster 1991
 21307	ISBN 0-671-68322-5
 21308	
 21309	This book gathers narratives about the careers of three notorious
 21310	crackers into a clear-eyed but sympathetic portrait of hackerdom's dark
 21311	side.  The principals are Kevin Mitnick, "Pengo" and "Hagbard" of the
 21312	Chaos Computer Club, and Robert T. Morris (see {RTM}, sense 2) .
 21313	Markoff and Hafner focus as much on their psychologies and motivations
 21314	as on the details of their exploits, but don't slight the latter.  The
 21315	result is a balanced and fascinating account, particularly useful when
 21316	read immediately before or after Cliff Stoll's {The Cuckoo's Egg}.  It
 21317	is especially instructive to compare RTM, a true hacker who blundered,
 21318	with the sociopathic phone-freak Mitnick and the alienated, drug-addled
 21319	crackers who made the Chaos Club notorious.  The gulf between {wizard}
 21320	and {wannabee} has seldom been made more obvious.
 21321	
 21322	
 21323	:Technobabble:
 21324	John Barry
 21325	MIT Press 1991
 21326	ISBN 0-262-02333-4
 21327	
 21328	Barry's book takes a critical and humorous look at the `technobabble' of
 21329	acronyms, neologisms, hyperbole, and metaphor spawned by the computer
 21330	industry.  Though he discusses some of the same mechanisms of jargon
 21331	formation that occur in hackish, most of what he chronicles is actually
 21332	suit-speak --- the obfuscatory language of press releases, marketroids,
 21333	and Silicon Valley CEOs rather than the playful jargon of hackers (most
 21334	of whom wouldn't be caught dead uttering the kind of pompous,
 21335	passive-voiced word salad he deplores).
 21336	
 21337	
 21338	:The Cuckoo's Egg:
 21339	Clifford Stoll
 21340	Doubleday 1989
 21341	ISBN 0-385-24946-2
 21342	
 21343	Clifford Stoll's absorbing tale of how he tracked Markus Hess and the
 21344	Chaos Club cracking ring nicely illustrates the difference between
 21345	`hacker' and `cracker'.  Stoll's portrait of himself, his lady Martha,
 21346	and his friends at Berkeley and on the Internet paints a marvelously
 21347	vivid picture of how hackers and the people around them like to live and
 21348	what they think.
 21349	
 21350	#====================== THE JARGON FILE ENDS HERE ======================#
 21351	
