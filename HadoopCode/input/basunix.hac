     1	                             ********************
     2	                                Basic Unix Use
     3	                                By Lord Lawless
     4	                                 Phortune 500
     5	                              Board of Directors
     6	                             ********************
     7	March 8, 1987
     8	-------------
     9	
    10	This file is basically a brief introduction and overview for the beginning 
    11	hacker to the Unix operating system.  All information contained herein is 
    12	accurate to the extent of my knowledge.  This file is intended for inform-
    13	ational purposes only and the author (Lord Lawless) is in NO way responsible
    14	for the use of this file for purposes other than the aforementioned.
    15	
    16	Part I:  What is Unix?
    17	----------------------
    18		Unix is an operating system, so designated because it allows a user to
    19	interface with a computer in a way that is (hopefully) easy for the user to 
    20	learn and use.  Unix can be known by other forms, PC-Unix, Xenix, etc., but 
    21	they all basically are the same (with slight differences this file won't go 
    22	into) and use the same commands.  Unix is a wonderfully simple to use OS once
    23	you begin, and while this file will help you I recommend that you find a Unix
    24	system somewhere and wander around on it to help yourself to learn.  To put 
    25	this more formally:
    26	
    27	The UNIX system is a set of programs that include a time-sharing
    28	operating system and a set of utility programs.  The operating
    29	system has two basic parts:
    30	
    31		1)  The kernel is the program in the UNIX operating system
    32		that is responsible for most operating system functions.  It
    33		schedules and manages all the work done by the computer and 
    34		maintains the file system.  It is always running, and is 
    35		invisible to  users.
    36	
    37		2)  The shell is the UNIX operating system program responsible
    38		for handling all interaction between users and the computer.
    39		It includes a powerful command language called "shell language"*.
    40	
    41	The utility programs (usually called UNIX commands) are executed
    42	through the shell, and allow users to communicate with each other,
    43	to edit and manipulate files, to write and execute programs in
    44	several programming languages, and many other things.
    45	
    46	
    47	Part II:  Recognizing a Unix system
    48	-------------------------------------
    49		When you connect to a Unix system you will see a message usually like
    50	"AT&T Unix:  Unauthorized use will be Prosecuted!" or just "Unix System V" or
    51	the like.  At the least you will see a prompt saying "login:".  At this point,
    52	if possible, make sure that you are in lowercase, because if the computer det-
    53	ects that you are typing in uppercase everything you read after will be in 
    54	uppercase with lowercase denoted by a \ in front of the word.  This is because
    55	Unix is case sensitive, so be careful, reading lowercase is much easier than
    56	reading all uppercase and slashes.  Ok, so here you are at the Unix "login:"
    57	prompt.  
    58	
    59	Part III:  Logging on
    60	---------------------
    61		At this point you must enter your login, and then, if the account (
    62	never more than 14 characters) has one, the password.  Now, all Unix systems 
    63	have default accounts, and unless set by the Root System Operator no passwords.
    64	This has been the means of infiltration by many the Unix hacker.  There are two
    65	types of accounts in a Unix, the "super user" and the "user".  The super user 
    66	has access to almost everything (or everything depending on the system) and the
    67	user basically has access to the files he owns and what he can sometimes read.
    68	The default super user accounts on a unix are:  
    69	
    70	ROOT
    71	MAKEFSYS
    72	MOUNTFSYS
    73	UMOUNTFSYS
    74	CHECKFSYS
    75	and sometimes 
    76	ADMIN 
    77	SYSADMIN.  
    78	
    79	For passwords to these try things like SYSTEM, SYSMAN, SYSADMIN, ADMINISTRATOR,
    80	OPERATOR, SYSOP, etc.
    81	The default user-level accounts are:  
    82	LP
    83	DAEMON
    84	TROUBLE
    85	NUUCP
    86	UUCP
    87	RJE 
    88	ADM
    89	SYSADM
    90	SYNC
    91	BIN 
    92	
    93	(Note:  These accounts should be entered in lower case , I merely wrote them 
    94	in upper case for easier reference.)  
    95	After being on Unix's, I have also seen the following common accounts:  
    96	USER
    97	UNIX
    98	GAMES
    99	GUEST
   100	STUDENT -on school run Unix's.
   101	
   102	The maximum length of a password is 11 characters.
   103	After doing all this you should, with luck, be in!
   104	If you couldn't hack anything out, try typing "WHO" at the login: prompt, it 
   105	may list all the user accounts and you can try them until you find one without
   106	a password.
   107	
   108	Part IV:  You're in!!!
   109	----------------------
   110		Congratulate yourself, the hardest part of Unix "hacking" is over.  Ok,
   111	now that you're in you'll see a prompt which will probably look like "$" for a
   112	user account or "#" if you got lucky and got a super user account.  
   113	(Quick note, to stop a unix process in action try typing ctrl-d or control
   114	backspace, these are the end of file/Stop process keys.)
   115	Ok, so you are now in.  Let me give a quick lesson on Unix directories.  In 
   116	Unix, the root is the main directory, and it contains subdirectories which may
   117	contain subdirectories etc.  In order to change to the root directory, one 
   118	would type "cd /".  This is because "cd" is the command "change directory" and
   119	"/" is the root directory.  To change to subdirectory "Bill" contained in the
   120	root directory, you would type "cd /Bill" or, if you were in the root dir, just
   121	"cd Bill".  If you wanted to access Bill's files, you'd enter "cd /Bill/files"
   122	assuming Bill had a subdir called files where he kept his files.  This is how
   123	a person would move around in a Unix sys.  Graphically, it looks like this:
   124	                                     
   125	                                     Root
   126	                            __________!!_________
   127	                                !!
   128	                             __Bill__
   129	                                !!
   130	                            __Files__
   131	
   132	
   133	Part V:  Basic Commands
   134	-----------------------
   135		Ok, these commands are the most useful ones that I've found and can are
   136	entered from the prompt.
   137	
   138	Command:What it does
   139	--------------------
   140	ls	gives a listing of all files in a directory
   141	
   142	cat	gives a dump to screen of what is contained in a file.  For instance
   143		"cat phones" would show me what is in file "phones".  
   144	
   145	cd	change directory
   146	
   147	pwd	shows what directory path you are in now
   148	
   149	ps	shows system processes
   150	
   151	rm	remove a file, for instance "rm phones".
   152	
   153	rmdir 	removes a directory, for instance "rm Bill".
   154	
   155	grep	print ascii strings in a file, ie "grep phones"
   156	
   157	who	shows who's on the system
   158	
   159	mail	sends mail to a user, syntax mail <username>
   160	
   161	su	change from 1 account to another.  For instance, if you are account
   162		Bill and wish to change to account Jake (which is unpassworded) just
   163		type "su Jake" and you will change to him.  If Jake has a password you
   164		will be prompted to enter it.  This is useful for loggin in under a 
   165		user account and switching later to a super user account.
   166	
   167	passwd	allows a user to change his password.  If you are a superuser you can
   168		change someone elses password by typing "passwd <account>".
   169	
   170	mkuser	make a user (providing you are a super user)
   171	
   172	mkdir 	create a directory
   173	
   174	More Information about Commands
   175	-------------------------------
   176	The following are more of the most basic Unix commands.
   177	
   178	cat	     cd		  chmod	       cp	    cut		 date
   179	echo	     egrep	  fgrep	       file	    find	 glossary
   180	grep	     help	  ln	       locate	    ls		 mail
   181	mesg	     mkdir	  mv	       news	    pr		 ps
   182	pwd	     rm		  sleep	       sort	    starter	 stty
   183	tabs	     tail	  tee	       time	    touch	 tty
   184	uname	     usage	  wall	       wc	    who		 write
   185	
   186	Using the Command: mkdir 
   187	
   188	Syntax Summary:  mkdir  dir_name1  [  dir_name2  ...]
   189	        where:
   190	                   dir_names  are simple subdirectory names, 
   191	                       relative pathnames, or full pathnames
   192	
   193	Description:
   194	     mkdir creates one or more new directories.
   195	     If mkdir is given a simple name as an argument, the new
   196	     directory will be a subdirectory of the current directory.
   197	     You can make new directories anywhere in the file system
   198	     by giving mkdir a complete or relative pathname for the new
   199	     directories, if you have permission to write in the directory
   200	     where the new directory is to be created.
   201	
   202	Ok, those are the basic commands you will need to go around in the system.
   203	
   204	Part VI:  Useful Information
   205	----------------------------
   206		A great place to go to get information on who is on the system and 
   207	what accounts you can use to get on again is contained in the file "passwd"
   208	in the "etc" directory.  To look at it, cd etc, and then cat passwd.  The
   209	first entry should say something like this:
   210	root:adfaBADca:0:1:Operator:/:/bin/sh
   211	what this means is that the root account has an encrypted password, has super-
   212	user capabilities (any user with a 0 in that slot is a super user) is in group
   213	1 (relatively unimportant for this file), has a comment of Operator (this may
   214	be blank), has a home directory of / (the root) and uses the Bourne Shell, kept
   215	in the /bin directory.  
   216	You will then see all the other users listed out in the same format.  If you
   217	see an account followed by two colons, that means that it has no password.  You
   218	want these accounts so that you can log in under them another time.  If you get
   219	real lucky you may see something like this:
   220	makefsys::0:1:/bin:/bin/sh
   221	meaning that you have found a super user account with no password, a very 
   222	useful item indeed.
   223	
   224	Another good place to look is the /usr/spool dir and the 
   225	/usr/spool/cron/crontabs dir because if you are a super user that dir contains
   226	much that will be useful to you.
   227	
   228	In order to move up to a directory one level higher than you are presently in,
   229	type "cd ..".  So to move from /Bill/files to /Bill I would just type cd ..
   230	and, assuming I started in /Bill/files I would now be in /Bill.
   231	
   232	Ok, now you can wander the system "cat"'ing around and whatnot.  If a file 
   233	doesn't "cat", try just typing it's name, that will execute it if you have the
   234	privileges.  Try typing "admin" or "ua" if you are a superuser nad maybe you'll
   235	be able to create users or other interesting things.  You may not be able to 
   236	cat a file or run it because you lack access permissions.  What are they? Read 
   237	on!
   238	
   239	Access Permissions
   240	------------------
   241	 access permissions:  permissions:  mode:  owner:  
   242	owner/group/others:  read/write/execute
   243	
   244	As the user of a UNIX system, you can decide who can read, write,
   245	and  execute the files and directories that you own.   You are
   246	usually the owner of files and directories that you have created in
   247	your login directory and in the "subdirectories"* in your login
   248	directory.  You may also own files in other peoples' directories.
   249	You control the use of your files and directories by specifying the
   250	access permissions, also called the mode, for each. You can  specify
   251	different access permissions for yourself, your "group"*, and the
   252	other users of the system. Permission to read allows the user to
   253	read the contents of the file. Write permission allows the user to
   254	change the file and execute permission enables the user to execute
   255	the program within the file. 
   256	
   257		ls -l
   258	
   259	prints the access permissions for each file and directory in the
   260	current directory.   The sample listing below shows the mode of the
   261	file (preceded by a -), the number of "links"*, the owner,  the
   262	"group ID"*, the size in characters, the date and time the file
   263	was last modified, and the "filename"*.
   264	
   265		-rwxr-x--x  1 sandy  12345  128  Oct  9  9:32  lock 
   266	
   267	If this were a listing for a directory, the hyphen (-) would be
   268	replaced by the letter d. The owner of the file "lock" can read,
   269	write and execute the file, the group can read and execute it, and
   270	the others can only execute it. You can change the mode of your
   271	files and directories by using the change mode command, chmod.   
   272	
   273	Other interesting places to look are in the directories assigned to the users 
   274	on the Unix system, often their files will contain some useful information.
   275	Also try going into the /uucp directory or looking for any uucp dir anywhere as
   276	it may contain phone numbers to other Unix systems or other "goodies".
   277	
   278	
   279	The *: asterisk 
   280	---------------
   281	In the shell, an asterisk matches any "string"* of characters in
   282	a "filename"* on a command line. The command
   283	
   284		rm temp*
   285	
   286	removes all files from the current working directory that begin with
   287	the string "temp".  Files like "temp", "temp1", "temp.1", and
   288	"temp.save" would all be deleted.  An asterisk alone matches any
   289	filename in the current working directory except  those beginning
   290	with "dot (.)"*.  For example,
   291	
   292		rm *
   293	
   294	removes all the files in your directory except for the dot (.)files.
   295	
   296	Finally, typing help at the unix prompt may bring up a help manual that is 
   297	usually quite well done and will help you if you are stuck or wish to explore
   298	in more depth the commands I didn't go into.
   299	
   300	Hmm, what else? I can't think of much more right now that would help you much
   301	more, in this file I think I've covered everything that should get you well on
   302	your way towards becoming a unix hacker.  Once you've got this, start reading
   303	files on "Unix Shells", "Scripts", and ask around A LOT.  Ah, I just remembered
   304	something.  To get help on a command, type "man <command>" or "whatis <command>
   305	" and you may find out.  Also, a lot of Unix's have a built in Help feature 
   306	somewhere, try to get to it.  
   307	
   308	Part VII:  A Few Final Words
   309	----------------------------
   310		If you manage to get onto a Unix system, don't screw it up.  Unix is a 
   311	great operating system, and fun to learn on and have other people learn on.
   312	Don't become a superuser and delete everything or other things, it's just not
   313	worth it.  Also, don't make a use called "Hacker" or "Shadow 1" or something,
   314	that's a blatant giveaway.  Put an account a little out of the way directory,
   315	and create user level accounts if you must, and perhaps just 1 super user
   316	level.  I can't think of much more to say on the basics, though I probably left
   317	some important things out....nobody's perfect.  I hope you enjoyed the file and
   318	I can be found on the following boards:
   319	
   320	The Private Connection
   321	The Undergraduates Lounge
   322	Quick Shop
   323	Phreak Klass 2600
   324	The Brewery
   325	The Works
   326	Slaughterhouse 5, Holovision Network Node 1
   327	Spock's Brain
   328	
   329	Special Thanks to:  The Prophet, for his excellent file:  Unix Use and Security
   330	From the Ground Up.
   331	
   332	The End, good luck, enjoy yourself, and don't get caught!
   333	
   334	                                 Lord Lawless
   335	                               Phortune 500/BOD
   336	
   337		    --This has been a Lord Lawless Presentation, (C) 1987.--
   338	
   339	
   340	u are a super user that dir contains
   341	much that will be useful to you.
   342	
   343	In order to move up to a directory one level higher than you are presently in,
   344	type "cd ..".  So to move from /Bill/files to /Bill I would just type cd ..
   345	and, assuming I started in /Bill/files I would now be in /Bill.
   346	
   347	Ok, now you can wander the system "cat"'ing around and whatnot.  If a file 
   348	doesn't "cat", try just typing it's name, that will execute it if you have the
   349	privileges.  Try typing "admin" or "ua" if you are a superuser nad maybe you'll
   350	be able to create users or other interesting things.  You may not be able to 
   351	cat a file or run it because you lack access permissions.  What are they? Re