     1	
     2	
     3	
     4	
     5	
     6	
     7	
     8	
     9	
    10	
    11	
    12	
    13	
    14	
    15	
    16	           The Designing and Building of an 8-Bit Computer:
    17	                           A Personal Story
    18	                                   
    19	                         Written by Mark Balch
    20	                                   
    21	                                   
    22	                     Copyright 1990 by Mark Balch,
    23	                         All Rights Reserved.
    24	
    25	
    26	
    27	
    28	     You may freely copy and distribute this text file provided that:
    29	it is not sold for profit nor used in a commercial environment; that it
    30	is distributed in its absolutely original, unmodified form; and that it
    31	bears the original copyright notice seen above.
    32	
    33	
    34	
    35	
    36	
    37	
    38	
    39	
    40	
    41	
    42	
    43	
    44	
    45	
    46	
    47	
    48	
    49	
    50	
    51	
    52	
    53	
    54	     These past few weeks have been very exciting for me because I have
    55	been working with and programming my first home-brew 8-bit computer. 
    56	This article is not, by far, the last word on building computers but is
    57	intended to serve as an eye-opener for those interested in the inner
    58	workings of computers.  I am not going to explain every facet about 8-
    59	bit computers because such a project could easily fill several
    60	reference volumes and would require the authorship of a true
    61	professional.  I am simply going to describe my own little creation:
    62	the preparation leading to its design and construction, the actual
    63	processes of designing and building my computer, the long process of
    64	finding and correcting my initial hardware problems ("bugs") and my
    65	current, on-going exploration of the computer's capabilities from the
    66	programming side of things.
    67	
    68	     I first started researching the low level intricacies of 8-bit
    69	computers about three years ago by reading Steve Ciarcia's monthly
    70	column in BYTE magazine called "The Circuit Cellar."  (I had first seen
    71	this column as early as 1985 when I glanced through old issues of Byte
    72	out of curiosity.  Unfortunately, Steve no longer writes for Byte
    73	magazine due to what are, in my opinion, questionable attitudes of the
    74	management.  But, lucky for his readers, Steve founded an excellent
    75	magazine along with fellow electrical engineers devoted to hardware
    76	"hacking" called Circuit Cellar INK.  In addition to this, beginners
    77	like myself and industry pro's can communicate with each other by
    78	calling the CCI BBS which will be mentioned later in more detail.)  In
    79	this monthly column, Steve would present working projects along with
    80	schematics and thorough explanations (schematic diagrams are the
    81	detailed plans or blue-prints for an electronic circuit).  These
    82	projects included 8-bit multi-purpose control computers called micro-
    83	controllers, a "smart" printer spooler, a logic IC (Integrated Circuit)
    84	tester and many other interesting topics.  His last three articles even
    85	detailed a multi-processing super computer!  I never built any of these
    86	projects, but each month they taught me more and more about computer
    87	design and gave me ideas for my own projects.
    88	
    89	     At around the same time, I purchased a book dealing with the
    90	Motorola 6800 microprocessor family which explained, in great detail,
    91	the workings of 8-bit microprocessor systems.  I also sent letters to
    92	semiconductor companies such as Motorola, Rockwell and Texas
    93	Instruments asking for information on their microprocessor, memory and
    94	peripheral products.  These companies were wonderful with the myriad of
    95	free reference manuals that they sent me.  Over a one year period of
    96	time, I probably mailed more than 20 letters, mostly to Motorola and a
    97	good deal to Texas Instruments, and in reply received at least 2
    98	bookshelves worth of valuable information in the form of their product
    99	fliers, reference manuals and application notes (application notes are
   100	usually sample designs incorporating a certain product for a specific
   101	task).  These companies were so obliging because the more engineers
   102	that use their semiconductor products, the more chips they sell and the
   103	more money they make.  Nevertheless, all of this free information
   104	supplied me with weeks worth of reading material from which I learned a
   105	great deal.
   106	
   107	     About a year later, I decided to design a robot based on an
   108	article that I found in a 1986 issue of Byte.  I carefully drew the
   109	schematic diagrams for my simple circuit by hand on three sheets of
   110	graph paper.  The microprocessor that I chose for the robot was the
   111	6808 which I had learned about from that book.  Anyway, this was my
   112	first attempt and to say "things got messed up" is an understatement. 
   113	I ordered parts, some expensive pieces of equipment to "burn" EPROM
   114	chips (more on this later) and realized that I didn't know how to
   115	begin.  Worse yet, the science fair was about a month away.  The
   116	details are very cloudy in my head for some reason, probably because I
   117	had no idea about what I was doing.  The project was scrapped and I
   118	think I continued to read more about electronics.
   119	
   120	     The year after (two years ago) I decided to go ahead and build a
   121	normal computer board, no wheels and no robot.  I was able to get my
   122	parents to buy me an expensive schematic drawing program called Schema
   123	for my IBM clone computer to enable me to draw better diagrams.  I
   124	designed the computer around the 6808 microprocessor (MPU) again and
   125	ordered some parts.  But wouldn't ya know it...my social life got in
   126	the way when I joined my school's production of the musical Cabaret.  I
   127	didn't start building the project till February 1st and with the
   128	science fair a month away things went hay wire.  I cut corners to build
   129	it quickly and made a mess for the second year in a row.  Thinking back
   130	on that project, the design was a pretty good one with only a few
   131	flaws.  Had I given myself enough time I might have gotten it to work,
   132	but who knows.
   133	
   134	     Okay.  I had enough.  This was crazy.  I made up my mind to build
   135	a computer, and really build one this time.  Summer vacation was over
   136	and school had started.  (We're back in September of 1989 in case you
   137	lost track of my excellent time-keeping!)  I went back to my computer
   138	and spent some time with Schema.  What a terrific program: expensive
   139	but definitely worth ever penny to an electrical engineer.  I came up
   140	with a straight forward design for an 8-bit computer.  It was again
   141	built around the 1 MHz 6808 MPU and was to have an expansion bus
   142	capable of addressing 32K of off-board input/output or memory, 2K or
   143	RAM, 8K of EPROM, an LCD, a serial port capable of operation up to
   144	19.2K baud, 8 LEDs, 4 push buttons and an 8 position DIP switch.
   145	
   146	     Now let me do some explaining in case some of the above terms
   147	aren't too clear to you.  The 6808 that I used has an operating or
   148	clock frequency of 1 megahertz (MHz).  All computers have a certain
   149	clock frequency which dictates how fast instructions are fetched from
   150	memory and executed.  Everything that the MPU does is synchronized by a
   151	constant pulse train called the clock.  A 1 megahertz clock speed means
   152	that the MPU receives 1 million clock cycles per second (mega meaning
   153	million and hertz meaning a cycle of repetition.  You have probably
   154	seen clock speeds of 10, 12, 16, 20 MHz and higher in computer
   155	catalogs.  Yes, a 30 MHz 80386 MPU receives 30 million clock pulses per
   156	second!).  Each instruction that the MPU performs is broken down into
   157	parts and each part is executed in one clock cycle.  Different
   158	instructions have different execution times.  On the 6808, the average
   159	instruction execution time is about 4 or 5 clock cycles, ranging from 2
   160	cycles all the way up to 12 cycles.  The faster the clock frequency,
   161	the faster an MPU can execute instructions.  Why didn't I use a 20 MHz
   162	clock frequency?  Well first of all, the highest possible operating
   163	frequency of the 6800 family is 2 MHz.  Second, the faster your MPU
   164	operates, the more expensive and harder to build your computer gets. 
   165	At 20 MHz, you need very fast memory which ain't cheap, and you have to
   166	be careful about other technical problems arising from radio
   167	interference in the computer's signal lines.
   168	
   169	     The 2K of RAM means 2 kilobytes of Random Access Memory.  Thinking
   170	back on things, I should have designed 8K of RAM...oh well.  Random
   171	Access Memory is the term given to memory that can be written to and
   172	read from.  RAM is known as volatile memory because it cannot retain
   173	its information when power is removed from the chip.  Here's something
   174	that most people don't realize about memory quantities:  the 2 kilobyte
   175	number is a round number.  The RAM chip actually has 2,048 bytes of RAM
   176	but 2,000 is selected because it is easier to keep track of.  If you're
   177	wondering why the RAM chip is made to hold 2,048 bytes (2,048 isn't
   178	exactly a round number), it's because computers operate on the binary,
   179	or base 2, number system at their lowest level.  All numbers in
   180	computers are powers of 2.  This is because a signal wire can either be
   181	ON or OFF.  So you have two possible numbers: 1 and 0.  2,048 is 2
   182	raised to the 11th power.  This means that 11 address signal lines
   183	(numbers) are needed to access all of the 2K of RAM.
   184	
   185	     The 8K of EPROM means 8 kilobytes of Erasable Programmable Read
   186	Only Memory.  This memory is non-volatile, meaning that it retains its
   187	information even while the power is off.  Under normal operation, this
   188	memory cannot be written to, so it is called Read Only Memory.  But as
   189	the name implies, under certain conditions the chip can be programmed
   190	and also erased.  A special device known as an EPROM programmer is
   191	needed to "burn" the information into the chip with high voltage
   192	electrical pulses.  Another device known as an EPROM eraser is needed
   193	to erase the information in the chip before it can be re-programmed. 
   194	This erasure process is accomplished by a high powered ultra-violet
   195	light source.  Now here's the question: why use an EPROM if you have
   196	RAM?  Well, the MPU by itself is a dumb piece of silicon wafer. 
   197	Without a program it won't do a thing so you must always have some
   198	program immediately available for it when the computer is powered on. 
   199	The EPROM retains its data almost indefinitely, so even after power has
   200	been turned off, it can supply the MPU with instructions as soon as the
   201	computer is turned on.  Okay great, but why do you have to make it
   202	erasable?  Once you have a perfect program developed, you don't have to
   203	make an erasable PROM chip, but during the initial stages of
   204	development, you must be able to correct your mistakes.  If the EPROM
   205	was not erasable, an engineer would waste dozens or even hundreds of
   206	PROM chips before he got his program or design correct.  And believe
   207	me, no matter how perfect you think your program is the first time,
   208	it's bound to be buggy.  As you gain experience, the number of bugs of
   209	course decreases, but they are always popping up when you least expect
   210	it.
   211	
   212	     The LCD is an acronym for Liquid Crystal Display.  You've seen
   213	them lots of times on calculators, watches and maybe some machines. 
   214	They can be used to display letters, numbers and graphics.  The one
   215	that I used is a 16 character display.  They're not cheap though. 
   216	Buying them from retailers can set you back about $30 for the one I
   217	used and up to $80 for a 40 character 2 line display.  The best place
   218	to buy them is from odd-lot clearing houses who buy over-stocked items
   219	from manufacturers and sell them at great prices.  I got three of them
   220	for $30, a pretty good deal.
   221	
   222	     The serial port is actually composed of two chips, a connector and
   223	some assorted electronic components.  The first chip is known as either
   224	a UART (Universal Asynchronus Receiver/Transmitter) or an ACIA
   225	(Asynchronus Communications Interface Adapter).  I prefer UART because
   226	it has only two syllables!  This chip is the heart of the serial port. 
   227	It receives data from the MPU and converts it into a serial format and
   228	then sends it to the second chip.  In reverse, it takes serial data
   229	from the other chip and converts it into 8-bit bytes for use by the
   230	MPU.  I used the Rockwell 6551 which is a very easy to use but complete
   231	chip.  Many engineers had recommended it to me.  Motorola makes the
   232	6850 which is also a UART, but I don't like it.  It requires an
   233	external clock source and is not as flexible.  Heck, they made a great
   234	MPU, so who am I to complain!?!  The second chip is known as a level
   235	converter.  Standard logic levels are from 0 to +5 volts.  This is
   236	known as TTL logic (TTL means Transistor-Transistor Logic.  They are
   237	the low level basic logic circuits from which all other circuits are
   238	built).  But the RS-232 serial communications standard uses -12 to +12
   239	volt logic levels.  Somehow, the computer industry got stuck with this
   240	"great" idea, so we all have to design around it.  The level converter
   241	simply converts the RS-232 signals to TTL logic signals and vice-versa. 
   242	The chip I used is the MAX232 which is a great product from Maxim
   243	Semiconductor.  Unlike the standard chips used for signal conversion,
   244	the 1488 and 1489 which require external +12 and -12 voltage sources,
   245	the MAX232 converts +5V to +10V and -10V without any external hardware. 
   246	This minimizes circuit complexity, but increases the cost a little.
   247	
   248	     If you've forgotten by now, I am explaining all of the parts of my
   249	computer design!  Last but certainly not least is some input/output
   250	(I/O) circuitry that I incorporated into my design to allow status
   251	signaling to the user through 8 LEDs and user input through a keyboard
   252	consisting of 4 buttons and 8 switches.  By the way, LED is an acronym
   253	for Light Emitting Diode.  These guys are available in several colors
   254	and they do what their name implies: light up!  All of this
   255	miscellaneous I/O hardware is tied together for easy communication with
   256	the MPU by the 6821 PIA.  This is another Motorola product designed to
   257	complement its 6800 family of MPUs.  PIA stands for Peripheral
   258	Interface Adapter.  It has 2 8 bit I/O ports and 4 controllable signal
   259	lines.  I connected the 8 LEDs to one port, the DIP switch to the other
   260	and the four buttons to the signal lines.  Once I figured out how to
   261	work it, the PIA performed very nicely and allowed very flexible
   262	control of my I/O devices.
   263	
   264	     I now take you back to the story of building the beast.  We were
   265	up to the point where I designed the computer with Schema.  Okay. 
   266	During the design process, I communicated with engineers on the CCI BBS
   267	and asked little questions here and there.  They offered much help and
   268	I soon had three nice looking pages of schematics printed out.  I was
   269	ready to build the computer, so I ordered all of the parts from mail-
   270	order houses in silicon valley.  The technique that I used is called
   271	wire wrapping.  There are two basic methods for prototyping circuits
   272	(prototyping being the first time you are building the circuit) along
   273	with some others: soldering and wire wrapping.  Some people like
   274	soldering.  Steve Ciarcia solders all of his projects, but as someone
   275	said on the CCI BBS, Steve was destined to be a brain surgeon.  The
   276	underside of his boards really look like art.  Most of us are not so
   277	talented and soldering can become a great mess.  Melting through
   278	insulation, twisting, turning, burning!  Eech.  For my previous project
   279	(the one that I built, but didn't work) I had called the CCI BBS and
   280	asked about prototyping methods.  The general consensus was to wire
   281	wrap.  So, I bought some tools and went ahead with it.  The wire
   282	wrapping part of my previous project was certainly a success.  The
   283	process is very easy to learn.
   284	
   285	     This year, I ordered some more wire and assorted materials
   286	necessary to build the project.  It was a hefty bill, but I paid some
   287	and my parents paid some.  I started building it, I think, in October
   288	or November.  In any case, I finished in a few weeks and was ready for
   289	the initial test by December.  Everything looked great, but I was
   290	scared as hell to try the thing out.  I soon got up the nerve to
   291	program an EPROM with a simple program and plugged it into its socket. 
   292	I turned the power on with a rapid heart beat and relaxed.  The damn
   293	thing didn't even cough!  It just sat there with the power on.  No
   294	smoking, no explosions, no LEDs going on, no words on the LCD.  I was
   295	disappointed, but did I really expect it to work?  No, I really looked
   296	at it as something that I couldn't possibly get to work.  I mean...me
   297	build a computer?  Come on, a computer is a computer, not some lego set
   298	or something like that.  I gave it a few more tries and still nothing
   299	happened.  I checked my design and everything seemed okay.  I checked
   300	the wiring and everything seemed okay.
   301	
   302	     Okay.  I decided to check the power rails.  I took out my multi-
   303	meter which I bought at Radio Shack on sale for $9.95.  A multi-meter
   304	is an instrument that can measure several electrical characteristics of
   305	wires.  The most basic multi-meter (what I had) can measure voltage and
   306	resistance.  I selected voltage mode and put the probes to my power
   307	rails.  Hey!  I found something.  The voltage read almost 0 which meant
   308	that either my power supply was not functioning or there was a short. 
   309	I checked the power supply and it was fine, so there must be a short...
   310	but where?  I called the CCI BBS once again and asked for some help. 
   311	About two weeks later, I found the short with a technique that an
   312	engineer had explained to me.  Okay.  I'm ready.  Again I plugged in
   313	the EPROM and again nothing happened.  After a few more desperate
   314	tries, I gave up.  It was now the beginning of January.  I decided to
   315	stop work until February.
   316	
   317	     About two weeks later, I logged onto the CCI BBS as I always did
   318	weekly and found a message waiting for me.  It was from an engineer in
   319	silicon valley who had started working with 8-bit MPUs when he too was
   320	a sophomore in high school.  I was then a Junior, but that's beside the
   321	point.  He gave me encouragement and some hints on how to find my
   322	short.  I wrote back thanking him for the encouragement but telling him
   323	that I found my short and that the computer still didn't work.  I was
   324	confident of my design because of those I had seen in Steve's column
   325	and in the new magazine Circuit Cellar INK.  He soon replied with some
   326	trouble-shooting techniques.  The first one was a simple test to
   327	determine if the MPU was actually executing instructions.  It consisted
   328	of a single jump command that keep jumping back to itself.  I tried it
   329	and it worked.  This was amazing.  For the first time, I actually had
   330	some assurance that my design had some life in it.  Knowing this, I
   331	decided to scrap the fancy demo program I wrote and go for a simple LED
   332	flasher.  I wrote the program and burned it into an EPROM.  But it
   333	didn't work.  This was very disappointing, but I didn't give up this
   334	time, because the first test had worked.
   335	
   336	     After a few hours of playing around, I found the problem!  Three
   337	address lines were wired backwards to the address decoder chip.  Time
   338	for some background: most 8 bit microprocessors can address 64
   339	kilobytes.  This actually equals 65,536 bytes because there are 16
   340	address lines.  Since the computer does not consist of one big 64K RAM
   341	or EPROM chip but rather several smaller (smaller in terms of the
   342	number of bytes they occupy in the address space) peripherals, this
   343	large address space must be divided.  A common denominator is 8 8K
   344	chunks of memory.  The top three address lines (A15 through A13) are
   345	connected to an address decoder which determines which memory block is
   346	currently active according to these three address lines.  Because we're
   347	working with the binary number system, three binary digits can
   348	represent 8 combinations.  The decoder chip, in this case a 74LS138
   349	decoder chip, activates one of eight enable signals depending on the
   350	content of the three address signals that it receives.  Now, how does
   351	this represent a problem to me if the three lines are wired backwards? 
   352	Well let's take the example that I had.  My LED flasher program needed
   353	to address the 6821 PIA so that it could turn the LEDs on and off. 
   354	This PIA is connected to the second 8K memory block enable line coming
   355	from the 74LS138 decoder.  To select this second memory block, the MPU
   356	had to place the digits 001 on the lines A15-A13.  But if the three
   357	address lines were wired backwards, the decoder would see 100 instead
   358	of 001 and would select the wrong memory chunk.  I discovered this
   359	problem by monitoring the decoder's memory enable lines with a logic
   360	probe.  The logic probe simply tells me whether the signal line is high
   361	(1) or low (0).  For some strange reason, the second memory block was
   362	never being accessed, but the fourth was.  After some thought, I
   363	realized that the binary number representation for 4 was the exact
   364	opposite for that of 2.  I ran upstairs to get my reference book and
   365	sure enough, the decoder was getting the signals in reverse order.
   366	
   367	     I went back upstairs and fixed the problem.  One very big
   368	advantage of wire wrapping is that mistakes can easily be fixed.  All I
   369	did was unwrap the wire from the three signal lines and I rewrapped
   370	them.  It took about 5 minutes to do.  I plugged the EPROM back into
   371	its socket and poof!  My LEDs were flashing!  True, my complicated
   372	computer didn't look like much more than a christmas tree, but I knew
   373	that it was working.  The LEDs were not flashing on their own: the MPU
   374	was telling them to flash.  Now this was a victory!
   375	
   376	     Once I got to this point, things started falling into place. 
   377	Within a week and a half I got everything working perfectly.  Sure,
   378	there were troubles but I got them resolved.  The only modification I
   379	still have to make is an enable circuit for my expansion bus.  I forgot
   380	to design one in and because of that the bus cannot be used.  But
   381	that's okay for now because I am not yet building peripheral cards for
   382	my computer.  I am now working on a terminal program that will enable
   383	me to download programs to the computer's RAM from my communications
   384	program on my IBM clone.  It should be working within a week.
   385	
   386	     Some miscellaneous problems that I encountered and fixed include: 
   387	two signals on the serial port were wired backwards, one wire on my LCD
   388	was broken, the expansion bus mystery mentioned above, some pull-down
   389	resistors that should have originally been pull-up resistors and
   390	connecting the LEDs to the other I/O port instead of the one it was
   391	originally connected to.  It was like unravelling a mystery plot,
   392	almost every day after I got the LEDs flashing, something new fell into
   393	place and started working.  From here on in, its just a matter of
   394	software.  The hardware is all done (whew!) and now I just have to deal
   395	with it from the programmer's point of view.
   396	
   397	     The programming isn't bad, but now and then you get a little bug
   398	that drives you crazy until its found and eliminated.  The entire
   399	project was and continues to be a great learning experience and usually
   400	alot of fun.  Maybe one day, you'll see my name on a super computer?! 
   401	Who knows.  I got the baby purring and from here the sky's the limit. 
   402	My next project is going to be a faster computer with a monitor, full
   403	keyboard and disk drives.  I probably won't get it right on the first
   404	power up, but now that I know my computer works, every other problem
   405	will be a minor inconvenience!
   406	
   407	X-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-X
   408	
   409	 Another file downloaded from:                               NIRVANAnet(tm)
   410	
   411	 & the Temple of the Screaming Electron   Jeff Hunter          510-935-5845
   412	 Rat Head                                 Ratsnatcher          510-524-3649
   413	 Burn This Flag                           Zardoz               408-363-9766
   414	 realitycheck                             Poindexter Fortran   415-567-7043
   415	 Lies Unlimited                           Mick Freen           415-583-4102
   416	
   417	   Specializing in conversations, obscure information, high explosives,
   418	       arcane knowledge, political extremism, diversive sexuality,
   419	       insane speculation, and wild rumours. ALL-TEXT BBS SYSTEMS.
   420	
   421	  Full access for first-time callers.  We don't want to know who you are,
   422	   where you live, or what your phone number is. We are not Big Brother.
   423	
   424	                          "Raw Data for Raw Nerves"
   425	
   426	X-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-X
