     1	
     2	          IMPROVING THE SECURITY OF YOUR      UNIX SYSTEM
     3	          David A. Curry, Systems Programmer
     4	          Information and Telecommunications Sciences and Technology Division
     5	          ITSTD-721-FR-90-21
     6	          Approved:
     7	          Paul K. Hyder, Manager
     8	          Computer Facility
     9	          Boyd C. Fair, General Manager
    10	          Division Operations Section
    11	          Michael S. Frankel, Vice President
    12	          Information and Telecommunications Sciences and Technology Division
    13	                                                   Final Report o+ April 1990
    14	SRI International  333 Ravenswood Avenue o+ Menlo Park, CA 94025-3493 o+
    15	(415) 326-6200 o+ FAX: (415) 326-5512 o+ Telex: 334486
    16	
    17	                                       SECTION 1
    18	                                     INTRODUCTION
    19	          1.1   UNIX SECURITY
    20	                 The UNIX operating system, although now in widespread  use
    21	            in  environments  concerned  about  security,  was  not  really
    22	            designed with security in mind [Ritc75].  This  does  not  mean
    23	            that  UNIX  does  not  provide any security mechanisms; indeed,
    24	            several very good ones are available.  However, most  %%out  of
    25	            the  box''  installation  procedures from companies such as Sun
    26	            Microsystems still install the operating  system  in  much  the
    27	            same  way  as  it was installed 15 years ago: with little or no
    28	            security enabled.
    29	                 The reasons for this state of affairs are largely histori-
    30	            cal.   UNIX  was  originally designed by programmers for use by
    31	            other programmers.  The environment in which it  was  used  was
    32	            one of open cooperation, not one of privacy.  Programmers typi-
    33	            cally collaborated with each other on projects, and hence  pre-
    34	            ferred  to be able to share their files with each other without
    35	            having to climb over security hurdles.  Because the first sites
    36	            outside  of  Bell  Laboratories to install UNIX were university
    37	            research laboratories, where a similar environment existed,  no
    38	            real need for greater security was seen until some time later.
    39	                 In the early 1980s, many universities began to move  their
    40	            UNIX systems out of the research laboratories and into the com-
    41	            puter centers, allowing (or forcing) the user population  as  a
    42	            whole  to  use  this new and wonderful system.  Many businesses
    43	            and government sites began to install  UNIX  systems  as  well,
    44	            particularly  as  desktop workstations became more powerful and
    45	            affordable.  Thus, the UNIX operating system is no longer being
    46	            used only in environments where open collaboration is the goal.
    47	            Universities require their students to use the system for class
    48	            assignments,  yet  they  do not want the students to be able to
    49	            copy from each other.  Businesses use their  UNIX  systems  for
    50	            confidential  tasks  such  as bookkeeping and payroll.  And the
    51	            government uses UNIX systems for various unclassified yet  sen-
    52	            sitive purposes.
    53	                 To complicate matters, new features  have  been  added  to
    54	            UNIX  over  the  years,  making security even more difficult to
    55	            control.  Perhaps  the  most  problematic  features  are  those
    56	          _________________________
    57	          UNIX is a registered trademark of AT&T.  VAX is  a  trademark  of
    58	          Digital  Equipment  Corporation.  Sun-3 and NFS are trademarks of
    59	          Sun Microsystems.  Annex is a trademark of Xylogics, Inc.
    60	                                          1
    61	            relating to networking: remote login, remote command execution,
    62	            network  file  systems,  diskless  workstations, and electronic
    63	            mail.  All of these features have  increased  the  utility  and
    64	            usability  of  UNIX  by  untold  amounts.   However, these same
    65	            features, along with the widespread connection of UNIX  systems
    66	            to  the  Internet  and  other networks, have opened up many new
    67	            areas of vulnerability to unauthorized abuse of the system.
    68	          1.2   THE INTERNET WORM
    69	                 On the evening of November  2,  1988,  a  self-replicating
    70	            program,  called  a _w_o_r_m, was released on the Internet [Seel88,
    71	            Spaf88, Eich89].  Overnight, this  program  had  copied  itself
    72	            from  machine  to  machine, causing the machines it infected to
    73	            labor under huge loads, and denying service  to  the  users  of
    74	            those  machines.   Although the program only infected two types
    75	            of computers,* it spread quickly, as did  the  concern,  confu-
    76	            sion,  and  sometimes  panic  of  system  administrators  whose
    77	            machines were affected.  While many system administrators  were
    78	            aware that something like this could theoretically happen - the
    79	            security holes exploited by the worm  were  well  known  -  the
    80	            scope  of the worm's break-ins came as a great surprise to most
    81	            people.
    82	                 The worm itself did  not  destroy  any  files,  steal  any
    83	            information  (other  than account passwords), intercept private
    84	            mail, or plant other destructive software  [Seel88].   However,
    85	            it did manage to severely disrupt the operation of the network.
    86	            Several sites, including parts of  MIT,  NASA's  Ames  Research
    87	            Center  and  Goddard  Space  Flight  Center, the Jet Propulsion
    88	            Laboratory, and the U. S. Army Ballistic  Research  Laboratory,
    89	            disconnected themselves from the Internet to avoid recontamina-
    90	            tion.  In addition, the Defense Communications  Agency  ordered
    91	            the  connections  between the MILNET and ARPANET shut down, and
    92	            kept them down for nearly 24 hours  [Eich89,  Elme88].   Ironi-
    93	            cally,  this was perhaps the worst thing to do, since the first
    94	            fixes to combat the  worm  were  distributed  via  the  network
    95	            [Eich89].
    96	                 This incident was perhaps the most widely  described  com-
    97	            puter  security  problem  ever.   The  worm was covered in many
    98	            newspapers and magazines around the country including  the  _N_e_w
    99	            _Y_o_r_k  _T_i_m_e_s,  _W_a_l_l  _S_t_r_e_e_t  _J_o_u_r_n_a_l,  _T_i_m_e  and  most computer-
   100	            oriented technical publications, as well as on all three  major
   101	          _________________________
   102	            * Sun-3 systems from Sun Microsystems and VAX systems from  Di-
   103	          gital Equipment Corp., both running variants of 4._x BSD UNIX from
   104	          the University of California at Berkeley.
   105	                                          2
   106	            television networks, the Cable News Network, and National  Pub-
   107	            lic  Radio.   In  January  1990, a United States District Court
   108	            jury found Robert Tappan Morris, the author of the worm, guilty
   109	            of  charges  brought  against him under a 1986 federal computer
   110	            fraud and abuse law.  Morris faces up to five years  in  prison
   111	            and  a $250,000 fine [Schu90].  Sentencing is scheduled for May
   112	            4, 1990.
   113	          1.3   SPIES AND ESPIONAGE
   114	                 In August  1986,  the  Lawrence  Berkeley  Laboratory,  an
   115	            unclassified  research laboratory at the University of Califor-
   116	            nia at Berkeley,  was  attacked  by  an  unauthorized  computer
   117	            intruder  [Stol88, Stol89].  Instead of immediately closing the
   118	            holes the intruder was using, the system  administrator,  Clif-
   119	            ford  Stoll,  elected  to  watch  the intruder and document the
   120	            weaknesses he  exploited.   Over  the  next  10  months,  Stoll
   121	            watched  the  intruder  attack  over  400  computers around the
   122	            world, and successfully enter about 30.  The  computers  broken
   123	            into  were located at universities, military bases, and defense
   124	            contractors [Stol88].
   125	                 Unlike many intruders seen on the Internet, who  typically
   126	            enter  systems  and  browse  around  to see what they can, this
   127	            intruder was looking for something specific.   Files  and  data
   128	            dealing  with the Strategic Defense Initiative, the space shut-
   129	            tle, and other military topics all  seemed  to  be  of  special
   130	            interest.  Although it is unlikely that the intruder would have
   131	            found any truly classified  information  (the  Internet  is  an
   132	            unclassified  network),  it  was  highly probable that he could
   133	            find a wealth of sensitive material [Stol88].
   134	                 After a year of tracking the intruder (eventually  involv-
   135	            ing  the FBI, CIA, National Security Agency, Air Force Intelli-
   136	            gence, and authorities in West Germany), five men in  Hannover,
   137	            West  Germany  were  arrested.   In  March  1989, the five were
   138	            charged with espionage: they had been selling the material they
   139	            found  during  their exploits to the KGB.  One of the men, Karl
   140	            Koch (%%Hagbard''), was later found burned to death in an  iso-
   141	            lated  forest  outside  Hannover.   No  suicide  note was found
   142	            [Stol89].  In February 1990, three  of  the  intruders  (Markus
   143	            Hess,  Dirk  Bresinsky,  and  Peter  Carl)  were  convicted  of
   144	            espionage in a German court  and  sentenced  to  prison  terms,
   145	            fines, and the loss of their rights to participate in elections
   146	            [Risk90].  The last of the intruders, Hans Hu"bner  (%%Pengo''),
   147	            still faces trial in Berlin.
   148	                                          3
   149	          1.4   OTHER BREAK-INS
   150	                 Numerous other computer security problems have occurred in
   151	            recent  years,  with  varying levels of publicity.  Some of the
   152	            more widely known incidents include break-ins  on  NASA's  SPAN
   153	            network [McLe87], the IBM %%Christmas Virus'' [Risk87], a virus
   154	            at Mitre Corp. that caused the MILNET to  be  temporarily  iso-
   155	            lated from other networks [Risk88], a worm that penetrated DEC-
   156	            NET networks [Risk89a], break-ins on  U.  S.  banking  networks
   157	            [Risk89b], and a multitude of viruses, worms, and trojan horses
   158	            affecting personal computer users.
   159	          1.5   SECURITY IS IMPORTANT
   160	                 As the previous stories demonstrate, computer security  is
   161	            an  important  topic.   This  document  describes  the security
   162	            features provided by the UNIX operating system,  and  how  they
   163	            should  be  used.  The discussion centers around version 4._x of
   164	            SunOS, the version of UNIX sold by Sun Microsystems.   Most  of
   165	            the  information  presented  applies equally well to other UNIX
   166	            systems.  Although there is no way  to  make  a  computer  com-
   167	            pletely  secure against unauthorized use (other than to lock it
   168	            in a room and turn it off), by following  the  instructions  in
   169	            this  document  you  can  make  your  system impregnable to the
   170	            %%casual'' system cracker,* and make it more difficult for  the
   171	            sophisticated cracker to penetrate.
   172	          _________________________
   173	            * The term %%hacker,'' as applied to computer users, originally
   174	          had  an honorable connotation: %%a person who enjoys learning the
   175	          details of programming systems and how to stretch their capabili-
   176	          ties - as opposed to most users of computers, who prefer to learn
   177	          only the minimum amount necessary'' [Stee88].  Unfortunately, the
   178	          media  has  distorted this definition and given it a dishonorable
   179	          meaning.  In deference to the true hackers, we will use the  term
   180	          %%cracker'' throughout this document.
   181	                                          4
   182	                                       SECTION 2
   183	                                  IMPROVING SECURITY
   184	                 UNIX system security can be divided into three main  areas
   185	            of  concern.   Two of these areas, account security and network
   186	            security, are primarily  concerned  with  keeping  unauthorized
   187	            users  from gaining access to the system.  The third area, file
   188	            system security,  is  concerned  with  preventing  unauthorized
   189	            access,  either  by  legitimate  users or crackers, to the data
   190	            stored in the system.  This section describes the UNIX security
   191	            tools  provided to make each of these areas as secure as possi-
   192	            ble.
   193	          2.1   ACCOUNT SECURITY
   194	                 One of the easiest ways for a cracker to get into a system
   195	            is by breaking into someone's account.  This is usually easy to
   196	            do, since many systems have old accounts whose users have  left
   197	            the organization, accounts with easy-to-guess passwords, and so
   198	            on.  This section describes methods that can be used  to  avoid
   199	            these problems.
   200	          2.1.1   Passwords
   201	                 The password is the most vital part of UNIX account  secu-
   202	            rity.  If a cracker can discover a user's password, he can then
   203	            log in to the system and operate with all the  capabilities  of
   204	            that user.  If the password obtained is that of the super-user,
   205	            the problem is more serious: the cracker  will  have  read  and
   206	            write  access  to  every  file on the system.  For this reason,
   207	            choosing secure passwords is extremely important.
   208	                 The UNIX _p_a_s_s_w_d program [Sun88a, 379] places very few res-
   209	            trictions  on  what  may  be used as a password.  Generally, it
   210	            requires that passwords contain five or more lowercase letters,
   211	            or  four  characters  if a nonalphabetic or uppercase letter is
   212	            included.  However, if the  user  %%insists''  that  a  shorter
   213	            password be used (by entering it three times), the program will
   214	            allow it.  No checks  for  obviously  insecure  passwords  (see
   215	            below)  are  performed.   Thus, it is incumbent upon the system
   216	            administrator to ensure that the passwords in use on the system
   217	            are secure.
   218	                                          5
   219	                 In [Morr78], the authors describe experiments conducted to
   220	            determine typical users' habits in the choice of passwords.  In
   221	            a collection of 3,289 passwords, 16% of  them  contained  three
   222	            characters or less, and an astonishing 86% were what could gen-
   223	            erally be described as  insecure.   Additional  experiments  in
   224	            [Gram84]  show  that  by  trying  three  simple guesses on each
   225	            account - the login name, the login name in  reverse,  and  the
   226	            two  concatenated  together  -  a  cracker can expect to obtain
   227	            access to between 8 and 30 percent of the accounts on a typical
   228	            system.   A second experiment showed that by trying the 20 most
   229	            common female first names, followed by a single digit (a  total
   230	            of  200  passwords), at least one password was valid on each of
   231	            several dozen machines surveyed.   Further  experimentation  by
   232	            the  author  has  found  that by trying variations on the login
   233	            name, user's first and last names, and a list  of  nearly  1800
   234	            common  first  names, up to 50  percent of the passwords on any
   235	            given system can be cracked in a matter of two or three days.
   236	          2.1.1.1   Selecting Passwords
   237	                 The object when choosing a password is to make it as  dif-
   238	            ficult as possible for a cracker to make educated guesses about
   239	            what you've chosen.  This  leaves  him  no  alternative  but  a
   240	            brute-force   search,  trying  every  possible  combination  of
   241	            letters, numbers, and punctuation.  A search of this sort, even
   242	            conducted on a machine that could try one million passwords per
   243	            second (most  machines  can  try  less  than  one  hundred  per
   244	            second),  would require, on the average, over one hundred years
   245	            to complete.  With this as our goal, and by using the  informa-
   246	            tion  in  the  preceding text, a set of guidelines for password
   247	            selection can be constructed:
   248	                 o+    _D_o_n'_t  use  your  login  name  in  any  form  (as-is,
   249	                      reversed, capitalized, doubled, etc.).
   250	                 o+    _D_o_n'_t use your first or last name in any form.
   251	                 o+    _D_o_n'_t use your spouse's or child's name.
   252	                 o+    _D_o_n'_t use other  information  easily  obtained  about
   253	                      you.   This includes license plate numbers, telephone
   254	                      numbers, social security numbers, the brand  of  your
   255	                      automobile, the name of the street you live on, etc.
   256	                 o+    _D_o_n'_t use a password of all digits, or all  the  same
   257	                      letter.  This significantly decreases the search time
   258	                      for a cracker.
   259	                 o+    _D_o_n'_t use a word contained  in  (English  or  foreign
   260	                                          6
   261	                      language)  dictionaries,  spelling  lists,  or  other
   262	                      lists of words.
   263	                 o+    _D_o_n'_t use a password shorter than six characters.
   264	                 o+    _D_o use a password with mixed-case alphabetics.
   265	                 o+    _D_o use  a  password  with  nonalphabetic  characters,
   266	                      e.g., digits or punctuation.
   267	                 o+    _D_o use a password that is easy to  remember,  so  you
   268	                      don't have to write it down.
   269	                 o+    _D_o use a password that you can type quickly,  without
   270	                      having to look at the keyboard.  This makes it harder
   271	                      for someone to steal your password by  watching  over
   272	                      your shoulder.
   273	                 Although this list may seem to restrict  passwords  to  an
   274	            extreme,  there  are several methods for choosing secure, easy-
   275	            to-remember passwords that obey the above rules.  Some of these
   276	            include the following:
   277	                 o+    Choose a line or two from a song or poem, and use the
   278	                      first  letter of each word.  For example, %%In Xanadu
   279	                      did Kubla  Kahn  a  stately  pleasure  dome  decree''
   280	                      becomes %%IXdKKaspdd.''
   281	                 o+    Alternate  between  one  consonant  and  one  or  two
   282	                      vowels,  up  to eight characters.  This provides non-
   283	                      sense words that are usually pronounceable, and  thus
   284	                      easily  remembered.   Examples  include  %%routboo,''
   285	                      %%quadpop,'' and so on.
   286	                 o+    Choose two short words and concatenate them  together
   287	                      with  a punctation character between them.  For exam-
   288	                      ple: %%dog;rain,'' %%book+mug,'' %%kid?goat.''
   289	                 The importance of obeying these password  selection  rules
   290	            cannot  be  overemphasized.   The Internet worm, as part of its
   291	            strategy for breaking into new  machines,  attempted  to  crack
   292	            user  passwords.   First, the worm tried simple choices such as
   293	            the login name, user's first and last names, and so on.   Next,
   294	            the  worm  tried each word present in an internal dictionary of
   295	            432 words (presumably  Morris  considered  these  words  to  be
   296	            %%good''  words  to  try).   If all else failed, the worm tried
   297	            going through the system  dictionary,  /_u_s_r/_d_i_c_t/_w_o_r_d_s,  trying
   298	            each  word  [Spaf88].   The password selection rules above suc-
   299	            cessfully guard against all three of these strategies.
   300	                                          7
   301	          2.1.1.2   Password Policies
   302	                 Although asking users to select secure passwords will help
   303	            improve  security,  by  itself  it  is  not enough.  It is also
   304	            important to form a set of password  policies  that  all  users
   305	            must obey, in order to keep the passwords secure.
   306	                 First and foremost, it is important to  impress  on  users
   307	            the  need  to  keep their passwords in their minds only.  Pass-
   308	            words should never be written down on desk blotters, calendars,
   309	            and  the like.  Further, storing passwords in files on the com-
   310	            puter must be prohibited.  In either case, by writing the pass-
   311	            word  down  on  a  piece  of paper or storing it in a file, the
   312	            security of the user's account  is  totally  dependent  on  the
   313	            security  of  the paper or file, which is usually less than the
   314	            security offered by the password encryption software.
   315	                 A second important policy is that users  must  never  give
   316	            out  their  passwords to others.  Many times, a user feels that
   317	            it is easier to give someone else his password in order to copy
   318	            a  file,  rather  than to set up the permissions on the file so
   319	            that it can be copied.  Unfortunately, by giving out the  pass-
   320	            word  to  another person, the user is placing his trust in this
   321	            other person not to distribute the password further,  write  it
   322	            down, and so on.
   323	                 Finally, it is important to establish a policy that  users
   324	            must  change  their  passwords  from  time to time, say twice a
   325	            year.  This is difficult to enforce  on  UNIX,  since  in  most
   326	            implementations, a password-expiration scheme is not available.
   327	            However, there are ways to implement  this  policy,  either  by
   328	            using  third-party  software  or by sending a memo to the users
   329	            requesting that they change their passwords.
   330	                 This set of policies should be printed and distributed  to
   331	            all  current  users  of the system.  It should also be given to
   332	            all new users when they receive  their  accounts.   The  policy
   333	            usually  carries  more  weight  if you can get it signed by the
   334	            most %%impressive'' person  in  your  organization  (e.g.,  the
   335	            president of the company).
   336	          2.1.1.3   Checking Password Security
   337	                 The procedures and policies described in the previous sec-
   338	            tions,  when  properly  implemented,  will  greatly  reduce the
   339	            chances of a cracker breaking into your  system  via  a  stolen
   340	            account.   However,  as  with all security measures, you as the
   341	                                          8
   342	            system administrator must periodically check to  be  sure  that
   343	            the  policies  and procedures are being adhered to.  One of the
   344	            unfortunate truisms of password security  is  that,  %%left  to
   345	            their own ways, some people will still use cute doggie names as
   346	            passwords'' [Gram84].
   347	                 The best way to check the security  of  the  passwords  on
   348	            your  system  is to use a password-cracking program much like a
   349	            real cracker would use.  If you succeed in cracking  any  pass-
   350	            words,  those  passwords  should be changed immediately.  There
   351	            are a few freely available password cracking  programs  distri-
   352	            buted  via various source archive sites; these are described in
   353	            more detail in Section 4.  A fairly extensive cracking  program
   354	            is  also  available  from  the  author.  Alternatively, you can
   355	            write your own cracking program, and  tailor  it  to  your  own
   356	            site.   For  a  list  of  things  to check for, see the list of
   357	            guidelines above.
   358	          2.1.2   Expiration Dates
   359	                 Many sites, particularly those  with  a  large  number  of
   360	            users,  typically  have several old accounts lying around whose
   361	            owners have since left the organization.  These accounts are  a
   362	            major  security  hole:  not only can they be broken into if the
   363	            password is insecure, but because nobody is using  the  account
   364	            anymore, it is unlikely that a break-in will be noticed.
   365	                 The simplest way to prevent unused accounts  from  accumu-
   366	            lating  is to place an expiration date on every account.  These
   367	            expiration dates should be near enough in the future  that  old
   368	            accounts  will  be  deleted  in a timely manner, yet far enough
   369	            apart that the users will not become annoyed.  A good figure is
   370	            usually one year from the date the account was installed.  This
   371	            tends to spread the expirations out over the year, rather  than
   372	            clustering  them  all  at the beginning or end.  The expiration
   373	            date can easily be stored in the password  file  (in  the  full
   374	            name field).  A simple shell script can be used to periodically
   375	            check that all accounts have expiration dates, and that none of
   376	            the dates has passed.
   377	                 On the first day of each month, any user whose account has
   378	            expired  should be contacted to be sure he is still employed by
   379	            the organization, and that he is actively  using  the  account.
   380	            Any  user  who  cannot  be  contacted,  or who has not used his
   381	            account recently, should be deleted from the system.  If a user
   382	            is  unavailable  for some reason (e.g., on vacation) and cannot
   383	            be contacted, his account should be disabled by  replacing  the
   384	            encrypted  password in the password file entry with an asterisk
   385	            (*).  This makes it impossible to log in to  the  account,  yet
   386	                                          9
   387	            leaves  the  account  available  to be re-enabled on the user's
   388	            return.
   389	          2.1.3   Guest Accounts
   390	                 Guest accounts present still another  security  hole.   By
   391	            their  nature,  these  accounts are rarely used, and are always
   392	            used by people who should only have access to the  machine  for
   393	            the  short period of time they are guests.  The most secure way
   394	            to handle guest accounts is to install  them  on  an  as-needed
   395	            basis,  and delete them as soon as the people using them leave.
   396	            Guest accounts should never be given simple passwords  such  as
   397	            %%guest'' or %%visitor,'' and should never be allowed to remain
   398	            in the password file when they are not being used.
   399	          2.1.4   Accounts Without Passwords
   400	                 Some sites have installed  accounts  with  names  such  as
   401	            %%who,''  %%date,'' %%lpq,'' and so on that execute simple com-
   402	            mands.  These accounts are intended to allow users  to  execute
   403	            these  commands without having to log in to the machine.  Typi-
   404	            cally these accounts have no password associated with them, and
   405	            can  thus  be used by anyone.  Many of the accounts are given a
   406	            user id of zero, so that they execute with  super-user  permis-
   407	            sions.
   408	                 The problem with these accounts is that they  open  poten-
   409	            tial  security  holes.  By not having passwords on them, and by
   410	            having  super-user  permissions,  these  accounts   practically
   411	            invite  crackers  to  try  to  penetrate them.  Usually, if the
   412	            cracker can  gain  access  to  the  system,  penetrating  these
   413	            accounts  is  simple, because each account executes a different
   414	            command.  If the cracker can replace any one of these  commands
   415	            with one of his own, he can then use the unprotected account to
   416	            execute his program with super-user permissions.
   417	                 Simply put,  accounts  without  passwords  should  not  be
   418	            allowed on any UNIX system.
   419	          2.1.5   Group Accounts and Groups
   420	                 Group accounts have become popular at many sites, but  are
   421	            actually  a  break-in  waiting to happen.  A group account is a
   422	                                         10
   423	            single account shared by several people, e.g., by all the  col-
   424	            laborators  on a project.  As mentioned in the section on pass-
   425	            word security, users should not share  passwords  -  the  group
   426	            account  concept directly violates this policy.  The proper way
   427	            to allow users to share information, rather than giving them  a
   428	            group  account  to  use,  is to place these users into a group.
   429	            This is done by editing the  group  file,  /_e_t_c/_g_r_o_u_p  [Sun88a,
   430	            1390;  Sun88b, 66], and creating a new group with the users who
   431	            wish to collaborate listed as members.
   432	                 A line in the group file looks like
   433	                    groupname:password:groupid:user1,user2,user3,...
   434	            The _g_r_o_u_p_n_a_m_e is the name assigned to the group,  much  like  a
   435	            login  name.   It  may  be the same as someone's login name, or
   436	            different.  The maximum length of a group name is eight charac-
   437	            ters.   The password field is unused in BSD-derived versions of
   438	            UNIX, and should contain an asterisk (*).   The  _g_r_o_u_p_i_d  is  a
   439	            number  from 0 to 65535 inclusive.  Generally, numbers below 10
   440	            are reserved for special  purposes,  but  you  may  choose  any
   441	            unused number.  The last field is a comma-separated (no spaces)
   442	            list of the login names of the users in the group.  If no login
   443	            names  are  listed, then the group has no members.  To create a
   444	            group called %%hackers'' with Huey, Duey, and Louie as members,
   445	            you would add a line such as this to the group file:
   446	                    hackers:*:100:huey,duey,louie
   447	                 After the group has been created,  the  files  and  direc-
   448	            tories  the  members  wish to share can then be changed so that
   449	            they are owned by this group, and the group permission bits  on
   450	            the  files  and  directories can be set to allow sharing.  Each
   451	            user retains his own account, with his own password, thus  pro-
   452	            tecting the security of the system.
   453	                 For example, to change Huey's %%programs'' directory to be
   454	            owned  by  the new group and properly set up the permissions so
   455	            that all members of the group may  access  it,  the  _c_h_g_r_p  and
   456	            _c_h_m_o_d commands would be used as follows [Sun88a, 63-66]:
   457	                    # chgrp hackers %huey/programs
   458	                    # chmod -R g+rw %huey/programs
   459	          2.1.6   Yellow Pages
   460	                 The Sun Yellow Pages system [Sun88b, 349-374] allows  many
   461	                                         11
   462	            hosts to share password files, group files, and other files via
   463	            the network, while the files are stored on only a single  host.
   464	            Unfortunately, Yellow Pages also contains a few potential secu-
   465	            rity holes.
   466	                 The principal way Yellow Pages works is to have a  special
   467	            line  in  the  password or group file that begins with a %%+''.
   468	            In the password file, this line looks like
   469	                    +::0:0:::
   470	            and in the group file, it looks like
   471	                    +:
   472	            These lines should only be present in the files stored on  Yel-
   473	            low  Pages  client machines.  They should not be present in the
   474	            files on the Yellow Pages master machine(s).   When  a  program
   475	            reads  the  password  or group file and encounters one of these
   476	            lines, it goes through the network and requests the information
   477	            it wants from the Yellow Pages server instead of trying to find
   478	            it in the local file.  In this way, the data does not  have  to
   479	            be  maintained on every host.  Since the master machine already
   480	            has all the information, there is no need for this special line
   481	            to be present there.
   482	                 Generally speaking, the Yellow  Pages  service  itself  is
   483	            reasonably  secure.   There are a few openings that a sophisti-
   484	            cated (and dedicated) cracker could exploit, but Sun is rapidly
   485	            closing  these.   The  biggest problem with Yellow Pages is the
   486	            %%+'' line in the password file.  If the %%+'' is deleted  from
   487	            the  front of the line, then this line loses its special Yellow
   488	            Pages meaning.  It instead becomes a regular password file line
   489	            for an account with a null login name, no password, and user id
   490	            zero (super-user).  Thus, if a  careless  system  administrator
   491	            accidentally  deletes the %%+''.  the whole system is wide open
   492	            to any attack.*
   493	                 Yellow Pages is too useful a service to suggest turning it
   494	            off,  although  turning  it  off  would  make  your system more
   495	            secure.  Instead, it is recommended that you read carefully the
   496	            information  in  the  Sun manuals in order to be fully aware of
   497	            Yellow Pages' abilities and its limitations.
   498	          2.2   NETWORK SECURITY
   499	          _________________________
   500	            * Actually, a line like this without a %%+''  is  dangerous  in
   501	          any password file, regardless of whether Yellow Pages is in use.
   502	                                         12
   503	                 As trends  toward  internetworking  continue,  most  sites
   504	            will, if they haven't already, connect themselves to one of the
   505	            numerous regional networks springing  up  around  the  country.
   506	            Most  of these regional networks are also interconnected, form-
   507	            ing the Internet [Hind83, Quar86].  This means that  the  users
   508	            of  your  machine  can  access other hosts and communicate with
   509	            other users around the world.   Unfortunately,  it  also  means
   510	            that  other  hosts  and  users from around the world can access
   511	            your machine, and attempt to break into it.
   512	                 Before internetworking became  commonplace,  protecting  a
   513	            system  from  unauthorized  access  simply  meant  locking  the
   514	            machine in a room by itself.  Now that machines  are  connected
   515	            by networks, however, security is much more complex.  This sec-
   516	            tion describes the tools and methods  available  to  make  your
   517	            UNIX networks as secure as possible.
   518	          2.2.1   Trusted Hosts
   519	                 One of the most convenient features of the  Berkeley  (and
   520	            Sun)  UNIX  networking  software  is the concept of %%trusted''
   521	            hosts.  The software allows the specification  of  other  hosts
   522	            (and  possibly users) who are to be considered trusted - remote
   523	            logins and remote command executions from these hosts  will  be
   524	            permitted without requiring the user to enter a password.  This
   525	            is very convenient, because users do not  have  to  type  their
   526	            password  every  time they use the network.  Unfortunately, for
   527	            the same  reason,  the  concept  of  a  trusted  host  is  also
   528	            extremely insecure.
   529	                 The Internet worm made extensive use of the  trusted  host
   530	            concept to spread itself throughout the network [Seel88].  Many
   531	            sites that had already disallowed trusted hosts did fairly well
   532	            against  the  worm  compared  with  those  sites that did allow
   533	            trusted hosts.  Even though it is a security  hole,  there  are
   534	            some  valid  uses  for  the trusted host concept.  This section
   535	            describes how to properly implement the trusted hosts  facility
   536	            while preserving as much security as possible.
   537	          2.2.1.1   The hosts.equiv File
   538	                 The file /_e_t_c/_h_o_s_t_s._e_q_u_i_v [Sun88a, 1397] can  be  used  by
   539	            the  system  administrator  to  indicate  trusted  hosts.  Each
   540	            trusted host is listed in the file, one host per  line.   If  a
   541	            user  attempts  to  log  in (using _r_l_o_g_i_n) or execute a command
   542	            (using  _r_s_h)  remotely  from  one  of  the  systems  listed  in
   543	                                         13
   544	            _h_o_s_t_s._e_q_u_i_v,  and  that user has an account on the local system
   545	            with the same login name, access is permitted without requiring
   546	            a password.
   547	                 Provided adequate care is taken to allow only local  hosts
   548	            in  the _h_o_s_t_s._e_q_u_i_v file, a reasonable compromise between secu-
   549	            rity and convenience can be achieved.  Nonlocal hosts  (includ-
   550	            ing  hosts  at  remote  sites  of the same organization) should
   551	            never be trusted.  Also, if there  are  any  machines  at  your
   552	            organization that are installed in %%public'' areas (e.g., ter-
   553	            minal rooms) as opposed to  private  offices,  you  should  not
   554	            trust these hosts.
   555	                 On Sun systems, _h_o_s_t_s._e_q_u_i_v is controlled with the  Yellow
   556	            Pages  software.   As distributed, the default _h_o_s_t_s._e_q_u_i_v file
   557	            distributed by Sun contains a single line:
   558	                    +
   559	            This indicates that _e_v_e_r_y _k_n_o_w_n _h_o_s_t (i.e., the  complete  con-
   560	            tents  of  the  host file) should be considered a trusted host.
   561	            This is totally incorrect and  a  major  security  hole,  since
   562	            hosts  outside  the local organization should never be trusted.
   563	            A  correctly  configured  _h_o_s_t_s._e_q_u_i_v  should  never  list  any
   564	            %%wildcard''  hosts  (such  as  the  %%+''); only specific host
   565	            names should be used.  When installing a new  system  from  Sun
   566	            distribution  tapes,  you  should be sure to either replace the
   567	            Sun default _h_o_s_t_s._e_q_u_i_v with a  correctly  configured  one,  or
   568	            delete the file altogether.
   569	          2.2.1.2   The .rhosts File
   570	                 The ._r_h_o_s_t_s file [Sun88a, 1397] is similar in concept  and
   571	            format  to the _h_o_s_t_s._e_q_u_i_v file, but allows trusted access only
   572	            to specific host-user combinations, rather  than  to  hosts  in
   573	            general.* Each user may create  a  ._r_h_o_s_t_s  file  in  his  home
   574	            directory,  and allow access to her account without a password.
   575	            Most people use this mechanism to allow trusted access  between
   576	            accounts  they have on systems owned by different organizations
   577	            who do not trust each other's  hosts  in  _h_o_s_t_s._e_q_u_i_v.   Unfor-
   578	            tunately,  this  file  presents a major security problem: While
   579	            _h_o_s_t_s._e_q_u_i_v is under the system administrator's control and can
   580	            be  managed  effectively,  any  user  may create a ._r_h_o_s_t_s file
   581	            granting access to whomever  he  chooses,  without  the  system
   582	            administrator's knowledge.
   583	          _________________________
   584	            * Actually, _h_o_s_t_s._e_q_u_i_v may be used to specify host-user combi-
   585	          nations as well, but this is rarely done.
   586	                                         14
   587	                 The only secure way to manage ._r_h_o_s_t_s  files  is  to  com-
   588	            pletely  disallow them on the system.  The system administrator
   589	            should check the system often for  violations  of  this  policy
   590	            (see  Section 3.3.1.4).  One possible exception to this rule is
   591	            the %%root'' account; a ._r_h_o_s_t_s file may be necessary to  allow
   592	            network backups and the like to be completed.
   593	          2.2.2   Secure Terminals
   594	                 Under newer versions of UNIX, the concept of a  %%secure''
   595	            terminal  has  been  introduced.   Simply  put,  the super-user
   596	            (%%root'') may not log in on a nonsecure terminal, even with  a
   597	            password.   (Authorized  users  may still use the _s_u command to
   598	            become super-user,  however.)  The  file  /_e_t_c/_t_t_y_t_a_b  [Sun88a,
   599	            1478]  is  used  to  control  which  terminals  are  considered
   600	            secure.|- A short excerpt from this file is shown below.
   601	                    console  "/usr/etc/getty std.9600"  sun      off secure
   602	                    ttya     "/usr/etc/getty std.9600"  unknown  off secure
   603	                    ttyb     "/usr/etc/getty std.9600"  unknown  off secure
   604	                    ttyp0    none                       network  off secure
   605	                    ttyp1    none                       network  off secure
   606	                    ttyp2    none                       network  off secure
   607	            The keyword %%secure'' at the end of each line  indicates  that
   608	            the terminal is considered secure.  To remove this designation,
   609	            simply edit the file and delete the %%secure'' keyword.   After
   610	            saving the file, type the command (as super-user):
   611	                    # kill -HUP 1
   612	            This tells the _i_n_i_t process to reread the _t_t_y_t_a_b file.
   613	                 The Sun default configuration for _t_t_y_t_a_b  is  to  consider
   614	            all  terminals  secure,  including %%pseudo'' terminals used by
   615	            the remote login software.  This means that %%root'' may log in
   616	            remotely  from  any  host on the network.  A more secure confi-
   617	            guration would consider as secure only directly connected  ter-
   618	            minals,  or  perhaps only the console device.  This is how file
   619	            servers and other machines with disks should be set up.
   620	                 The most secure configuration is to remove the  %%secure''
   621	            designation  from  all terminals, including the console device.
   622	            This requires that those users with super-user authority  first
   623	            log in as themselves, and then become the super-user via the _s_u
   624	          _________________________
   625	            |- Under non-Sun versions of Berkeley UNIX, this file is  called
   626	          /_e_t_c/_t_t_y_s.
   627	                                         15
   628	            command.  It also requires the %%root'' password to be  entered
   629	            when  rebooting  in single-user mode, in order to prevent users
   630	            from rebooting their desktop workstations and obtaining  super-
   631	            user  access.   This is how all diskless client machines should
   632	            be set up.
   633	          2.2.3   The Network File System
   634	                 The Network File System  (NFS)  [Sun88d]  is  designed  to
   635	            allow  several  hosts  to share files over the network.  One of
   636	            the most common uses of NFS is to allow  diskless  workstations
   637	            to be installed in offices, while keeping all disk storage in a
   638	            central location.  As distributed by Sun, NFS has  no  security
   639	            features enabled.  This means that any host on the Internet may
   640	            access your files via NFS, regardless of whether you trust them
   641	            or not.
   642	                 Fortunately, there are several easy ways to make NFS  more
   643	            secure.   The  more commonly used methods are described in this
   644	            section, and these can be used to make your files quite  secure
   645	            from  unauthorized  access  via NFS.  Secure NFS, introduced in
   646	            SunOS Release 4.0,  takes  security  one  step  further,  using
   647	            public-key  encryption  techniques to ensure authorized access.
   648	            Discussion of secure NFS is deferred until Section 4.
   649	          2.2.3.1   The exports File
   650	                 The file /_e_t_c/_e_x_p_o_r_t_s [Sun88a, 1377] is perhaps one of the
   651	            most  important  parts  of  NFS configuration.  This file lists
   652	            which file systems are exported (made available  for  mounting)
   653	            to  other  systems.  A typical _e_x_p_o_r_t_s file as installed by the
   654	            Sun installation procedure looks something like this:
   655	                    /usr
   656	                    /home
   657	                    /var/spool/mail
   658	                    #
   659	                    /export/root/client1    -access=client1,root=client1
   660	                    /export/swap/client1    -access=client1,root=client1
   661	                    #
   662	                    /export/root/client2    -access=client2,root=client2
   663	                    /export/swap/client2    -access=client2,root=client2
   664	            The _r_o_o_t= keyword specifies the list of hosts that are  allowed
   665	            to  have  super-user  access  to  the  files  in the named file
   666	            system.   This  keyword  is  discussed  in  detail  in  Section
   667	                                         16
   668	            2.2.3.3.   The  _a_c_c_e_s_s=  keyword  specifies  the  list of hosts
   669	            (separated by colons) that are allowed to mount the named  file
   670	            system.   If no _a_c_c_e_s_s= keyword is specified for a file system,
   671	            any host anywhere on the network may mount that file system via
   672	            NFS.
   673	                 Obviously, this presents a major security  problem,  since
   674	            anyone  who can mount your file systems via NFS can then peruse
   675	            them at her leisure.  Thus, it is important that all file  sys-
   676	            tems  listed in _e_x_p_o_r_t_s have an _a_c_c_e_s_s= keyword associated with
   677	            them.  If you have only a few hosts which  must  mount  a  file
   678	            system, you can list them individually in the file:
   679	                    /usr    -access=host1:host2:host3:host4:host5
   680	            However, because the maximum number of hosts that can be listed
   681	            this  way is ten, the _a_c_c_e_s_s= keyword will also allow netgroups
   682	            to be specified.  Netgroups are described in the next section.
   683	                 After making any changes to the _e_x_p_o_r_t_s file,  you  should
   684	            run the command
   685	                    # exportfs -a
   686	            in order to make the changes take effect.
   687	          2.2.3.2   The netgroup File
   688	                 The file /_e_t_c/_n_e_t_g_r_o_u_p [Sun88a, 1407] is  used  to  define
   689	            netgroups.   This  file is controlled by Yellow Pages, and must
   690	            be rebuilt in the Yellow Pages maps whenever  it  is  modified.
   691	            Consider the following sample _n_e_t_g_r_o_u_p file:
   692	                    A_Group      (servera,,) (clienta1,,) (clienta2,,)
   693	                    B_Group      (serverb,,) (clientb1,,) (clientb2,,)
   694	                    AdminStaff   (clienta1,mary,) (clientb3,joan,)
   695	                    AllSuns      A_Group B_Group
   696	            This file defines  four  netgroups,  called  _A__G_r_o_u_p,  _B__G_r_o_u_p,
   697	            _A_d_m_i_n_S_t_a_f_f,  and  _A_l_l_S_u_n_s.   The _A_l_l_S_u_n_s netgroup is actually a
   698	            %%super group'' containing all the members of the  _A__G_r_o_u_p  and
   699	            _B__G_r_o_u_p netgroups.
   700	                 Each member of a netgroup is defined as a  triple:  (host,
   701	            user,  domain).  Typically, the _d_o_m_a_i_n field is never used, and
   702	            is simply left blank.  If either the _h_o_s_t or _u_s_e_r field is left
   703	                                         17
   704	            blank,  then any host or user is considered to match.  Thus the
   705	            triple (host,,) matches any user on the named host,  while  the
   706	            triple (,user,) matches the named user on any host.
   707	                 Netgroups are useful when restricting access to  NFS  file
   708	            systems via the _e_x_p_o_r_t_s file.  For example, consider this modi-
   709	            fied version of the file from the previous section:
   710	                    /usr                    -access=A_Group
   711	                    /home                   -access=A_Group:B_Group
   712	                    /var/spool/mail         -access=AllSuns
   713	                    #
   714	                    /export/root/client1    -access=client1,root=client1
   715	                    /export/swap/client1    -access=client1,root=client1
   716	                    #
   717	                    /export/root/client2    -access=client2,root=client2
   718	                    /export/swap/client2    -access=client2,root=client2
   719	            The /_u_s_r file system may now only be mounted by  the  hosts  in
   720	            the _A__G_r_o_u_p netgroup, that is, _s_e_r_v_e_r_a, _c_l_i_e_n_t_a_1, and _c_l_i_e_n_t_a_2.
   721	            Any other host that  tries  to  mount  this  file  system  will
   722	            receive  an %%access denied'' error.  The /_h_o_m_e file system may
   723	            be mounted by any of the hosts in either the _A__G_r_o_u_p or _B__G_r_o_u_p
   724	            netgroups.   The /_v_a_r/_s_p_o_o_l/_m_a_i_l file system is also restricted
   725	            to these hosts, but in this example we used the %%super group''
   726	            called _A_l_l_S_u_n_s.
   727	                 Generally, the best way to configure the _n_e_t_g_r_o_u_p file  is
   728	            to make a single netgroup for each file server and its clients,
   729	            and then to make other super groups,  such  as  _A_l_l_S_u_n_s.   This
   730	            allows  you  the  flexibility  to specify the smallest possible
   731	            group of hosts for each file system in /_e_t_c/_e_x_p_o_r_t_s.
   732	                 Netgroups can also be used in the password file  to  allow
   733	            access  to a given host to be restricted to the members of that
   734	            group, and they can be used in the _h_o_s_t_s._e_q_u_i_v file to central-
   735	            ize  maintenance  of the list of trusted hosts.  The procedures
   736	            for doing this are defined in more detail in the Sun manual.
   737	          2.2.3.3   Restricting Super-User Access
   738	                 Normally, NFS translates the super-user id to a special id
   739	            called %%nobody'' in order to prevent a user with %%root'' on a
   740	            remote workstation from accessing other people's  files.   This
   741	            is  good  for  security,  but  sometimes  a nuisance for system
   742	            administration, since you  cannot  make  changes  to  files  as
   743	            %%root'' through NFS.
   744	                 The _e_x_p_o_r_t_s file  also  allows  you  to  grant  super-user
   745	                                         18
   746	            access  to  certain file systems for certain hosts by using the
   747	            _r_o_o_t= keyword.  Following this keyword a  colon-separated  list
   748	            of  up  to  ten  hosts  may  be  specified; these hosts will be
   749	            allowed to access the file system as  %%root''  without  having
   750	            the  user  id  converted  to  %%nobody.''  Netgroups may not be
   751	            specified to the _r_o_o_t= keyword.
   752	                 Granting %%root'' access to a  host  should  not  be  done
   753	            lightly.   If a host has %%root'' access to a file system, then
   754	            the super-user on that host will have complete  access  to  the
   755	            file system, just as if you had given him the %%root'' password
   756	            on the server.  Untrusted hosts should never be given  %%root''
   757	            access to NFS file systems.
   758	          2.2.4   FTP
   759	                 The File Transfer Protocol, implemented  by  the  _f_t_p  and
   760	            _f_t_p_d  programs  [Sun88a,  195-201,  1632-1634], allows users to
   761	            connect to remote systems and transfer files  back  and  forth.
   762	            Unfortunately,  older  versions  of  these  programs  also  had
   763	            several bugs in them that allowed crackers to break into a sys-
   764	            tem.   These bugs have been fixed by Berkeley, and new versions
   765	            are available.  If your  _f_t_p_d*  was  obtained  before  December
   766	            1988, you should get a newer version (see Section 4).
   767	                 One  of  the  more  useful  features   of   FTP   is   the
   768	            %%anonymous''  login.   This  special login allows users who do
   769	            not have an account on your machine to have  restricted  access
   770	            in  order to transfer files from a specific directory.  This is
   771	            useful if you wish to distribute  software  to  the  public  at
   772	            large  without  giving  each  person  who wants the software an
   773	            account on your machine.  In order to securely set up anonymous
   774	            FTP you should follow the specific instructions below:
   775	                 1.   Create an account called %%ftp.'' Disable the account
   776	                      by  placing  an  asterisk  (*) in the password field.
   777	                      Give the account a special home  directory,  such  as
   778	                      /_u_s_r/_f_t_p or /_u_s_r/_s_p_o_o_l/_f_t_p.
   779	                 2.   Make the home directory owned by %%ftp'' and  unwrit-
   780	                      able by anyone:
   781	                              # chown ftp %ftp
   782	                              # chmod 555 %ftp
   783	          _________________________
   784	            * On Sun systems, _f_t_p_d is stored in the file  /_u_s_r/_e_t_c/_i_n._f_t_p_d.
   785	          On most other systems, it is called /_e_t_c/_f_t_p_d.
   786	                                         19
   787	                 3.   Make the directory %_f_t_p/_b_i_n, owned by the  super-user
   788	                      and  unwritable  by  anyone.   Place a copy of the _l_s
   789	                      program in this directory:
   790	                              # mkdir %ftp/bin
   791	                              # chown root %ftp/bin
   792	                              # chmod 555 %ftp/bin
   793	                              # cp -p /bin/ls %ftp/bin
   794	                              # chmod 111 %ftp/bin/ls
   795	                 4.   Make the directory %_f_t_p/_e_t_c, owned by the  super-user
   796	                      and  unwritable by anyone.  Place copies of the pass-
   797	                      word and group files in this directory, with all  the
   798	                      password  fields  changed  to asterisks (*).  You may
   799	                      wish to delete all but a  few  of  the  accounts  and
   800	                      groups  from  these files; the only account that must
   801	                      be present is %%ftp.''
   802	                              # mkdir %ftp/etc
   803	                              # chown root %ftp/etc
   804	                              # chmod 555 %ftp/etc
   805	                              # cp -p /etc/passwd /etc/group %ftp/etc
   806	                              # chmod 444 %ftp/etc/passwd %ftp/etc/group
   807	                 5.   Make the directory %_f_t_p/_p_u_b,  owned  by  %%ftp''  and
   808	                      world-writable.   Users may then place files that are
   809	                      to be accessible via anonymous FTP in this directory:
   810	                              # mkdir %ftp/pub
   811	                              # chown ftp %ftp/pub
   812	                              # chmod 777 %ftp/pub
   813	                 Because the anonymous FTP feature allows anyone to  access
   814	            your  system  (albeit  in a very limited way), it should not be
   815	            made available on every host  on  the  network.   Instead,  you
   816	            should  choose  one  machine (preferably a server or standalone
   817	            host) on which to allow this service.   This  makes  monitoring
   818	            for  security  violations  much easier.  If you allow people to
   819	            transfer files to your machine (using  the  world-writable  _p_u_b
   820	            directory,  described  above),  you should check often the con-
   821	            tents of the directories into which they are allowed to  write.
   822	            Any suspicious files you find should be deleted.
   823	          2.2.4.1   Trivial FTP
   824	                 The Trivial File Transfer Protocol, TFTP, is used  on  Sun
   825	                                         20
   826	            workstations  (and others) to allow diskless hosts to boot from
   827	            the network.  Basically, TFTP is a stripped-down version of FTP
   828	            -  there is no user authentication, and the connection is based
   829	            on the User Datagram Protocol instead of the Transmission  Con-
   830	            trol  Protocol.  Because they are so stripped-down, many imple-
   831	            mentations of TFTP have security holes.  You should check  your
   832	            hosts by executing the command sequence shown below.
   833	                    % tftp
   834	                    tftp> connect _y_o_u_r_h_o_s_t
   835	                    tftp> get /etc/motd tmp
   836	                    _E_r_r_o_r _c_o_d_e _1: _F_i_l_e _n_o_t _f_o_u_n_d
   837	                    _t_f_t_p> _q_u_i_t
   838	                    %
   839	            If your version does not respond with %%_F_i_l_e _n_o_t  _f_o_u_n_d,''  and
   840	            instead  transfers the file, you should replace your version of
   841	            _t_f_t_p_d* with a newer one.   In  particular,  versions  of  SunOS
   842	            prior to release 4.0 are known to have this problem.
   843	          2.2.5   Mail
   844	                 Electronic mail is one of the main reasons for  connecting
   845	            to outside networks.  On most versions of Berkeley-derived UNIX
   846	            systems,  including  those  from  Sun,  the  _s_e_n_d_m_a_i_l   program
   847	            [Sun88a,  1758-1760;  Sun88b,  441-488]  is  used to enable the
   848	            receipt and delivery of mail.  As with the FTP software,  older
   849	            versions of _s_e_n_d_m_a_i_l have several bugs that allow security vio-
   850	            lations.  One of these bugs was used with great success by  the
   851	            Internet  worm  [Seel88, Spaf88].  The current version of _s_e_n_d_-
   852	            _m_a_i_l from Berkeley is version 5.61, of January 1989.   Sun  is,
   853	            as  of  this  writing, still shipping version 5.59, which has a
   854	            known security problem.  They have, however, made a fixed  ver-
   855	            sion  available.   Section  4 details how to obtain these newer
   856	            versions.
   857	                 Generally, with the exception of the security  holes  men-
   858	            tioned  above,  _s_e_n_d_m_a_i_l is reasonably secure when installed by
   859	            most vendors' installation procedures.  There are,  however,  a
   860	            few  precautions  that  should be taken to ensure secure opera-
   861	            tion:
   862	                 1.   Remove the %%decode'' alias  from  the  aliases  file
   863	                      (/_e_t_c/_a_l_i_a_s_e_s or /_u_s_r/_l_i_b/_a_l_i_a_s_e_s).
   864	          _________________________
   865	            * On   Sun   systems,   _t_f_t_p_d   is   stored   in    the    file
   866	          /_u_s_r/_e_t_c/_i_n._t_f_t_p_d.    On   most   other  systems,  it  is  called
   867	          /_e_t_c/_t_f_t_p_d.
   868	                                         21
   869	                 2.   If you create aliases that allow messages to be  sent
   870	                      to  programs, be absolutely sure that there is no way
   871	                      to obtain a shell or send commands to  a  shell  from
   872	                      these programs.
   873	                 3.   Make sure the %%wizard'' password is disabled in  the
   874	                      configuration  file, _s_e_n_d_m_a_i_l._c_f.  (Unless you modify
   875	                      the distributed configuration files,  this  shouldn't
   876	                      be a problem.)
   877	                 4.   Make  sure  your  _s_e_n_d_m_a_i_l  does  not   support   the
   878	                      %%debug'' command.  This can be done with the follow-
   879	                      ing commands:
   880	                      % telnet localhost 25
   881	                      220 yourhost Sendmail 5.61 ready at 9 Mar 90 10:57:36 PST
   882	                      debug
   883	                      500 Command unrecognized
   884	                      quit
   885	                      %
   886	                      If your _s_e_n_d_m_a_i_l responds to  the  %%debug''  command
   887	                      with  %%_2_0_0  _D_e_b_u_g  _s_e_t,'' then you are vulnerable to
   888	                      attack and should replace your _s_e_n_d_m_a_i_l with a  newer
   889	                      version.
   890	            By following the procedures above, you can be  sure  that  your
   891	            mail system is secure.
   892	          2.2.6   Finger
   893	                 The %%finger'' service, provided  by  the  _f_i_n_g_e_r  program
   894	            [Sun88a,  186-187],  allows  you  to obtain information about a
   895	            user such as her full name, home directory,  last  login  time,
   896	            and  in  some cases when she last received mail and/or read her
   897	            mail.  The _f_i_n_g_e_r_d  program  [Sun88a,  1625]  allows  users  on
   898	            remote hosts to obtain this information.
   899	                 A bug in _f_i_n_g_e_r_d was also exercised with  success  by  the
   900	            Internet worm [Seel88, Spaf88].  If your version of _f_i_n_g_e_r_d* is
   901	            older than November 5, 1988, it should be replaced with a newer
   902	            version.  New  versions  are  available  from  several  of  the
   903	            sources described in Section 4.
   904	          _________________________
   905	            * On Sun systems, _f_i_n_g_e_r_d is stored in /_u_s_r/_e_t_c/_i_n._f_i_n_g_e_r_d.  On
   906	          most other systems, it is called /_e_t_c/_f_i_n_g_e_r_d.
   907	                                         22
   908	          2.2.7   Modems and Terminal Servers
   909	                 Modems and  terminal  servers  (terminal  switches,  Annex
   910	            boxes,  etc.) present still another potential security problem.
   911	            The main problem with these devices is one of  configuration  -
   912	            misconfigured hardware can allow security breaches.  Explaining
   913	            how to configure every brand of modem and terminal server would
   914	            require  volumes.   However,  the  following  items  should  be
   915	            checked for on any modems or terminal servers installed at your
   916	            site:
   917	                 1.   If a user dialed up to a modem hangs  up  the  phone,
   918	                      the  system should log him out.  If it doesn't, check
   919	                      the hardware connections and the kernel configuration
   920	                      of the serial ports.
   921	                 2.   If a user logs off, the system should force the modem
   922	                      to hang up.  Again, check the hardware connections if
   923	                      this doesn't work.
   924	                 3.   If the connection from a terminal server to the  sys-
   925	                      tem is broken, the system should log the user off.
   926	                 4.   If the terminal server is connected  to  modems,  and
   927	                      the  user hangs up, the terminal server should inform
   928	                      the system that the user has hung up.
   929	                 Most modem and terminal server manuals cover in detail how
   930	            to  properly connect these devices to your system.  In particu-
   931	            lar you should pay close attention to the  %%Carrier  Detect,''
   932	            %%Clear to Send,'' and %%Request to Send'' connections.
   933	          2.2.8   Firewalls
   934	                 One of the newer ideas in network security is  that  of  a
   935	            _f_i_r_e_w_a_l_l.   Basically,  a  firewall is a special host that sits
   936	            between  your  outside-world  network  connection(s)  and  your
   937	            internal  network(s).   This  host  does  not  send out routing
   938	            information about your internal network, and thus the  internal
   939	            network is %%invisible'' from the outside.  In order to config-
   940	            ure a firewall machine, the following considerations need to be
   941	            taken:
   942	                 1.   The firewall does not advertise routes.   This  means
   943	                      that users on the internal network must log in to the
   944	                      firewall in order to access hosts on remote networks.
   945	                      Likewise,  in  order  to  log  in  to  a  host on the
   946	                                         23
   947	                      internal network from the outside, a user must  first
   948	                      log  in  to  the  firewall  machine.   This is incon-
   949	                      venient, but more secure.
   950	                 2.   All electronic mail sent by your users must  be  for-
   951	                      warded  to  the  firewall  machine  if  it  is  to be
   952	                      delivered  outside  your   internal   network.    The
   953	                      firewall  must  receive all incoming electronic mail,
   954	                      and then redistribute it.  This can  be  done  either
   955	                      with aliases for each user or by using name server MX
   956	                      records.
   957	                 3.   The firewall machine should not mount any  file  sys-
   958	                      tems  via NFS, or make any of its file systems avail-
   959	                      able to be mounted.
   960	                 4.   Password security on the  firewall  must  be  rigidly
   961	                      enforced.
   962	                 5.   The firewall host should not trust  any  other  hosts
   963	                      regardless  of  where  they  are.   Furthermore,  the
   964	                      firewall should not be trusted by any other host.
   965	                 6.   Anonymous FTP and other similar services should  only
   966	                      be  provided  by  the firewall host, if they are pro-
   967	                      vided at all.
   968	                 The purpose of the firewall is to  prevent  crackers  from
   969	            accessing other hosts on your network.  This means, in general,
   970	            that you must maintain strict and rigidly enforced security  on
   971	            the  firewall,  but  the  other  hosts are less vulnerable, and
   972	            hence security may be somewhat lax.  But  it  is  important  to
   973	            remember  that  the  firewall  is  not  a complete cure against
   974	            crackers - if a cracker can break into the firewall machine, he
   975	            can then try to break into any other host on your network.
   976	          2.3   FILE SYSTEM SECURITY
   977	                 The last defense against system crackers are  the  permis-
   978	            sions  offered  by the file system.  Each file or directory has
   979	            three sets of permission bits associated with it: one  set  for
   980	            the  user who owns the file, one set for the users in the group
   981	            with which the file is associated, and one set  for  all  other
   982	            users  (the  %%world''  permissions).   Each set contains three
   983	            identical permission bits, which control the following:
   984	                 _r_e_a_d     If set, the file or directory may  be  read.   In
   985	                          the  case  of  a  directory, read access allows a
   986	                          user to see the  contents  of  a  directory  (the
   987	                                         24
   988	                          names of the files contained therein), but not to
   989	                          access them.
   990	                 _w_r_i_t_e    If set, the file  or  directory  may  be  written
   991	                          (modified).   In  the  case of a directory, write
   992	                          permission implies the ability to create, delete,
   993	                          and  rename  files.   Note  that  the  ability to
   994	                          remove a file is _n_o_t controlled  by  the  permis-
   995	                          sions  on the file, but rather the permissions on
   996	                          the directory containing the file.
   997	                 _e_x_e_c_u_t_e  If set, the file or  directory  may  be  executed
   998	                          (searched).   In the case of a directory, execute
   999	                          permission implies the ability  to  access  files
  1000	                          contained in that directory.
  1001	                 In addition, a fourth permission bit is available in  each
  1002	            set  of  permissions.  This bit has a different meaning in each
  1003	            set of permission bits:
  1004	                 _s_e_t_u_i_d  If set in the owner permissions, this bit controls
  1005	                         the  %%set  user  id''  (setuid) status of a file.
  1006	                         Setuid status means that when a  program  is  exe-
  1007	                         cuted,  it  executes  with  the permissions of the
  1008	                         user owning the program, in addition to  the  per-
  1009	                         missions  of  the user executing the program.  For
  1010	                         example, _s_e_n_d_m_a_i_l is setuid %%root,'' allowing  it
  1011	                         to  write files in the mail queue area, which nor-
  1012	                         mal users are not allowed  to  do.   This  bit  is
  1013	                         meaningless on nonexecutable files.
  1014	                 _s_e_t_g_i_d  If set in the group permissions, this bit controls
  1015	                         the  %%set  group  id'' (setgid) status of a file.
  1016	                         This behaves in exactly the same way as the setuid
  1017	                         bit, except that the group id is affected instead.
  1018	                         This bit is meaningless  on  non-executable  files
  1019	                         (but see below).
  1020	                 _s_t_i_c_k_y  If set in the world  permissions,  the  %%sticky''
  1021	                         bit  tells  the  operating  system  to  do special
  1022	                         things with the text image of an executable  file.
  1023	                         It  is  mostly  a  holdover from older versions of
  1024	                         UNIX, and has little if any use today.   This  bit
  1025	                         is  also  meaningless  on nonexecutable files (but
  1026	                         see below).
  1027	          2.3.1   Setuid Shell Scripts
  1028	               Shell scripts that have the setuid or  setgid  bits  set  on
  1029	                                         25
  1030	          them  are _n_o_t secure, regardless of how many safeguards are taken
  1031	          when writing them.  There are numerous software  packages  avail-
  1032	          able  that  claim  to  make  shell  scripts secure, but every one
  1033	          released so far has not managed to solve all the problems.
  1034	               Setuid and setgid shell scripts should never be  allowed  on
  1035	          any UNIX system.
  1036	          2.3.2   The Sticky Bit on Directories
  1037	               Newer versions of UNIX have attached a new  meaning  to  the
  1038	          sticky  bit.   When this bit is set on a directory, it means that
  1039	          users may not delete or rename other users' files in this  direc-
  1040	          tory.   This  is  typically  useful for the /_t_m_p directory.  Nor-
  1041	          mally, /_t_m_p  is  world-writable,  enabling  any  user  to  delete
  1042	          another  user's  files.  By setting the sticky bit on /_t_m_p, users
  1043	          may only delete their own files from this directory.
  1044	               To set the sticky bit on a directory, use the command
  1045	                  # chmod o+t _d_i_r_e_c_t_o_r_y
  1046	          2.3.3   The Setgid Bit on Directories
  1047	               In SunOS 4.0, the setgid bit was also given a  new  meaning.
  1048	          Two  rules can be used for assigning group ownership to a file in
  1049	          SunOS:
  1050	               1.   The System V mechanism, which says that a  user's  pri-
  1051	                    mary  group id (the one listed in the password file) is
  1052	                    assigned to any file he creates.
  1053	               2.   The Berkeley mechanism, which says that the group id of
  1054	                    a file is set to the group id of the directory in which
  1055	                    it is created.
  1056	               If the setgid bit  is  set  on  a  directory,  the  Berkeley
  1057	          mechanism  is  enabled.   Otherwise,  the  System  V mechanism is
  1058	          enabled.  Normally, the Berkeley mechanism is used; this  mechan-
  1059	          ism must be used if creating directories for use by more than one
  1060	          member of a group (see Section 2.1.5).
  1061	               To set the setgid bit on a directory, use the command
  1062	                                         26
  1063	                  # chmod g+s _d_i_r_e_c_t_o_r_y
  1064	          2.3.4   The umask Value
  1065	               When a file is created by a program, say a text editor or  a
  1066	          compiler,  it  is typically created with all permissions enabled.
  1067	          Since this is rarely desirable (you don't want other users to  be
  1068	          able  to write your files), the _u_m_a_s_k value is used to modify the
  1069	          set of permissions a file is created with.  Simply put, while the
  1070	          _c_h_m_o_d  command  [Sun88a,  65-66]  specifies  what  bits should be
  1071	          turned _o_n, the umask value specifies what bits should  be  turned
  1072	          _o_f_f.
  1073	               For example, the default umask on most systems is 022.  This
  1074	          means  that  write  permission  for the group and world should be
  1075	          turned off whenever a file is created.  If instead you wanted  to
  1076	          turn  off all group and world permission bits, such that any file
  1077	          you created would not be readable,  writable,  or  executable  by
  1078	          anyone except yourself, you would set your umask to 077.
  1079	               The umask value is specified in the ._c_s_h_r_c or ._p_r_o_f_i_l_e files
  1080	          read  by  the  shell  using the _u_m_a_s_k command [Sun88a, 108, 459].
  1081	          The %%root'' account should have the line
  1082	                  umask 022
  1083	          in its /._c_s_h_r_c file, in order to prevent the accidental  creation
  1084	          of world-writable files owned by the super-user.
  1085	          2.3.5   Encrypting Files
  1086	               The standard UNIX _c_r_y_p_t command [Sun88a, 95] is not  at  all
  1087	          secure.  Although it is reasonable to expect that _c_r_y_p_t will keep
  1088	          the casual %%browser'' from reading a file, it will present noth-
  1089	          ing  more  than  a  minor  inconvenience to a determined cracker.
  1090	          _C_r_y_p_t implements a one-rotor machine along the lines of the  Ger-
  1091	          man  Enigma  (broken  in World War II).  The methods of attack on
  1092	          such a machine are well known, and a sufficiently large file  can
  1093	          usually  be  decrypted  in  a few hours even without knowledge of
  1094	          what the file contains [Reed84].   In  fact,  publicly  available
  1095	          packages  of  programs designed to %%break'' files encrypted with
  1096	          _c_r_y_p_t have been around for several years.
  1097	               There are software implementations of another algorithm, the
  1098	          Data  Encryption  Standard  (DES),  available  on  some  systems.
  1099	                                         27
  1100	          Although this algorithm is much more secure than  _c_r_y_p_t,  it  has
  1101	          never  been  proven  that  it  is totally secure, and many doubts
  1102	          about its security have been raised in recent years.
  1103	               Perhaps the best thing to say about encrypting  files  on  a
  1104	          computer  system is this: if you think you have a file whose con-
  1105	          tents are important enough to encrypt, then that file should  not
  1106	          be stored on the computer in the first place.  This is especially
  1107	          true of systems with limited security, such as UNIX  systems  and
  1108	          personal computers.
  1109	               It  is  important  to  note  that  UNIX  passwords  are  _n_o_t
  1110	          encrypted  with  the  _c_r_y_p_t program.  Instead, they are encrypted
  1111	          with a modified version of the DES that generates one-way encryp-
  1112	          tions  (that is, the password cannot be decrypted).  When you log
  1113	          in, the system does  not  decrypt  your  password.   Instead,  it
  1114	          encrypts  your  attempted  password, and if this comes out to the
  1115	          same result as encrypting your real password, you are allowed  to
  1116	          log in.
  1117	          2.3.6   Devices
  1118	               The security of devices is an important issue in UNIX.  Dev-
  1119	          ice files (usually residing in /_d_e_v) are used by various programs
  1120	          to access the data on the disk drives or  in  memory.   If  these
  1121	          device files are not properly protected, your system is wide open
  1122	          to a cracker.  The entire list of devices is too long to go  into
  1123	          here, since it varies widely from system to system.  However, the
  1124	          following guidelines apply to all systems:
  1125	               1.   The files /_d_e_v/_k_m_e_m,  /_d_e_v/_m_e_m,  and  /_d_e_v/_d_r_u_m  should
  1126	                    never  be  readable  by the world.  If your system sup-
  1127	                    ports the notion of the %%kmem'' group (most newer sys-
  1128	                    tems  do) and utilities such as _p_s are setgid %%kmem,''
  1129	                    then these files should be owned by user  %%root''  and
  1130	                    group %%kmem,'' and should be mode 640.  If your system
  1131	                    does not support the notion of the %%kmem'' group,  and
  1132	                    utilities  such  as  _p_s are setuid %%root,'' then these
  1133	                    files should be owned by user %%root'' and mode 600.
  1134	               2.   The disk devices, such as /_d_e_v/_s_d_0_a, /_d_e_v/_r_x_y_1_b,  etc.,
  1135	                    should  be  owned  by  user %%root'' and group %%opera-
  1136	                    tor,'' and should be mode 640.  Note that each disk has
  1137	                    eight  partitions  and two device files for each parti-
  1138	                    tion.  Thus, the disk %%sd0'' would have the  following
  1139	                    device files associated with it in /_d_e_v:
  1140	                                         28
  1141	                            sd0a     sd0e     rsd0a     rsd0e
  1142	                            sd0b     sd0f     rsd0b     rsd0f
  1143	                            sd0c     sd0g     rsd0c     rsd0g
  1144	                            sd0d     sd0h     rsd0d     rsd0h
  1145	               3.   With very few exceptions, all other devices  should  be
  1146	                    owned  by  user  %%root.''  One exception is terminals,
  1147	                    which are changed to be owned  by  the  user  currently
  1148	                    logged  in on them.  When the user logs out, the owner-
  1149	                    ship of the terminal is automatically changed  back  to
  1150	                    %%root.''
  1151	          2.4   SECURITY IS YOUR RESPONSIBILITY
  1152	               This section has detailed numerous tools for improving secu-
  1153	          rity  provided  by the UNIX operating system.  The most important
  1154	          thing to note about these tools is that although they are  avail-
  1155	          able,  they  are  typically not put to use in most installations.
  1156	          Therefore, it is incumbent on you, the system  administrator,  to
  1157	          take the time and make the effort to enable these tools, and thus
  1158	          to protect your system from unauthorized access.
  1159	                                         29
  1160	                                         30
  1161	                                      SECTION 3
  1162	                                 MONITORING SECURITY
  1163	               One of the most important tasks in keeping any computer sys-
  1164	          tem  secure  is  monitoring  the  security  of  the system.  This
  1165	          involves examining system log files for unauthorized accesses  of
  1166	          the  system, as well as monitoring the system itself for security
  1167	          holes.  This section describes the procedures for doing this.  An
  1168	          additional  part  of monitoring security involves keeping abreast
  1169	          of security problems found by others; this is described  in  Sec-
  1170	          tion 5.
  1171	          3.1   ACCOUNT SECURITY
  1172	               Account security should be monitored periodically  in  order
  1173	          to  check for two things: users logged in when they %%shouldn't''
  1174	          be (e.g., late at night, when they're  on  vacation,  etc.),  and
  1175	          users  executing  commands  they wouldn't normally be expected to
  1176	          use.  The commands described in  this  section  can  be  used  to
  1177	          obtain this information from the system.
  1178	          3.1.1   The lastlog File
  1179	               The file /_u_s_r/_a_d_m/_l_a_s_t_l_o_g [Sun88a, 1485]  records  the  most
  1180	          recent  login  time  for  each  user  of the system.  The message
  1181	          printed each time you log in, e.g.,
  1182	                  Last login: Sat Mar 10 10:50:48 from spam.itstd.sri.c
  1183	          uses the time stored in the _l_a_s_t_l_o_g file.  Additionally, the last
  1184	          login  time reported by the _f_i_n_g_e_r command uses this time.  Users
  1185	          should be told to carefully examine this time whenever  they  log
  1186	          in,  and  to report unusual login times to the system administra-
  1187	          tor.  This is an easy way to detect account break-ins, since each
  1188	          user should remember the last time she logged into the system.
  1189	          3.1.2   The utmp and wtmp Files
  1190	               The file /_e_t_c/_u_t_m_p [Sun88a, 1485] is used to record  who  is
  1191	                                         31
  1192	          currently  logged  into  the  system.  This file can be displayed
  1193	          using the _w_h_o command [Sun88a, 597]:
  1194	                  % who
  1195	                  hendra   tty0c   Mar 13 12:31
  1196	                  heidari  tty14   Mar 13 13:54
  1197	                  welgem   tty36   Mar 13 12:15
  1198	                  reagin   ttyp0   Mar 13 08:54   (aaifs.itstd.sri.)
  1199	                  ghg      ttyp1   Mar  9 07:03   (hydra.riacs.edu)
  1200	                  compion  ttyp2   Mar  1 03:01   (ei.ecn.purdue.ed)
  1201	          For each user, the login name, terminal being used,  login  time,
  1202	          and  remote  host  (if the user is logged in via the network) are
  1203	          displayed.
  1204	               The file /_u_s_r/_a_d_m/_w_t_m_p [Sun88a, 1485] records each login and
  1205	          logout  time  for  every  user.   This file can also be displayed
  1206	          using the _w_h_o command:
  1207	                  % who /usr/adm/wtmp
  1208	                  davy     ttyp4    Jan  7 12:42 (annex01.riacs.ed)
  1209	                           ttyp4    Jan  7 15:33
  1210	                  davy     ttyp4    Jan  7 15:33 (annex01.riacs.ed)
  1211	                           ttyp4    Jan  7 15:35
  1212	                  hyder    ttyp3    Jan  8 09:07 (triceratops.itst)
  1213	                           ttyp3    Jan  8 11:43
  1214	          A line that contains a login name indicates  the  time  the  user
  1215	          logged  in; a line with no login name indicates the time that the
  1216	          terminal was logged off.  Unfortunately,  the  output  from  this
  1217	          command  is  rarely as simple as in the example above; if several
  1218	          users log in at once, the login and logout times  are  all  mixed
  1219	          together and must be matched up by hand using the terminal name.
  1220	               The _w_t_m_p file may also be examined using  the  _l_a_s_t  command
  1221	          [Sun88a,  248].   This command sorts out the entries in the file,
  1222	          matching up login and logout  times.   With  no  arguments,  _l_a_s_t
  1223	          displays  all  information  in the file.  By giving the name of a
  1224	          user or terminal, the output can be restricted to the information
  1225	          about  the  user or terminal in question.  Sample output from the
  1226	          _l_a_s_t command is shown below.
  1227	                  % last
  1228	                  davy      ttyp3  intrepid.itstd.s Tue Mar 13 10:55 - 10:56 (00:00)
  1229	                  hyder     ttyp3  clyde.itstd.sri. Mon Mar 12 15:31 - 15:36 (00:04)
  1230	                  reboot    %                       Mon Mar 12 15:16
  1231	                  shutdown  %                       Mon Mar 12 15:16
  1232	                  arms      ttyp3  clyde0.itstd.sri Mon Mar 12 15:08 - 15:12 (00:04)
  1233	                  hyder     ttyp3  spam.itstd.sri.c Sun Mar 11 21:08 - 21:13 (00:04)
  1234	                  reboot    %                       Sat Mar 10 20:05
  1235	                  davy      ftp    hydra.riacs.edu  Sat Mar 10 13:23 - 13:30 (00:07)
  1236	                                         32
  1237	          For each login session, the user name, terminal used, remote host
  1238	          (if  the user logged in via the network), login and logout times,
  1239	          and session duration are shown.  Additionally, the times  of  all
  1240	          system  shutdowns  and  reboots  (generated  by  the _s_h_u_t_d_o_w_n and
  1241	          _r_e_b_o_o_t commands  [Sun88a,  1727,  1765])  are  recorded.   Unfor-
  1242	          tunately,  system crashes are not recorded.  In newer versions of
  1243	          the operating system, pseudo logins such as  those  via  the  _f_t_p
  1244	          command  are  also  recorded;  an example of this is shown in the
  1245	          last line of the sample output, above.
  1246	          3.1.3   The acct File
  1247	               The file /_u_s_r/_a_d_m/_a_c_c_t [Sun88a, 1344-1345] records each exe-
  1248	          cution of a command on the system, who executed it, when, and how
  1249	          long it took.  This information is logged  each  time  a  command
  1250	          completes,  but only if your kernel was compiled with the SYSACCT
  1251	          option enabled (the option is enabled in  some  GENERIC  kernels,
  1252	          but is usually disabled by default).
  1253	               The _a_c_c_t file can be displayed using  the  _l_a_s_t_c_o_m_m  command
  1254	          [Sun88a,  249].   With  no  arguments, all the information in the
  1255	          file is displayed.  However, by giving a command name, user name,
  1256	          or  terminal name as an argument, the output can be restricted to
  1257	          information about the given command, user, or  terminal.   Sample
  1258	          output from _l_a_s_t_c_o_m_m is shown below.
  1259	                  % lastcomm
  1260	                  sh         S     root     __         0.67 secs Tue Mar 13 12:45
  1261	                  atrun            root     __         0.23 secs Tue Mar 13 12:45
  1262	                  lpd         F    root     __         1.06 secs Tue Mar 13 12:44
  1263	                  lpr        S     burwell  tty09      1.23 secs Tue Mar 13 12:44
  1264	                  troff            burwell  tty09     12.83 secs Tue Mar 13 12:44
  1265	                  eqn              burwell  tty09      1.44 secs Tue Mar 13 12:44
  1266	                  df               kindred  ttyq7      0.78 secs Tue Mar 13 12:44
  1267	                  ls               kindred  ttyq7      0.28 secs Tue Mar 13 12:44
  1268	                  cat              kindred  ttyq7      0.05 secs Tue Mar 13 12:44
  1269	                  stty             kindred  ttyq7      0.05 secs Tue Mar 13 12:44
  1270	                  tbl              burwell  tty09      1.08 secs Tue Mar 13 12:44
  1271	                  rlogin     S     jones    ttyp3      5.66 secs Tue Mar 13 12:38
  1272	                  rlogin      F    jones    ttyp3      2.53 secs Tue Mar 13 12:41
  1273	                  stty             kindred  ttyq7      0.05 secs Tue Mar 13 12:44
  1274	          The first column indicates the name of  the  command.   The  next
  1275	          column  displays certain flags on the command: an %%F'' means the
  1276	          process spawned a child process, %%S'' means the process ran with
  1277	          the  set-user-id  bit  set, %%D'' means the process exited with a
  1278	          core dump, and %%X'' means the  process  was  killed  abnormally.
  1279	          The  remaining  columns  show  the  name  of the user who ran the
  1280	          program, the terminal he ran it from (if applicable), the  amount
  1281	                                         33
  1282	          of  CPU  time  used by the command (in seconds), and the date and
  1283	          time the process started.
  1284	          3.2   NETWORK SECURITY
  1285	               Monitoring network security is more difficult, because there
  1286	          are  so many ways for a cracker to attempt to break in.  However,
  1287	          there are some programs available to aid you in this task.  These
  1288	          are described in this section.
  1289	          3.2.1   The syslog Facility
  1290	               The _s_y_s_l_o_g facility  [Sun88a,  1773]  is  a  mechanism  that
  1291	          enables  any command to log error messages and informational mes-
  1292	          sages to the system console, as well as to  a  log  file.   Typi-
  1293	          cally,  error  messages  are logged in the file /_u_s_r/_a_d_m/_m_e_s_s_a_g_e_s
  1294	          along with the date, time, name of the program sending  the  mes-
  1295	          sage, and (usually) the process id of the program.  A sample seg-
  1296	          ment of the _m_e_s_s_a_g_e_s file is shown below.
  1297	                  Mar 12 14:53:37 sparkyfs login: ROOT LOGIN ttyp3 FROM setekfs.itstd.sr
  1298	                  Mar 12 15:18:08 sparkyfs login: ROOT LOGIN ttyp3 FROM setekfs.itstd.sr
  1299	                  Mar 12 16:50:25 sparkyfs login: ROOT LOGIN ttyp4 FROM pongfs.itstd.sri
  1300	                  Mar 12 16:52:20 sparkyfs vmunix: sd2c:  read failed, no retries
  1301	                  Mar 13 06:01:18 sparkyfs vmunix: /: file system full
  1302	                  Mar 13 08:02:03 sparkyfs login: ROOT LOGIN ttyp4 FROM triceratops.itst
  1303	                  Mar 13 08:28:52 sparkyfs su: davy on /dev/ttyp3
  1304	                  Mar 13 08:38:03 sparkyfs login: ROOT LOGIN ttyp4 FROM triceratops.itst
  1305	                  Mar 13 10:56:54 sparkyfs automount[154]: host aaifs not responding
  1306	                  Mar 13 11:30:42 sparkyfs login: REPEATED LOGIN FAILURES ON ttyp3 FROM
  1307	                                  intrepid.itstd.s, daemon
  1308	          Of particular interest in this sample are the messages  from  the
  1309	          _l_o_g_i_n  and  _s_u  programs.   Whenever someone logs in as %%root,''
  1310	          _l_o_g_i_n logs this information.  Generally, logging in  as  %%root''
  1311	          directly,   rather   than   using   the  _s_u  command,  should  be
  1312	          discouraged, as it is hard to  track  which  person  is  actually
  1313	          using  the  account.   Once  this  ability  has been disabled, as
  1314	          described  in  Section  2.2.2,  detecting  a  security  violation
  1315	          becomes  a simple matter of searching the _m_e_s_s_a_g_e_s file for lines
  1316	          of this type.
  1317	               _L_o_g_i_n also logs any case of someone repeatedly trying to log
  1318	          in  to  an account and failing.  After three attempts, _l_o_g_i_n will
  1319	          refuse to let  the  person  try  anymore.   Searching  for  these
  1320	          messages  in  the  _m_e_s_s_a_g_e_s  file  can  alert  you  to  a cracker
  1321	                                         34
  1322	          attempting to guess someone's password.
  1323	               Finally, when someone uses the _s_u command, either to  become
  1324	          %%root'' or someone  else, _s_u logs the success or failure of this
  1325	          operation.  These messages can be used to check for users sharing
  1326	          their  passwords, as well as for a cracker who has penetrated one
  1327	          account and is trying to penetrate others.
  1328	          3.2.2   The showmount Command
  1329	               The _s_h_o_w_m_o_u_n_t command [Sun88a, 1764] can be used on  an  NFS
  1330	          file server to display the names of all hosts that currently have
  1331	          something mounted from the server.  With no options, the  program
  1332	          simply  displays  a  list  of  all the hosts.  With the -_a and -_d
  1333	          options, the output is somewhat more useful.  The  first  option,
  1334	          -_a,  causes _s_h_o_w_m_o_u_n_t to list all the host and directory combina-
  1335	          tions.  For example,
  1336	                  bronto.itstd.sri.com:/usr/share
  1337	                  bronto.itstd.sri.com:/usr/local.new
  1338	                  bronto.itstd.sri.com:/usr/share/lib
  1339	                  bronto.itstd.sri.com:/var/spool/mail
  1340	                  cascades.itstd.sri.com:/sparky/a
  1341	                  clyde.itstd.sri.com:/laser_dumps
  1342	                  cm1.itstd.sri.com:/sparky/a
  1343	                  coco0.itstd.sri.com:/sparky/a
  1344	          There will be one line of output for each directory mounted by  a
  1345	          host.   With  the  -_d  option,  _s_h_o_w_m_o_u_n_t  displays a list of all
  1346	          directories that are presently mounted by some host.
  1347	               The output from _s_h_o_w_m_o_u_n_t should be checked for two  things.
  1348	          First,  only  machines  local  to your organization should appear
  1349	          there.  If you have set up proper netgroups as described in  Sec-
  1350	          tion  2.2.3,  this  should not be a problem.  Second, only %%nor-
  1351	          mal'' directories should be mounted.  If you find unusual  direc-
  1352	          tories  being  mounted,  you should find out who is mounting them
  1353	          and why - although it is probably innocent, it may indicate some-
  1354	          one trying to get around your security mechanisms.
  1355	          3.3   FILE SYSTEM SECURITY
  1356	               Checking for security holes in the file  system  is  another
  1357	          important part of making your system secure.  Primarily, you need
  1358	          to check for files that can be modified  by  unauthorized  users,
  1359	          files  that  can  inadvertently grant users too many permissions,
  1360	                                         35
  1361	          and files that can inadvertently grant access to crackers.  It is
  1362	          also important to be able to detect unauthorized modifications to
  1363	          the file system, and to recover  from  these  modifications  when
  1364	          they are made.
  1365	          3.3.1   The find Command
  1366	               The _f_i_n_d command [Sun88a, 183-185] is a general-purpose com-
  1367	          mand  for  searching  the  file system.  Using various arguments,
  1368	          complex matching patterns based on a  file's  name,  type,  mode,
  1369	          owner,  modification time, and other characteristics, can be con-
  1370	          structed.  The names of files that are found using these patterns
  1371	          can then be printed out, or given as arguments to other UNIX com-
  1372	          mands.  The general format of a _f_i_n_d command is
  1373	                  % find _d_i_r_e_c_t_o_r_i_e_s _o_p_t_i_o_n_s
  1374	          where _d_i_r_e_c_t_o_r_i_e_s is a list of directory names to  search  (e.g.,
  1375	          /_u_s_r),  and _o_p_t_i_o_n_s contains the options to control what is being
  1376	          searched for.  In general, for the examples in this section,  you
  1377	          will  always want to search from the root of the file system (/),
  1378	          in order to find all files matching the patterns presented.
  1379	               This section describes how to use _f_i_n_d to  search  for  four
  1380	          possible security problems that were described in Section 2.
  1381	          3.3.1.1   Finding Setuid and Setgid Files
  1382	               It is important to check the system often  for  unauthorized
  1383	          setuid and setgid programs.  Because these programs grant special
  1384	          privileges to the user who is executing them, it is necessary  to
  1385	          ensure that insecure programs are not installed.  Setuid %%root''
  1386	          programs should be closely guarded - a  favorite  trick  of  many
  1387	          crackers  is to break into %%root'' once, and leave a setuid pro-
  1388	          gram hidden somewhere that will enable them to regain  super-user
  1389	          powers even if the original hole is plugged.
  1390	               The command to search for setuid and setgid files is
  1391	                  # find / -type f -a %( -perm -4000 -o -perm -2000 %) -print
  1392	          The options to this command have the following meanings:
  1393	               /    The name of the directory  to  be  searched.   In  this
  1394	                    case,  we  want to search the entire file system, so we
  1395	                    specify /.  You might instead restrict  the  search  to
  1396	                                         36
  1397	                    /_u_s_r or /_h_o_m_e.
  1398	               -type f
  1399	                    Only examine files whose type is %%f,''  regular  file.
  1400	                    Other  options  include  %%d'' for directory, %%l'' for
  1401	                    symbolic link, %%c'' for character-special devices, and
  1402	                    %%b'' for block-special devices.
  1403	               -a   This specifies %%and.'' Thus, we  want  to  know  about
  1404	                    files whose type is %%regular file,'' _a_n_d whose permis-
  1405	                    sions bits match the other part of this expression.
  1406	               %( -perm -4000 -o -perm -2000 %)
  1407	                    The parentheses in this part of the  command  are  used
  1408	                    for  grouping.   Thus,  everything  in this part of the
  1409	                    command matches a single pattern, and is treated as the
  1410	                    other half of the %%and'' clause described above.
  1411	                    -perm -4000
  1412	                         This specifies a match if the %%4000'' bit (speci-
  1413	                         fied as an octal number) is set in the file's per-
  1414	                         mission modes.  This is the set-user-id bit.
  1415	                    -o   This specifies %%or.'' Thus, we want to  match  if
  1416	                         the  file  has  the  set-user-id  bit  _o_r the set-
  1417	                         group-id bit set.
  1418	                    -perm -2000
  1419	                         This specifies a match if the %%2000'' bit (speci-
  1420	                         fied as an octal number) is set in the file's per-
  1421	                         mission modes.  This is the set-group-id bit.
  1422	               -printThis indicates that for  any  file  that  matches  the
  1423	                    specified  expression  (is  a  regular file _a_n_d has the
  1424	                    setuid _o_r setgid bits set in  its  permissions),  print
  1425	                    its name on the screen.
  1426	               After executing this command (depending  on  how  much  disk
  1427	          space  you have, it can take anywhere from 15 minutes to a couple
  1428	          of hours to complete), you will have a list of  files  that  have
  1429	          setuid  or setgid bits set on them.  You should then examine each
  1430	          of these programs, and determine  whether  they  should  actually
  1431	          have  these  permissions.  You should be especially suspicious of
  1432	          programs that are _n_o_t in one of the directories (or  a  subdirec-
  1433	          tory) shown below.
  1434	                  /bin
  1435	                  /etc
  1436	                  /usr/bin
  1437	                  /usr/ucb
  1438	                  /usr/etc
  1439	                                         37
  1440	               One file distributed with SunOS, /_u_s_r/_e_t_c/_r_e_s_t_o_r_e,  is  dis-
  1441	          tributed  with  the  setuid  bit  set  on  it, and should not be,
  1442	          because of a security hole.  You should be  sure  to  remove  the
  1443	          setuid bit from this program by executing the command
  1444	                  # chmod u-s /usr/etc/restore
  1445	          3.3.1.2   Finding World-Writable Files
  1446	               World-writable files, particularly system files,  can  be  a
  1447	          security  hole if a cracker gains access to your system and modi-
  1448	          fies  them.    Additionally,   world-writable   directories   are
  1449	          dangerous,  since  they allow a cracker to add or delete files as
  1450	          he wishes.  The _f_i_n_d command to find all world-writable files is
  1451	                  # find / -perm -2 -print
  1452	          In this case, we do not use the  -_t_y_p_e  option  to  restrict  the
  1453	          search,  since  we  are  interested in directories and devices as
  1454	          well as files.  The -_2 specifies the world write bit (in octal).
  1455	               This list of files will be fairly  long,  and  will  include
  1456	          some files that _s_h_o_u_l_d be world writable.  You should not be con-
  1457	          cerned if terminal devices  in  /_d_e_v  are  world  writable.   You
  1458	          should  also  not be concerned about line printer error log files
  1459	          being world writable.  Finally, symbolic links may be world writ-
  1460	          able  -  the permissions on a symbolic link, although they exist,
  1461	          have no meaning.
  1462	          3.3.1.3   Finding Unowned Files
  1463	               Finding files that are owned by nonexistent users can  often
  1464	          be  a clue that a cracker has gained access to your system.  Even
  1465	          if this is not the case, searching for these files gives  you  an
  1466	          opportunity  to  clean  up files that should have been deleted at
  1467	          the same time the user herself was deleted.  The command to  find
  1468	          unowned files is
  1469	                  # find / -nouser -print
  1470	          The -_n_o_u_s_e_r option matches files that are owned by a user id  not
  1471	          contained   in  the  /_e_t_c/_p_a_s_s_w_d  database.   A  similar  option,
  1472	          -_n_o_g_r_o_u_p, matches files owned by nonexistent groups.  To find all
  1473	          files  owned by nonexistent users _o_r groups, you would use the -_o
  1474	          option as follows:
  1475	                                         38
  1476	                  # find / -nouser -o -nogroup -print
  1477	          3.3.1.4   Finding .rhosts Files
  1478	               As mentioned in Section 2.2.1.2, users should be  prohibited
  1479	          from having ._r_h_o_s_t_s files in their accounts.  To search for this,
  1480	          it is only necessary to search the parts of the file system  that
  1481	          contain home directories (i.e., you can skip / and /_u_s_r):
  1482	                  # find /home -name .rhosts -print
  1483	          The -_n_a_m_e option indicates that the complete  name  of  any  file
  1484	          whose name matches ._r_h_o_s_t_s should be printed on the screen.
  1485	          3.3.2   Checklists
  1486	               Checklists can be a useful tool for discovering unauthorized
  1487	          changes  made  to  system  directories.  They aren't practical on
  1488	          file systems that contain users'  home  directories  since  these
  1489	          change  all  the time.  A checklist is a listing of all the files
  1490	          contained in a group of directories: their sizes, owners, modifi-
  1491	          cation  dates, and so on.  Periodically, this information is col-
  1492	          lected and compared with the information in the master checklist.
  1493	          Files  that  do  not  match in all attributes can be suspected of
  1494	          having been changed.
  1495	               There are several utilities that implement checklists avail-
  1496	          able from public software sites (see Section 4).  However, a sim-
  1497	          ple utility can be constructed using only the  standard  UNIX  _l_s
  1498	          and _d_i_f_f commands.
  1499	               First, use the _l_s command [Sun88a, 285] to generate a master
  1500	          list.  This is best done immediately after installing the operat-
  1501	          ing system, but can be done at any time provided you're confident
  1502	          about the correctness of the files on the disk.  A sample command
  1503	          is shown below.
  1504	                  # ls -aslgR /bin /etc /usr > MasterChecklist
  1505	          The file _M_a_s_t_e_r_C_h_e_c_k_l_i_s_t now contains a complete list of all  the
  1506	          files  in  these  directories.  You will probably want to edit it
  1507	          and delete the lines for files you know will  be  changing  often
  1508	          (e.g.,   /_e_t_c/_u_t_m_p,  /_u_s_r/_a_d_m/_a_c_c_t).   The  _M_a_s_t_e_r_C_h_e_c_k_l_i_s_t  file
  1509	          should be stored somewhere safe where a cracker  is  unlikely  to
  1510	                                         39
  1511	          find  it  (since  he could otherwise just change the data in it):
  1512	          either on a different computer system, or on magnetic tape.
  1513	               To search for changes in the file system, run the  above  _l_s
  1514	          command  again,  saving  the  output  in  some  other  file,  say
  1515	          _C_u_r_r_e_n_t_L_i_s_t.  Now use the _d_i_f_f command [Sun88a, 150]  to  compare
  1516	          the two files:
  1517	                  # diff MasterChecklist CurrentList
  1518	          Lines that are only in the master checklist will be printed  pre-
  1519	          ceded  by  a  %%<,''  and lines that are only in the current list
  1520	          will be preceded by a %%>.'' If there is one  line  for  a  file,
  1521	          preceded  by  a  %%<,'' this means that the file has been deleted
  1522	          since the master checklist was created.  If there is one line for
  1523	          a  file,  preceded  by a %%>,'' this means that the file has been
  1524	          created since the master checklist was created.  If there are two
  1525	          lines  for  a single file, one preceded by %%<'' and the other by
  1526	          %%>,'' this indicates that some attribute of the file has changed
  1527	          since the master checklist was created.
  1528	               By carefully  constructing  the  master  checklist,  and  by
  1529	          remembering  to update it periodically (you can replace it with a
  1530	          copy of _C_u_r_r_e_n_t_L_i_s_t, once you're sure the differences between the
  1531	          lists are harmless), you can easily monitor your system for unau-
  1532	          thorized changes.  The software packages available from the  pub-
  1533	          lic  software  distribution  sites  implement  basically the same
  1534	          scheme as the one here, but offer many more options for  control-
  1535	          ling what is examined and reported.
  1536	          3.3.3   Backups
  1537	               It is impossible to overemphasize the need for a good backup
  1538	          strategy.   File  system backups not only protect you in the even
  1539	          of hardware failure or accidental deletions, but they  also  pro-
  1540	          tect  you  against  unauthorized  file  system  changes made by a
  1541	          cracker.
  1542	               A good backup strategy will dump the entire system at  level
  1543	          zero  (a  %%full''  dump)  at  least  once  a month.  Partial (or
  1544	          %%incremental'') dumps should be done at least twice a week,  and
  1545	          ideally  they  should  be  done daily.  The _d_u_m_p command [Sun88a,
  1546	          1612-1614] is recommended over other programs  such  as  _t_a_r  and
  1547	          _c_p_i_o.   This is because only _d_u_m_p is capable of creating a backup
  1548	          that can be used to restore a disk to the exact state it  was  in
  1549	          when  it was dumped.  The other programs do not take into account
  1550	          files deleted or renamed between dumps, and do  not  handle  some
  1551	          specialized database files properly.
  1552	                                         40
  1553	          3.4   KNOW YOUR SYSTEM
  1554	               Aside from running large monitoring programs such  as  those
  1555	          described in the previous sections, simple everyday UNIX commands
  1556	          can also be useful for spotting security violations.  By  running
  1557	          these  commands often, whenever you have a free minute (for exam-
  1558	          ple, while waiting for someone to answer  the  phone),  you  will
  1559	          become  used  to  seeing  a specific pattern of output.  By being
  1560	          familiar with the processes normally running on your system,  the
  1561	          times different users typically log in, and so on, you can easily
  1562	          detect when something is out of the ordinary.
  1563	          3.4.1   The ps Command
  1564	               The _p_s command [Sun88a, 399-402]  displays  a  list  of  the
  1565	          processes  running  on your system.  _P_s has numerous options, too
  1566	          many to list here.  Generally, however, for the purpose of  moni-
  1567	          toring, the option string -_a_l_x_w_w is the most useful.*  On  a  Sun
  1568	          system  running  SunOS 4.0, you should expect to see at least the
  1569	          following:
  1570	               _s_w_a_p_p_e_r, _p_a_g_e_d_a_e_m_o_n
  1571	                    System programs that help the virtual memory system.
  1572	               /_s_b_i_n/_i_n_i_t
  1573	                    The _i_n_i_t process, which  is  responsible  for  numerous
  1574	                    tasks,  including bringing up login processes on termi-
  1575	                    nals.
  1576	               _p_o_r_t_m_a_p, _y_p_b_i_n_d, _y_p_s_e_r_v
  1577	                    Parts of the Yellow Pages system.
  1578	               _b_i_o_d, _n_f_s_d, _r_p_c._m_o_u_n_t_d, _r_p_c._q_u_o_t_a_d, _r_p_c._l_o_c_k_d
  1579	                    Parts of the Network File System (NFS).  If the  system
  1580	                    you  are  looking  at  is  not  a file server, the _n_f_s_d
  1581	                    processes probably won't exist.
  1582	               _r_a_r_p_d, _r_p_c._b_o_o_t_p_a_r_a_m_d
  1583	                    Part of the system  that  allows  diskless  clients  to
  1584	                    boot.
  1585	               Other commands you should expect to  see  are  _u_p_d_a_t_e  (file
  1586	          system  updater);  _g_e_t_t_y  (one  per  terminal  and  one  for  the
  1587	          _________________________
  1588	            * This is true for Berkeley-based systems.  On  System  V  sys-
  1589	          tems, the option string -_e_l_f should be used instead.
  1590	                                         41
  1591	          console); _l_p_d (line printer daemon); _i_n_e_t_d (Internet daemon,  for
  1592	          starting other network servers); _s_h and _c_s_h (the Bourne shell and
  1593	          C shell, one or more per logged in user).  In addition, if  there
  1594	          are  users  logged in, you'll probably see invocations of various
  1595	          compilers, text editors, and word processing programs.
  1596	          3.4.2   The who and w Commands
  1597	               The _w_h_o command, as mentioned previously, displays the  list
  1598	          of  users  currently  logged  in  on the system.  By running this
  1599	          periodically, you can learn at what times during the day  various
  1600	          users  log  in.   Then,  when you see someone logged in at a dif-
  1601	          ferent time, you can investigate and make sure that it's  legiti-
  1602	          mate.
  1603	               The _w command [Sun88a, 588] is somewhat of a  cross  between
  1604	          _w_h_o  and  _p_s.   Not  only does it show a list of who is presently
  1605	          logged in, but it also displays how  long  they  have  been  idle
  1606	          (gone  without  typing  anything),  and  what  command  they  are
  1607	          currently running.
  1608	          3.4.3   The ls Command
  1609	               Simple as its function is, _l_s is actually  very  useful  for
  1610	          detecting  file system problems.  Periodically, you should use _l_s
  1611	          on the  various  system  directories,  checking  for  files  that
  1612	          shouldn't be there.  Most of the time, these files will have just
  1613	          %%landed'' somewhere by accident.  However, by  keeping  a  close
  1614	          watch on things, you will be able to detect a cracker long before
  1615	          you might have otherwise.
  1616	               When using _l_s to check for oddities, be sure to use  the  -_a
  1617	          option,  which  lists  files whose names begin with a period (.).
  1618	          Be particularly alert for files or directories named %%...'',  or
  1619	          %%..(space)'',  which  many  crackers  like  to use.  (Of course,
  1620	          remember that %%.'' and %%..'' are supposed to be there.)
  1621	          3.5   KEEP YOUR EYES OPEN
  1622	               Monitoring for security breaches is every bit  as  important
  1623	          as  preventing  them  in the first place.  Because it's virtually
  1624	          impossible to make a system totally secure, there is  always  the
  1625	          chance,  no matter how small, that a cracker will be able to gain
  1626	                                         42
  1627	          access.  Only by monitoring can this be detected and remedied.
  1628	                                         43
  1629	                                         44
  1630	                                      SECTION 4
  1631	                           SOFTWARE FOR IMPROVING SECURITY
  1632	               Because security is of great concern to many sites, a wealth
  1633	          of software has been developed for improving the security of UNIX
  1634	          systems.  Much of this software has been developed  at  universi-
  1635	          ties and other public institutions, and is available free for the
  1636	          asking.   This  section  describes  how  this  software  can   be
  1637	          obtained, and mentions some of the more important programs avail-
  1638	          able.
  1639	          4.1   OBTAINING FIXES AND NEW VERSIONS
  1640	               Several sites on the Internet maintain large repositories of
  1641	          public-domain  and  freely  distributable software, and make this
  1642	          material available for anonymous  FTP.   This  section  describes
  1643	          some of the larger repositories.
  1644	          4.1.1   Sun Fixes on UUNET
  1645	               Sun Microsystems has contracted  with  UUNET  Communications
  1646	          Services,  Inc.  to make fixes for bugs in Sun software available
  1647	          via anonymous FTP.  You can access these fixes by using  the  _f_t_p
  1648	          command  [Sun88a,  195-201]  to  connect  to the host _f_t_p._u_u._n_e_t.
  1649	          Then change into the directory _s_u_n-_f_i_x_e_s, and obtain a  directory
  1650	          listing, as shown in the example on the following page.
  1651	                                         45
  1652	          % ftp ftp.uu.net
  1653	          Connected to uunet.UU.NET.
  1654	          220 uunet FTP server (Version 5.93 Tue Mar 20 11:01:52 EST 1990) ready.
  1655	          Name (ftp.uu.net:davy): anonymous
  1656	          331 Guest login ok, send ident as password.
  1657	          Password:               _e_n_t_e_r _y_o_u_r _m_a_i_l _a_d_d_r_e_s_s _y_o_u_r_n_a_m_e@_y_o_u_r_h_o_s_t _h_e_r_e
  1658	          230 Guest login ok, access restrictions apply.
  1659	          ftp> cd sun-fixes
  1660	          _2_5_0 _C_W_D _c_o_m_m_a_n_d _s_u_c_c_e_s_s_f_u_l.
  1661	          _f_t_p> _d_i_r
  1662	          200 PORT command successful.
  1663	          150 Opening ASCII mode data connection for /bin/ls.
  1664	          total 2258
  1665	          -rw-r--r--  1 38       22           4558 Aug 31  1989 README
  1666	          -rw-r--r--  1 38       22         484687 Dec 14  1988 ddn.tar.Z
  1667	          -rw-r--r--  1 38       22         140124 Jan 13  1989 gated.sun3.Z
  1668	          -rwxr-xr-x  1 38       22          22646 Dec 14  1988 in.ftpd.sun3.Z
  1669	          .....
  1670	          .....
  1671	          -rw-r--r--  1 38       22          72119 Aug 31  1989 sendmail.sun3.Z
  1672	          -rwxr-xr-x  1 38       22          99147 Aug 31  1989 sendmail.sun4.Z
  1673	          -rw-r--r--  1 38       22           3673 Jul 11  1989 wall.sun3.Z
  1674	          -rw-r--r--  1 38       22           4099 Jul 11  1989 wall.sun4.Z
  1675	          -rwxr-xr-x  1 38       22           7955 Jan 18  1989 ypbind.sun3.Z
  1676	          -rwxr-xr-x  1 38       22           9237 Jan 18  1989 ypbind.sun4.Z
  1677	          226 Transfer complete.
  1678	          1694 bytes received in 0.39 seconds (4.2 Kbytes/s)
  1679	          ftp> quit
  1680	          _2_2_1 _G_o_o_d_b_y_e.
  1681	          %
  1682	          The file _R_E_A_D_M_E contains a brief description of what each file in
  1683	          this directory contains, and what is required to install the fix.
  1684	          4.1.2   Berkeley Fixes
  1685	               The University of California at Berkeley  also  makes  fixes
  1686	          available via anonymous FTP; these fixes pertain primarily to the
  1687	          current release of BSD UNIX (currently  release  4.3).   However,
  1688	          even if you are not running their software, these fixes are still
  1689	          important, since many vendors (Sun, DEC,  Sequent  ,  etc.)  base
  1690	          their software on the Berkeley releases.
  1691	               The Berkeley fixes are available for anonymous FTP from  the
  1692	          host  _u_c_b_a_r_p_a._b_e_r_k_e_l_e_y._e_d_u  in  the directory _4._3/_u_c_b-_f_i_x_e_s.  The
  1693	          file _I_N_D_E_X in this directory describes what each file contains.
  1694	               Berkeley also distributes new versions of _s_e_n_d_m_a_i_l and _n_a_m_e_d
  1695	          [Sun88a,  1758-1760,  1691-1692] from this machine.  New versions
  1696	                                         46
  1697	          of these commands are stored in the _4._3 directory, usually in the
  1698	          files _s_e_n_d_m_a_i_l._t_a_r._Z and _b_i_n_d._t_a_r._Z, respectively.
  1699	          4.1.3   Simtel-20 and UUNET
  1700	               The two largest general-purpose software repositories on the
  1701	          Internet are the hosts _w_s_m_r-_s_i_m_t_e_l_2_0._a_r_m_y._m_i_l and _f_t_p._u_u._n_e_t.
  1702	               _w_s_m_r-_s_i_m_t_e_l_2_0._a_r_m_y._m_i_l is a TOPS-20 machine operated by  the
  1703	          U.  S. Army at White Sands Missile Range, New Mexico.  The direc-
  1704	          tory _p_d_2:<_u_n_i_x-_c> contains a large amount of UNIX software,  pri-
  1705	          marily  taken  from  the  _c_o_m_p._s_o_u_r_c_e_s newsgroups.  The file _0_0_0-
  1706	          _m_a_s_t_e_r-_i_n_d_e_x._t_x_t contains a master list and description  of  each
  1707	          piece  of  software  available  in the repository.  The file _0_0_0-
  1708	          _i_n_t_r_o-_u_n_i_x-_s_w._t_x_t contains information on the mailing  list  used
  1709	          to  announce  new software, and describes the procedures used for
  1710	          transferring files from the archive with FTP.
  1711	               _f_t_p._u_u._n_e_t is operated  by  UUNET  Communications  Services,
  1712	          Inc.  in Falls Church, Virginia.  This company sells Internet and
  1713	          USENET access to sites all over  the  country  (and  internation-
  1714	          ally).   The software posted to the following USENET source news-
  1715	          groups is stored here, in directories of the same name:
  1716	                  comp.sources.games
  1717	                  comp.sources.misc
  1718	                  comp.sources.sun
  1719	                  comp.sources.unix
  1720	                  comp.sources.x
  1721	          Numerous other distributions, such as all the  freely  distribut-
  1722	          able  Berkeley  UNIX  source  code, Internet Request for Comments
  1723	          (RFCs), and so on are also stored on this machine.
  1724	          4.1.4   Vendors
  1725	               Many vendors make fixes for bugs in their software available
  1726	          electronically,  either  via  mailing lists or via anonymous FTP.
  1727	          You should contact your vendor to find out  if  they  offer  this
  1728	          service,  and  if  so, how to access it.  Some vendors that offer
  1729	          these services include  Sun  Microsystems  (see  above),  Digital
  1730	          Equipment  Corp.,  the  University of California at Berkeley (see
  1731	          above), and Apple Computer.
  1732	                                         47
  1733	          4.2   THE NPASSWD COMMAND
  1734	               The _n_p_a_s_s_w_d  command,  developed  by  Clyde  Hoover  at  the
  1735	          University  of  Texas  at Austin, is intended to be a replacement
  1736	          for the standard UNIX _p_a_s_s_w_d command [Sun88a, 379],  as  well  as
  1737	          the  Sun _y_p_p_a_s_s_w_d command [Sun88a, 611].  _n_p_a_s_s_w_d makes passwords
  1738	          more secure by refusing to allow users to select  insecure  pass-
  1739	          words.  The following capabilities are provided by _n_p_a_s_s_w_d:
  1740	               o+    Configurable minimum password length
  1741	               o+    Configurable to force users to use mixed case or digits
  1742	                    and punctuation
  1743	               o+    Checking for %%simple'' passwords such  as  a  repeated
  1744	                    letter
  1745	               o+    Checking against the host name and other  host-specific
  1746	                    information
  1747	               o+    Checking against the login name, first and last  names,
  1748	                    and so on
  1749	               o+    Checking for words in various  dictionaries,  including
  1750	                    the system dictionary.
  1751	               The _n_p_a_s_s_w_d distribution is available for anonymous FTP from
  1752	          _e_m_x._u_t_e_x_a_s._e_d_u in the directory _p_u_b/_n_p_a_s_s_w_d.
  1753	          4.3   THE COPS PACKAGE
  1754	               COPS is a  security  tool  for  system  administrators  that
  1755	          checks  for  numerous  common  security problems on UNIX systems,
  1756	          including many of the things described in this document.  COPS is
  1757	          a  collection  of shell scripts and C programs that can easily be
  1758	          run on almost any UNIX variant.  Among other  things,  it  checks
  1759	          the  following items and sends the results to the system adminis-
  1760	          trator:
  1761	               o+    Checks  /_d_e_v/_k_m_e_m   and   other   devices   for   world
  1762	                    read/writability.
  1763	               o+    Checks  special/important  files  and  directories  for
  1764	                    %%bad'' modes (world writable, etc.).
  1765	               o+    Checks for easily guessed passwords.
  1766	                                         48
  1767	               o+    Checks for duplicate user ids, invalid  fields  in  the
  1768	                    password file, etc.
  1769	               o+    Checks for duplicate group ids, invalid fields  in  the
  1770	                    group file, etc.
  1771	               o+    Checks all users' home directories  and  their  ._c_s_h_r_c,
  1772	                    ._l_o_g_i_n,  ._p_r_o_f_i_l_e, and ._r_h_o_s_t_s files for security prob-
  1773	                    lems.
  1774	               o+    Checks all  commands  in  the  /_e_t_c/_r_c  files  [Sun88a,
  1775	                    1724-1725] and _c_r_o_n files [Sun88a, 1606-1607] for world
  1776	                    writability.
  1777	               o+    Checks for bad %%root'' paths, NFS file system exported
  1778	                    to the world, etc.
  1779	               o+    Includes an expert system that checks to see if a given
  1780	                    user  (usually %%root'') can be compromised, given that
  1781	                    certain rules are true.
  1782	               o+    Checks for _c_h_a_n_g_e_s in the setuid status of programs  on
  1783	                    the system.
  1784	               The COPS package is  available  from  the  _c_o_m_p._s_o_u_r_c_e_s._u_n_i_x
  1785	          archive  on  _f_t_p._u_u._n_e_t,  and  also  from the repository on _w_s_m_r-
  1786	          _s_i_m_t_e_l_2_0._a_r_m_y._m_i_l.
  1787	          4.4   SUN C2 SECURITY FEATURES
  1788	               With the release of SunOS 4.0,  Sun  has  included  security
  1789	          features  that  allow  the system to operate at a higher level of
  1790	          security, patterned after the C2* classification.  These features
  1791	          can be installed as one of the options when installing the system
  1792	          from the distribution tapes.  The security features added by this
  1793	          option include
  1794	               o+    Audit trails that record all login  and  logout  times,
  1795	                    the  execution of administrative commands, and the exe-
  1796	                    cution of privileged (setuid) operations.
  1797	               o+    A more secure password file mechanism  (%%shadow  pass-
  1798	                    word  file'')  that  prevents crackers from obtaining a
  1799	                    list of the encrypted passwords.
  1800	          _________________________
  1801	            * C2 is one of several security classifications defined by  the
  1802	          National  Computer Security Center, and is described in [NCSC85],
  1803	          the %%orange book.''
  1804	                                         49
  1805	               o+    DES encryption capability.
  1806	               o+    A (more) secure NFS implementation that uses public-key
  1807	                    encryption  to authenticate the users of the system and
  1808	                    the hosts on the network, to be sure  they  really  are
  1809	                    who they claim to be.
  1810	          These security features are described in detail in [Sun88c].
  1811	          4.5   KERBEROS
  1812	               Kerberos [Stei88] is an authentication system  developed  by
  1813	          the  Athena Project at the Massachusetts Institute of Technology.
  1814	          Kerberos  is  a  third-party  authentication  service,  which  is
  1815	          trusted by other network services.  When a user logs in, Kerberos
  1816	          authenticates that user (using a password), and provides the user
  1817	          with a way to prove her identity to other servers and hosts scat-
  1818	          tered around the network.
  1819	               This authentication is then used by programs such as  _r_l_o_g_i_n
  1820	          [Sun88a,  418-419]  to  allow  the  user to log in to other hosts
  1821	          without a password (in place of the ._r_h_o_s_t_s file).  The authenti-
  1822	          cation is also used by the mail system in order to guarantee that
  1823	          mail is delivered to the correct person, as well as to  guarantee
  1824	          that  the sender is who he claims to be.  NFS has also been modi-
  1825	          fied by M.I.T. to work with Kerberos, thereby making  the  system
  1826	          much more secure.
  1827	               The overall effect of installing Kerberos and  the  numerous
  1828	          other  programs  that  go  with  it is to virtually eliminate the
  1829	          ability of users to %%spoof'' the system into believing they  are
  1830	          someone   else.    Unfortunately,  installing  Kerberos  is  very
  1831	          intrusive, requiring the modification or replacement of  numerous
  1832	          standard  programs.  For this reason, a source license is usually
  1833	          necessary.  There are plans to make Kerberos a part of 4.4BSD, to
  1834	          be  released by the University of California at Berkeley sometime
  1835	          in 1990.
  1836	                                         50
  1837	                                      SECTION 5
  1838	                             KEEPING ABREAST OF THE BUGS
  1839	               One of the hardest things about keeping a system  secure  is
  1840	          finding  out  about the security holes before a cracker does.  To
  1841	          combat this, there are several sources of information you can and
  1842	          should make use of on a regular basis.
  1843	          5.1   THE COMPUTER EMERGENCY RESPONSE TEAM
  1844	               The Computer Emergency Response Team (CERT) was  established
  1845	          in December 1988 by the Defense Advanced Research Projects Agency
  1846	          to address computer security concerns of research  users  of  the
  1847	          Internet.   It  is operated by the Software Engineering Institute
  1848	          at Carnegie-Mellon University.  The CERT serves as a focal  point
  1849	          for  the  reporting of security violations, and the dissemination
  1850	          of security advisories to the Internet community.   In  addition,
  1851	          the  team works with vendors of various systems in order to coor-
  1852	          dinate the fixes for security problems.
  1853	               The CERT sends out security advisories to the  _c_e_r_t-_a_d_v_i_s_o_r_y
  1854	          mailing  list  whenever appropriate.  They also operate a 24-hour
  1855	          hotline that can be called to  report  security  problems  (e.g.,
  1856	          someone  breaking into your system), as well as to obtain current
  1857	          (and accurate) information about rumored security problems.
  1858	               To join the _c_e_r_t-_a_d_v_i_s_o_r_y mailing list, send  a  message  to
  1859	          _c_e_r_t@_c_e_r_t._s_e_i._c_m_u._e_d_u  and  ask  to be added to the mailing list.
  1860	          Past advisories are available for anonymous  FTP  from  the  host
  1861	          _c_e_r_t._s_e_i._c_m_u._e_d_u.  The 24-hour hotline number is (412) 268-7090.
  1862	          5.2   DDN MANAGEMENT BULLETINS
  1863	               The _D_D_N _M_a_n_a_g_e_m_e_n_t _B_u_l_l_e_t_i_n is distributed electronically by
  1864	          the  Defense  Data Network (DDN) Network Information Center under
  1865	          contract to the Defense Communications Agency.  It is a means  of
  1866	          communicating  official policy, procedures, and other information
  1867	          of concern to management personnel at DDN facilities.
  1868	               The _D_D_N _S_e_c_u_r_i_t_y _B_u_l_l_e_t_i_n is distributed  electronically  by
  1869	          the  DDN  SCC (Security Coordination Center), also under contract
  1870	          to DCA, as a means of communicating information  on  network  and
  1871	                                         51
  1872	          host  security  exposures,  fixes,  and  concerns to security and
  1873	          management personnel at DDN facilities.
  1874	               Anyone may join the mailing lists for these two bulletins by
  1875	          sending  a  message to _n_i_c@_n_i_c._d_d_n._m_i_l and asking to be placed on
  1876	          the mailing lists.
  1877	          5.3   SECURITY-RELATED MAILING LISTS
  1878	               There are several other mailing lists operated on the Inter-
  1879	          net  that  pertain  directly  or  indirectly  to various security
  1880	          issues.  Some of the more useful ones are described below.
  1881	          5.3.1   Security
  1882	               The UNIX Security  mailing  list  exists  to  notify  system
  1883	          administrators  of  security  problems  _b_e_f_o_r_e they become common
  1884	          knowledge, and to provide security enhancement  information.   It
  1885	          is a restricted-access list, open only to people who can be veri-
  1886	          fied as being principal systems people at a  site.   Requests  to
  1887	          join  the  list must be sent by either the site contact listed in
  1888	          the Network Information Center's  WHOIS  database,  or  from  the
  1889	          %%root''  account  on  one  of the major site machines.  You must
  1890	          include the destination address you want on the list, an  indica-
  1891	          tion  of  whether  you  want  to be on the mail reflector list or
  1892	          receive weekly digests, the electronic  mail  address  and  voice
  1893	          telephone  number  of  the  site contact if it isn't you, and the
  1894	          name, address, and telephone number of your  organization.   This
  1895	          information should be sent to _s_e_c_u_r_i_t_y-_r_e_q_u_e_s_t@_c_p_d._c_o_m.
  1896	          5.3.2   RISKS
  1897	               The RISKS digest is a component of the ACM Committee on Com-
  1898	          puters and Public Policy, moderated by Peter G. Neumann.  It is a
  1899	          discussion forum on risks to the public in computers and  related
  1900	          systems,  and along with discussing computer security and privacy
  1901	          issues, has discussed such subjects as the  Stark  incident,  the
  1902	          shooting  down of the Iranian airliner in the Persian Gulf (as it
  1903	          relates to the computerized weapons systems), problems in air and
  1904	          railroad  traffic  control  systems, software engineering, and so
  1905	          on.   To  join  the  mailing  list,  send  a  message  to  _r_i_s_k_s-
  1906	          _r_e_q_u_e_s_t@_c_s_l._s_r_i._c_o_m.   This  list is also available in the USENET
  1907	          newsgroup _c_o_m_p._r_i_s_k_s.
  1908	                                         52
  1909	          5.3.3   TCP-IP
  1910	               The TCP-IP list is intended to act as a discussion forum for
  1911	          developers  and maintainers of implementations of the TCP/IP pro-
  1912	          tocol suite.  It also discusses network-related security problems
  1913	          when  they  involve  programs providing network services, such as
  1914	          _s_e_n_d_m_a_i_l.  To join the TCP-IP list, send  a  message  to  _t_c_p-_i_p-
  1915	          _r_e_q_u_e_s_t@_n_i_c._d_d_n._m_i_l.   This  list is also available in the USENET
  1916	          newsgroup _c_o_m_p._p_r_o_t_o_c_o_l_s._t_c_p-_i_p.
  1917	          5.3.4   SUN-SPOTS, SUN-NETS, SUN-MANAGERS
  1918	               The SUN-SPOTS, SUN-NETS, and SUN-MANAGERS lists are all dis-
  1919	          cussion  groups  for users and administrators of systems supplied
  1920	          by Sun Microsystems.  SUN-SPOTS is a fairly  general  list,  dis-
  1921	          cussing  everything  from  hardware configurations to simple UNIX
  1922	          questions.   To  subscribe,  send   a   message   to   _s_u_n-_s_p_o_t_s-
  1923	          _r_e_q_u_e_s_t@_r_i_c_e._e_d_u.   This  list  is  also  available in the USENET
  1924	          newsgroup _c_o_m_p._s_y_s._s_u_n.
  1925	               SUN-NETS is a discussion list for items pertaining  to  net-
  1926	          working  on  Sun  systems.   Much of the discussion is related to
  1927	          NFS, Yellow Pages, and name servers.  To subscribe, send  a  mes-
  1928	          sage to _s_u_n-_n_e_t_s-_r_e_q_u_e_s_t@_u_m_i_a_c_s._u_m_d._e_d_u.
  1929	               SUN-MANAGERS is a discussion list for Sun system administra-
  1930	          tors  and  covers  all  aspects of Sun system administration.  To
  1931	          subscribe, send a message to _s_u_n-_m_a_n_a_g_e_r_s-_r_e_q_u_e_s_t@_e_e_c_s._n_w_u._e_d_u.
  1932	          5.3.5   VIRUS-L
  1933	               The VIRUS-L list is a forum for the discussion  of  computer
  1934	          virus  experiences, protection software, and related topics.  The
  1935	          list is open to the public, and is implemented as a mail  reflec-
  1936	          tor,  not  a  digest.  Most of the information is related to per-
  1937	          sonal computers, although some of it may be applicable to  larger
  1938	          systems.  To subscribe, send the line
  1939	                  SUB VIRUS-L _y_o_u_r _f_u_l_l _n_a_m_e
  1940	          to the address _l_i_s_t_s_e_r_v%_l_e_h_i_i_b_m_1._b_i_t_n_e_t@_m_i_t_v_m_a._m_i_t._e_d_u.
  1941	                                         53
  1942	                                         54
  1943	                                      SECTION 6
  1944	                                  SUGGESTED READING
  1945	               This section suggests some alternate sources of  information
  1946	          pertaining to the security and administration of the UNIX operat-
  1947	          ing system.
  1948	          _U_N_I_X _S_y_s_t_e_m _A_d_m_i_n_i_s_t_r_a_t_i_o_n _H_a_n_d_b_o_o_k
  1949	          Evi Nemeth, Garth Snyder, Scott Seebass
  1950	          Prentice Hall, 1989, $26.95
  1951	               This is perhaps the best general-purpose book on UNIX system
  1952	               administration  currently on the market.  It covers Berkeley
  1953	               UNIX, SunOS, and System V.  The 26 chapters  and  17  appen-
  1954	               dices  cover numerous topics, including booting and shutting
  1955	               down the system, the file system,  configuring  the  kernel,
  1956	               adding  a  disk,  the line printer spooling system, Berkeley
  1957	               networking, _s_e_n_d_m_a_i_l, and _u_u_c_p.  Of particular interest  are
  1958	               the  chapters  on  running  as  the super-user, backups, and
  1959	               security.
  1960	          _U_N_I_X _O_p_e_r_a_t_i_n_g _S_y_s_t_e_m _S_e_c_u_r_i_t_y
  1961	          F. T. Grammp and R. H. Morris
  1962	          AT&T Bell Laboratories Technical Journal
  1963	          October 1984
  1964	               This is an excellent discussion of some of the  more  common
  1965	               security  problems in UNIX and how to avoid them, written by
  1966	               two of Bell Labs' most prominent security experts.
  1967	          _P_a_s_s_w_o_r_d _S_e_c_u_r_i_t_y: _A _C_a_s_e _H_i_s_t_o_r_y
  1968	          Robert Morris and Ken Thompson
  1969	          Communications of the ACM
  1970	          November 1979
  1971	               An excellent discussion on the problem of password security,
  1972	               and  some interesting information on how easy it is to crack
  1973	               passwords and why.  This document is  usually  reprinted  in
  1974	               most vendors' UNIX documentation.
  1975	          _O_n _t_h_e _S_e_c_u_r_i_t_y _o_f _U_N_I_X
  1976	          Dennis M. Ritchie
  1977	          May 1975
  1978	               A discussion on UNIX security from one of the original crea-
  1979	               tors  of  the system.  This document is usually reprinted in
  1980	               most vendors' UNIX documentation.
  1981	          _T_h_e _C_u_c_k_o_o'_s _E_g_g
  1982	                                         55
  1983	          Clifford Stoll
  1984	          Doubleday, 1989, $19.95
  1985	               An excellent story of Stoll's experiences tracking down  the
  1986	               German  crackers who were breaking into his systems and sel-
  1987	               ling the data they found to the KGB.   Written  at  a  level
  1988	               that nontechnical users can easily understand.
  1989	          _S_y_s_t_e_m _a_n_d _N_e_t_w_o_r_k _A_d_m_i_n_i_s_t_r_a_t_i_o_n
  1990	          Sun Microsystems
  1991	          May, 1988
  1992	               Part of the SunOS documentation,  this  manual  covers  most
  1993	               aspects  of  Sun  system  administration, including security
  1994	               issues.  A must for anyone operating a  Sun  system,  and  a
  1995	               pretty good reference for other UNIX systems as well.
  1996	          _S_e_c_u_r_i_t_y _P_r_o_b_l_e_m_s _i_n _t_h_e _T_C_P/_I_P _P_r_o_t_o_c_o_l _S_u_i_t_e
  1997	          S. M. Bellovin
  1998	          ACM Computer Communications Review
  1999	          April, 1989
  2000	               An interesting discussion of some of the  security  problems
  2001	               with  the  protocols  in  use on the Internet and elsewhere.
  2002	               Most of these problems are far beyond  the  capabilities  of
  2003	               the  average  cracker, but it is still important to be aware
  2004	               of them.  This article is technical in nature,  and  assumes
  2005	               familiarity with the protocols.
  2006	          _A _W_e_a_k_n_e_s_s _i_n _t_h_e _4._2_B_S_D _U_N_I_X _T_C_P/_I_P _S_o_f_t_w_a_r_e
  2007	          Robert T. Morris
  2008	          AT&T Bell Labs Computer Science Technical Report 117
  2009	          February, 1985
  2010	               An interesting article from the author of the Internet worm,
  2011	               which  describes  a  method  that  allows  remote  hosts  to
  2012	               %%spoof'' a host into believing they  are  trusted.   Again,
  2013	               this article is technical in nature, and assumes familiarity
  2014	               with the protocols.
  2015	          _C_o_m_p_u_t_e_r _V_i_r_u_s_e_s _a_n_d _R_e_l_a_t_e_d _T_h_r_e_a_t_s: _A _M_a_n_a_g_e_m_e_n_t _G_u_i_d_e
  2016	          John P. Wack and Lisa J. Carnahan
  2017	          National Institute of Standards and Technology
  2018	          Special Publication 500-166
  2019	               This document  provides  a  good  introduction  to  viruses,
  2020	               worms,  trojan horses, and so on, and explains how they work
  2021	               and how they are used to attack computer  systems.   Written
  2022	               for the nontechnical user, this is a good starting point for
  2023	               learning about these security problems.  This  document  can
  2024	               be  ordered  for  $2.50  from  the U. S. Government Printing
  2025	               Office, document number 003-003-02955-6.
  2026	                                         56
  2027	                                      SECTION 7
  2028	                                     CONCLUSIONS
  2029	               Computer security is playing an increasingly important  role
  2030	          in our lives as more and more operations become computerized, and
  2031	          as computer networks become more widespread.  In order to protect
  2032	          your  systems  from snooping and vandalism by unauthorized crack-
  2033	          ers, it is necessary to enable  the  numerous  security  features
  2034	          provided by the UNIX system.
  2035	               In this document, we have covered the major areas  that  can
  2036	          be made more secure:
  2037	               o+    Account security
  2038	               o+    Network security
  2039	               o+    File system security.
  2040	          Additionally, we have discussed how to monitor for security  vio-
  2041	          lations, where to obtain security-related software and bug fixes,
  2042	          and numerous mailing lists for finding out about  security  prob-
  2043	          lems that have been discovered.
  2044	               Many crackers are not interested in breaking  into  specific
  2045	          systems, but rather will break into any system that is vulnerable
  2046	          to the attacks they know.  Eliminating these well-known holes and
  2047	          monitoring  the  system  for other security problems will usually
  2048	          serve as adequate defense against all  but  the  most  determined
  2049	          crackers.   By using the procedures and sources described in this
  2050	          document, you _c_a_n make your system more secure.
  2051	                                         57
  2052	                                         58
  2053	                                     REFERENCES
  2054	          [Eich89]  Eichin, Mark W., and Jon A. Rochlis.   _W_i_t_h  _M_i_c_r_o_s_c_o_p_e
  2055	                    _a_n_d  _T_w_e_e_z_e_r_s:  _A_n  _A_n_a_l_y_s_i_s  _o_f  _t_h_e _I_n_t_e_r_n_e_t _V_i_r_u_s _o_f
  2056	                    _N_o_v_e_m_b_e_r _1_9_8_8.  Massachusetts Institute of  Technology.
  2057	                    February 1989.
  2058	          [Elme88]  Elmer-DeWitt, Philip.   %%  %The  Kid  Put  Us  Out  of
  2059	                    Action.' '' _T_i_m_e, 132 (20): 76, November 14, 1988.
  2060	          [Gram84]  Grammp, F. T., and R. H. Morris.  %%UNIX Operating Sys-
  2061	                    tem  Security.'' _A_T&_T _B_e_l_l _L_a_b_o_r_a_t_o_r_i_e_s _T_e_c_h_n_i_c_a_l _J_o_u_r_-
  2062	                    _n_a_l, 63 (8): 1649-1672, October 1984.
  2063	          [Hind83]  Hinden, R., J. Haverty, and A. Sheltzer.   %%The  DARPA
  2064	                    Internet:  Interconnecting  Heterogeneous Computer Net-
  2065	                    works with Gateways.'' _I_E_E_E _C_o_m_p_u_t_e_r _M_a_g_a_z_i_n_e, 16  (9):
  2066	                    33-48, September 1983.
  2067	          [McLe87]  McLellan, Vin.  %%NASA Hackers:  There's  More  to  the
  2068	                    Story.'' _D_i_g_i_t_a_l _R_e_v_i_e_w, November 23, 1987, p. 80.
  2069	          [Morr78]  Morris, Robert, and Ken Thompson.  %%Password Security:
  2070	                    A  Case  History.'' _C_o_m_m_u_n_i_c_a_t_i_o_n_s _o_f _t_h_e _A_C_M, 22 (11):
  2071	                    594-597,  November  1979.   Reprinted  in  _U_N_I_X  _S_y_s_t_e_m
  2072	                    _M_a_n_a_g_e_r'_s  _M_a_n_u_a_l,  4.3 Berkeley Software Distribution.
  2073	                    University of California, Berkeley.  April 1986.
  2074	          [NCSC85]  National  Computer  Security  Center.   _D_e_p_a_r_t_m_e_n_t   _o_f
  2075	                    _D_e_f_e_n_s_e  _T_r_u_s_t_e_d  _C_o_m_p_u_t_e_r  _S_y_s_t_e_m _E_v_a_l_u_a_t_i_o_n _C_r_i_t_e_r_i_a,
  2076	                    Department  of  Defense   Standard   DOD   5200.28-STD,
  2077	                    December, 1985.
  2078	          [Quar86]  Quarterman, J. S., and J. C. Hoskins.   %%Notable  Com-
  2079	                    puter  Networks.''  _C_o_m_m_u_n_i_c_a_t_i_o_n_s _o_f _t_h_e _A_C_M, 29 (10):
  2080	                    932-971, October 1986.
  2081	          [Reed84]  Reeds, J. A., and P. J.  Weinberger.   %%File  Security
  2082	                    and  the UNIX System Crypt Command.'' _A_T&_T _B_e_l_l _L_a_b_o_r_a_-
  2083	                    _t_o_r_i_e_s _T_e_c_h_n_i_c_a_l _J_o_u_r_n_a_l, 63  (8):  1673-1683,  October
  2084	                    1984.
  2085	          [Risk87]  _F_o_r_u_m _o_n _R_i_s_k_s _t_o _t_h_e _P_u_b_l_i_c _i_n _C_o_m_p_u_t_e_r_s  _a_n_d  _R_e_l_a_t_e_d
  2086	                    _S_y_s_t_e_m_s.  ACM Committee on Computers and Public Policy,
  2087	                    Peter G. Neumann, Moderator.   Internet  mailing  list.
  2088	                    Issue 5.73, December 13, 1987.
  2089	          [Risk88]  _F_o_r_u_m _o_n _R_i_s_k_s _t_o _t_h_e _P_u_b_l_i_c _i_n _C_o_m_p_u_t_e_r_s  _a_n_d  _R_e_l_a_t_e_d
  2090	                    _S_y_s_t_e_m_s.  ACM Committee on Computers and Public Policy,
  2091	                    Peter G. Neumann, Moderator.   Internet  mailing  list.
  2092	                                         59
  2093	                    Issue 7.85, December 1, 1988.
  2094	          [Risk89a] _F_o_r_u_m _o_n _R_i_s_k_s _t_o _t_h_e _P_u_b_l_i_c _i_n _C_o_m_p_u_t_e_r_s  _a_n_d  _R_e_l_a_t_e_d
  2095	                    _S_y_s_t_e_m_s.  ACM Committee on Computers and Public Policy,
  2096	                    Peter G. Neumann, Moderator.   Internet  mailing  list.
  2097	                    Issue 8.2, January 4, 1989.
  2098	          [Risk89b] _F_o_r_u_m _o_n _R_i_s_k_s _t_o _t_h_e _P_u_b_l_i_c _i_n _C_o_m_p_u_t_e_r_s  _a_n_d  _R_e_l_a_t_e_d
  2099	                    _S_y_s_t_e_m_s.  ACM Committee on Computers and Public Policy,
  2100	                    Peter G. Neumann, Moderator.   Internet  mailing  list.
  2101	                    Issue 8.9, January 17, 1989.
  2102	          [Risk90]  _F_o_r_u_m _o_n _R_i_s_k_s _t_o _t_h_e _P_u_b_l_i_c _i_n _C_o_m_p_u_t_e_r_s  _a_n_d  _R_e_l_a_t_e_d
  2103	                    _S_y_s_t_e_m_s.  ACM Committee on Computers and Public Policy,
  2104	                    Peter G. Neumann, Moderator.   Internet  mailing  list.
  2105	                    Issue 9.69, February 20, 1990.
  2106	          [Ritc75]  Ritchie, Dennis M.  %%On the Security  of  UNIX.''  May
  2107	                    1975.   Reprinted  in _U_N_I_X _S_y_s_t_e_m _M_a_n_a_g_e_r'_s _M_a_n_u_a_l, 4.3
  2108	                    Berkeley Software Distribution.  University of Califor-
  2109	                    nia, Berkeley.  April 1986.
  2110	          [Schu90]  Schuman, Evan.  %%Bid to Unhook  Worm.''  _U_N_I_X  _T_o_d_a_y!,
  2111	                    February 5, 1990, p. 1.
  2112	          [Seel88]  Seeley, Donn.  _A _T_o_u_r _o_f _t_h_e _W_o_r_m.  Department of  Com-
  2113	                    puter Science, University of Utah.  December 1988.
  2114	          [Spaf88]  Spafford, Eugene H.   _T_h_e  _I_n_t_e_r_n_e_t  _W_o_r_m  _P_r_o_g_r_a_m:  _A_n
  2115	                    _A_n_a_l_y_s_i_s.   Technical Report CSD-TR-823.  Department of
  2116	                    Computer Science, Purdue University.  November 1988.
  2117	          [Stee88]  Steele, Guy L. Jr., Donald R. Woods, Raphael A. Finkel,
  2118	                    Mark  R.  Crispin, Richard M. Stallman, and Geoffrey S.
  2119	                    Goodfellow.  _T_h_e _H_a_c_k_e_r'_s _D_i_c_t_i_o_n_a_r_y.  New York: Harper
  2120	                    and Row, 1988.
  2121	          [Stei88]  Stein, Jennifer G., Clifford  Neuman,  and  Jeffrey  L.
  2122	                    Schiller.   %%Kerberos:  An  Authentication Service for
  2123	                    Open Network Systems.'' _U_S_E_N_I_X _C_o_n_f_e_r_e_n_c_e  _P_r_o_c_e_e_d_i_n_g_s,
  2124	                    Dallas, Texas, Winter 1988, pp. 203-211.
  2125	          [Stol88]  Stoll, Clifford.  %%Stalking the Wily Hacker.'' _C_o_m_m_u_n_-
  2126	                    _i_c_a_t_i_o_n_s _o_f _t_h_e _A_C_M, 31 (5): 484-497, May 1988.
  2127	          [Stol89]  Stoll, Clifford.  _T_h_e _C_u_c_k_o_o'_s _E_g_g.  New York:  Double-
  2128	                    day, 1989.
  2129	          [Sun88a]  Sun Microsystems.  _S_u_n_O_S _R_e_f_e_r_e_n_c_e _M_a_n_u_a_l, Part  Number
  2130	                    800-1751-10, May 1988.
  2131	          [Sun88b]  Sun Microsystems.  _S_y_s_t_e_m _a_n_d  _N_e_t_w_o_r_k  _A_d_m_i_n_i_s_t_r_a_t_i_o_n,
  2132	                                         60
  2133	                    Part Number 800-1733-10, May 1988.
  2134	          [Sun88c]  Sun Microsystems.  _S_e_c_u_r_i_t_y _F_e_a_t_u_r_e_s _G_u_i_d_e, Part Number
  2135	                    800-1735-10, May 1988.
  2136	          [Sun88d]  Sun Microsystems.  %%Network  File  System:  Version  2
  2137	                    Protocol  Specification.''  _N_e_t_w_o_r_k  _P_r_o_g_r_a_m_m_i_n_g,  Part
  2138	                    Number 800-1779-10, May 1988, pp. 165-185.
  2139	                                         61
  2140	                                         62
  2141	                           APPENDIX A - SECURITY CHECKLIST
  2142	               This checklist summarizes the information presented in  this
  2143	          paper, and can be used to verify that you have implemented every-
  2144	          thing described.
  2145	          _A_c_c_o_u_n_t _S_e_c_u_r_i_t_y
  2146	               []        Password policy developed and distributed to all users
  2147	               []        All passwords checked against obvious choices
  2148	               []        Expiration dates on all accounts
  2149	               []        No %%idle'' guest accounts
  2150	               []        All accounts have passwords or %%*'' in the password field
  2151	               []        No group accounts
  2152	               []        %%+'' lines in _p_a_s_s_w_d and _g_r_o_u_p checked if running Yellow Pages
  2153	          _N_e_t_w_o_r_k _S_e_c_u_r_i_t_y
  2154	               []        _h_o_s_t_s._e_q_u_i_v contains only local hosts, and no %%+''
  2155	               []        No ._r_h_o_s_t_s files in users' home directories
  2156	               []        Only local hosts in %%root'' ._r_h_o_s_t_s file, if any
  2157	               []        Only %%console'' labeled as %%secure'' in _t_t_y_t_a_b (servers only)
  2158	               []        No terminals labeled as %%secure'' in _t_t_y_t_a_b (clients only)
  2159	               []        No NFS file systems exported to the world
  2160	               []        _f_t_p_d version later than December, 1988
  2161	               []        No %%decode'' alias in the aliases file
  2162	               []        No %%wizard'' password in _s_e_n_d_m_a_i_l._c_f
  2163	               []        No %%debug'' command in _s_e_n_d_m_a_i_l
  2164	               []        _f_i_n_g_e_r_d version later than November 5, 1988
  2165	               []        Modems and terminal servers handle hangups correctly
  2166	          _F_i_l_e _S_y_s_t_e_m _S_e_c_u_r_i_t_y
  2167	               []        No setuid or setgid shell scripts
  2168	               []        Check all %%nonstandard'' setuid and setgid programs for security
  2169	               []        Setuid bit removed from /_u_s_r/_e_t_c/_r_e_s_t_o_r_e
  2170	               []        Sticky bits set on world-writable directories
  2171	               []        Proper umask value on %%root'' account
  2172	               []        Proper modes on devices in /_d_e_v
  2173	          _B_a_c_k_u_p_s
  2174	               []        Level 0 dumps at least monthly
  2175	               []        Incremental dumps at least bi-weekly
  2176	                                         63
  2177	                         This page intentionally left blank.
  2178	                                 Just throw it out.
  2179	                                        lxiv
  2180	                                      CONTENTS
  2181	          1      INTRODUCTION...........................................  1
  2182	          1.1    UNIX Security..........................................  1
  2183	          1.2    The Internet Worm......................................  2
  2184	          1.3    Spies and Espionage....................................  2
  2185	          1.4    Other Break-Ins........................................  3
  2186	          1.5    Security is Important..................................  3
  2187	          2      IMPROVING SECURITY.....................................  5
  2188	          2.1    Account Security.......................................  5
  2189	          2.1.1  Passwords..............................................  5
  2190	          2.1.1.1                                                       Selecting Passwords6
  2191	          2.1.1.2                                                       Password Policies7
  2192	          2.1.1.3                                                       Checking Password Security7
  2193	          2.1.2  Expiration Dates.......................................  8
  2194	          2.1.3  Guest Accounts.........................................  8
  2195	          2.1.4  Accounts Without Passwords.............................  9
  2196	          2.1.5  Group Accounts and Groups..............................  9
  2197	          2.1.6  Yellow Pages........................................... 10
  2198	          2.2    Network Security....................................... 11
  2199	          2.2.1  Trusted Hosts.......................................... 11
  2200	          2.2.1.1                                                       The hosts.equiv File11
  2201	          2.2.1.2                                                       The .rhosts File12
  2202	          2.2.2  Secure Terminals....................................... 12
  2203	          2.2.3  The Network File System................................ 13
  2204	          2.2.3.1                                                       The exports File13
  2205	          2.2.3.2                                                       The netgroup File14
  2206	          2.2.3.3                                                       Restricting Super-User Access16
  2207	          2.2.4  FTP.................................................... 16
  2208	          2.2.4.1                                                       Trivial FTP17
  2209	          2.2.5  Mail................................................... 18
  2210	          2.2.6  Finger................................................. 19
  2211	          2.2.7  Modems and Terminal Servers............................ 19
  2212	          2.2.8  Firewalls.............................................. 20
  2213	          2.3    File System Security................................... 20
  2214	          2.3.1  Setuid Shell Scripts................................... 21
  2215	          2.3.2  The Sticky Bit on Directories.......................... 22
  2216	          2.3.3  The Setgid Bit on Directories.......................... 22
  2217	          2.3.4  The umask Value........................................ 22
  2218	          2.3.5  Encrypting Files....................................... 23
  2219	          2.3.6  Devices................................................ 23
  2220	          2.4    Security Is Your Responsibility........................ 24
  2221	          3      MONITORING SECURITY.................................... 25
  2222	          3.1    Account Security....................................... 25
  2223	          3.1.1  The lastlog File....................................... 25
  2224	          3.1.2  The utmp and wtmp Files................................ 25
  2225	          3.1.3  The acct File.......................................... 26
  2226	          3.2    Network Security....................................... 27
  2227	                                         iii
  2228	                                CONTENTS (continued)
  2229	          3.2.1  The syslog Facility..................................27
  2230	          3.2.2  The showmount Command................................28
  2231	          3.3    File System Security.................................29
  2232	          3.3.1  The find Command.....................................29
  2233	          3.3.1.1                      Finding Setuid and Setgid Files29
  2234	          3.3.1.2                         Finding World-Writable Files31
  2235	          3.3.1.3                                Finding Unowned Files31
  2236	          3.3.1.4                                Finding .rhosts Files31
  2237	          3.3.2  Checklists...........................................32
  2238	          3.3.3  Backups..............................................33
  2239	          3.4    Know Your System.....................................33
  2240	          3.4.1  The ps Command.......................................33
  2241	          3.4.2  The who and w Commands...............................34
  2242	          3.4.3  The ls Command.......................................34
  2243	          3.5    Keep Your Eyes Open..................................34
  2244	          4      SOFTWARE FOR IMPROVING SECURITY......................35
  2245	          4.1    Obtaining Fixes and New Versions.....................35
  2246	          4.1.1  Sun Fixes on UUNET...................................35
  2247	          4.1.2  Berkeley Fixes.......................................36
  2248	          4.1.3  Simtel-20 and UUNET..................................37
  2249	          4.1.4  Vendors..............................................37
  2250	          4.2    The npasswd Command..................................37
  2251	          4.3    The COPS Package.....................................38
  2252	          4.4    Sun C2 Security Features.............................38
  2253	          4.5    Kerberos.............................................39
  2254	          5      KEEPING ABREAST OF THE BUGS..........................41
  2255	          5.1    The Computer Emergency Response Team.................41
  2256	          5.2    DDN Management Bulletins.............................41
  2257	          5.3    Security-Related Mailing Lists.......................42
  2258	          5.3.1  Security.............................................42
  2259	          5.3.2  RISKS................................................42
  2260	          5.3.3  TCP-IP...............................................42
  2261	          5.3.4  SUN-SPOTS, SUN-NETS, SUN-MANAGERS....................42
  2262	          5.3.5  VIRUS-L..............................................43
  2263	          6      SUGGESTED READING....................................45
  2264	          7      CONCLUSIONS..........................................47
  2265	          REFERENCES..................................................49
  2266	          APPENDIX A - SECURITY CHECKLIST.............................51
  2267	                                         iv
  2268	                                          v
  2269	
  2270	! ***
  2271	
  2272	
  2273	3:38:37 p.m.    ARE YOU STILL THERE ?
  2274	! ***
  2275	
  2276	
  2277	3:43:37 p.m.    RESPOND OR BE LOGGED OFF
  2278	! ***
  2279	END OF SESSION
  2280	
  2281	DISCONNECTED
  2282	e5",*Kdlz
  2283	NO CARRIER
  2284	 
