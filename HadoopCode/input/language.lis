     1	Newsgroups: comp.lang.misc
     2	Subject: The Language List V1.9
     3	Message-ID: <C0t57L.DA4@hawk.cs.ukans.edu>
     4	From: billk@hawk.cs.ukans.edu (Bill Kinnersley)
     5	Date: Wed, 13 Jan 1993 19:38:08 GMT
     6	Organization: University of Kansas Computer Science Dept
     7	Lines: 975
     8	
     9	[This contains all 9 parts, concatenated.]
    10	
    11	
    12	The Language List - Version 1.9, January 13, 1993
    13	
    14	Collected information on about 2000 computer languages, past and present.
    15	
    16	Currently maintained by:
    17	
    18	  Bill Kinnersley
    19	  Computer Science Department
    20	  University of Kansas
    21	  Lawrence, KS 66045
    22	
    23	  billk@hawk.cs.ukans.edu
    24	
    25	Version 1.8:  Sept 1, 1992
    26	Version 1.7:  Apr  6, 1992
    27	Version 1.6:  Jan 15, 1992
    28	Version 1.5:  Nov 10, 1991
    29	Version 1.4:  Sept 8, 1991
    30	Version 1.3:  July 8, 1991
    31	Version 1.2:  May 30, 1991
    32	Version 1.1:  May  1, 1991
    33	Version 1.0:  Mar  7, 1991
    34	
    35	Started by:
    36	
    37	  Tom Rombouts
    38	  Ashton-Tate Product Development
    39	  20101 Hamilton Avenue, Torrance, CA 90277
    40	  Work: (213)538-7108
    41	
    42	  Home:
    43	  535 Esplanade, #502
    44	  Redondo Beach, CA  90277
    45	  Ans Svc: (213)543-3811
    46	
    47	  USENET:  tomr@ashtate.A-T.com
    48	
    49	  This document is intended to become one of the longest lists of computer
    50	programming languages ever assembled (or compiled).  Its purpose is not to
    51	be a definitive scholarly work, but rather to collect and provide the best
    52	information that we can in a timely fashion.  Its accuracy and completeness
    53	depends on the readers of Usenet, so if you know about something that
    54	should be added, please help us out.  Over 100 netters have already
    55	contributed to this effort.  We hope that this list will continue to evolve
    56	as a useful resource available to everyone on the net with an interest in
    57	programming languages.
    58	
    59	
    60	"YOU LEFT OUT LANGUAGE ___!"
    61	
    62	   If you have information about a language that is not on this list,
    63	please e-mail the relevant details to the current maintainer, as shown
    64	above.  If you can cite a published reference to the language, that will
    65	help in determining authenticity.
    66	
    67	
    68	What Languages Should Be Included
    69	
    70	   The "Published" Rule - A language should be "published" to be included
    71	in this list.  There is no precise criterion here, but for example a
    72	language devised solely for the compiler course you're taking doesn't
    73	count.  Even a language that is the topic of a PhD thesis might not
    74	necessarily be included.  But if material on that language was published in
    75	a technical journal or report, or if it formed the basis for additional
    76	research, the language belongs in this list.  A language does NOT have to
    77	be implemented (actually running on at least one computer) to be included. 
    78	Many languages appearing in the ACM SIGPLAN Notices fall into this
    79	category.
    80	
    81	   In general when there's any doubt, an entry will be included.  Making
    82	the list as complete as possible necessarily means there will be a large
    83	number of obscure entries.  To compensate for this "clutter" effect, more
    84	widespread languages such as C or FORTRAN should have longer entries.
    85	
    86	   For historical completeness roughly 200 early pre-1959 "automatic
    87	programming systems" were included, based on a list from CACM 2(5):16, May
    88	1959.  It can be argued that many of these are not really programming
    89	languages as the term is used today.  We've also included some formalisms
    90	which are clearly not meant to be used as a source language for writing
    91	programs: metalanguages such as BNF, intermediate languages such as P-Code,
    92	and computational models such as Linda.
    93	
    94	
    95	Dialects, Variants, Versions and Implementations
    96	
    97	   Computer languages evolve, and are related to one another in rather
    98	complex ways.  Almost every language can be regarded as an improved version
    99	of something else.  Sometimes it's hard to know where to draw the line and
   100	say "this is a separate language".  Taking LISP as an example, what started
   101	out as a single language has evolved into a large family.  Dialects (such
   102	as Scheme and Common LISP) have major differences and are certainly
   103	considered by their users to be distinct languages.  Variants (such as
   104	Kyoto Common LISP and Allegro CL) are primarily intended to be the same,
   105	but have certain features which make them incompatible.  Implementations
   106	are designed to run on particular machines or operating systems and will
   107	usually have special features added.  Inevitably a series of revisions will
   108	be issued, causing further small changes in the language.  It has even been
   109	suggested that if command line options are present, each choice of options
   110	could be considered a distinct language!
   111	
   112	   A language's name by itself is not always an accurate guide to its
   113	identity.  Sometimes a language will undergo significant evolution without
   114	any official change in name (e.g. SETL2 has done this).  Sometimes just the
   115	name will change (IAL to ALGOL to ALGOL 58).  And occasionally a name has
   116	been used for several distinct languages (e.g. Vulcan).
   117	
   118	   It may also be debatable what is "in" a language and what is not.  For
   119	example SML is defined in stages: a "core syntax" surrounded by a standard
   120	set of extensions.  Technically that makes it two separate languages, but
   121	the SML core syntax would be frustrating to write programs in.  Other
   122	languages have purposely omitted essential features like I/O from their
   123	definition because they were never intended to be used without a standard
   124	library (C) or interface (Smalltalk-80), or because they constitute the
   125	command language for a particular product or system.  Still other languages
   126	are by their very nature extensible, and the number of macro packages built
   127	on TeX for example could be called an endless list of separate "languages".
   128	
   129	   Brand names - You might wonder why we do include a number of commercial
   130	products such as Turbo Pascal.  Usually these items offer non-standard
   131	extensions to the base language.  This has been particularly true in the
   132	varieties of BASIC and Prolog.  But also one could argue that in a strict
   133	sense Microsoft C and Turbo C for example are distinct languages.
   134	   Another reason for including entries of this type is that many languages
   135	are proprietary, appearing only in a certain product.  Such languages may
   136	be distinctive and interesting and deserve to be here.  On the other hand
   137	we don't want the list to become a catalog of commercial programming
   138	products.
   139	
   140	
   141	What Each Entry Should Contain
   142	
   143	Name:  An explanation of the language name, which in perhaps 80% of the
   144	cases is some form of acronym or abbreviation.
   145	
   146	Date of origin:  The year when a language first appeared.  Since the
   147	design, implementation and distribution of a language can take place over a
   148	period of several years, such dates are often approximate.  Any language
   149	that has an ANSI, ISO or BSI standard should include the date approved. 
   150	For specific brands such as Turbo Pascal the release dates of each version
   151	can be listed.
   152	
   153	Reference:  At least one reference work on the language, as definitive or
   154	as official as possible.
   155	
   156	Availability:  ftp site, commercial source or publisher, contacts for
   157	further information.
   158	
   159	"See also:"  Related languages or terms that may also be of interest.
   160	
   161	   Any material marked with brackets "[]" is doubtful and may be considered
   162	a request for further information.
   163	
   164	   Editorial Comments -  What constitutes a good language has often become
   165	the subject of intense debate.  We've tried to avoid adding to this by
   166	making any remarks that are clearly subjective, such as calling a language
   167	"powerful".  Nevertheless some comments might still be construed this way. 
   168	For instance saying that Pascal is "ALGOL-like" could offend both some
   169	ALGOL and some Pascal users.  Also, some questions of historical origin are
   170	not universally agreed upon.
   171	
   172	
   173	   Classification - It's been suggested that the languages in this list
   174	should be arranged into categories, but to do so would be extremely
   175	difficult.  For every classification scheme there wlll be a large
   176	proportion of languages that do not fit.  The languages are therefore
   177	listed alphabetically, and in fact we think that this is the most useful
   178	organization.  You'll find that the following categories have been referred
   179	to in the list, but we must emphasize that most languages are not purely
   180	one or the other, and we are really categorizing language features.
   181	
   182	Imperative language
   183	
   184		A language which operates by a sequence of commands that change the
   185	value of data elements.  Typified by assignments and iteration.
   186	
   187	Declarative language
   188	
   189		A language which operates by making descriptive statements about data
   190	and relations between data.  The algorithm is hidden in the semantics of
   191	the language.  This category encompasses both applicative and logic
   192	languages.  Examples of declarative features are set comprehensions and
   193	pattern-matching statements.
   194	
   195	Procedural language
   196	
   197		A language which states how to compute the result of a given problem. 
   198	Encompasses both imperative and functional languages.
   199	
   200	Applicative language
   201	
   202		A language that operates by application of functions to values, with no
   203	side effects.  A functional language in the broad sense.
   204	
   205	Functional language
   206	
   207		In the narrow sense, a functional language is one that operates by use
   208	of higher-order functions, building operators that manipulate functions
   209	directly without ever appearing to manipulate data.  Example: FP.
   210	
   211	Definitional language
   212	
   213		An applicative language containing assignments interpreted as
   214	definitions.  Example: Lucid.
   215	
   216	Single Assignment language
   217	
   218		An applicative language using assignments with the convention that a
   219	variable may appear on the left side of an assignment only once within the
   220	portion of the program in which it is active.
   221	
   222	Dataflow language
   223	
   224		A language suitable for use on a dataflow architecture.  Necessary
   225	properties include freedom from side effects, and the equivalence of
   226	scheduling constraints with data dependencies.  Examples: Val, Id, SISAL,
   227	Lucid.
   228	
   229	Logic language
   230	
   231		A logic language deals with predicates or relationships p(X,Y).  A
   232	program consists of a set of Horn clauses which may be:
   233		facts - p(X,Y) is true
   234		rules - p is true if q1 and q2 and ...qn are true
   235		queries - is g1 and g2 and ...gn true?  (gi's are the goals.)
   236		Further clauses are inferred using resolution.  One clause is selected
   237	containing p as an assumption, another containing p as a consequence, and p
   238	is eliminated between them.  If the two p's have different arguments they
   239	must be unified, using the subsitution with the fewest constraints that
   240	makes them the same.
   241	    Logic languages try alternative resolutions for each goal in
   242	succession, backtracking in a search for a common solution.  OR-parallel
   243	languages try alternative resolutions in parallel, while AND-parallel
   244	languages try to satisfy several goals in parallel.
   245	
   246	Constraint language
   247	
   248		A language in which a problem is specified and solved by a series of
   249	constraining relationships.
   250	
   251	Object-Oriented language
   252	
   253		A language in which data and the functions which access it are treated
   254	as a unit.
   255	
   256	Concurrent language
   257	
   258		A concurrent language describes programs that may be executed in
   259	parallel.  This may be either
   260		multiprogramming: sharing one processor
   261		multiprocessing: separate processors sharing one memory
   262		distributed
   263	
   264	Concurrent languages differ in the way that processes are created:
   265		coroutines - control is explicitly transferred - Simula I, SL5, BLISS,
   266	Modula-2.
   267		fork/join - PL/I, Mesa
   268		cobegin/coend - ALGOL 68, CSP, Edison, Argus
   269		process declarations - DP, SR, Concurrent Pascal, Modula, PLITS, Ada
   270	
   271	and the ways in which processes interact:
   272		semaphores - ALGOL 68
   273		conditional critical regions - Edison, DP, Argus
   274		monitors - Concurrent Pascal, Modula
   275		message passing - CSP, PLITS, Gypsy, Actors
   276		remote procedure calls - DP, *Mod
   277			rendezvous - Ada, SR
   278			atomic transactions - Argus
   279	
   280	Fourth generation language (4GL's)
   281	
   282		A very high-level language.  May use natural English or visual
   283	constructs.
   284	
   285	Query language
   286	
   287		An interface to a database.
   288	
   289	Specification language
   290	
   291		A formalism for expressing a hardware or software design.
   292	
   293	Assembly language
   294	
   295		A symbolic representation of the machine language of a specific
   296	computer.
   297	
   298	Intermediate language
   299	
   300		A language used as an intermediate stage in compilation.  May be either
   301	text or binary.
   302	
   303	Metalanguage
   304	
   305		A language used for formal description of another language.
   306	
   307	
   308	
   309	                           * * * * * * *
   310	
   311	
   312	2.PAK - AI language with coroutines.  "The 2.PAK Language: Goals and
   313	Description", L.F. Melli, Proc IJCAI 1975.
   314	
   315	473L Query - English-like query language for Air Force 473L system.  Sammet
   316	1969, p.665.
   317	
   318	9PAC - 709 PACkage.  1959.  Report generator for IBM 7090.  Sammet 1969,
   319	p.314.
   320	
   321	*LISP - ("StarLISP")  Cliff Lasser, Jeff Mincy, J.P. Massar, Thinking
   322	Machines Corp.  A data-parallel extension of Common LISP for the Connection
   323	Machine.  "The Essential *LISP Manual", TM Corp 1986.
   324	ftp: think.com:/public/starsim-f19-sharfile, a *LISP simulator.
   325	info: customer-support@think.com
   326	      documentation-order@think.com
   327	
   328	*MOD - ("StarMOD")  Concurrent language combining the modules of Modula and
   329	the communications of Distributed Processes.  "*MOD - A Language for
   330	Distributed Programming", R.P. Cook, IEEE Trans Soft Eng SE-6(6):563-571
   331	(Nov 1980).
   332	
   333	A0 or A-0 - Possibly the first compiler ever.  Grace Hopper's team at
   334	Remington Rand, 1952, for the UNIVAC I or II.   Later internal versions: A-
   335	1, A-2, A-3, AT-3.  AT-3 was released as MATH-MATIC.  Sammet 1969, p.12.
   336	
   337	AADL - Axiomatic Architecture Description Language.  "AADL: A Net-Based
   338	Specification Method for Computer Architecture Design", W. Damm et al in
   339	Languages for Parallel Architectures, J.W. deBakker ed, Wiley 1989.
   340	
   341	ABC - 
   342	
   343	  1. Leo Geurts, Lambert Meertens, Steven Pemberton.  Simple interactive
   344	language designed for quick easy programming.  Includes a programming
   345	environment with syntax-directed editing, suggestions, persistent variables
   346	and multiple workspaces and infinite precision arithmetic.  "An Alternative
   347	Simple Language and Environment or PC's", S. Pemberton, IEEE Software
   348	4(1):56-64 (Jan 1987).  "The ABC Programmer's Manual", Leo Geurts et al, P-
   349	H 1989.
   350	ftp: mcsun.eu.net and uunet.uu.net  Unix source, MS-DOS, Mac and Atari ST
   351	executables.
   352	info: abc@cwi.nl
   353	list: abc-list@cwi.nl maintained by Steven Pemberton <abc-list-
   354	request@cwi.nl>.
   355	
   356	  2. (A="argument",B="basic value",C=?).  Intermediate code for the ABC
   357	abstract machine for implementation of functional languages.  P. Koopman,
   358	"Functional Programs as Executable Specifications", 1990. [?] 
   359	
   360	ABCL/1 - An Object-Based Concurrent Language.  Yonezawa, U Tokyo 1986. 
   361	Language for the ABCL concurrent (MIMD) system.  Asynchronous message
   362	passing to objects.  Implementations in KCL and Symbolics LISP available
   363	from the author.  "ABCL: An Object-Oriented Concurrent System", A. Yonezawa
   364	ed, MIT Press 1990.
   365	ftp: camille.is.s.u-tokyo.ac.jp
   366	info: matsu@is.s.u-tokyo.ac.jp
   367	
   368	ABCL/c+ - Concurrent object-oriented language, an extension of ABCL/1 based
   369	on C.  "An Implementation of An Operating System Kernel using Concurrent
   370	Object Oriented Language ABCL/c+", N. Doi et al in ECOOP '88, S. Gjessing
   371	et al eds, LNCS 322, Springer 1988.
   372	
   373	ABCL/R - Yonezawa, Tokyo Inst Tech 1988.  Reflective concurrent object-
   374	oriented language.  "Reflection in an Object-Oriented Concurrent Language",
   375	T. Watanabe et al, SIGPLAN Notices 23(11):306-315 (Nov 1988).
   376	
   377	ABLE - Simple language for accountants.  "ABLE, The Accounting Language,
   378	Programming and Reference Manual," Evansville Data Proc Center, Evansville,
   379	IN, Mar 1975.  Listed in SIGPLAN Notices 13(11):56 (Nov 1978).
   380	
   381	ABSET - U Aberdeen.  Early declarative language.  "ABSET: A Programming
   382	Language Based on Sets", E.W. Elcock et al, Mach Intell 4, Edinburgh U
   383	Press, 1969, pp.467-492.
   384	
   385	ABSYS - U Aberdeen.  Early declarative language, anticipated a number of
   386	features of Prolog.  "ABSYS: An Incremental Compiler for Assertions", J.M.
   387	Foster et al, Mach Intell 4, Edinburgh U Press, 1969, pp.423-429.
   388	
   389	Accent - Very high level interpreted language with strings, tables, etc. 
   390	Strongly typed, remote function calls.  CaseWare Inc.
   391	
   392	Access - English-like query language used in the Pick OS.
   393	
   394	ACL - A Coroutine Language.  A Pascal-based implementation of coroutines. 
   395	"Coroutines", C.D. Marlin, LNCS 95, Springer 1980.
   396	
   397	ACOM - Early system on IBM 705.  Listed in CACM 2(5):16 (May 1959).
   398	
   399	ACP - Algebra of Communicating Processes.  "Algebra of Communicating
   400	Processes with Abstraction", J.A. Bergstra & J.W. Klop, Theor Comp Sci
   401	37(1):77-121 (1985).  (compare CCS).
   402	
   403	ACT++ - Concurrent extension of C++ based on actors.  "ACT++: Building a
   404	Concurrent C++ With Actors", D.G. Kafura TR89-18, VPI, 1989.
   405	
   406	ACT ONE - Specification language.  "An Algebraic Specification Language
   407	with Two Levels of Semantics", H. Ehrig et al, Tech U Berlin 83-03 Feb
   408	1983.
   409	
   410	Act1 - An actor language, descendant of Plasma.  "Concurrent Object
   411	Oriented Programming in Act1", H. Lieberman in Object Oriented Concurrent
   412	Programming, A. Yonezawa et al eds, MIT Press 1987.
   413	
   414	Act2 - An actor language.  "Issues in the Design of Act2", D. Theriault,
   415	TR728, MIT AI Lab, June 1983.
   416	
   417	Act3 - High-level actor language, descendant of Act2.  Provides support for
   418	automatic generation of customers and for delegation and inheritance. 
   419	"Linguistic Support of Receptionists for Shared Resources", C. Hewitt et al
   420	in Seminar on Concurrency, S.D. Brookes et al eds, LNCS 197, Springer 1985,
   421	pp. 330-359.
   422	
   423	Actalk - Briot, 1989.  Smalltalk-based actor language.  "Actalk: A Testbed
   424	for Classifying and Designing Actor Languages in the Smalltalk-80
   425	Environment", J-P. Briot, Proc ECOOP '89, pp.109-129.
   426	
   427	Active Language I - Early interactive math, for XDS 930 at UC Berkeley. 
   428	"Active Language I", R. de Vogelaere in Interactive Systems for
   429	Experimental Applied Mathematics, A-P 1968.
   430	
   431	Actor - Charles Duff, Whitewater Group ca 1986.  Object-oriented language
   432	for Microsoft Windows.  Pascal/C-like syntax.  Uses a token-threaded
   433	interpreter.  Early binding is an option.  "Actor Does More than Windows",
   434	E.R. Tello, Dr Dobb's J 13(1):114-125 (Jan 1988).
   435	
   436	Actors - C. Hewitt.  A model for concurrency.  "Laws for Communicating
   437	Parallel Processes", C. Hewitt et al, IFIP 77, pp. 987-992, N-H 1977. 
   438	"ACTORS: A Model of Concurrent Computation in Distributed Systems", Gul A.
   439	Agha, Cambridge Press, MA, 1986.
   440	
   441	Actra - An exemplar-based Smalltalk.  LaLonde et al, OOPSLA '86.
   442	
   443	Actus - Pascal with parallel extensions, similar to the earlier Glypnir. 
   444	Parallel constants, index sets.  Descendants include Parallel Pascal,
   445	Vector C, and CMU's recent language PIE.  "A Language for Array and Vector
   446	Processors," R.H. Perrott, ACM TOPLAS 1(2):177-195 (Oct 1979).
   447	
   448	Ada - (named for Ada Lovelace (1811-1852), arguably the world's first
   449	computer programmer.)  Jean Ichbiah's team at CII Honeywell, for the U.S.
   450	Department of Defense, 1980.  Ada is a large, complex block-structured
   451	language aimed primarily at embedded computer applications.  It has
   452	facilities for real-time response, concurrency, hardware access, and
   453	reliable run-time error handling.  In support of large-scale software
   454	engineering, it emphasizes strong typing, data abstraction and
   455	encapsulation.  The type system uses name equivalence and includes both
   456	subtypes and derived types.  Both fixed and floating point numerical types
   457	are supported.
   458	    Control flow is fully bracketed: if-then-elsif-end if, case-is-when-end
   459	case, loop-exit-end loop, goto.  Subprogram parameters are in, out, or
   460	inout.  Variables imported from other packages may be hidden or directly
   461	visible.  Operators may be overloaded, and so may enumeration literals. 
   462	There are user-defined exceptions and exception handlers.
   463	    An Ada program consists of a set of packages encapsulating data objects
   464	and their related operations.  A package has a separately compilable body
   465	and interface.  Ada permits generic packages and subroutines, possibly
   466	parametrized.
   467	    Ada programming places a heavy emphasis on multitasking.  Tasks are
   468	synchronized by the rendezvous, in which a task waits for one of its
   469	subroutines to be executed by another.  The conditional entry makes it
   470	possible for a task to test whether an entry is ready.  The selective wait
   471	waits for either of two entries or waits for a limited time.
   472	    "Reference Manual for the Ada Programming Language", ANSI/MIL STD
   473	1815A, U.S. DoD (Jan 1983).
   474	info: adainfo@ajpo.sei.cmu.edu
   475	ftp repository: wsmr-simtel20.army.mil
   476	ftp info: ajpo.sei.cmu.edu
   477	ftp interpreters: stars.rosslyn.unisys.com:pub/ACE_8.0, for SunOS
   478	AdaEd compiler/interpreter for Unix, MS-DOS, Atari ST, Amiga
   479		ab20.larc.nasa.gov:amiga/languages/ada/AdaEd1.11.0a.bin.lzh for Amiga
   480		cs.nyu.edu:pub/adaed
   481	
   482	Ada 83 - The original Ada, as opposed to Ada 9X.
   483	
   484	Ada 9X - Revision of Ada currently under development.
   485	ftp: ajpo.sei.cmu.edu
   486	mailing list: Chris Anderson <anderson@uv4.eglin.af.mil> (Ada 9X Project
   487	Manager)
   488	
   489	Ada++ - Object-oriented extension to Ada, implemented as a preprocessor.
   490	
   491	ADAM - A DAta Management system.
   492	
   493	Adaplex - An extension of Ada for functional databases.  "Adaplex:
   494	Rationale and Reference Manual 2nd ed", J.M. Smith et al, Computer Corp
   495	America, Cambridge MA, 1983.
   496	
   497	ADAPT - Subset of APT.  Sammet 1969, p.606.
   498	
   499	ADD 1 TO COBOL GIVING COBOL - Bruce Clement.  Tongue-in-cheek suggestion
   500	for an object-oriented COBOL.  SIGPLAN Notices 27(4):90-91 (Apr 1992).
   501	
   502	ADES - Early system on IBM 704.  Listed in CACM 2(5):16 (May 1959). 
   503	Version: ADES II.
   504	
   505	ADL -
   506	
   507	  1. Adventure Definition Language.  Ross Cunniff <cunniff@fc.hp.com> & Tim
   508	Brengle, 1987.  An adventure language, semi-object-oriented with LISP-like
   509	syntax.  A superset of DDL.  Available for Unix, MS-DOS, Amiga and Acorn.
   510	ftp: gatekeeper.dec.com: pub/games/comp.sources.games/volume2
   511		wuarchive.wustl.edu: /systems/amiga/fish/fish/f0/ff091
   512	
   513	  2. Ada Development Language.  R.A. Lees, 1989.
   514	
   515	AdLog - Adds a Prolog layer to Ada.  "AdLog, An Ada Components Set to Add
   516	Logic to Ada", G. Pitette, Proc Ada-Europe Intl Conf Munich, June 1988.
   517	
   518	ADM - Picture query language, extension of Sequel2.  "An Image-Oriented
   519	Database System", Y. Takao et al, in Database Techniques for Pictorial
   520	Applications, A. Blaser ed, pp.527-538.
   521	
   522	ADS - Expert system.
   523	
   524	ADVSYS - David Betz, 1986.  An adventure language, object-oriented and
   525	LISP-like.
   526	ftp: uunet.uu.net:comp.sources.games/Volume2
   527	
   528	AE - Application Executive.  Brian Bliss <bliss@sp64.csrd.uiuc.edu>  An
   529	embeddable language, written as a C interpreter.
   530	ftp: sp2.csrd.uiuc.edu:ae.tex.Z
   531	
   532	AED - Automated Engineering Design (aka ALGOL Extended for Design).  MIT ca
   533	1965 by Doug Ross (now at Softech).  Systems language for IBM 7090 and 360,
   534	an extension of ALGOL-60 with records, pointers, and dynamic allocation. 
   535	DYNAMO II was written in AED.  "The Automated Engineering Design (AED)
   536	Approach to Generalized Computer-Aided Design", D.T. Ross, Proc ACM 22nd
   537	Natl Conf, 1967.  Sammet 1969 and 1978.  Versions: AED-0, AED-1, AED-JR.
   538	
   539	Aeolus - Concurrent language with atomic transactions.  "Rationale for the
   540	Design of Aeolus", C. Wilkes et al, Proc IEEE 1986 Intl Conf Comp Lang,
   541	IEEE 1986, pp.107-122.
   542	
   543	AESOP - An Evolutionary System for On-line Programming.  Early interactive
   544	query system with light pen for IBM 1800.  "AESOP: A Final Report: A
   545	Prototype Interactive Information Control System", J.K. Summers et al, in
   546	Information System Science and Technology, D. Walker ed, 1967.  Sammet
   547	1969, p.703.
   548	
   549	AFAC - Early system on IBM 704.  Listed in CACM 2(5):16 (May 1959).
   550	
   551	AGORA - Distributed object-oriented language.[?]
   552	
   553	AHPL - A Hardware Programming Language.  Hill & Peterson.  A register-level
   554	language, some of whose operators resemble APL.  "Digital Systems: Hardware
   555	Organization and Design", F. Hill et al, Wiley 1987.  HPSIM2: a function-
   556	level simulator, available from Engrg Expt Sta, U Arizona.
   557	
   558	AIDA - 
   559	
   560	  1. M. Gfeller.  A functional dialect of Dictionary APL.  "APL Arrays and
   561	Their Editor", M. Gfeller, SIGPLAN Notices 21(6):18-27 (June 1986) and
   562	SIGAPL Conf Proc [?]
   563	
   564	  2. Karlsruhe, 1980.  An intermediate representation language for Ada, was
   565	merged with TCOL.Ada to form Diana.
   566	
   567	AIMACO - AIr MAterial COmmand compiler.  Modification of FLOW-MATIC. 
   568	Supplanted by COBOL.  Sammet 1969, p.378.
   569	
   570	AKCL - Austin Kyoto Common LISP.  Bill Schelter.  Improvements to KCL.
   571	ftp: rascal.ics.utexas.edu
   572	
   573	AKL - Andorra Kernel Language.  Successor of KAP.  "Programming Paradigms
   574	of the Andorra Kernel Language", S. Janson <sverker@sics.se> et al in Logic
   575	Programming: Proc 1991 Intl Symp, MIT Press 1991.  Prototype implementation
   576	available from the author.
   577	
   578	AL - Assembly Language.  Stanford U, 1970's.  Language for industrial
   579	robots.  "The AL Language for an Intelligent Robot", T. Binford in Langages
   580	et Methods de Programation des Robots Industriels, pp.73-88, IRIA Press
   581	1979.  "AL User's Manual", M.S. Mujtaba et al, Stanford AI Lab, Memo
   582	AIM-323 (Jan 1979).
   583	
   584	ALADIN - 
   585	
   586	  1. A Language for Attributed DefINitions.  A language for formal
   587	specification of attributed grammars.  Input language for the GAG compiler
   588	generator.  Applicative, strongly typed.  "GAG: A Practical Compiler
   589	Generator", U. Kastens et al, LNCS 141, Springer 1982.
   590	
   591	  2. Interactive math for IBM 360.  "A Conversational System for
   592	Engineering Assistance: ALADIN", Y. Siret, Proc Second Symp Symb Algebraic
   593	Math, ACM Mar 1971.
   594	
   595	ALAM - Symbolic math, especially for General Relativity.  "ALAM
   596	Programmer's Manual", Ray D'Inverno, 1970.  (See CLAM).
   597	
   598	ALC - Assembly Language Compiler.  Alternative name for IBM 360 assembly
   599	language.  (cf. BAL).
   600	
   601	ALCOR - Subset of ALGOL.  Sammet 1969, p.180.
   602	
   603	Aldat - Database language, based on extended algebra.  Listed by M.P.
   604	Atkinson & J.W. Schmidt in a tutorial in Zurich, 1989. [?]
   605	
   606	ALDES - ALgorithm DEScription.  "The Algorithm Description Language ALDES",
   607	R.G.K. Loos, SIGSAM Bull 14(1):15-39 (Jan 1976).
   608	
   609	ALDiSP - Applicative Language for Digital Signal Processing.  1989, TU
   610	Berlin.  Functional language with special features for real-time I/O and
   611	numerical processing.  "An Applicative Real-Time Language for DSP-
   612	Programming Supporting Asynchronous Data-Flow Concepts", M. Freericks
   613	<mfx@cs.tu-berlin.de> in Microprocessing and Microprogramming 32, N-H 1991.
   614	
   615	ALEC - A Language with an Extensible Compiler.  Implemented using RCC on an
   616	ICL 1906A.  "ALEC - A User Extensible Scientific Programming Language",
   617	R.B.E. Napper et al, Computer J 19(1):25-31.
   618	
   619	ALEPH -
   620	
   621	  1. A Language Encouraging Program Hierarchy.  ca 1975.  "On the Design of
   622	ALEPH", D. Grune, CWI, Netherlands 1986.
   623	
   624	  2. Peter Henderson ca. 1970.  Formal semantics.  CACM 15(11):967-973 (Nov
   625	1972).
   626	
   627	Alex -
   628	
   629	  1. Stephen Crawley <sxc@itd.dtso.oz.au>, Defence Science & Tech Org,
   630	Australia.  Under development.  Polymorphic with ADT's, type inference,
   631	inheritance.
   632	
   633	  2. ISWIM-like language with exception handling.  "An Exception Handling
   634	Construct for Functional Languages", M. Brez et al, in Proc ESOP88, LNCS
   635	300, Springer 1988.
   636	
   637	Alexis - Alex Input Specification.  Input language for the scanner
   638	generator Alex.  "Alex: A Simple and Efficient Scanner Generator", H.
   639	Mossenbock, SIGPLAN Notices 21(5), May 1986.
   640	
   641	
   642	ALF - Algebraic Logic Functional language.  WAM-based language with
   643	narrowing/rewriting.  Horn clauses with equality.  Any functional
   644	expression can be used in a goal.
   645	ftp: ftp.germany.eu.net:pub/programming/languages/LogicFunctional:alf*
   646	info: Rudolf Opalla <opalla@julien.informatik.uni-dortmund.de>
   647	
   648	Alfl - Paul Hudak <hudak-paul@cs.yale.edu>, Yale 1983.  Functional, weakly
   649	typed, lazy.  Implemented as a preprocessor to the Orbit Scheme compiler,
   650	by transforming laziness into force-and-delay.  "Alfl Reference Manual and
   651	Programmer's Guide", P. Hudak, YALEU/DCS/RR322, Yale U, Oct 1984.  (See
   652	ParAlfl).
   653	
   654	ALGEBRAIC - Early system on MIT's Whirlwind.  Listed in CACM 2(5):16 (May
   655	1959).
   656	
   657	ALGOL 58 - See IAL.
   658	
   659	ALGOL 60 - ALGOrithmic Language.  Designed for scientific computations,
   660	ALGOL 60 was small and elegant.  It was the first language to be described
   661	in BNF.  There were three lexical representations: reference, hardware and
   662	publication.
   663	    Only three basic types: integer, real and boolean.  Arrays had lower
   664	bounds.  Dynamic arrays.  Strong typing.  Data hiding with 'own' variables. 
   665	No user-defined types.
   666	    ALGOL 60 was the first block-structured language, with nested
   667	procedures and blocks, nested syntax, compound statement with begin-end. 
   668	Keywords.  Conditional expression.  Introduced :=, if-then-else, very
   669	general 'for' loops.  Switch declaration (an array of statement labels)
   670	generalizing FORTRAN's computed goto. Procedures were recursive, and
   671	parameters were pass-by-value and pass-by-name.
   672	"Report on the Algorithmic Language ALGOL 60", Peter Naur ed, CACM
   673	3(5):299-314 (May 1960).
   674	
   675	ALGOL 60 Modified - "A Supplement to the ALGOL 60 Revised Report", R.M.
   676	DeMorgan et al, Computer J 19(4):364 and SIGPLAN Notices 12(1) 1977.  
   677	Erratum in Computer J 21(3):282 (Aug 1978) applies to both.
   678	
   679	ALGOL 60 Revised - "Revised Report on the Algorithmic Language ALGOL 60",
   680	Peter Naur ed, CACM 6(1):1-17 (Jan 1963).
   681	
   682	ALGOL 68 - Adriaan van Wijngaarden et al.  The communication and efficient
   683	execution of algorithms.  By contrast with ALGOL 60, ALGOL 68 was large and
   684	complex, and posed difficulties for both implementors and users.
   685	    Structural equivalence.  Automatic type conversion.  Flexible arrays. 
   686	No abstract data types.
   687	    if-then-elif-fi, for-from-by-to-while-do-od, integer case statement
   688	with 'out' clause, skip statement, generalized loops, goto.
   689	    Blocks, procedures and user-defined operators.  Procedure parameters. 
   690	No separate compilation.  Concurrent execution (cobegin/coend) and
   691	semaphores.  Generators heap and loc for dynamic allocation.
   692	
   693	ALGOL 68 Revised - "Revised Report on the Algorithmic Language ALGOL 68,"
   694	A. Van Wijngaarden et al, Acta Informatica 5:1-236 (1975), also Springer
   695	1976, and SIGPLAN Notices 12(5):1-70 (May 1977).
   696	
   697	ALGOL 68C - Variant of ALGOL 68 developed at Cambridge U Computing Lab in
   698	the 70's.  Used to implementation language for the CHAOS OS for the CAP
   699	capability computer.
   700	
   701	ALGOL 68RS - An extension of ALGOL 68 which supports function closures. 
   702	Royal Signals Research Establishment, Malvern UK.
   703	
   704	ALGOL 68S - ALGOL 68 Subset.  "A Sublanguage of ALGOL 68", P.G. Hibbard,
   705	SIGPLAN Notices 12(5) (May 1977).  Shareware compiler from Charles Lindsey
   706	<chl@cs.man.ac.uk>, Version 2.3 for Sun3's under OS4.x and Atari under
   707	GEMDOS (or potentially other machines supported by the Amsterdam Compiler
   708	Kit).
   709	
   710	ALGOL C - Clive Feather, Cambridge U, ca. 1981.  Variant of ALGOL 60; added
   711	structures and exception handling.  Designed for beginning students.
   712	
   713	ALGOL W - Derivative of ALGOL 60.  "A Contribution to the Development of
   714	Algol", N. Wirth, CACM 9(6):413-431 (June 1966).
   715	
   716	ALGOL X - Generic term for the successor to ALGOL 60.  The three designs
   717	proposed were by Wirth, Seegmuller and van Wijngaarden.  Sammet 1969,
   718	p.194.
   719	
   720	ALGY - Early language for symbolic math.  Sammet 1969, p.520.
   721	
   722	ALJABR - An implementation of MACSYMA for the Mac.  Fort Pond Research.
   723	info: aljabr@fpr.com
   724	
   725	ALLOY - Combines functional, object-oriented and logic programming ideas,
   726	suitable for massively parallel systems.  "The Design and Implementation of
   727	ALLOY, a Parallel Higher Level Programming Language", Thanasis Mitsolides
   728	<mitsolid@cs2.nyu.edu>, PhD Thesis NYU 1990.  Version: ALLOY 2.0
   729	ftp: cs.nyu.edu:pub/local/alloy.
   730	
   731	ALM - Assembly Language for Multics.  Language on the GE645.  Critical
   732	portions of the Multics kernel were written in ALM.
   733	
   734	ALP - List-processing extension of Mercury Autocode.  "ALP, An Autocode
   735	List-Processing Language", D.C. Cooper et al, Computer J 5:28-31 (1962).
   736	
   737	ALPAK - Subroutine package used by ALTRAN.  "The ALPAK System for
   738	Nonnumerical Algebra on a Digital Computer", W.S. Brown, Bell Sys Tech J
   739	42:2081 (1963).  Sammet 1969, p.502.
   740	
   741	Alphard - Pascal-like.  Introduced the notion of forms.  "Abstraction and
   742	Verification in Alphard: Defining and Specifying Iteration and Generators",
   743	Mary Shaw, CACM 20(8):553-563 (Aug 1977).
   744	
   745	ALPS - 
   746	
   747	  1. Richard V. Andree, U Oklahoma.  Early interpreted algebraic language
   748	for Bendix G15, said to have preceded and influenced development of BASIC.
   749	
   750	  2. Parallel logic language.  "Synchronization and Scheduling in ALPS
   751	Objects", P. Vishnubhotia, Proc 8th Intl Conf Distrib Com Sys, IEEE 1988,
   752	pp.256-264.
   753	
   754	ALTAC - An extended FORTRAN II for Philco 2000, built on TAC.  Sammet 1969,
   755	p.146.
   756	
   757	ALTRAN - W.S. Brown, Bell Labs, ca. 1968.  A FORTRAN extension for rational
   758	algebra.  "The ALTRAN System for Rational Function Manipulation - A
   759	Survey", A.D. Hall, CACM 14(8):517-521 (Aug 1971).
   760	
   761	Amber -
   762	
   763	  1. Adds CSP-like concurrency to ML.  Similar to Galileo.  Concurrency,
   764	multiple inheritance, persistence.  Programs must be written in two type
   765	faces, roman and italics!  Both static and dynamic types.  "Amber", L.
   766	Cardelli, TR Bell Labs 1984.  Implementation for Mac.
   767	
   768	  2. U Washington, late 80's.  An object-oriented distributed language
   769	based on a subset of C++.
   770	
   771	AMBIT - Algebraic Manipulation by Identity Translation (also claimed:
   772	"Acronym May Be Ignored Totally").  C. Christensen, Massachusetts Computer
   773	Assocs, 1964.  An early pattern-matching language aimed at algebraic
   774	manipulation.  Sammet 1969, pp.454-457.
   775	
   776	AMBIT/G - (G for graphs).  "An Example of the Manipulation of Directed
   777	Graphs in the AMBIT/G Programming Language", C. Christensen, in Interactive
   778	Systems for Experimental Applied Mathematics, M. Klerer et al, eds,
   779	Academic Press 1968, pp.423-435.
   780	
   781	AMBIT/L - (L for lists).  List handling, allows pattern matching rules
   782	based on two-dimensional diagrams.  "An Introduction to AMBIT/L, A
   783	Diagrammatic Language for List Processing", Carlos Christensen, Proc 2nd
   784	ACM Symp Symb and Alg Manip (Mar 1971).
   785	
   786	AMBIT/S - (S for strings). 
   787	
   788	AMBUSH - Language for linear programming problems in a materials-
   789	processing/transportation network.  "AMBUSH - An Advanced Model Builder for
   790	Linear Programming", T.R. White et al, National Petroleum Refiners Assoc
   791	Comp Conf (Nov 1971).
   792	
   793	AML - IBM, 1980's.  High-level language for industrial robots.  "AML: A
   794	Manufacturing Language", R.H. Taylor et al, Inst J Robot Res 1(3):19-43.
   795	
   796	AML/E - AML Entry.  Simple version of AML, implemented on PC, with graphic
   797	display of the robot position.
   798	
   799	AMP - Algebraic Manipulation Package.  Symbolic math, written in Modula-2,
   800	seen on CompuServe.
   801	
   802	AMPL - "AMPL: Design, Implementation and Evaluation of a Multiprocessing
   803	Language", R. Dannenberg, CMU 1981.  "Loglan Implementation of the AMPL
   804	Message Passing System", J. Milewski SIGPLAN Notices 19(9):21-29 (Sept
   805	1984).
   806	
   807	AMPPL-II - Associative Memory Parallel Processing Language.  Early 70's.
   808	
   809	AMTRAN - Automatic Mathematical TRANslation.  NASA Huntsville, 1966.  For
   810	IBM 1620, based on Culler-Fried System, requires special terminal. 
   811	"AMTRAN: An Interactive Computing System", J. Reinfelds, Proc FJCC 37:537-
   812	542, AFIPS (Fall 1970).
   813	
   814	ANCP - Early system on Datatron 200 series.  Listed in CACM 2(5):16 (May
   815	1959).
   816	
   817	ANDF - Architecture Neutral Distribution Format.  OSF's request for a
   818	universal intermediate language, allowing software to be developed and
   819	distributed in a single version, then installed on a variety of hardware. 
   820	"Architecture Neutral Distribution Format: A White Paper", Open Software
   821	Foundation, Nov 1990.  (See UNCOL).
   822	list: andf-tech@osf.org
   823	
   824	Andorra-I - The OR parallelism of Aurora plus the AND parallelism of
   825	Parlog.  "Andorra-I: A Parallel Prolog System that Transparently Exploits
   826	both And- and Or-Parallelism", V.S Costa et al, SIGPLAN Notices 26(7):83-93
   827	(July 1991).
   828	
   829	Andorra-Prolog - "Andorra-Prolog: An Integration of Prolog and Committed
   830	Choice Languages", S. Haridi et al, Intl Conf Fifth Gen Comp Sys 1988, ICOT
   831	1988.
   832	
   833	Animus - "Constraint-Based Animation: The Implementation of Temporal
   834	Constraints in the Animus System", R. Duisberg, PhD Thesis U Washington
   835	1986.
   836	
   837	Anna - ANNotated Ada.  ca. 1980.  Adds semantic assertions in the form of
   838	Ada comments.  "ANNA - A Language for Annotating Ada Programs", David
   839	Luckham et al, Springer 1987.
   840	ftp: anna.stanford.edu
   841	
   842	ANSI C - Revision of C, adding function prototypes, structure passing and
   843	assignment, and a standard set of library functions.  ANSI X3.159-1989.
   844	
   845	ANSI C++ - X3J16 committee.  (They're workin' on it.)
   846	
   847	ANSI FORTH - Soon-to-be-adopted standard.
   848	
   849	APAL - Array Processor Assembly Language.  For the DAP parallel machine.
   850	
   851	APAREL - A PArse REquest Language.  PL/I extension to provide BNF parsing
   852	routines, for IBM 360.  "APAREL: A Parse Request Language", R.W. Balzer et
   853	al, CACM 12(11) (Nov 1969).
   854	
   855	APDL - Algorithmic Processor Description Language.  ALGOL-60-like language
   856	for describing computer design, for CDC G-21.  "The Description,
   857	Simulation, and Automatic Implementation of Digital Computer Processors",
   858	J.A. Darringer, Ph.D Thesis EE Dept, CMU May 1969.
   859	
   860	APL - A Programming Language.  Ken Iverson Harvard U 1957-1960.  Designed
   861	originally as a notation for the concise expression of mathematical
   862	algorithms.  Went unnamed and unimplemented for many years.  Finally a
   863	subset APL\360 was implemented in 1964.  APL is an interactive
   864	array-oriented language with many innovative features, written using a non-
   865	standard character set.  It is dynamically typed with dynamic scope.  All
   866	operations are either dyadic infix or monadic prefix, and all expressions
   867	are evaluated from right to left.  The only control structure is branch. 
   868	APL introduced several functional forms but is not purely functional.  "A
   869	Programming Language", Kenneth E. Iverson, Wiley, 1962.  Versions: APL\360,
   870	APL SV, VS APL, Sharp APL, Sharp APL/PC, APL*PLUS, APL*PLUS/PC, APL*PLUS/PC
   871	II, MCM APL, Honeyapple, and DEC APL.
   872	(See Iverson's Language).
   873	
   874	APL2 - IBM.  An APL extension with nested arrays.  "APL2 Programming:
   875	Language Reference", IBM Aug 1984.  Order No. SH20-9227-0.
   876	
   877	APLGOL - H-P?  An APL with ALGOL-like control structure.
   878	
   879	APPLE - Revision of APL for the Illiac IV.
   880	
   881	Applesoft BASIC - Version of BASIC on Apple computers.
   882	
   883	APPLOG - Unifies logic and functional programming.  "The APPLOG Language",
   884	S. Cohen in Logic Programming, deGroot et al eds, P-H 1986, pp.39-276.
   885	
   886	APT - Automatically Programmed Tools.  For numerically controlled machine
   887	tools.  "APT Part Programming", McGraw-Hill.  Versions: APT II (IBM 704,
   888	1958), APT III (IBM 7090, 1961).  Sammet 1969, p.605.
   889	
   890	APX III - Early system on Datatron 200 series.  Listed in CACM 2(5):16 (May
   891	1959).
   892	
   893	AQL - Picture query language, extension of APL.  "AQL: A Relational
   894	Database Management System and Its Geographical Applications", F. Antonacci
   895	et al, in Database Techniques for Pictorial Applications, A. Blaser ed,
   896	pp.569-599.
   897	
   898	Arctic - Real-time functional language, used for music synthesis.  "Arctic:
   899	A Functional Language for Real-Time Control", R.B. Dannenberg, Conf Record
   900	1984 ACM Symp on LISP and Functional Prog, ACM.
   901	
   902	ARES - Pictorial query language.  "A Query Manipulation System for Image
   903	Data Retrieval", T. Ichikawa et al, Proc IEEE Workshop Picture Data
   904	Description and Management, Aug 1980, pp.61-67.
   905	
   906	Ariel - Array-oriented language for CDC 6400.  "Ariel Reference Manual", P.
   907	Devel, TR 22, CC UC Berkeley, Apr 1968.
   908	
   909	Argus - LCS, MIT.  A successor to CLU.  Supports distributed programming
   910	through guardians (like monitors, but can be dynamically created) and
   911	atomic actions (indivisible activity).  cobegin/coend.  "Argus Reference
   912	Manual", B. Liskov et al., TR-400, MIT/LCS, 1987.  "Guardians and Actions:
   913	Linguistic Support for Robust, Distributed Programs", B. Liskov
   914	<liskov@lcs.mit.edu> et al, TOPLAS 5(3):381-404 (1983).
   915	
   916	Ariel - An array-oriented language.  "A New Survey of the Ariel Programming
   917	Language", P. Deuel, TR 4, Ariel Consortium, UC Berkeley (June 1972).
   918	
   919	ARITH-MATIC - Alternate name for A-3.
   920	
   921	ART - Real-time functional language, timestamps each data value when it was
   922	created.  "Applicative Real-Time Programming", M. Broy, PROC IFIP 1983, N-
   923	H.
   924	
   925	ARTSPEAK - Early simple language for plotter graphics.  "The Art of
   926	Programming, ARTSPEAK", Henry Mullish, Courant Inst (Nov 1974).
   927	
   928	ASF - An algebraic specification language.  "Algebraic Specification", J.A.
   929	Bergstra et al, A-W 1989.
   930	
   931	Ashmedai - Michael Levine <levine@cpwsca.psc.edu>  Symbolic math package. 
   932	Had an influence on SMP and FORM.  Versions for Univac 1108 and VAX VMS.
   933	
   934	ASIS - Ada Semanic Interface Specification.  An intermediate representation
   935	for Ada.  (See Diana.)
   936	info: sblake@telesoft.com
   937	
   938	ASL - Algebraic Specification Language.  "Structured Algebraic
   939	Specifications: A Kernel Language", M. Wirsing, Theor Comput Sci 42,
   940	pp.123-249, Elsevier 1986.
   941	
   942	ASM - Assembly language on CP/M machines (and a lot of others).
   943	
   944	ASN-1 - Abstract Syntax Notation.  Data description language used by the
   945	Natl Center for Biotechnology Information.
   946	
   947	ASP - Query language?  Sammet 1969, p.702.
   948	
   949	ASPOL - A Simulation Process-Oriented Language.  An ALGOL-like language for
   950	computer simulation.  "Process and Event Control in ASPOL", M.H.
   951	MacDougall, Proc Symp on Simulation of Computer Systems, NBS (Aug 1975).
   952	
   953	ASPEN - Toy language for teaching compiler construction.  "ASPEN Language
   954	Specifications", T.R. Wilcox, SIGPLAN Notices 12(11):70-87 (Nov 1977).
   955	
   956	ASPIK - Multiple-style specification language.  "Algebraic Specifications
   957	in an Integrated Software Development and Verification System", A. Voss,
   958	Diss, U Kaiserslautern, 1985.
   959	
   960	Aspirin - MITRE Corp.  A language for the description of neural networks. 
   961	For use with the MIGRAINES neural network simulator.  Version: 6.0
   962	ftp:ftp.cognet.ucla.edu:alexis/am6.tar.Z
   963	
   964	ASPLE - Toy language.  "A Sampler of Formal Definitions", M. Marcotty et
   965	al, Computing Surveys 8(2):191-276 (Feb 1976).
   966	
   967	ASSEMBLY - Early system on IBM 702.  Listed in CACM 2(5):16 (May 1959).
   968	
   969	ASTAP - Advanced STatistical Analysis Program.  Analyzing electronic
   970	circuits and other networks.  "Advanced Statistical Analysis Program
   971	(ASTAP) Program Reference Manual", SH-20-1118, IBM, 1973.
   972	
   973	Astral - Based on Pascal, never implemented.  "ASTRAL: A Structured and
   974	Unified Approach to Database Design and Manipulation", T. Amble et al, in
   975	Proc of the Database Architecure Conf, Venice, June 1979.
   976	
   977	AT-3 - Original name of MATH-MATIC.  Sammet 1969, p.135.
   978	
   979	ATLAS - Abbreviated Test Language for Avionics Systems.  _THE_ mil-spec
   980	language for automatic testing of avionics equipment.  Replaced/upgraded
   981	Gaelic and several other test languages.  "IEEE Standard ATLAS Test
   982	Language", IEEE Std 416-1976.
   983	
   984	Atlas Autocode - Autocode for the Ferranti Atlas, which may have been the
   985	first commercial machine with hardware-paged virtual memory.  (See
   986	Autocode).
   987	
   988	Atlas Commercial Language - 
   989	
   990	ATOLL - Acceptance, Test Or Launch Language.  Language used for automating
   991	the checkout and launch of Saturn rockets.  "SLCC ATOLL User's Manual", IBM
   992	70-F11-0001, Huntsville AL Dec 1970.
   993	
   994	A'UM - K. Yoshida and T. Chikayama <chik@icot.or.jp>.  Built on top of KL1. 
   995	"A'UM - A Stream-based Concurrent Logic Object-Oriented Language", K.
   996	Yoshida et al, Proc 3rd Intl Conf Fifth Gen Comp Sys, Springer 1988,
   997	pp.638-649.
   998	
   999	Aurora - "The Aurora Or-Parallel Prolog System", E. Lusk et al, Proc 3rd
  1000	Intl Conf on Fifth Generation Comp Systems, pp. 819-830, ICOT, A-W 1988.
  1001	
  1002	AUTOCODER - Alick E. Glennie, 1952.  Possibly the first primitive compiler,
  1003	it translated symbolic statements into machine language for the Manchester
  1004	Mark I computer.  Autocoding came to be a generic term for symbolic
  1005	assembly language programming, and versions of Autocode were developed for
  1006	many machines: Ferranti Atlas, Titan, Mercury and Pegasus, and IBM 702 and
  1007	705.
  1008	
  1009	AUTOGRAF - Describing bar charts.  "User's Manual for AUTOGRAF", Cambridge
  1010	Computer Assoc (Dec 1972).
  1011	
  1012	AUTOGRP - AUTOmated GRouPing system.  Interactive statistical analysis.  An
  1013	extension of CML.  "AUTOGRP: An Interactive Computer System for the
  1014	Analysis of Health Care Data", R.E. Mills et al, Medical Care 14(7) (Jul
  1015	1976).
  1016	
  1017	Autolisp - Dialect of LISP used by the Autocad CAD package, Autodesk,
  1018	Sausalito, CA.
  1019	
  1020	AUTOMATH - Eindhoven, Netherlands.  A very high level language for writing
  1021	proofs.  "The Mathematical Language AUTOMATH, Its Usage and Some of its
  1022	Extensions", N.G. deBruijn, in Symp on Automatic Demonstration, LNM 125,
  1023	Springer 1970.
  1024	
  1025	Autopass - "Autopass: An Automatic Programming System for Computer-
  1026	Controlled Mechanical Assembly", L.I. Lieberman et al, IBM J Res Dev
  1027	21(4):321-333 (1979).
  1028	
  1029	AUTO-PROMPT - Numerical control language from IBM for 3-D milling.  Sammet
  1030	1969, p.606.
  1031	
  1032	Autostat - "Autostat: A Language for Statistical Programming", A.S. Douglas
  1033	et al, Computer J 3:61 (1960).
  1034	
  1035	Avalon/C++ - 1986.  Fault-tolerant distributed systems, influenced by
  1036	Argus.  A concurrent extension of C++ with servers and transactions. 
  1037	"Camelot and Avalon: A Distributed Transaction Facility", J.L. Eppinger et
  1038	al, Morgan Kaufmann 1990.
  1039	
  1040	Avalon/Common LISP - Prototype only.  "Reliable Distributed Computing with
  1041	Avalon/Common LISP", S.M. Clamen et al, CMU-CS-89-186 and Proc Intl Conf on
  1042	Computer Languages, Mar 1990.
  1043	
  1044	AXIOM - IBM.  Commercially available subset of Scratchpad.
  1045	
  1046	AXLE - An early string processing language.  Program consists of an
  1047	assertion table which specifies patterns, and an imperative table which
  1048	specifies replacements.  "AXLE: An Axiomatic Language for String
  1049	Transformations", K. Cohen et al, CACM 8(11):657-661 (Nov 1965).
  1050	
  1051	AWK - Aho Weinberger Kernighan.  1978.  Text processing/macro language. 
  1052	"The AWK Programming Language" A. Aho, B. Kernighan, P. Weinberger, A-W
  1053	1988.  (See Bawk, Gawk, Mawk, Nawk, Tawk.)
  1054	
  1055	B - 
  1056	
  1057	  1. Thompson, 1970.  A systems language written for Unix on the PDP-11. 
  1058	Derived from BCPL, and very similar to it except for syntax.  B was the
  1059	predecessor of C.  "The Programming Language B", S.C. Johnson & B.W.
  1060	Kernighan, CS TR 8, Bell Labs (Jan 1973).
  1061	
  1062	  2. L. Meertens & S. Pemberton.  Simple interactive programming language,
  1063	the predecessor of ABC[1].  "Draft Proposal for the B Language", Lambert
  1064	Meertens, CWI, Amsterdam, 1981.
  1065	ftp: minnehaha.rhrk.uni-kl.de:pub/languages/B.tar.Z
  1066	
  1067	B-0 - Original name of FLOW-MATIC, Remington Rand.  UNIVAC I or II ca.
  1068	1958.
  1069	
  1070	BABEL - 
  1071	
  1072	  1. Mentioned in The Psychology of Computer Programming, G.M. Weinberg,
  1073	Van Nostrand 1971, p.241.
  1074	
  1075	  2. Higher-order functional plus first-order logic language.  "Graph-Based
  1076	Implementation of a Functional Logic Language", H. Kuchen et al, Proc ESOP
  1077	90, LNCS 432, Springer 1990, pp.271-290.  "Logic Programming with Functions
  1078	and Predicates: The Language BABEL", Moreno-Navarro et al, J Logic Prog
  1079	12(3) (Feb 1992).
  1080	
  1081	BACAIC - Boeing Airplane Company Algebraic Interpreter Coding system. 
  1082	Pre-FORTRAN system on the IBM 701, IBM 650.
  1083	
  1084	BAL - Basic Assembly Language.  What most people called IBM 360 assembly
  1085	language.  (See ALC).
  1086	
  1087	BALGOL - ALGOL on Burroughs 220.  Sammet 1969, p.174.
  1088	
  1089	BALITAC - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  1090	
  1091	BALM - Block and List Manipulation.  Harrison, 1970.  Extensible language
  1092	with LISP-like features and ALGOL-like syntax, for CDC 6600.  "The Balm
  1093	Programming Language", Malcolm Harrison, Courant Inst (May 1973).
  1094	
  1095	BAP - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  1096	
  1097	Baroque - Boyer & Moore, 1972.  Early logic programming language. 
  1098	"Computational Logic: Structure Sharing and Proof of program Properties",
  1099	J. Moore, DCL Memo 67, U Edinburgh 1974.
  1100	
  1101	bash - Bourne Again SHell.  GNU's command shell for Unix.
  1102	ftp: prep.ai.mit.edu:pub/gnu/bash-1.10.tar.Z
  1103	
  1104	BASIC - Beginner's All-purpose Symbolic Instruction Code.  John G. Kemeny &
  1105	Thomas E. Kurtz, Dartmouth College, designed 1963, first ran on an IBM 704
  1106	on May 1, 1964.  Quick and easy programming by students and beginners. 
  1107	BASIC exists in many dialects, and is popular on microcomputers with sound
  1108	and graphics support.  Most micro versions are interactive and interpreted,
  1109	but the original Dartmouth BASIC was compiled.  ANSI Minimal BASIC, ANS
  1110	X3.60-1978.
  1111	list: basic@ireq.hydro.qc.ca
  1112	
  1113	BASIC AUTOCODER - Early system on IBM 7070.  Listed in CACM 2(5):16 (May
  1114	1959).
  1115	
  1116	Basic COBOL - Subset of COBOL from COBOL-60 standards.  Sammet 1969, p.339.
  1117	
  1118	Basic FORTRAN - Subset of FORTRAN.  Sammet 1969, p.150.
  1119	
  1120	Basic JOVIAL - Subset of JOVIAL, ca. 1965.  Sammet 1969, p.529.
  1121	
  1122	bawk - Bob Brodt.  AWK-like pattern-matching language, distributed with
  1123	Minix.
  1124	
  1125	BC NELIAC - Version of NELIAC, post 1962.  Sammet 1969, p.197.
  1126	
  1127	BCL - Successor to Atlas Commercial Language.  "The Provisional BCL
  1128	Manual", D. Hendry, U London 1966.
  1129	
  1130	BCPL - Basic CPL.  Richards 1969.  British systems language, a descendant
  1131	of CPL and the inspiration for B and C.  BCPL is low-level,
  1132	block-structured and typeless, and provides only one-dimensional arrays. 
  1133	Case is not significant, but conventionally reserved words begin with a
  1134	capital. 
  1135	    Flow control: If-Then, Test-Then-Else, Unless-Do, While-Do, Until-Do,
  1136	Repeat, Repeatwhile, Repeatuntil, For-to-By-Do, Loop, Break and
  1137	Switchon-Into-Case-Default-Endcase.  BCPL has conditional expressions,
  1138	pointers, and manifest constants.  'Valof' or 'Resultis' cause a compound
  1139	statement to produce a value.  Parameters are call-by-value.
  1140	    Program segments communicate via the global vector where system and
  1141	user variables are stored in fixed numerical locations in a single array. 
  1142	BCPL was used to implement the TRIPOS OS.  "BCPL - The Language and its
  1143	Compiler", Martin Richards & Colin Whitby-Stevens, Cambridge U Press 1979.
  1144	
  1145	BDL - Block Diagram Compiler.  A block-diagram simulation tool, with
  1146	associated language.  "A Software Environment for Digital Signal-Processing
  1147	Simulations," D.H. Johnson & R.E. Vaughan, Circuits Systems and Signal
  1148	Processing 6(1):31-43, (1987).
  1149	
  1150	BEGL - Back End Generator Language.  A code generator description language. 
  1151	The input language for the back end generator BEG.  "BEG - A Generator for
  1152	Rfficient Back Ends", H. Emmelmann et al, SIGPLAN Notices 24(7):227-237
  1153	(Jul 1989).  "BEG  - A Back End Generator - User Manual", H. Emmelmann
  1154	<emmel@karlsruhe.gmd.dbp.de>, GMD, U Karlsruhe 1990.
  1155	ftp: gatekeeper.dec.com:.9/gmd/cocktail/beg
  1156	
  1157	BELL - Early system on IBM 650 and Datatron 200 series. [Is Datatron
  1158	version the same?]  Listed in CACM 2(5):16 (May 1959).  Versions: BELL L2,
  1159	BELL L3.
  1160	
  1161	Bertrand - (named for the British mathematician Bertrand Russell (1872-
  1162	1970)).  Wm. Leler.  Rule-based specification language based on augmented
  1163	term rewriting.  Used to implement constraint languages.  The user must
  1164	explicitly specify the tree-search and the constraint propagation. 
  1165	"Constraint Programming Languages - Their Specification and Generation", W.
  1166	Leler, A-W 1988, ISBN 0-201-06243-7.
  1167	ftp:nexus.yorku.ca:/pub/scheme/scm/bevan.sha  
  1168	
  1169	BETA - Kristensen, Madsen<olmadsen@daimi.aau.dk>, Moller-Pedersen &
  1170	Nygaard, 1983.  Object-oriented language with block structure, coroutines,
  1171	concurrency, strong typing, part objects, separate objects and classless
  1172	objects.  Central feature is a single abstrction mechanism called
  1173	"patterns", a generalization of classes, providing instantiation and
  1174	hierarchical inheritance for all objects including procedures and
  1175	processes.  "The BETA Programming Language", B.B. Kristensen et al, in
  1176	Research Directions in Object-Oriented Programming, B.D. Shriver et al eds,
  1177	MIT Press, 1987.  Mjolner Informatics ApS, implementations for Mac, Sun,
  1178	HP, Apollo.
  1179	info: support@mjolnet.dk
  1180	list: usergroup@mjolner.dk
  1181	
  1182	BIOR - Early system on UNIVAC I or II.  Listed in CACM 2(5):16 (May 1959).
  1183	
  1184	BLAZE - Single assignment language for parallel processing.  "The BLAZE
  1185	Language: A Parallel Language for Scientific Programming", P. Mehrotra et
  1186	al, J Parallel Comp 5(3):339-361 (Nov 1987).
  1187	
  1188	BLAZE 2 - Object-oriented successor to BLAZE.  "Concurrent Object Access in
  1189	BLAZE 2", P. Mehrotra et al, SIGPLAN Notices 24(4):40-42 (Apr 1989).
  1190	
  1191	B-LINE - Early CAD language.  "B-LINE, Bell Line Drawing Language", A.J.
  1192	Frank, Proc Fall JCC 33 1968.
  1193	
  1194	BLISS - Basic Language for Implementation of System Software.  W.A. Wulf,
  1195	CMU  ca. 1969.  An expression language, block-structured, and typeless,
  1196	with exception handling facilities, coroutines, a macro system, and a
  1197	highly optimizing compiler.  One of the first non-assembly languages for OS
  1198	implementation.  Gained fame for its lack of a goto.  Also lacks implicit
  1199	dereferencing: all symbols stand for addresses, not values.  "BLISS: A
  1200	Language for Systems Programming", W.A. Wulf et al, CACM 14(12):780-790
  1201	(Dec 1971).  Versions: CMU BLISS-10 for the PDP-10.  CMU BLISS-11, a cross
  1202	compiler for PDP-11 running on PDP-10, to support the C.mmp/Hydra project. 
  1203	DEC BLISS-32 for VAX/VMS.
  1204	
  1205	Blosim - Block-Diagram Simulator.  A block-diagram simulator. "A Tool for
  1206	Structured Functional Simulation", D.G. Messerschmitt, IEEE J on Selected
  1207	Areas in Comm, SAC-2(1):137-147, 1984.
  1208	
  1209	BLOX - A visual language.
  1210	
  1211	BLUE - Softech.  A language proposed to meet the DoD Ironman requirements
  1212	which led to Ada.  "On the BLUE Language Submitted to the DoD", E.W.
  1213	Dijkstra, SIGPLAN Notices 13(10):10-15 (Oct 1978).
  1214	
  1215	BMASF - Basic Module Algebra Specification Language?  "Design of a
  1216	Specification Language by Abstract Syntax Engineering", J.C.M. Baeten et
  1217	al, in LNCS 490, pp.363-394.
  1218	
  1219	BMDP - BioMeDical Package.  UCB, 1961.  Statistical language, first
  1220	implemented in FORTRAN for the IBM 7090.
  1221	
  1222	BMF - Bird-Meertens Formalism.  A calculus for derivation of a functional
  1223	program from a given specification.  "A Calculus of Functions for Program
  1224	Derivation", R.S. Bird, in Res Topics in Fnl Prog, D. Turner ed, A-W 1990.
  1225	
  1226	BNF - Backus Normal Form, later renamed Backus-Naur Form at the suggestion
  1227	of Donald Knuth.  A formalism to express the productions of context-free
  1228	grammars.
  1229	
  1230	BNR Pascal - "Remote Rendezvous", N. Gammage et al, Soft Prac & Exp
  1231	17(10):741-755 (Oct 1987.
  1232	
  1233	BNR Prolog - Constraint logic.
  1234	
  1235	Bob - David Betz.  A tiny object-oriented language.  Dr Dobbs J, Sep 1991,
  1236	p.26.
  1237	ftp: mv.mv.com:pub/ddj/bob15.arc
  1238	
  1239	BOEING - Early system on IBM 1103 or 1103A.  Listed in CACM 2(5):16 (May
  1240	1959).
  1241	
  1242	Booster - Data parallel language.  "The Booster Language", E. Paalvast, TR
  1243	PL 89-ITI-B-18, Inst voor Toegepaste Informatica TNO, Delft, 1989.
  1244	
  1245	BOSS - Bridgport Operating System Software.  Derivative of the ISO 1054
  1246	numerical machine control language for milling, etc.
  1247	
  1248	Boxer - Hal Abelson and Andy diSessa, Berkeley.  A visual language, claims
  1249	to be the successor to Logo.  Boxes used to represent scope.
  1250	
  1251	BRAVE - ?
  1252	
  1253	BRIDGE - Component of ICES for civil engineers.  Sammet 1969, p.616.
  1254	
  1255	Bridgetalk - A visual language.
  1256	
  1257	Brilliant - One of five pedagogical languages based on Markov algorithms,
  1258	used in "Nonpareil, a Machine Level Machine Independent Language for the
  1259	Study of Semantics", B. Higman, ULICS Intl Report No ICSI 170, U London
  1260	(1968).  (cf. Diamond, Nonpareil, Pearl[3], Ruby[2]).
  1261	
  1262	BRUIN - Brown University Interactive Language.  Simple interactive language
  1263	with PL/I-like syntax, for IBM 360.  "Meeting the Computational
  1264	Requirements of the University, Brown University Interactive Language",
  1265	R.G. Munck, Proc 24th ACM Conf, 1969.
  1266	
  1267	BSL - Variant of IBM's PL/S systems language.  Versions: BSL1, BSL2.
  1268	
  1269	BUGSYS - Pattern recognition and preparing animated movies, for IBM 7094
  1270	and IBM 360. "BUGSYS: A Programming System for Picture Processing - Not for
  1271	Debugging", R.A. Ledley et al, CACM 9(2) (Feb 1966).
  1272	
  1273	Burge's Language - Unnamed functional language based on lambda-calculus. 
  1274	Recursive Programming techniques", W.H. Burge, A-W 1975.
  1275	
  1276	Butterfly Common LISP - Parallel version of Common LISP for the BBN
  1277	Butterfly machine.
  1278	
  1279	Butterfly Scheme - Parallel version of Scheme for the BBN Butterfly.
  1280	
  1281	C - Dennis Ritchie, Bell Labs, ca. 1972.  Originally a systems language for
  1282	Unix on the PDP-11, briefly named NB.  Influenced by BCPL through
  1283	Thompson's B.  Terse, low-level and permissive.  Preprocessor.  C has
  1284	rapidly become the language most widely used for software implementation. 
  1285	"The C Programming Language", Brian Kernighan & Dennis Ritchie, P-H 1978.
  1286	
  1287	C* - Thinking Machines, 1987.  Superset of ANSI C, object-oriented, data-
  1288	parallel with synchronous semantics, for the Connection Machine.  Adds a
  1289	data type, the 'domain', and a selection statement for parallel execution
  1290	in domains.  J.R. Rose et al, "C*: An Extended C Language for Data Parallel
  1291	Programming", in Proc Second Intl Conf on Supercomputing, L.P. Kartashev et
  1292	al eds, May 1987, pp.2-16.  "C* Programming Manual", Thinking Machines
  1293	Corp, 1986.
  1294	info: customer-support@think.com
  1295	      documentation-order@think.com
  1296	
  1297	C++ - Stroustrup <bs@alice.att.com>.  An object-oriented superset of C.  In
  1298	C++ a class is a user-defined type, syntactically a struct with member
  1299	functions.  Constructors and destructors are member functions called to
  1300	create or destroy instances.  A friend is a nonmember function that is
  1301	allowed to access the private portion of a class.  C++ allows implicit type
  1302	conversion, function inlining, overloading of operators and function names,
  1303	and default function arguments.  It has streams for I/O and references. 
  1304	"The C++ Programming Language", Bjarne Stroustrup, A-W, 1986.  (See G++).
  1305	ftp: grape.ecs.clarkson.edu:/pub/msdos/djgpp/djgpp.zip for MS-DOS
  1306	
  1307	C++ 2.0 - May 1989.  Multiple inheritance, type-safe linkage, pointers to
  1308	members, abstract classes.  "C++ 2.0 Draft Reference Manual"
  1309	
  1310	C++ 2.1 - "Annotated C++ Reference Manual", B. Stroustrup et al, A-W 1990.
  1311	
  1312	C++Linda - "The AUC C++Linda System", C. Callsen et al, U Aalborg, in
  1313	Linda-Like Systems and Their Implementation, G. Wilson ed, U Edinburgh TR
  1314	91-13, 1991.
  1315	
  1316	C-10 - Improved version of COLINGO.  Sammet 1969, p.702.
  1317	
  1318	CADET - Computer Aided Design Experimental Translator.  Sammet 1969, p.683.
  1319	
  1320	CAFE - "Job Control Languages: MAXIMOP and CAFE", J. Brandon, Proc BCS Symp
  1321	on Job Control Languages--Past Present and Future, NCC, Manchester, England
  1322	1974.
  1323	
  1324	CAGE - Early system on IBM 704.  Listed in CACM 2(5):16 (May 1959).
  1325	
  1326	CAJOLE - Dataflow language.  "The Data Flow Programming Language CAJOLE: An
  1327	Informal INtroduction", C.L. Hankin et al, SIGPLAN Notices 16(7):35-44 (Jul
  1328	1981).
  1329	
  1330	CAL - Course Author Language.  CAI language for IBM 360.  "Design of a
  1331	Programming Language for Computer Assisted Learning", F.M. Tonge, Proc IFIP
  1332	Congress 1968, v2.
  1333	
  1334	Caliban - Kelly, Imperial College.  Declarative annotation language,
  1335	controlling the partitioning and placement of the evaluation of expressions
  1336	in a distributed functional language.  "Functional Programming for Loosely-
  1337	coupled Multiprocessors", P. Kelly <phjk@doc.ic.ac.uk>, Pitman/MIT Press,
  1338	1989.
  1339	
  1340	Calico - Bell Labs.  Object-oriented language.  IEEE Software, May 1991.
  1341	
  1342	CAMAL - CAMbridge ALgebra system.  Symbolic math used in Celestial
  1343	Mechanics and General Relativity.  Implemented in BCPL on Titan.  "CAMAL
  1344	User's Manual", John P. Fitch, Cambridge U, England (1975).  "The Design of
  1345	the Cambridge Algebra System", S.R. Bourne et al, Proc 2nd Symp of Symb &
  1346	Alg Manip, SIGSAM 1971.
  1347	
  1348	Camelot Library - "The Camelot Library", J. Bloch, in Guide to the Camelot
  1349	Distributed Transaction Facility: Release I, A.Z. Spector et al eds, CMU
  1350	1988, pp.29-62.
  1351	
  1352	CAMIL - Computer Assisted/Managed Instructional Language.  Used for CAI at
  1353	Lowry AFB, CO.  "The CAMIL Programming Language", David Pflasterer, SIGPLAN
  1354	Notices 13(11):43 (Nov 1978).
  1355	
  1356	CAML - 
  1357	
  1358	  1. Categorical Abstract Machine Language.  G. Huet and G. Cousineau.  A
  1359	version of ML intermediate between LCF ML and SML.  Lazy data structures. 
  1360	Built on the Categorical Abstract Machine.  "The CAML Reference Manual", P.
  1361	Weis et al, TR INRIA-ENS, 1989.
  1362	ftp: nuri.inria.fr:lang/caml, Version 3.1
  1363	info: caml-light@margaux.inria.fr
  1364	list:caml-list@margaux.inria.fr
  1365	
  1366	  2. Language for preparation of animated movies, listed [?] 1976.
  1367	
  1368	CAML Light - Xavier Leroy.  CAML subset.  A small portable implementation,
  1369	uses a bytecode interpreter written in C.  Runs on Unix, MS-DOS, Macs and
  1370	Amiga.  Version: 0.4
  1371	ftp: nuri.inria.fr
  1372	info: caml-light@margaux.inria.fr
  1373	
  1374	Candle - related to IDL, Scorpion system?
  1375	
  1376	Cantor - Object-oriented language with fine-grained concurrency.  Athas,
  1377	Caltech 1987.  "Multicomputers: Message Passing Concurrent Computers", W.
  1378	Athas et al, Computer 21(8):9-24 (Aug 1988)..
  1379	
  1380	CASE SOAP III - Version of SOAP assembly language for IBM 650.  Listed in
  1381	CACM 2(5):16 (May 1959).
  1382	
  1383	CAT - Common Abstract Tree Language.  R. Voeller & Uwe Schmidt, U Kiel,
  1384	Germany 1983.  Universal intermediate language, used by Norsk Data in their
  1385	family of compilers.  "A Multi-Language Compiler System with Automatically
  1386	Generated Codegenerators, U. Schmidt et al, SIGPLAN Notices 19(6):202-2121
  1387	(June 1984).
  1388	
  1389	CATO - FORTRAN-like CAI language for PLATO system on CDC 1604.  "CSL PLATO
  1390	System Manual", L.A. Fillman, U Illinois, June 1966.
  1391	
  1392	CAYLEY - Symbolic math system for group theory.  John Cannon, U Sydney,
  1393	Australia, 1976.  "An Introduction to the Group Theory Language CAYLEY", J.
  1394	Cannon, Computational Group Theory, M.D. Atkinson ed, Academic Press 1984,
  1395	pp.148-183.  Current version: V3.7 for Sun, Apollo, VAX/VMS.
  1396	info: cayley@maths.su.oz.au
  1397	
  1398	CBASIC - Gordon Eubanks, now at Symantec.  A BASIC compiler.  Evolved
  1399	from/into EBASIC.
  1400	
  1401	CCalc - Symbolic math for MS-DOS, available from Simtel.
  1402	
  1403	CCL - 
  1404	
  1405	  1. Coral Common LISP.
  1406	
  1407	  2. Computer Control Language.  English-like query language based on
  1408	COLINGO, for IBM 1401 and IBM 1410.  
  1409	
  1410	CCLU - Cambridge CLU.  G. Hamilton et al, CUCL.  CLU extended to support
  1411	concurrency, distributed programming, remote procedure calls.
  1412	contact: Jean Bacon <jmb@cl.cam.ac.uk>
  1413	
  1414	CCP - Concurrent Constraint Programming.  Not a language, but a general
  1415	approach.
  1416	
  1417	CCS - Calculus of Communicating Systems.  "A Calculus of Communicating
  1418	Systems", LNCS 92, Springer 1980.  "Communication and Concurrency", R.
  1419	Milner, P-H 1989.
  1420	
  1421	CCSP - Based on CSP.  "Contextually Communicating Sequential Processes - A
  1422	Software Engineering Approach", M. Hull et al, Software Prac & Exp
  1423	16(9):845-864 (Sept 1986).
  1424	
  1425	CDL -
  1426	
  1427	  1. Computer Definition [Design?] Language.  A hardware description
  1428	language.  "Computer Organization and Microprogramming", Yaohan Chu, P-H
  1429	1970.
  1430	
  1431	  2. Command Definition Language.  Portion of ICES used to implement
  1432	commands.  Sammet 1969, p.618-620.
  1433	
  1434	  3. Compiler Definition Language.  "CDL: A Compiler Implementation
  1435	Language", in Methods of Algorithmic Language Implementation, C.H.A Koster,
  1436	LNCS 47, Springer 1977, pp.341-351.  "Using the CDL Compiler Compiler",
  1437	C.H.A. Koster, 1974.  Variant: CDLM used at Manchester.
  1438	
  1439	  4. Common Design Language.  "Common Design Language", IBM, Software
  1440	Engineering Inst, Sept 1983.
  1441	
  1442	Cedar - Superset of Mesa, adding garbage collection, dynamic types and a
  1443	universal pointer type (REF ANY).  A large complex language designed for
  1444	custom Xerox hardware and the Cedar OS/environment.  Data types: atoms,
  1445	lists, ropes ("industrial strength" strings), conditions.  Multiprocessing
  1446	features include threads, monitors, signals and catch phrases.  "A
  1447	Description of the Cedar Language", Butler Lampson, Xerox PARC, CSL-83-15
  1448	(Dec 1983).  "The Structure of Cedar", D. Swinehart et al, SIGPLAN Notices
  1449	20(7):230-244 (July 1985).
  1450	
  1451	CELIP - A cellular language for image processing.  "CELIP: A cellular
  1452	Language for Image Processing", W. Hasselbring <willi@informatik.uni-
  1453	essen.de>, Parallel Computing 14:99-109 (1990).
  1454	
  1455	CELLSIM - Modeling populations of biological cells.  "CELLSIM II User's
  1456	Manual", C.E. Donaghey, U Houston (Sep 1975).
  1457	
  1458	CELP - Computationally Extended Logic Programming.  "Computationally
  1459	Extended Logic Programming", M.C. Rubenstein et al, Comp Langs 12(1):1-7
  1460	(1987).
  1461	
  1462	CESP - Common ESP. AI Language Inst, Mitsubishi - Object-oriented extension
  1463	of Prolog, a Unix-based version of ESP[3].
  1464	info: cesp-request@air.co.jp
  1465	
  1466	CESSL - CEll Space Simulation Language.  Simulating cellular space models. 
  1467	"The CESSL Programming Language", D.R. Frantz, 012520-6-T, CS Dept, U
  1468	Michigan (Sept 1971).
  1469	
  1470	CFD - Computational Fluid Dynamics.  FORTRAN-based parallel language for
  1471	the Illiac IV.
  1472	
  1473	CFP - Communicating Functional Processes.  "Communicating Functional
  1474	Processes", M.C. van Eekelen et al, TR 89-3, U Nijmegen, Netherlands, 1989.
  1475	
  1476	CGGL - ("seagull") Code-Generator Generator Language.  A machine-
  1477	description language based on modeling the computer as a finite-state
  1478	machine.  "A Code Generator Generator Language", M.K. Donegan et al,
  1479	SIGPLAN Notices 14(8):58-64 (Aug 1979).
  1480	
  1481	CGOL - V.R. Pratt, 1977.  A package providing ALGOL-like surface syntax for
  1482	MACLISP.  "CGOL - An Alternative Exernal Representation for LISP Users", V.
  1483	Pratt, MIT AI Lab, Working Paper 89, 1976.
  1484	ftp: mc.lcs.mit.edu:its/ai/lisp/cgol
  1485	
  1486	CHARITY - Cockett, Spencer, Fukushima, 1990-1991.  Functional language
  1487	based purely on category theory.  "About Charity", J.R.B. Cockett
  1488	<cockett@cpcs,ucalgary.ca> et al.  Version for Sun4 available from Tom
  1489	Fukushima <fukushim@cpsc.ucalgary.ca>.
  1490	
  1491	Charme - Bull, 1989.  A language with discrete combinatorial constraint
  1492	logic aimed at industrial problems such as planning and scheduling. 
  1493	Implemented in C.  An outgrowth of ideas from CHIP.  Semantically
  1494	nondeterministic, with choice and backtracking, similar to Prolog.  "Charme
  1495	Reference Manual", AI Development Centre, Bull, France 1990.
  1496	info: cras@bull.fr
  1497	
  1498	CHARYBDIS - LISP program to display math expressions.  Related to MATHLAB. 
  1499	Sammet 1969, p.522.
  1500	
  1501	CHASM - CHeap ASseMbler.  Shareware assembler for MS-DOS.
  1502	
  1503	CHI - A wide spectrum language, the forerunner of Refine.  "Research on
  1504	Knowledge-Based Software Environments at Kestrel Institute", D.R. Smith et
  1505	al, IEEE Trans Soft Eng, SE-11(11) (1985).
  1506	
  1507	CHILI - PL/I-like language for systems proramming.  "CHILI, An Algorithmic
  1508	Language for Systems Programming", CHI-1014, Chi Corp (Sep 1975).
  1509	
  1510	CHILL - CCITT HIgh-Level Language.  ca. 1980.  Real-time language widely
  1511	used in European telecommunications.  "An Analytical Description of CHILL,
  1512	the CCITT High Level Language", P. Branquart, LNCS 128, Springer 1982.
  1513	
  1514	CHIP - 
  1515	
  1516	  1. Early system on IBM 1103 or 1103A.  Listed in CACM 2(5):16 (May 1959).
  1517	
  1518	  2. Constraint Handling In Prolog.  M. Dincbas, ECRC Munich 1985. 
  1519	Constraint logic language, includes boolean unification and a symbolic
  1520	simplex-like algorithm.  Introduced the domain-variable model.  "The
  1521	Constraint Logic Programming Language CHIP", M. Dincbas et al, Proc 2nd
  1522	Intl Conf on Fifth Generation Computer Sys, Tokyo (Nov 1988), pp.249-264. 
  1523	"Constraint Satisfaction in Logic Programming", Van Hentenryck.  Available
  1524	from COSYTEC, 4 rue Jean Rostand, F91893 Orsay, France.
  1525	
  1526	CHIP-48 - Reimplementation of CHIP-8 for the HP-48 calculator.  Andreas
  1527	Gustafson <gson@niksula.hut.fi>, comp.sys.handhelds, Sep 1990.
  1528	ftp: vega.hut.fi:pub/misc/hp48sx/asap/*
  1529	
  1530	CHIP-8 - RCA, Late 70's.  Low-level language (really a high-level machine
  1531	code) for video games on computers using RCA's CDP1802 processor: COSMAC
  1532	VIP, DREAM 6800 and ETI-660.  Now there's an interpreter for the Amiga.
  1533	ftp: ux1.cso.uiuc.edu:pub/amiga/fish/f5/ff537
  1534	
  1535	CHISEL - An extension of C for VLSI design, implemented as a C
  1536	preprocessor.  It produces CIF as output.  "CHISEL - An Extension to the
  1537	Programming language C for VLSI Layout", K. Karplus, PHD Thesis, Stanford
  1538	U, 1982.
  1539	
  1540	CHOCS - Generalization of CCS.  "A Calculus of Higer-Order Communicating
  1541	Systems", B. Thomsen, 16th POPL pp.143-154 (1989).
  1542	
  1543	CIEL - Object-oriented Prolog-like language.  "CIEL: Classes et Instances
  1544	En Logique", M. Gandriau, Thesis ENSEEIHT (1988).
  1545	
  1546	CIF - Caltech Intermediate Form.  Geometry language for VLSI design, in
  1547	which the primitives are colored rectangles.  Mead & Conway, "Introduction
  1548	to VLSI Systems", A-W 1980, Section 4.5.
  1549	
  1550	CIL - Common Intermediate Language.  "Construction of a Transportable,
  1551	Milti-Pass Compiler for Extended Pascal", G.J. Hansen et al, SIGPLAN
  1552	Notices 14(8):117-126 (Aug 1979).
  1553	
  1554	CIP-L - CIP Language.  (CIP stands for Computer-aided Intuition-guided
  1555	Programming.)  Wide-spectrum language for incremental program
  1556	transformation.  There are ALGOL-like and Pascal-like variants.  "The
  1557	Munich Project CIP, v.I: The Wide Spectrum Language CIP-L", LNCS 183,
  1558	Springer 1984.  Version: CIP85.
  1559	
  1560	CIRCAL - "CIRCAL and the Representation of Communication, Concurrency and
  1561	TIme", G.J. Mitre, ACM TOPLAS 7(2):270-298 (1985).
  1562	
  1563	CITRAN - Caltech's answer to MIT's JOSS.  Sammet 1969, p.217.
  1564	
  1565	CL - Control Language.  Batch language for the IBM RPG/38, used in
  1566	conjunction with RPG III.  (See OCL).
  1567	
  1568	CLAM - Symbolic math, especially General Relativity.  Implemented in ATLAS
  1569	assembly language first, LISP later.  "CLAM Programmer's Manual", Ray
  1570	d'Inverno & Russell-Clark, King's College London, 1971.  (See ALAM).
  1571	
  1572	Clarion - MS-DOS 4GL.
  1573	
  1574	CLASP - Subset of SPL[2].
  1575	
  1576	Classic-Ada - Object-oriented extension to Ada, said to be Smalltalk-like. 
  1577	Implemented as a preprocessor.
  1578	
  1579	Clean - Subset of Lean.  Experimental lazy higher-order functional language
  1580	with no syntactic sugaring (not even infix expressions or complex lists.) 
  1581	Also used as an intermediate language.  Implemented via graph rewriting on
  1582	the ABC abstract machine.  "Clean - A Language for Functional Graph
  1583	Rewriting", T. Brus et al, IR 95, U Nijmegen, Feb 1987.  (See Concurrent
  1584	Clean).
  1585	
  1586	CLEAR - Specification language based on initial algebras.  "An Informal
  1587	Introduction to Specification Using CLEAR", R.M. Burstall in The
  1588	Correctness Problem in Computer Science, R.S. Boyer et al eds, Academic
  1589	Press 1981, pp.185-213.
  1590	
  1591	C-Linda - The most widely used variant of Linda, with C as the base
  1592	language.  Available from Sci Comp Assocs <linda@sca.com>.
  1593	
  1594	CLIP - 
  1595	
  1596	  1. Compiler Language for Information Processing.  1958-1959.  Based on
  1597	IAL, led to JOVIAL.  One of the first languages used to write its own
  1598	compiler.  Sammet 1969, p.635.
  1599	
  1600	  2. Common LISP in Parallel.  Allegro.  Version for the Sequent Symmetry.
  1601	
  1602	Clipper - Compiled dBASE dialect from Nantucket Corp, LA.  Versions: 
  1603	Winter 85, Spring 86, Autumn 86, Summer 87, 4.5 (Japanese Kanji), 5.0.
  1604	
  1605	CLIPS - C Language Integrated Production System.  NASA JSC.  A forward-
  1606	chaining rule-based language with LISP-like syntax that has the inferencing
  1607	and representation capabilities of OPS5.  A language for developing expert
  1608	systems, now with support for three paradigms: rule-based, object-oriented
  1609	and procedural.  Available for MS-DOS, comes with source code in C. 
  1610	COSMIC, U Georgia, (404) 542-3265.  Austin Code Works <info@acw.com>
  1611	(512)258-0785.  Versions: CLIPS 5.1, CLIPS/Ada 4.3.  (See PCLIPS).
  1612	info: service@cossack.cosmic.uga.edu
  1613	telnet: cosline@cosmic.uga.edu
  1614	ftp: earth.rs.itd.umich.edu:mac.bin/etc/compsci/Clips/CLIPS 4.20
  1615		ftp.ensmp.fr:/pub/clips/clips-5.1/dos
  1616		ftp.ensmp.fr:mac-clips-50
  1617	list: CLIPS-LIST@UGA.BITNET
  1618	
  1619	CLIX - "Overview of a Parallel Object-Oriented Language CLIX", J. Hur et
  1620	al, in ECOOP '87, LNCS 276, Springer 1987, pp.265-273.
  1621	
  1622	CLOS - Common LISP Object System.  Object-oriented extension to Common
  1623	LISP, based on generic functions, multiple inheritance, declarative method
  1624	combination and a meta-object protocol.  A descendant of CommonLoops. 
  1625	"Common LISP Object System Specification X3J13 Document 88-002R", D.G.
  1626	Bobrow et al, SIGPLAN Notices 23 (Sep 1988).  (See PCL[2]).
  1627	ftp: parcftp.xerox.com:pcl
  1628	
  1629	CLP - 
  1630	
  1631	  1. Cornell List Processor.  Extension of CORC for list processing. 
  1632	Sammet 1969, p.461.
  1633	
  1634	  2. Constraint Logic Programming.  A programming framework based (as
  1635	Prolog) on LUSH (or SLD) resolution, but in which unification has been
  1636	replaced by a constraint solver.  A CLP interpreter contains a Prolog-like
  1637	inference engine and an incremental constraint solver.  The engine sends
  1638	constraints to the solver one at a time.  If the new constraint is
  1639	consistent with the collected constraints it will be added to the set.  If
  1640	it was inconsistent, it will cause the engine to backtrack.  "Constraint
  1641	Logic Programming", J. Jaffar et al, 14th POPL, ACM 1987.
  1642	
  1643	CLP(R) - Constraint Logic Programming (Real).  Joxan Jaffar, TJWRC & S.
  1644	Michaylov, Monash U, 1986.  A constraint-logic programming language with
  1645	real-arithmetic constraints.  A superset of Prolog.  "The CLP(R) Language
  1646	and System", J. Jaffar et al, IBM RR RC16292 (#72336) (Nov 1990).  Version:
  1647	1.2 for Unix, MS-DOS and OS/2, available from the author.
  1648	info: <joxan@watson.ibm.com>
  1649	
  1650	CLP* - Derivative of CLP.  "CLP* and Constraint Abstraction", T. Hickey,
  1651	16th POPL, pp.125-133, 1989.
  1652	
  1653	CLU - CLUster.  1974-1975.  CLU is an object-oriented language of the
  1654	Pascal family designed to support data abstraction, similar to Alphard. 
  1655	Introduced the iterator: a coroutine yielding the elements of a data
  1656	object, to be used as the sequence of values in a 'for' loop.
  1657	    A CLU program consists of separately compilable procedures, clusters
  1658	and iterators, no nesting.  A cluster is a module naming an abstract type
  1659	and its operations, its internal representation and implementation. 
  1660	Clusters and iterators may be generic.  Supplying actual constant values
  1661	for the parameters instantiates the module.
  1662	    There are no implicit type conversions.  In a cluster, the explicit
  1663	type conversions 'up' and 'down' change between the abstract type and the
  1664	representation.  There is a universal type 'any', and a procedure force[]
  1665	to check that an object is a certain type.  Objects may be mutable or
  1666	immutable.
  1667	    Exceptions are raised using 'signal' and handled with 'except'. 
  1668	Assignment is by sharing, similar to the sharing of data objects in LISP.
  1669	Arguments are passed by call-by-sharing, similar to call by value, except
  1670	that the arguments are objects and can be changed only if they are mutable. 
  1671	CLU has own variables and multiple assignment.
  1672	    "CLU Reference Manual", Barbara Liskov et al, LNCS 114, Springer 1981.
  1673	ftp: pion.lcs.mit.edu - versions for Sun, VAX/VMS.
  1674	contact: Paul R. Johnson <prj@pm-prj.lcs.mit.edu>
  1675	
  1676	Cluster 86 - Shang, Nanjing U ca1986.  Distributed object-oriented
  1677	language.  A cluster is a metatype.  "Cluster: An Informal Report", L.
  1678	Shang <lshang@inf.ethz.ch>, SIGPLAN Notices 26(1):57-76 (Jan 1991). 
  1679	Versions for MS-DOS, Unix.
  1680	
  1681	CMAY - "A Microkernel for Distributed Applications", R. Bagrodia et al,
  1682	Proc 5th Intl Conf Distrib Comp Sys IEEE 1985, pp.140-149.
  1683	
  1684	CML - 
  1685	
  1686	  1. A query language.  "Towards a Knowledge Description Language", A.
  1687	Borgida et al, in On Knowledge Base Management Systems, J. Mylopoulos et al
  1688	eds, Springer 1986.
  1689	
  1690	  2. Concurrent ML.  J. Reppy, Cornell 1990.  A concurrent extension of
  1691	SML/NJ, supporting dynamic thread creation and synchronous message passing
  1692	on typed channels.  Threads are implemented using first-class
  1693	continuations.  "CML: A Higher-Order Concurrent Language", John H. Reppy,
  1694	SIGPLAN Notices 26(6):293-305 (June 1991).
  1695	ftp: ftp.cs.cornell.edu:/pub/CML-0.9.tar.Z
  1696	info: cml-bugs@cs.cornell.edu
  1697	
  1698	CMS-2 - General purpose language used for command and control applications
  1699	in the US Navy.  "CMS-2Y Programmers Reference Manual", M-5049, PDCSSA, San
  1700	Diego CA (Oct 1976).
  1701	
  1702	CO2 - (a blend of C and O2).  Object-oriented database language.  GIP
  1703	Altair, Versailles, France.  Francois Bancilhon et al, in Advances in
  1704	Object-Oriented Database Systems, K.R. Dittrich ed, LNCS 334, Springer
  1705	1988.
  1706	
  1707	COBOL - COmmon Business Oriented Language.  1960.  CODASYL Committee, Apr
  1708	1960.  Simple computations on large amounts of data.  The most widely used
  1709	programming language today.  The natural language style is intended to be
  1710	largely self-documenting.  Introduced the record structure.  "Initial
  1711	Specifications for a Common Business Oriented Language" DoD, US GPO, Apr
  1712	1960.  Major revisions in 1968 (ANS X3.23-1968), 1974 (ANS X3.23-1974), and
  1713	1985.
  1714	
  1715	COBOL-1961 Extended - Short-lived separation of COBOL specifications. 
  1716	Sammet 1969, p.339.
  1717	
  1718	CoCoA - [Symbolic math?  On a Radio Shack CoCo???  I have no idea.]
  1719	
  1720	Cocol - Coco Language.  A language for writing left-attributed LL(1)
  1721	grammars.  Syntactic resemblance to Modula-2.  Used as the input language
  1722	for the Coco LL(1) parser generator, which produces Modula-2 output.  "A
  1723	Compiler Generator for Microcomputers", P. Rechenberg et al, P-H 1989. 
  1724	Version: Cocol-2 for the Coco-2 generator.
  1725	
  1726	CODIL - COntext Dependent Information Language.  Early language for non-
  1727	numerical business problems.  "CODIL, Part1.  The Importance of
  1728	Flexibility", C.F. Reynolds et al, Computer J 14(3):217-220 (May 1971).
  1729	
  1730	COFF - Common Object File Format.  Binary file format used by Unix System V
  1731	Release 3.
  1732	
  1733	COGENT - COmpiler and GENeralized Translator.  Compiler writing language
  1734	with pattern-directed string and list processing features, for CDC 3600 and
  1735	CDC 3800.  A program consists of productions defining a context-free
  1736	language, plus analysis and synthesis function generators, "COGENT
  1737	Programming Manual", J.C. Reynolds, ANL-7022, Argonne, Mar 1965.  Sammet
  1738	1969, p.638.  "An Introduction to the COGENT System", J.C. Reynolds, Proc
  1739	ACM 20th Natl Conf, 1965.
  1740	
  1741	COGO - Co-ordinate geometry problems in Civil Engineering.  A subsystem of
  1742	ICES.  "Engineer's Guide to ICES COGO I", R67-46, CE Dept MIT (Aug 1967).
  1743	
  1744	Coherent Parallel C - Data parallel language.  "Coherent Parallel C", E.
  1745	Felten et al in Third Conf on Hypercube Concurrent Computers and Appls,
  1746	ACM, 1988, pp.440-450.
  1747	
  1748	COIF - FORTRAN with interactive graphic extensions for circuit design, on
  1749	UNIVAC 1108.  "An Interactive Software System for Computer-Aided Design: An
  1750	Application to Circuit Projects", CACM 9(13) (Sep 1970).
  1751	
  1752	COLASL - Early system for numerical prolems on IBM 7030.  Special character
  1753	set for input of natural math expressions.  Sammet 1969, pp.265-271.
  1754	
  1755	COLD - A sugared version of COLD-K.
  1756	
  1757	COLD-K - Formal design kernel language for describing (sequential) software
  1758	systems in intermediate stages of their design.  "An Introduction to COLD-
  1759	K", H.B.M. Jonkers in Algebraic Methods: Theory, Tools and Applications, M.
  1760	Wirsing et al eds, LNCS 394, Springer 1989, pp.139-205.
  1761	
  1762	COLINGO - Compile On-LINe and GO.  MITRE Corp.  English-like query system
  1763	for IBM 1401.  "The COLINGO System Design Philosophy", Information System
  1764	Sciences, Proc Second Congress, 1965.  Sammet 1969, p.664.
  1765	
  1766	COMAL - Benedict Loefstedt & Borge Christensen, 1973.  A language for
  1767	beginners, popular in Europe and Scandinavia.  Pascal-like structure added
  1768	to BASIC.  COMAL-80 has been adopted as an introductory language in
  1769	Denmark.  "Beginning COMAL", B. Christensen, Ellis Harwood 1982.  COMAL
  1770	User's Group, 5501 Groveland Terr, Madison WI 53716.  Version for Amiga.
  1771	
  1772	COMIT - 1957-8.  The first string-handling and pattern-matching language,
  1773	designed for applications in natural language translation.  The user has a
  1774	workspace organized into shelves.  Strings are made of constituents
  1775	(words), accessed by subscript.  A program is a set of rules, each of which
  1776	has a pattern, a replacement and goto another rule.  "COMIT Programmer's
  1777	Reference Manual", V.H. Yngve, MIT Press 1961.  Sammet 1969, pp.416-436.
  1778	
  1779	COMIT II - "Computer Programming with COMIT II", Victor H. Yngve, MIT
  1780	Press, 1963.
  1781	
  1782	Comma - COMputable MAthematics.  Esprit project at KU Nijmegen.
  1783	
  1784	COMMEN - L.J. Cohen.  Proc SJCC 30:671-676, AFIPS (Spring 1967).
  1785	
  1786	Commercial Translator - English-like pre-COBOL language for business data
  1787	processing.  Sammet 1969, p.378.
  1788	
  1789	Common LISP - An effort begun in 1981 to provide a common dialect of LISP. 
  1790	The result is a large and complex language, fairly close to a supeset of
  1791	Maclisp.  Lexical binding, data structures using defstruct and setf,
  1792	closures, multiple values, types using declare, a variety of numerical
  1793	types.  Function calls allow optional, keyword and &rest arguments.  
  1794	Generic sequence can either be a list or an array.  Formatted printing
  1795	using escape characters.  "Common LISP: The Language", Guy L. Steele,
  1796	Digital Press 1984, ISBN 0-932376-41-X. "Common LISP: The Language, 2nd
  1797	Edition", Guy L. Steele, Digital Press 1990, ISBN 1-55558-041-6.
  1798	(See AKCL, CCL, DCL, KCL) 
  1799	list: common-list@mcc.com.
  1800	ftp: lisp-rt1.slisp.cs.cmu.edu  CMU Common LISP Version 16e
  1801	     ftp.think.com:public/think/lisp:public-review.text
  1802	        Draft proposed ANS Common Lisp
  1803	
  1804	CommonLoops - "CommonLoops: Merging Lisp and Object-Oriented Programming",
  1805	D.G. Bobrow et al, SIGPLAN Notices 21(11):17-29 (Nov 1986).  (See CLOS,
  1806	PCL).
  1807	ftp: arisia.xerox.com - Pcl (Portable CommonLoops)
  1808	info: CommonLoops@xerox.com
  1809	
  1810	CommonObjects - "Inheritance and the Development of Encapsulated Software
  1811	Components", A. Snyder, Proc 20th Hawaii Conf on Sys Sci, pp.227-238
  1812	(1987).
  1813	
  1814	Compact COBOL - Subset of COBOL defined, but not published, ca. 1961. 
  1815	Sammet 1969, p.339.
  1816	
  1817	Compas Pascal - Predecessor of Turbo Pascal, by POLY Data of Denmark. 
  1818	Later renamed POLY Pascal, and afterwards sold to Borland.
  1819	
  1820	COMPASS - COMPrehensive ASSembler.  Assembly language on CDC machines.
  1821	
  1822	Compel - COMpute ParallEL.  The first single-assignment language.  "A
  1823	Language Design for Concurrent Processes", L.G. Tesler et al, Proc SJCC
  1824	32:403-408, AFIPS (Spring 1968).
  1825	
  1826	Compiler-Compiler - Early compiler generator for the Atlas, with its own
  1827	distinctive input language.  "The Compiler-Compiler", R.A. Brooker et al,
  1828	Ann Rev Automatic Programming 3:229-275, Pergamon 1963.
  1829	
  1830	COMPL - "The COMPL Language and Operating System", A.G. Fraser et al,
  1831	Computer J 9(2):144-156 (1966).
  1832	
  1833	COMPREHENSIVE - Early system on MIT's Whirlwind.  Listed in CACM 2(5):16
  1834	(May 1959).
  1835	
  1836	COMPROSL - COMpound PROcedural Scientific Language.  Language for
  1837	scientists or engineers.  Sammet 1969, p.299-300.
  1838	
  1839	Computer Animation Movie Language.  "A Computer Animation Movie Language
  1840	for Educational Motion Pictures", D.D. Weiner et al, Proc FJCC 33(2), AFIPS 
  1841	(Fall 1968).
  1842	
  1843	Computer Compiler - Proposed language for compiler design.  Sammet 1969,
  1844	p.695.
  1845	
  1846	Computer Design Language - ALGOL-like language for computer design.  "An
  1847	ALGOL-like Computer Dewsign Language", Y. Chu, CACM 8(10) (Oct 1965).
  1848	
  1849	COMSL - COMmunication System Simulation Language.  "COMSL - A Communication
  1850	System Simulation Language", R.L. Granger, Proc FJCC 37 (1970).
  1851	
  1852	COMTRAN - "Communications Computer Language COMTRAN", D.W. Clark et al,
  1853	RADC-TR-69-190, Rose Air Development Center, Griffiss AFB, NY (July 1969). 
  1854	Sammet 1969, p.324, 331.
  1855	
  1856	ConC - Concurrent extension of C based on DPN (decomposed Petri nets),
  1857	using 'handshake' and 'unit' constructs.  "ConC: A Language for Distributed
  1858	Real-Time Programming", V.K. Garg et al, Computer Langs 16(1):5-18 (1991).
  1859	
  1860	CONCUR - "CONCUR, A Language for Continuous Concurrent Processes", R.M.
  1861	Salter et al, Comp Langs 5(3):163-189 (1981).
  1862	
  1863	Concurrent C - 
  1864	
  1865	  1. Extension of C with rendezvous-based concurrency.  "Concurrent C",
  1866	N.H. Gehani et al, Soft Prac & Exp 16(9):821-844 (1986).  "The Concurrent C
  1867	Programming Language", N. Gehani et al, Silicon  Press 1989.  Versions for 
  1868	most Unix systems available commercially from AT&T.
  1869	
  1870	  2. Extension of C with asynchronous message passing.  [NOT the same as
  1871	above] "Concurrent C: A Language for Distributed Systems", Y. Tsujino et
  1872	al, Soft Prac & Exp 14(11):1061-1078 (Nov 1984).
  1873	
  1874	Concurrent C++ - "Concurrent C++: Concurrent Programming with Class(es)",
  1875	N. Gehani, Bell labs 1986.
  1876	
  1877	Concurrent Clean - An implementation of CFP.  A version of Clean for
  1878	loosely coupled parallel architectures.  Lazy, purely functional.  Strongly
  1879	typed (Milner/Mycroft), modules, functional I/O (including windows and
  1880	mouse).  Compiles to the PABC machine, based on graph rewriting. 
  1881	"Concurrent Clean", M.C. van Eekelen et al, TR 89-18, U Nijmegen,
  1882	Netherlands, 1989.  Version: 0.8.1, October 1992.
  1883	ftp: ftp.cs.kun.nl:pub/Clean - simulator for Mac, Sun3, Sun4
  1884	info: <clean@cs.kun.nl>
  1885	
  1886	Concurrent CLU - Hamilton, 1984.  "Preserving Abstraction in Concurrent 
  1887	Programming", R. Cooper et al, IEEE Trans Soft Eng SE-14(2):258-263 (Feb
  1888	1988).
  1889	
  1890	Concurrent Euclid - J.R. Cordy & R.C. Holt, U Toronto, 1980.  Subset of
  1891	Euclid ("Simple Euclid") with concurrent extensions.  Separate compilation,
  1892	modules, processes and monitors, signal and wait on condition variables. 
  1893	'Converters' to defeat strong type checking, absolute addresses.  All
  1894	procedures and functions are re-entrant.  TUNIS (a Unix-like OS) is written
  1895	in Concurrent Euclid.  "Specification of Concurrent Euclid", J.R. Cordy &
  1896	R.C. Holt, Reports CSRI-115 & CSRI-133, CSRI, U Toronto, Jul 1980, rev. Aug
  1897	1981.  "Concurrent Euclid, The Unix System, and Tunis," R.C. Holt, A-W,
  1898	1983.
  1899	
  1900	Concurrent LISP - "A Multi-Processor System for Concurrent Lisp", S.
  1901	Sugimoto et al, Proc 1983 Intl Conf parallel Proc, 1983 pp.135-143.
  1902	
  1903	Concurrent Pascal - Brinch Hansen, 1972-75.  Extension of a Pascal subset,
  1904	Sequential Pascal.  The first language to support monitors.  Access to
  1905	hardware devices through monitor calls.  Also processes and classes.  "The
  1906	Programming Language Concurrent Pascal", Per Brinch Hansen, IEEE Trans Soft
  1907	Eng 1(2):199-207 (Jun 1975).
  1908	
  1909	Concurrent Prolog - Ehud "Udi" Shapiro, Yale <shapiro-ehud@yale.edu>. 
  1910	Guarded clauses and committed-choice [= dont-care] nondeterminism.  A
  1911	subset's been implemented, but not the full language.  "Concurrent Prolog:
  1912	Collected Papers", E. Shapiro, V.1-2, MIT Press 1987.  (See Mandala).
  1913	
  1914	Concurrent Scheme - M. Swanson <swanson%teewinot@cs.utah.edu>.  A parallel
  1915	Lisp, for the Mayfly.  "Concurrent Scheme", R.R. Kessler et al, in Parallel
  1916	Lisp: Languages and Systems, T. Ito et al eds, LNCS 441, Springer 1989.
  1917	
  1918	ConcurrentSmalltalk - Concurrent variant of Smalltalk (what did you
  1919	expect).  "Concurrent Programming in ConcurrentSmalltalk", Y. Yokote et al
  1920	in Object-Oriented Concurrent Programming, A. Yonezawa et al eds, MIT Press
  1921	1987, pp.129-158.
  1922	
  1923	CONIC - "Dynamic Configuration for Distributed Systems", J. Kramer et al,
  1924	IEEE Trans Soft Eng SE-11(4):424-436 (Apr 1985).
  1925	
  1926	Connection Machine LISP - LISP with a parallel data structure, the
  1927	'xapping', an array of values assigned to an array of sites.  G.L. Steele
  1928	et al, "Connection Machine LISP: Fine-Grained Parallel Symbolic
  1929	Processing", in Proc 1986 ACM Conf on LISP and Functional Prog, Aug 1986,
  1930	pp.279-297.  "Connection Machine LISP Reference Manual", Thinking Machines
  1931	Corp, Feb 1987.
  1932	
  1933	CONNIVER - AI language for automatic theorem proving.  An outgrowth of
  1934	PLANNER.  Allowed multiple database contexts with hypothetical assertions. 
  1935	"The CONNIVER Reference Manual", D. McDermott & G.J. Sussman
  1936	<gjs@zurich.ai.mit.edu>, AI Memo 259, MIT AI Lab, 1973.
  1937	
  1938	ConstraintLisp - Object-oriented constraint language based on CSP.  An
  1939	extension of Common Lisp and CLOS.  "ConstraintLisp: An Object-Oriented
  1940	Constraint Programming Language", Bing Liu <bing@iti.gov.sg> et al, SIGPLAN
  1941	Notices 27(11):17-26 (Nov 1992).
  1942	
  1943	CONSTRAINTS - Constraints using value inference.  "CONSTRAINTS: A Language
  1944	for Expressing Almost-Hierarchical Descriptions", G.J. Sussman et al, Artif
  1945	Intell 14(1):1-39 (Aug 1980).
  1946	
  1947	Consul - Constraint-based [future-based?] language with LISP-like syntax. 
  1948	"Consul: A Parallel Constraint Language", D. Baldwin, IEEE Software
  1949	6(4):62-71.
  1950	
  1951	CONVERT -
  1952	
  1953	  1. String processing language, an extension of LISP with pattern matching
  1954	and transformation operations.  "Convert", A. Guzman et al, CACM 9(8):604-
  1955	615 (Aug 1966).
  1956	
  1957	  2. Early language to convert programs and data from one language to
  1958	another.  "CONVERT Manual", OLI Systems Inc (Oct 1976).
  1959	
  1960	COOL - 
  1961	
  1962	  1. Concurrent Object-Oriented Language.  A parallel version of C++. 
  1963	"COOL: A Language for Parallel Programming", R. Chandra
  1964	<rohit@seagull.stanford.edu> et al in Languages and Compilers for Parallel
  1965	Computing, D. Gelernter et al eds, MIT Press 1990, pp.126-148.
  1966	
  1967	  2. CLIPS Object-Oriented Language?
  1968	
  1969	CORAL - Class Oriented Ring Associated Language.  L.G. Roberts, MIT 1964. 
  1970	Graphical display and systems programming on the TX-2.  Used "rings"
  1971	(circular lists) from Sketchpad.  "Graphical Communication and Control
  1972	Languages", L.B. Roberts, Information System Sciences: Proc Second
  1973	Congress, 1965.  Sammet 1969, p.462.
  1974	
  1975	CORAL 66 - Real-time system programming language, a derivative of JOVIAL
  1976	and ALGOL-60.  It was adopted as the British military standard from 1970
  1977	until the arrival of Ada.  "Official Definition of CORAL 66", P.M. Woodward
  1978	et al, HMSO, London, 1970.
  1979	
  1980	CORBIE - Early system on IBM 704.  Listed in CACM 2(5):16 (May 1959).
  1981	
  1982	CORC - CORnell Compiler.  Simple language for student math problems.  "The
  1983	Cornell Computing Language", R.W. Conway et al, CACM 6(6):317-320 (Jun
  1984	1963)  Sammet 1969, p.294-296.
  1985	
  1986	Coroutine Pascal - "Control Separation in Programming languages", Lemon et
  1987	al, ACM Ann Conf 1977.
  1988	
  1989	CORREGATE - Based on IT.  Sammet 1969, p.139.
  1990	
  1991	Correlatives and Conversions - Data description language used in the Pick
  1992	OS.  "Exploring the Pick Operating System", J.E. Sisk et al, Hayden 1986.
  1993	
  1994	Coursewriter III - ca. 1976.  Simple CAI language.  "Coursewriter III,
  1995	Version 3 Author's Guide", SH20-1009, IBM.
  1996	
  1997	COWSEL - COntrolled Working SpacE Language.  Burstall et al, U Edinburgh,
  1998	1964-66.  LISP-like semantics with FORTH-like stack.  Written in reverse
  1999	Polish form.  Forerunner of POP.  EPU-R-12, U Edinburgh (Apr 1966).
  2000	
  2001	CP - A concurrent Prolog.  "The Concurrent Logic Programming Language CP":
  2002	Definition and Operational Semantics", V. Saraswat, 14th POPL, ACM 1987,
  2003	pp.49-62.
  2004	
  2005	CParaOps5 - Anurag Acharya, <acharya@cs.cmu.edu>.  Parallel version of
  2006	OPS5, written in C and compiling to C.  Available for Unix, Mach, Encore
  2007	Multimaxen, and Sequent.  Version: 5.4.
  2008	ftp: dravido.soar.cs.cmu.edu:/usr/nemo/cparaops5/CParaOPS5-5.4.tar.Z 
  2009	
  2010	CPL - Combined Programming Language.  U Cambridge and U London.  Similar to
  2011	ALGOL 60 but quite complex.  Never fully implemented, died with the Atlas
  2012	computer.  Led to the much simpler BCPL.  "The Main Features of CPL", D.W.
  2013	Barron et al, Computer J 6(2):134-143 (Jul 1963).
  2014	
  2015	C-Prolog - F. Pereira <pereira@research.att.com> et al, Jul 1982.  An
  2016	implementation of Prolog in C.  No garbage collection.
  2017	ftp: hpserv1.cs.uit.no:pub/languages/cprolog.tar.Z
  2018	
  2019	CPS - 
  2020	
  2021	  1. Conversational Programming System.  Allen-Babcock Corp, 1965. 
  2022	Interactive extended subset of PL/I.  "Conversational Programming System
  2023	under TSO (PBPO), Terminal User's Manual", SH20-1197, IBM.  Sammet 1969,
  2024	p.232-240.
  2025	
  2026	  2. Continuation Passing Style.  A semantically clean language with
  2027	continuations, has been used as an intermediate language for Scheme and the
  2028	SML/NJ compiler.  "Rabbit: A Compiler for Scheme", G.L. Steele, AI-TR-474,
  2029	MIT (May 1978).  "Compiling With Continuations", A. Appel, Cambridge U
  2030	Press 1992.
  2031	
  2032	C-Refine - Lutz Prechelt <prechelt@ira.uka.de> Symbolic naming of code
  2033	fragments to redistribute complexity and provide running commentary. 
  2034	Implemented as a C preprocessor.
  2035	ftp: comp.sources.reviewed: crefine
  2036	
  2037	CRISP - Jeff Barnett, SDC, Santa Monica CA, early 70's.  A LISP-like
  2038	language and compiler for the IBM 370.  Differences from LISP included a
  2039	generalization of 2-part cons nodes to n-part.
  2040	
  2041	CRL - Carnegie Representation Language.  (c)Carnegie Group Inc.  Frame
  2042	language derived from SRL.  Written in Common LISP.  Used in the product
  2043	Knowledge Craft.
  2044	
  2045	CROSSTABS - Simple language for statistical analysis of tabular data. 
  2046	"User's Manual for the CROSSTABS System", Cambridge Computer Assoc (Feb
  2047	1977).
  2048	
  2049	Crystal - Concurrent Representation of Your Space-Time ALgorithms.  A
  2050	recursion equation parallel language.  "A Parallel Language and its
  2051	Compilation to Multiprocessor Machines or VLSI", M.C. Chen, 13th POPL, ACM
  2052	1986 pp.131-139.
  2053	
  2054	CS-4 - [?]  Mentioned in "An Overview of Ada", J.G.P. Barnes, Soft Prac &
  2055	Exp 10:851-887 (1980).
  2056	
  2057	CS-Prolog - Distributed logic language.  "CS-Prolog on Multi-Transputer
  2058	Systems", I. Futo et al, Microprocessors & Microsystems, March 1989.
  2059	
  2060	C-Scheme - Joe Bartlett at DEC/WRL?  Dialect of Scheme implemented in and
  2061	embeddable in C.
  2062	
  2063	csh - C-Shell.  William Joy.  Command shell interpreter and script language
  2064	for Unix.
  2065	
  2066	CSL -
  2067	
  2068	  1. Computer Structure Language.  A computer hardware description
  2069	language, written in BCPL.  "Computer Structure Language (CSL)", Proc 1975
  2070	Symp on Comp Hardware Description Languages and their Appl, ACM (Sep 1975).
  2071	
  2072	  2. Control and Simulation Language.  "Control and Simulation Language",
  2073	J.N. Buxton et al, Computer J 5(3):194-199 (Oct 1962).  Version: CSL II.
  2074	
  2075	CSM - "CSM - A Distributed Programming Language", S. Zhongxiu et al, IEEE
  2076	Trans Soft Eng SE-13(4):497-500 (Apr 1987).
  2077	
  2078	CSMP - Continuous System Modeling Program.  Simulation of dynamics of
  2079	continuous systems.  Similar to CSSL.  "A Guide to Using CSMP - The
  2080	Continuous System Modeling Program", Frank H. Speckhart et al, P-H 1976.
  2081	
  2082	CSP - Communicating Sequential Processes.  1978.  A notation for
  2083	concurrency based on synchronous message passing and selective
  2084	communications.  cobegin/coend.  "Communicating Sequential Processes", A.R.
  2085	Hoare, P-H 1985.
  2086	
  2087	CSP/80 - Based on CSP.  "CSP/80: A Language for Communicating Processes",
  2088	M. Jazayeri et al, Proc Fall COMPCON80, IEEE pp.736-740 (Sept 1980).
  2089	
  2090	CS/PCode - Used at Microsoft.
  2091	
  2092	CSP/k - Concurrent SP/k.  A PL/I-like concurrent language.  "Structured
  2093	Concurrent Programming with Operating System Applications", R.C. Holt et
  2094	al, A-W 1978.
  2095	
  2096	CSP-S - "Implementation of CSP-S for Description of Distributed
  2097	Algorithms", L. Patniak et al, Comput Lang 9(3):193-202 (1984).
  2098	
  2099	CSPS - "Toward Comprehensive Specification of Distributed Systems", G.
  2100	Roman et al, Proc 7th Intl Conf on Distrib Comp Sys, IEEE 1987, pp.282-289.
  2101	
  2102	CS/QCode - Used at Microsoft.
  2103	
  2104	CSS/II - Computer System Simulator II.  Like GPSS, for IBM 360.  "Computer
  2105	System Simulator II (CSS II) Program Description and Operations Manual",
  2106	SH20-0875, IBM.
  2107	
  2108	CSSA - Object-oriented language.  "Key Concepts in the INCAS Multicomputer
  2109	Project", J. Nehmer et al, IEEE Trans Soft Eng SE-13(8):913-923 (Aug 1987).
  2110	
  2111	CSSL - Continuous System Simulation Language.  Versions include ACSL,
  2112	HYTRAN, SL-I, S/360 and CSMP.  "The SCi Continuous System Simulation
  2113	Language (CSSL)", Simulation, 9(6) (Dec 1967).
  2114	
  2115	CSTools - Concurrency through message-passing to named message queues.
  2116	
  2117	CTL - 
  2118	
  2119	  1. Checkout Test language.  "Checkout Test Language: An Interpretive
  2120	Language Designed for Aerospace Checkout Tasks", G.S. Metsker, Proc FJCC
  2121	33(2) (1968).
  2122	
  2123	  2. Compiler Target Language.  Intermediate language used by the ALICE
  2124	parallel machine.  "The Design and Implementation of ALICE: A Parallel
  2125	Graph Reduction Machine", M.D. Cripps et al, Proc Workshop on Graph
  2126	Reduction, Springer 1987.
  2127	
  2128	Cube - Three-dimensional visual language for higher-order logic.  "The Cube
  2129	Language", M. Najork et al, 1991 IEEE Workshop on Visual Langs, Oct 1991,
  2130	pp.218-224.
  2131	
  2132	CUCH - CUrry-CHurch.  Lambda-calculus.  "A Type-Theoretical Alternative to
  2133	CUCH, ISWIM, OWHY", Dana Scott, Oxford U 1969.  "Introduction to the CUCH",
  2134	C. Bohm et al, in Automata Theory, E.R. Caianiello ed, A-P 1966, pp.35-65.
  2135	
  2136	Culler-Fried System - System for interactive mathematics.  Sammet 1969,
  2137	p.253-255.
  2138	
  2139	CUPID - Graphic query language.  "CUPID: A Graphic Oriented Facility for
  2140	Support of Nonprogrammer Interactions with a Datablase",  N. McDonald, PhD
  2141	Thesis, CS Dept, UC Berkeley 1975.
  2142	
  2143	CUPL - Cornell University Programming Language.  Simple math problems,
  2144	based on CORC, with PL/I-like syntax.  "An Instruction Language for CUPL",
  2145	R.J. Walker, Cornell U, Jul 1967,
  2146	
  2147	CWIC - Compiler for Writing and Implementing Compilers.  Val Schorre.  One
  2148	of the early metacompilers.  (cf. Meta-II).
  2149	
  2150	CYBIL - Control Data's system programming language in the 80's.  Major
  2151	parts of CDC systems written in this.
  2152	
  2153	CYCL - Frame language.  "Building Large Knowledge-Based Systems", D.B.
  2154	Lenat et al, A-W 1990.
  2155	
  2156	CypherText - Interactive language for text formatting and typesetting. 
  2157	"CypherText: An Extensible Composing and Typesetting Language", C.G. Moore
  2158	et al, Proc FJCC 37, AFIPS (Fall 1970).
  2159	
  2160	D - 
  2161	
  2162	  1. "The Data Language."  MS-DOS 4GL.
  2163	
  2164	  2. A Haskell-like language, with type classes.
  2165	info: polar@cs.syr.edu
  2166	
  2167	DACAPO - Broad-range hardware specification language.  "Mixed Level
  2168	Modelling and Simulation of VLSI Systems", F.J. Rammig in Logic Design and
  2169	Simulation, E. Horbst ed, N-H 1986.
  2170	
  2171	DACTL - Declarative Alvey Compiler Target Language.  U East Anglia.  An
  2172	intermediate language.  "DACTL - A Computational Model and Compiler Target
  2173	Language Based on Graph Reduction", J.R.W. Glauert et al, ICL Tech J 5(3)
  2174	(1987).  Version: Dactl0.  (See Lean, Parallel SML).
  2175	
  2176	Daisy - Functional.  "Daisy Programming Manual", S.D. Johnson, CS Dept TR,
  2177	Indiana U, 1988.
  2178	
  2179	DAISY 201 - Early system on G-15.  Listed in CACM 2(5):16 (May 1959).
  2180	
  2181	DAP Fortran - "Efficient High Speed Computing with the Distributed Array
  2182	Processor", P.M. Flanders et al, pp.113-127 (1977). [same as Fortran-
  2183	Plus?]
  2184	
  2185	DAPLEX - "The Functional Data Model and the Data Language DAPLEX", D.W.
  2186	Shipman, ACM Trans Database Sys, 6(1):140-173 (Mar 1981).
  2187	
  2188	DARE - Differential Analyzer REplacement.  A family of simulation languages
  2189	for continuous systems.  "Digital Continuous System Simulation", G.A. Korn
  2190	et al, P-H 1978.
  2191	
  2192	Darms - Music language.  "The Darms Project: A Status Report", R.F.
  2193	Erickson, Computers and the Humanities 9(6):291-298 (June 1975).
  2194	
  2195	Dartmouth BASIC - Term for the original BASIC by Kemeny & Kurtz.
  2196	
  2197	DAS - Digital Analog Simulator.  Represents analog computer design.
  2198	
  2199	DASL - Datapoint's Advanced System Language.  Gene Hughes.  A cross between
  2200	C and Pascal with custom features for Datapoint hardware (no stack), used
  2201	internally by Datapoint.
  2202	
  2203	Data/BASIC - Also known as Pick BASIC.  A BASIC-like language with database
  2204	capabilities, the main programming language on the Pick OS.  "The
  2205	Data/BASIC Language - A Data Processing Language for Non-Professional
  2206	Programmers", P.C. Dressen, Proc SJCC 36, AFIPS (Spring 1970).
  2207	
  2208	DATABUS - DATApoint BUSiness Language.  Like an interpreted assembly
  2209	language, used for custom applications on Datapoint machines.
  2210	
  2211	DATACODE I - Early system on Datatron 200 series.  Listed in CACM 2(5):16
  2212	(May 1959).
  2213	
  2214	Data Parallel C - Hatcher & Quinn [?]
  2215	
  2216	Data Structures Language - MAD dialect with extensions for lists and
  2217	graphics, on Philco 212.  "A Compiler Language for Data Structures", N.
  2218	Laurance, Proc ACM 23rd Natl Conf 36 (1968).
  2219	
  2220	DATA-TEXT - Harvard.  Numerical computations in the Social Sciences. 
  2221	"DATA-TEXT Primer", D.J. Armor, Free Press 1972.
  2222	
  2223	DataVis - Dataflow language for scientific visualization.  "Data Flow
  2224	Visual Programming Languages", D. Hils, J Vis Langs and Comput, Dec 1991.
  2225	
  2226	dBASE - Language used by the dBASE system.  First release was dBASE II, ca
  2227	1980.  (There never was a "dBASE I")  Later versions: dBASE III, dBASE
  2228	III+, and dBASE IV.
  2229	
  2230	DBC - Data-parallel Bit-serial C.  SRC, Bowie MD.  Based on MPL.
  2231	info: maya@super.org
  2232	
  2233	dBFAST - dBASE dialect for MS-DOS, MS-Windows.
  2234	
  2235	DBPL - Procedural language with relational database constructs.  A
  2236	successor to Pascal/R and Modula/R.  "DBPL Report", J.W. Schmidt et al,
  2237	DBPL-Memo 111-88, Fachbereich Informatik, Johann Wolfgang
  2238	Goethe-Universitaet, Frankfurt, Germany, 1988.
  2239	
  2240	dBXL - dBASE-like interpreter/language for MS-DOS from WordTech, Orinda,
  2241	CA.
  2242	
  2243	DCALGOL - Data Communications ALGOL.  A superset of Burroughs Extended
  2244	ALGOL used for writing Message Control Systems.
  2245	
  2246	DCDL - Digital Control Design Language.  A language for simulating computer
  2247	systems.  "DCDS Digital Simulating System", H. Potash et al, Proc FJCC 35,
  2248	AFIPS (Fall 1969).
  2249	
  2250	DCG - A variant of BNF.
  2251	
  2252	DCL - 
  2253	
  2254	  1. DIGITAL Command Language.  The interactive command and scripting
  2255	language for VAX/VMS.
  2256	
  2257	  2. Delphi Common LISP.  An implementation of Common LISP that has been
  2258	used as a basis for CLOS.
  2259	
  2260	DDL - 
  2261	
  2262	  1. "A Digital System Design Language" (DDL)", J.R. Duley, IEEE Trans on
  2263	Computers c-17(9):850-861 (Sep 1968).
  2264	
  2265	  2. M. Urban, C. Kostanick et al, UCLA Computer Club.  An adventure
  2266	language, the forerunner of ADL.
  2267	
  2268	  3. Data Definition Language.  Specification language for a database based
  2269	on the entity-relationship model.  Used in the Eli compiler-compiler to
  2270	manage type definitions.  "DDL Reference Manual", ECE Dept U Colorado,
  2271	1991.
  2272	
  2273	DDM - Dataflow language.  "The Architecture and System Method of DDM-1: A
  2274	Recursively Structured Data Driven Machine", A. Davis, Proc 5th Ann Symp
  2275	Comp Arch, IEEE 1978.
  2276	
  2277	DEACON - Direct English Access and CONtrol.  English-like query system. 
  2278	Sammet 1969, p.668.
  2279	
  2280	Delirium - An embedding coordinate language for parallel programming,
  2281	implemented on Sequent Symmetry, Cray, BBN Butterfly.  "Parallel
  2282	Programming with Coordination Structures", S. Lucco et al, 18th POPL,
  2283	pp.197-208 (1991).
  2284	
  2285	Delta - 
  2286	
  2287	  1. J.C. Cleaveland, 1978.  Expression-based. [?]
  2288	
  2289	  2. Tandem.  A string-processing language with single-character commands.
  2290	 
  2291	Delta-Prolog - Prolog extension with AND-parallelism, don't-know
  2292	nondeterminism and interprocess communication using synchronous event
  2293	goals.  Distributed backtracking.  "Delta-Prolog: A Distributed Logic
  2294	Programming Language", L.M. Pereira et al, Intl Conf 5th Gen Comp Sys, Nov
  2295	1984.
  2296	
  2297	DEMON - Program generator for differential equation problems.  N.W.
  2298	Bennett, Australian AEC Research Establishment, AAEC/E142, Aug 1965.
  2299	
  2300	Design System language - J. Gaffney, Evans & Sutherland 1976.  Interpretive
  2301	FORTH-like language for 3-D graphics databases.  Earliest forerunner of
  2302	both Interpress and PostScript.  Mentioned in PostScript Language Reference
  2303	Manual, Adobe Systems, A-W 1985.
  2304	
  2305	DETAB - DEcision TABle.  A. Chapman, 1964.  Decision table preprocessor for
  2306	COBOL.  Sammet 1969, p.315.  Versions: DETAB 65, DETAB X.
  2307	
  2308	DETOL - Directly Executable Test Oriented Language.  Simple language to
  2309	control a specific type of test equipment.  "Improved DETOL Programming
  2310	Manual for the Series 5500 Automatic Test System, Pub. 5500-31-0-1, AAI
  2311	Corp. (Sep 1973).
  2312	
  2313	DEX - W. van Oortmerssen.  A cross between Modula-2 and C.
  2314	ftp: ux1.cso.uiuc.edu:pub/amiga/fish/ff743  Version 1.2 for Amiga
  2315	
  2316	DFC - Dataflow language.
  2317	
  2318	DG/L - 
  2319	
  2320	  1. Descriptive Geometry Language.  Early CAD/CAE language, used light
  2321	pen.  "Interactive Graphic Consoles - Environment and Software", R.L.
  2322	Beckermeyeer, Proc FJCC 37 (1970).
  2323	
  2324	  2. Data General ca 1973-1974.  Derivative of ALGOL 60, developed from
  2325	DG's Algol-5, used as the systems language under AOS and RDOS for the DG
  2326	Eclipse family of computers.  Replaced by PL/I in the early 80's.  Data
  2327	General manual 093-000229-01.
  2328	
  2329	DIALOG - Illinois Inst Tech, 1966.  Interactive math using graphics tablet. 
  2330	"DIALOG: A Conversational Programming System with a Graphical Orientation",
  2331	S.H. Cameron et al, CACM 10:349-357 (1967).  Sammet 1969, p.255-258.
  2332	
  2333	DIAMAG - An interactive extension of ALGOL.  Sammet 1969, p.195.
  2334	
  2335	Diamond - One of five pedagogical languages based on Markov algorithms,
  2336	used in "Nonpareil, a Machine Level Machine Independent Language for the
  2337	Study of Semantics", B. Higman, ULICS Intl Report No ICSI 170, U London
  2338	(1968).  (cf. Brilliant, Nonpareil, Pearl[3], Ruby[2]).
  2339	
  2340	DIANA - Descriptive Intermediate Attributed Notation for Ada.  Goos & Wulf,
  2341	CMU 1981.  A de facto standard intermediate representation for Ada
  2342	programs.  A tree-structured representation with an abstract interface
  2343	defined in IDL.  Resulted from a merger of AIDA and TCOL.Ada.  "DIANA - An
  2344	Intermediate Language for Ada", G.T. Goos et al, LNCS 161, Springer 1983.
  2345	
  2346	DIBOL - DIgital Business Oriented Language.  DEC for RT-11.  FORTRAN syntax
  2347	with BCD arithmetic.
  2348	
  2349	Dictionary APL - nickname for Sharp APL.
  2350	
  2351	Dijkstra's guarded command language - Edsger Dijkstra, ca. 1974. 
  2352	Introduced the concept of guards and committed choice [=don't care]
  2353	nondeterminism.  Described and used in A Discipline of Programming, E.
  2354	Dijkstra, P-H 1976.
  2355	
  2356	DIMATE - Depot Installed Maintenance Automatic Test Equipment.  For
  2357	automatic equipment tests, on RCA 301.  "A Simple User-Oriented Source
  2358	Language for Programming Automatic Test Equipment", B.H. Scheff, CACM 9(4)
  2359	(Apr 1966).  Sammet 1969, p.647.
  2360	
  2361	Dino - Data parallel language, a superset of C.  "Dino: Summary and
  2362	Examples", M. Rosing et al, "Third Conf on Hypercube Concurrent Computers
  2363	and Appls", pp. 472-481, ACM 1988.
  2364	ftp: ftp.cs.colorado.edu:pub/cs/distribs/dino
  2365	
  2366	Disiple - DSP language.  "A Compiler that Easily Retargets High Level
  2367	Language Programs for Different Signal Processing Architectures", J.E.
  2368	Peters & S.M. Dunn, Proc ICASSP 89, pp.1103-1106, (May 1989).
  2369	
  2370	Dislang - "Dislang: A Distributed Programming Language/System", C. Li et
  2371	al, Proc 2nd Intl Conf Distrib Comp Sys, IEEE 1981, pp.162-172.
  2372	
  2373	Distributed Eiffel - "Distributed Eiffel: A Language for Programming Multi-
  2374	Granular Distributed Objects on the Clouds Operating System", L. Gunaseelan
  2375	et al, IEEE Conf Comp Langs, 1992.
  2376	
  2377	Distributed Processes - (Also "DP").  First concurrent language based on
  2378	remote procedure calls.  "Distributed Processes: A Concurrent Programming
  2379	Concept", P. Brinch Hansen CACM 21(11):934-940 (Nov 1978).
  2380	
  2381	Distributed Smalltalk - "The Deisgn and Implementation of DIstributed
  2382	Smalltalk", J. Bennett, SIGPLAN Notices 22(12):318-330 (Dec 1980).
  2383	
  2384	DL/1 - Query language, linear keyword.
  2385	
  2386	DMAD - Diagnostic Machine Aid-Digital.  Functional testing of digital
  2387	devices.  "DMAD M/MM Manual", BR-8392, Raytheon Co. (Oct 1973).
  2388	
  2389	DMALGOL - ALGOL with extensions to interface to DMS II, the Burroughs
  2390	database.
  2391	
  2392	DML - 
  2393	
  2394	  1. Data Management Language.  Early ALGOL-like language with lists,
  2395	graphics, on Honeywell 635.  "DML: A Data Management Language", D.W. Bray
  2396	et al, GE, Syracuse NY.
  2397	
  2398	  2. "DML: A Meta-language and System for the Generation of Practical and
  2399	Efficient Compilers from Denotational Specifications", M. Pettersson et al,
  2400	IEEE Conf Comp Langs, 1992.
  2401	
  2402	Doc - Directed Oc.  "Programming Language Doc and Its Self-Description, or
  2403	'X=X Is Considered Harmful'", M. Hirata, Proc 3rd Conf Japan Soc Soft Sci
  2404	Tech, pp.69-72 (1986).
  2405	
  2406	DOCUS - Display Oriented Computer Usage System.  Interactive system using
  2407	push buttons.  Sammet 1969, p.678
  2408	
  2409	DOUGLAS - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  2410	
  2411	DOL - Display Oriented Language.  Subsystem of DOCUS.  Sammet 1969, p.678.
  2412	
  2413	DOW COMPILER - Early system on Datatron 200 series.  Listed in CACM 2(5):16
  2414	(May 1959).
  2415	
  2416	d-Prolog - Prolog extended with defeasible reasoning.
  2417	ftp: aisun1.ai.uga.edu:ai.prolog/dprolog for MS-DOS and Unix
  2418	
  2419	DPL-82 - "DPL-82: A LAnguage for Distributed Processing", L. Ericson, PRoc
  2420	3rd Intl Conf Distrib Comp Sys, IEEE 1982, pp.526-531.
  2421	
  2422	DPS - Real-time language with direct expression of timing requests. 
  2423	"Language Constructs for Distributed Real-Time PRogramming", I. Lee et al
  2424	Proc IEEE Real-Time Sys Symp pp.57-66 (Dec 1985).
  2425	
  2426	draco - Chris Gray, 1987.  A blend of Pascal, C and ALGOL 68.  Implemented
  2427	for CP/M-80 and Amiga.
  2428	
  2429	DRAGON - Implementation language used by BTI Computer Systems.
  2430	info: Pat Helland <helland@hal.com>
  2431	
  2432	DRAGOON - Colin Atkinson, Imperial College 1989.  (current address:
  2433	<atkinson@cl.uh.edu>, U Houston-Clear Lake).  Ada-based language, bringing
  2434	object-oriented programming to embeddable systems.  Presently implemented
  2435	as a preprocessor to Ada.  "Object-Oriented Reuse, Concurrency and
  2436	Distribution: An Ada-Based Approach", C. Atkinson, A-W 1991, ISBN 0-2015-6-
  2437	5277.
  2438	info: adimaio@vms.eurokom.ie
  2439	
  2440	DRUCO I - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  2441	
  2442	DSL - 
  2443	
  2444	  1. Digital Simulation Language.  Extensions to FORTRAN to simulate analog
  2445	computer functions.  "DSL/90 - A Digital Simulation Program for Continuous
  2446	System Modelling", Proc SJCC 28, AFIPS (Spring 1966).  Version: DSL/90 for
  2447	the IBM 7090.  Sammet 1969, p.632.
  2448	
  2449	  2. Denotational Semantics Language.  Specification language used by the
  2450	SIS compiler generator.  "SIS - Semantics Implementation System", P.D.
  2451	Mosses, TR DAIMI MD-30, Aarhus U, Denmark.
  2452	
  2453	DSM - 
  2454	
  2455	  1. Data Structure Manager.  J.E. Rumbaugh and M.E. Loomis, GE.  Object-
  2456	oriented language similar to C++, used in implementation of CAD/CAE
  2457	software.  DSM is written in itself and C, and produces C as output.  "DSM:
  2458	An Object-Relationship Modeling Language", A. Shah et al, SIGPLAN Notices
  2459	24(10):191-202 (OOPSLA '89) (Oct 1989).
  2460	
  2461	  2. DIGITAL Standard MUMPS.  DEC.  (See MUMPS).
  2462	
  2463	DSP/C - Numerical extension to C, for DSP applications.  "DSP/C: A Standard
  2464	High Level Language for DSP and Numeric Processing", K. Leary & W.
  2465	Waddington, Proc ICASSP 90, Apr 1990, pp.1065-1068.
  2466	
  2467	DSP32 Assembly Language - A high-level assembly language for the DSP32
  2468	Programmable DSP Chip.
  2469	
  2470	DSPL:  Digital Signal Processing Language.  A C-derived DSP language.  "The
  2471	Programming Language DSPL", A. Schwarte & H. Hanselmann, Proc PCIM 90,
  2472	1990.
  2473	
  2474	DTALGOL - Decision Table Algol.  Victoria U, Wellington.  An ALGOL superset
  2475	that added Decision Tables.  On Burroughs Large System.
  2476	
  2477	DUAL-607 - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  2478	
  2479	Dual FCP - [?]
  2480	
  2481	Durra - "Durra: A Task-level Description Language", M.R. Barbacci et al,
  2482	CMU/SEI-86-TR-3, CMU 1986.
  2483	
  2484	DYANA - DYnamics ANAlyzer.  Early specialized language for vibrational and
  2485	other dynamic systems.  Sammet 1969, p.628.
  2486	
  2487	Dylan - (named for Dylan Thomas)  Advanced Technology Group East, Apple
  2488	Computer.  A simple object-oriented LISP dialect, most closely resembles
  2489	CLOS and Scheme.  "Dylan, an Object-Oriented Dynamic Language", Apple 1992.
  2490	ftp: crl.dec.com:pub/DEC/Thomas - compiler implemented in Scheme
  2491	info: dylan-manual-request@cambridge.apple.com
  2492	
  2493	DYNAMO - DYNamic MOdels.  Phyllis Fox & A.L. Pugh, 1959.  Continuous
  2494	simulation including economic, industrial and social systems.  Versions:
  2495	DYNAMO II, DYNAMO II/370, DYNAMO II/F, DYNAMO III and Gaming DYNAMO. 
  2496	"DYNAMO User's Manual", A.L. Pugh, MIT Press 1976.
  2497	
  2498	DYSAC - Digital Simulated Analog Computer.  Sammet 1969, p.629.
  2499	
  2500	DYSTAL - DYnamic STorage ALlocation.  Adds lists, strings, sorting,
  2501	statistics and matrix operations to FORTRAN.  Sammet 1969, p.388.  "DYSTAL:
  2502	Dynamic Storage Allocation Language in FORTRAN", J.M. Sakoda, in Symbol
  2503	Manipulation Languages and Techniques, D.G. Bobrow ed, N-H 1971, pp.302-
  2504	311.
  2505	
  2506	E - An extension of C++ with database types and persistent objects.  Used
  2507	in the Exodus database system.  "Persistence in the E Language: Issues and
  2508	Implementation", J.E. Richardson et al, Soft Prac & Exp 19(12):1115-1150
  2509	(Dec 1989).
  2510	
  2511	Eagle - dBASE-like dialect bundled with Emerald Bay, sold by Migent from
  2512	1986-1988, later renamed Vulcan when Wayne Ratliff reacquired the product.
  2513	
  2514	Ease - General purpose parallel programming language, combining the process
  2515	constructs of CSP and the distributed data structures of Linda. 
  2516	"Programming with Ease: Semiotic Definition of the Language", S.E. Zenith,
  2517	<zenith-steven@yale.edu> Yale U TR-809, Jul 1990.
  2518	
  2519	EASE II - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  2520	
  2521	EASIAC - Early system on Midac computer.  Listed in CACM 2(5):16 (May
  2522	1959).
  2523	
  2524	EASY FOX - Early system on JOHNNIAC computer.  Listed in CACM 2(5):16 (May
  2525	1959).
  2526	
  2527	EBASIC - Gordon Eubanks, now at Symantec.  Form of BASIC that led to
  2528	CBASIC.
  2529	
  2530	ECAP II - Electronic Circuit Analysis Program.  Simple language for
  2531	analyzing electrical networks.  "Introduction to Computer Analysis: ECAP
  2532	for Electronics Technicians and Engineers", H. Levin, P-H 1970.
  2533	
  2534	Echidna - Constraint logic programming embedded in an object-oreinted
  2535	language.  The syntax is an extension of Edinburgh Prolog.  "Hierarchical
  2536	Arc Consistency Applied to Numeric Processing in Constraint Logic
  2537	Programming", G. Sidebottom et al, TR-91-06, CSS-IS, Simon Fraser U, and
  2538	Comp Intell 8(4) (1992).
  2539	ftp:cs.sfu.edu:pub/ecl/papers
  2540	info: expert@cs.sfu.edu
  2541	
  2542	ECL -  Extensible CL.  Wegbreit, ca 1970.  "The ECL Programming System", B.
  2543	Wegbreit, Proc FJCC 39:253-261, AFIPS (Fall 1971).  "ECL Programmer's
  2544	Manual", B. Wegbreit, TR 23-74, Harvard U (Dec 1974).
  2545	
  2546	ECMA - Subset of ALGOL.  Sammet 1969, p.180.
  2547	
  2548	ECP - Extended Concurrent Prolog.  Concurrent Prolog with OR parallelism,
  2549	set abstraction and meta-inference features.  "AND-OR Queuing in Extended
  2550	Concurrent Prolog", J. Tanaka et al, Proc Logic Prog Conf '85, LNCS 193,
  2551	Springer 1985. [???]
  2552	
  2553	ECRC-Prolog - Evidently Prolog with coroutine extensions.  "ECRC-Prolog
  2554	User's Manual Version 1.0", K. Estenfeld, TR-LP-08 ECRC, Feb 1986.  (See
  2555	SEPIA).
  2556	
  2557	ECSP - An extension to CSP, supporting dynamic communication channels and
  2558	nested processes.  "Static Type Checking of Interprocess Communication in
  2559	ECSP", F. Baiardi et al, SIGPLAN Notices 19(6):290-299 (June 1984).
  2560	
  2561	ECSS II - Extendable Computer System Simulator.  An extension of SIMSCRIPT
  2562	II.  "The ECSS II Language for Simulating Computer Systems", D.W. Kosy, R-
  2563	1895-GSA, Rand Corp.
  2564	
  2565	ECSSL - Formerly APSE.  Equation-oriented specifications for continuous
  2566	simulations.  The compiler outputs HYTRAN, which must be run on an analog
  2567	processor.
  2568	
  2569	Eden - Concurrent object-oriented language with both synchronous and
  2570	asynchronous message passing.  "The Eden System: A Technical Review", G.
  2571	Almes et al, IEEE Trans Soft Eng SE-11(1):43-59 (Jan 1985).
  2572	
  2573	EDIF - 
  2574	
  2575	  1. Electronic Design Interchange Format.  Not a programming language, but
  2576	a format to simplify data transfer between CAD/CAE systems.  LISP-like
  2577	syntax.  "EDIF Electronic Design Interchange Format Version 200", ANSI/EIA
  2578	Standard 548.
  2579	info: edif-support@cs.man.ac.uk
  2580	ftp: ic.berkeley.edu:pub/edif
  2581	
  2582	  2. VLSI design specification language.  "Designer's Guide to EDIF", E.
  2583	Marx et al, EDN 1987. [?]
  2584	
  2585	Edinburgh Prolog - Prolog dialect which eventually developed into the
  2586	standard, as opposed to Marseille Prolog.  (The difference is largely
  2587	syntax.)  Clocksin & Mellish describe Edinburgh Prolog.  Version: C-Prolog.
  2588	
  2589	Edison - 
  2590	
  2591	  1. (named for the American inventor Thomas Edison (1847-1931))  Brinch
  2592	Hansen.  A simplified Pascal, with modules and concurrency (cobegin/coend). 
  2593	"Edison - A Multiprocessor Language", P. Brinch Hansen, CS Dept, USC, Sep
  2594	1980.  "Programming a Personal Computer", Brinch Hansen, P-H 1977.
  2595	
  2596	  2. Adds an OPS5-like system to C.  Translated by preprocessor into C. 
  2597	"Edison, A Unix and C Friendly Rete Based Production System", B. Thirion,
  2598	SIGPLAN Notices 27(1):75-84 (Jan 1992).
  2599	
  2600	EDL - 
  2601	
  2602	  1. Experiment Description Language.  J.S. Jenkins.  "A Programmable
  2603	System for Acquisition and Reduction of Respiratory Physiological Data",
  2604	J.S. Jenkins et al, Ann Biomed Eng, 17:93-108 (1989).
  2605	
  2606	  2. Event Description Language.  "EDL: A Basis for Distributed System
  2607	Debugging Tools", P.C. Bates et al, in Proc Hawaii Intl Conf on Sys Sci,
  2608	Jan 1982, pp.86-93.
  2609	
  2610	EFL - Extended FORTRAN Language.  Preprocessor for FORTRAN to provide
  2611	structured programming much like C.  A descendant of RATFOR, written in C. 
  2612	"An Informal Description of EFL", S.I. Feldman.
  2613	
  2614	Eh - "A".  Software Portability Group, U Waterloo.  A typeless language
  2615	derived from (and similar to) B.  Provides guaranteed order of evaluation
  2616	for side effects in expressions.  Also character indexing operators.  "Eh
  2617	Reference Manual", R.S.C. Braga, RR CS-76-45, U Waterloo, Nov 1976.  (See
  2618	Zed.)
  2619	
  2620	Eiffel - Bertrand Meyer <bertrand@eiffel.com> ca. 1986.  An object-
  2621	oriented language.  Classes with multiple and repeated inheritance,
  2622	deferred classes (like Smalltalk's abstract class), and clusters of
  2623	classes.  Objects can have both static and dynamic types.  The dynamic type
  2624	must be a descendant of the static (declared) type.  Dynamic binding
  2625	resolves clashes from the multiple inheritance.  Flattened forms of
  2626	classes, in which all of the inherited features are added at the same
  2627	level.  Generic classes parametrized by type.  Persistent objects, garbage
  2628	collection, exception handling, interface to routines written in other
  2629	languages.  Implemented as a preprocessor to C.  "Eiffel: the Language",
  2630	Bertrand Meyer, P-H 1990.  Interactive Software Eng, Goleta CA, (805) 685-
  2631	1006.  Version 2.3, Eiffel-3 (See Sather).
  2632	info: queries@eiffel.com
  2633	
  2634	EL1 -  Extensible Language One.  B. Wegbreit, Harvard ca 1974.  An
  2635	extensible language, internally somewhat LISP-like, but fully typed with
  2636	records and pointers.  The external syntax is Algol-like and extensible,
  2637	supporting user-defined data structures, control structures and operations. 
  2638	The parser is table-driven, with a modifiable set of productions.  Used as
  2639	the basis for the ECL operating system. "Studies in Extensible Programming
  2640	Languages", B. Wegbreit, Garland Pub 1980.
  2641	
  2642	el(alpha) - Aims to be a high-level language that knows about real
  2643	hardware, for systems programming.  "Essential Language el(alpha) - A
  2644	Reduced Expression Set Language for Systems Programming", T. Watanabe et
  2645	al, SIGPLAN Notices 26(1):85-98.
  2646	
  2647	Elan - "Top-down Programming with Elan", C.H.A. Koster, Ellis Horwood 1987.
  2648	
  2649	ELF - Binary format used by System V Release 4 Unix.
  2650	
  2651	ELI - 
  2652	
  2653	  1. Early system on IBM 705, IBM 650.  Listed in CACM 2(5):16 (May 1959).
  2654	
  2655	  2. Embedded Lisp Interpreter.  Bob Glickstein <bobg@andrew.cmu.edu> 
  2656	Small Common Lisp-like interpreter embedded in the Andrew mail system.
  2657	
  2658	ELISP - Chuck Hedrick, Rutgers.  Implemented originally for DEC-20's, later
  2659	used as the LISP in EMACS.
  2660	
  2661	Elk - Extension Language Kit.  Oliver Laumann <net@tub.cs.tu-berlin.edu>,
  2662	Tech U Berlin.  A Scheme interpreter, easily extendable with new types and
  2663	primitive procedures.  First-class environments, dynamic-wind, fluid-let,
  2664	macros, dynamic loading of object files, autoloading, and a dump.
  2665	ftp: export.lcs.mit.edu:contrib/elk-1.4.tar.Z
  2666	
  2667	ELLA - Hardware description language.  "The Design Rationale of ELLA, A
  2668	Hardware Design and Description Language", J.D. Morison et al, in Computer
  2669	Hardware Description Languages and their Applications, C.J. Koomen et al
  2670	eds, N-H 1985.
  2671	
  2672	Ellie - Object-oriented language with fine-grained parallelism for
  2673	distributed computing.  Based on BETA, Smalltalk, and others.  Parallelism
  2674	by unbounded RPC and 'future' objects.  Synchronization by 'dynamic
  2675	interfaces.  Classes, methods, blocks and objects all modeled by first-
  2676	class 'Ellie objects'.  Genericity, polymorphism and
  2677	delegation/inheritance.  "Ellie Language Definition Report", Birger
  2678	Andersen <birger@diku.dk>, SIGPLAN Notices 25(11):45-65 (Nov 1990).
  2679	doc: diku.dk:ellie/papers
  2680	
  2681	ELLIS - EuLisp LInda System.  An object-oriented Linda system written for
  2682	EuLisp.  "Using Object-Oriented Mechanisms to Describe Linda", P. Broadbery
  2683	<pab@maths.bath.ac.uk> et al, in Linda-Like Systems and Their
  2684	Implementation, G. Wilson ed, U Edinburgh TR 91-13, 1991.
  2685	
  2686	ELP - 
  2687	
  2688	  1. English Language Programs.  Language for testing avionics equipment,
  2689	on Varian 620/i.  "Multiband Automatic test Equipment - A Computer
  2690	Controlled Checkout System", T. Kuroda et al, Proc SJCC, 38 (1971).
  2691	
  2692	  2. Equational Logic Programming.  O'Donnell <odonnell@cs.uchicago.edu>. 
  2693	Semantically pure, fully lazy.  "Equational Logic as a Programming
  2694	Language", M.J. O'Donnell, MIT Press 1985.  Current version: 4.2.
  2695	ftp: gargoyle.uchicago.edu for Sun and DEC.
  2696	
  2697	ELSIE - A distributed version of ELLIS.  "Using Object-Oriented Mechanisms
  2698	to Describe Linda", P. Broadbery <pab@maths.bath.ac.uk> et al, in Linda-
  2699	Like Systems and Their Implementation, G. Wilson ed, U Edinburgh TR 91-13,
  2700	1991.
  2701	
  2702	EM-1 - A stack-oriented intermediate language, used by the Amsterdam
  2703	Compiler Kit.
  2704	info: Andrew Tanenbaum <ast@cs.vu.nl>, Vrije U, Amsterdam.
  2705	
  2706	EMA - Extended Mercury Autocode.  (See Autocode).
  2707	
  2708	EMACS LISP - Richard Stallman.  Variant of LISP used by the EMACS editor. 
  2709	(This is the "offical" name, based on the EMACS FAQ file.  See ELISP.)
  2710	
  2711	Emerald - U Washington, early 80's.  The successor of EPL[3].  An
  2712	object-oriented distributed programming language/environment.  Strongly
  2713	typed, uses signatures and prototypes rather than inheritance. 
  2714	"Distribution and Abstract Types in Emerald", A. Black et al, IEEE Trans
  2715	Soft Eng SE-13(1):65-76 (Jan 1987).
  2716	
  2717	EML - Extended ML.  A language for formally specifying SML programs. 
  2718	"Formal Program Development in Extended ML for the Working Programmer", D.
  2719	Sannella, Proc 3rd BCS/FACS Workshop on Refinement", Springer 1990.
  2720	
  2721	English - Database language used in the Pick OS.  "Exploring the Pick
  2722	Operating System", J.E. Sisk et al, Hayden 1986.
  2723	
  2724	EOL - Expression Oriented Language.  A low-level language for strings. 
  2725	"EOL - A Symbol Manipulation Language", L. Lukaszewicz,  Computer J
  2726	10(1):53 (May 1967). Versions: EOL-1, EOL-2, EOL-3.
  2727	
  2728	EPILOG -
  2729	
  2730	  1. Extended Programming In LOGic.  PROLOG with several AND's having
  2731	different time constraints.  "Epilog: A Language for Extended Programming
  2732	in Logic", A. Porto in Implementations of Prolog, J.A. Campbell ed, Ellis
  2733	Horwood 1984.
  2734	
  2735	  2. A data-driven PROLOG, with both AND and OR parallelism.  "EPILOG =
  2736	PROLOG + Data Flow", M.J. Wise, SIGPLAN Noices 17:80-86 (1982).
  2737	
  2738	EPL -
  2739	
  2740	  1. Early PL/I.  McIlroy, Morris et al.  PL/I subset dialect, the first
  2741	running PL/I compiler.  Used by Bell Labs and MIT to write Multics, EPL had
  2742	extensions to handle the segment/offset nature of Multics pointers.  "EPL
  2743	Reference Manual", Project MAC, April 1966.  Sammet 1969, p.542.  (See
  2744	REPL, TMG)
  2745	
  2746	  2. Experimental Programming Language.  David May.  Influenced occam. 
  2747	"EPL: An Experimental Language for Distributed Computing", D.C. May, in
  2748	Trends and Applications: Distributed Processing Proceedings, NBS, pp.69-71.
  2749	
  2750	  3. Eden Programming Language.  U Washington.  Based on Concurrent Euclid
  2751	and used with the Eden distributed OS.  Influenced Emerald and Distributed
  2752	Smalltalk.  "EPL Programmer's Guide", A. Black et al, U Washington June
  2753	1984.
  2754	
  2755	  4. Equational Programming Language. Szymanski, RPI.  Equational language
  2756	for parallel scientific applications.  "EPL - Parallel Programming with
  2757	Recurrent Equations", B. Szymanski in Parallel Functional Languages and
  2758	Compilers, B. Szymanski et, A-W 1991.
  2759	
  2760	EPROS - A specification/prototyping language.  Implemented in Franz Lisp. 
  2761	"Software Prototyping, Formal Methods and VDM", Sharam Hekmatpour et al, A-
  2762	W 1988.
  2763	ftp:utsun.s.u-tokyo.jp:lang/epros
  2764	
  2765	EPSIMONE - Concurrent simulation language derived from Simone.  "EPSIMONE
  2766	Manual", J. Beziin et al, Pub Int No 90, IRISA, Sept 1978.
  2767	
  2768	EqL - An equational language.  Bharat Jayaraman <bharat@cs.buffalo.edu>. 
  2769	"EqL: The Language and its Implementation", B. Jayaraman et al, IEEE Trans
  2770	Soft Eng SE-15(6):771-780 (June 1989).
  2771	
  2772	EQLog - OBJ2 plus logic programming based on Horn logic with equality. 
  2773	"EQLog: Equality, Types and Generic Modules for Logic Programming", J.
  2774	Goguen et al in Functional and Logic Programming, D. DeGroot et al eds,
  2775	pp.295-363, P-H 1986.
  2776	
  2777	Eqn - Language for typesetting mathematics.  "A System for Typesetting
  2778	Mathematics", B.W. Kernighan and L.L. Cherry, CACM 18(3):151-157 (Mar
  2779	1975).
  2780	
  2781	Equel - Embedded Quel.  INGRES, Inc.  Combines QUEL theories with C code.
  2782	
  2783	Erlang - Armstrong, Williams & Virding, Ellemtel, Sweden.  Concurrent
  2784	functional programming language for real-time systems.  Explicit
  2785	concurrency, asynchronous message passing.  "Erlang - an Experimental
  2786	Telephony Programming Language", J.L. Armstrong et al, 13th Intl Switching
  2787	Symposium, Stockholm 1990.  Interpreter in SICStus Prolog, compilers in C
  2788	and in Erlang, for several Unix platforms.
  2789	info: erlang@erix.ericsson.se
  2790	
  2791	ERFPI - Early system on LGP-30 computer.  Listed in CACM 2(5):16 (May
  2792	1959).
  2793	
  2794	ES-1 - Early text editing interpreter.  Sammet 1969, p.684.
  2795	
  2796	ESCAPE - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  2797	
  2798	ESI - Dialect of JOSS.  Sammet 1969, p.217.
  2799	
  2800	esim - A simulation language for VLSI, at the switch level.  Primitives are
  2801	nodes and transistors.  C.M. Baker et al, "Tools for Verifying Integrated
  2802	CIrcuit Design", Lambda 1(3):22-30 (1980).
  2803	
  2804	ESP -
  2805	
  2806	  1. Extra Simple Pascal.  Subset of Pascal.
  2807	
  2808	  2. Econometric Software Package.  Statistical analysis of time series. 
  2809	"Econometric Software Package, User's Manual", J.P. Cooper, Graduate School
  2810	of Business, U Chicago.  Sammet 1978.
  2811	
  2812	  3. Extended Self-containing Prolog.  Chikayama.  An object-oriented
  2813	extension of KL0.  Backtracking-based control, unification-based parameter
  2814	passing, object-oriented calling.  An object in ESP is an axiom set.  A
  2815	class definition consists of nature definitions (inheritance), slot
  2816	definitions (class variables) and clause definitions.  Multiple inheritance
  2817	similar to Flavors.  Implemented for ICOT's PSI Sequential Inference
  2818	machine.  "Unique Features of ESP", T. Chikayama, Proc Intl Conf 5th Gen
  2819	Comp Sys, ICOT 1984.  (See CESP)
  2820	info: k-hata@air.co.jp
  2821	
  2822	  4. Early symbolic math system.  A. Rom, Celest Mech 3:331-345 (1971).
  2823	
  2824	ESPOL - An ALGOL superset used to write the MCP (Master Control Program) on
  2825	Burroughs 6700.  Superseded by NEWP.  "The B6700 ESPOL Reference Manual",
  2826	Burroughs, 1970.
  2827	
  2828	Estelle - A Pascal extension for specification of computer network
  2829	protocols.  Protocols are described by modules which are communicating
  2830	NFA's.  Modules are arranged in a dynamic hierarchy and communicate at
  2831	named interaction points.  "The Formal Description Technique Estelle", M.
  2832	Diaz et al eds, N-H 1989.  Adopted by CCITT.  ISO standard IS 9074.
  2833	ftp: osi.ncsl.nist.gov:pub/osikit/estpc      Compiles Estelle into C
  2834	                                  petdingo   Translates Estelle into C++
  2835	
  2836	Esterel - Distributed language for synchronous interaction of real-time
  2837	systems with their environment.  Uses explicit timing requests.  Esterel
  2838	programs are compiled into finite automata.  "The ESTEREL Programming
  2839	Language and its Mathematical Semantics", G. Berry & L. Cosserat, TR 327,
  2840	INRIA, 1984.
  2841	
  2842	ET - Bernd Gersdorf, U Bremen.  An integration of functional and logic
  2843	programming.
  2844	
  2845	ET++ - Weinand, UBILAB Zurich.  A smalltalk-like system built on C++.
  2846	ftp: cse.ogi.edu
  2847	
  2848	ETC - ExTendible Compiler.  FORTRAN-like, macro extendible.  "ETC - An
  2849	Extendible Macro-Based Compiler", B.N. Dickman, Proc SJCC 38 (1971).
  2850	
  2851	ETHER - Concurrent object-oriented language?
  2852	
  2853	Euclid - (named for the Greek geometer, fl ca 300 BC.)  A Pascal descendant
  2854	for development of verifiable system software.  No goto, no side effects,
  2855	no global assignments, no functional arguments, no nested procedures, no
  2856	floats, no enumeration types.  Pointers are treated as indices of special
  2857	arrays called collections.  To prevent aliasing, Euclid forbids any overlap
  2858	in the list of actual parameters of a procedure.  Each procedure gives an
  2859	imports list, and the compiler determines the identifiers that are
  2860	implicitly imported.  Iterators.   "Report on the Programming Language
  2861	Euclid", B.W. Lampson et al, SIGPLAN Notices 12(2):1-79 (Feb 1977).
  2862	
  2863	EULER - (named for the Swiss mathematician Leonhard Euler (1707-1783)) 
  2864	Revision of ALGOL.  A small predecessor of Pascal.  "EULER: A
  2865	Generalization of ALGOL and Its Formal Definition", N. Wirth, CACM 9(1)
  2866	(Jan 1966) and 9(2) (Feb 1966).
  2867	
  2868	EuLisp - 1985-present.  LISP dialect intended to be a common European
  2869	standard, with influences from Common LISP, Le LISP, Scheme and T.  First-
  2870	class functions, classes and continuations, both static and dynamic scope,
  2871	modules, support for parallelism.  The class system (TELOS) incorporates
  2872	ideas from CLOS, ObjVLisp and Oaklisp.
  2873	info: eudist@maths.bath.ac.uk
  2874	ftp: ftp.bath.ac.uk:pub/eulisp/feel-0.70.tar.Z (Free and Eventually Eulisp)
  2875	
  2876	Eva - A toy ALGOL-like language used in Formal Specification of Programming
  2877	Languages:  A Panoramic Primer, F. G. Pagan, P-H 1981.
  2878	
  2879	EXAPT - EXtended APT.
  2880	
  2881	EXEC - Early batch language for IBM VM/CMS systems.  SC19-6209 Virtual
  2882	Machine/ System Product CMS Command and Macro Reference (Appendix F. CMS
  2883	EXEC Control Statements)
  2884	
  2885	EXEC2 - IBM, late 70's.  SC24-5219 Virtual Machine/System Product EXEC 2
  2886	Reference.  Superseded by REXX.
  2887	
  2888	Express - Concurrency through message-passing to named message queues.
  2889	
  2890	Extended ALGOL - Used to write the ESPOL compiler on Burroughs B5500,
  2891	B6700.  "Burroughs B6700 Extended ALGOL Language Information Manual", No.
  2892	5000128 (Jul 1971)  Sammet 1969, p.196.
  2893	
  2894	Extended C++ - G. Masotti <masotti@lipari.usc.edu> Extensions to C++
  2895	including preconditions, postconditions, class invariants, parametrized
  2896	classes, exception handling and garbage collection.  Implemented as a
  2897	preprocessor to C++.
  2898	ftp: ftp.uu.net:languages/misc/EC++.tar.Z
  2899	
  2900	Extended ML - Don Sanella, Edinburgh.  Algebraic specification meets
  2901	functional programming.  "Program Specification and Development in Standard
  2902	ML", D. Sannella et al, 12th POPL, ACM 1985.
  2903	
  2904	EXTRA - Object-oriented, Pascal style, handles sets.  "A Data Model and
  2905	Query Language for EXODUS", M.J. Carey et al, SIGMOD 88 Conf Proc, pp.413-
  2906	423, ACM SIGMOD Record 17:3 (Sept 1988).
  2907	
  2908	EZ - High-level string-processing language derived from SNOBOL4, SL5 and
  2909	Icon.  "The EZ Reference Manual", C.W. Fraser et al, CS TR 84-1, U Arizona,
  2910	1984.
  2911	
  2912	FAC - Functional Array Calculator.  APL-like but purely functional and
  2913	lazy, allowing infinite arrays.  "FAC: A Functional APL Language", H.-C. Tu
  2914	and A.J. Perlis, IEEE Trans Soft Eng 3(1):36-45 (Jan 1986).
  2915	
  2916	Facile - ECRC.  A concurrent extension of ML.  "Facile: A Symmetric
  2917	Integration of Concurrent and Functional Programming", A. Giacalone
  2918	<ag@ecc.de> et al, Intl J Parallel Prog 18(2):121-160 (Apr 1989).
  2919	
  2920	FACT - Fully Automated Compiling Technique.  ca. 1959.  Pre-COBOL
  2921	English-like business DP language for Honeywell 800.  (Aka Honeywell-800
  2922	Business Compiler.)  Sammet 1969, p.327.
  2923	
  2924	FAD - "FAD, A Simple and Powerful Database Language", F. Bancilon et al,
  2925	Proc 13th Intl Conf on VLDB, Brighton England, Sept 1987.
  2926	
  2927	FAIR - Early system on IBM 705.  Listed in CACM 2(5):16 (May 1959).
  2928	
  2929	FAP - Assembly language for Sperry-Rand 1103 and 1103A.  Listed in CACM
  2930	2(5):16 (May 1959).
  2931	
  2932	FAS - General purpose language sponsored by the Finnish government in the
  2933	70's and 80's.
  2934	
  2935	FASE - Fundamentally Analyzable Simplified English.  L.E. McMahon, Bell
  2936	Labs.  Sammet 1969, p.720.
  2937	
  2938	FAST - FORTRAN Automatic Symbol Translator.  Assembly language on IBM 650
  2939	by MITRE Corp.  Listed in CACM 2(5):16 (May 1959).  Sammet 1969, p.526.
  2940	
  2941	FC - Functional language.  "FC Manual", L. Augustsson, Memo 13, Programming
  2942	Methodology Group, Chalmers U, Sweden 1982.
  2943	
  2944	F-code - Code for the FPM abstract machine, an optimized SECD machine. 
  2945	"FP/M Abstract Syntax Description", R. Bailey, Dept Computing, Imperial
  2946	College, U London, 1985.
  2947	
  2948	FCP - Flat Concurrent Prolog.  "Design and Implementation of Flat
  2949	Concurrent Prolog", C. Mierowsky, TR CS84-21 Weizmann Inst, Dec 1984.
  2950	
  2951	Feel - Free and Eventually EuLisp.  An initial implementation of EuLisp.
  2952	ftp: ftp.bath.ac.uk:pub/eulisp/feel-0.70.tar.Z
  2953	
  2954	FEL - Function Equation Language.  Programs are sets of definitions. 
  2955	Sequences are lists stored in consecutive memory.  "FEL Programmer's
  2956	Guide", R. M. Keller, AMPS TR 7, U Utah, March 1982.
  2957	
  2958	FFP - Formal FP.  Similar to FP, but with regular sugarless syntax, for
  2959	machine execution.  "Can Programming be Liberated From the von Neumann
  2960	Style?  A Functional Style and Its Algebra of Programs", John Backus, 1977
  2961	Turing Award Lecture, CACM 21(8):165-180 (Aug 1978).  (See FP, FL).
  2962	
  2963	FGHC - Flat GHC.  A variant of GHC in which guard calls can be only to
  2964	primitives.  (See KL1).
  2965	
  2966	FGL - 
  2967	
  2968	  1. Flow Graph Lisp.  A distributed dataflow language for AMPS
  2969	(Applicative Multi-Processing System).  "A Loosely-Coupled Applicative
  2970	Multi-Processing System", R. Keller et al, NCC, AFIPS June 1979, pp.613-
  2971	622.
  2972	
  2973	  2. Function Graph Language.  Related to FEL.
  2974	
  2975	FGL+LV - "Functional Programming and the Logical Variable", G. Lindstrom,
  2976	POPL 1985, pp.266-280.
  2977	
  2978	FGRAAL - FORTRAN extended GRAph Algorithmic Language.  A FORTRAN extension
  2979	for handling sets and graphs.  "On a Programming Language for Graph
  2980	Algorithms", W.C. Rheinboldt et al, BIT 12(2) 1972.
  2981	
  2982	FIDO - FInite DOmains.  A constraint language implemented on top of Prolog.
  2983	ftp: minnehaha.rhrk.uni-kl.de:pub/languages/fido/fido2
  2984	
  2985	File Composition - Typesetting language.  "File Composition System
  2986	Reference Manual", No. 90388, Information Intl.
  2987	
  2988	F+L - Equational clauses within function definitions to solve for logical
  2989	variable bindings.  ""Functions plus Logic in Theory and Practice", R.B.
  2990	Kieburtz, Feb 1987, unpublished.
  2991	
  2992	FL - Function Level.  John Backus, ca. 1985.  Successor to FP.  Dynamically
  2993	typed.  Adds higher-order functions, exceptions, user-defined types, and
  2994	other features.  "FL Language Manual, Parts 1 & 2", J. Backus et al, IBM
  2995	Research Report RJ 7100 (1989).  (See FP, FFP).
  2996	
  2997	FLAIR - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  2998	
  2999	FLAP - Symbolic math, for IBM 360.  "FLAP Programmer's Manual", A.H. Morris
  3000	Jr., TR-2558 (1971) U.S. Naval Weapons Lab.  Sammet 1969, p.506.
  3001	
  3002	Flavors - D. Weinreb & D.A. Moon <moon@cambridge.apple.com> 1980.  LISP
  3003	with object-oriented features.  "Object-Oriented Programming with Flavors",
  3004	D.A. Moon, SIGPLAN Notices 21(11):1-8 (OOPSLA '86) (Nov 1986).
  3005	
  3006	Fleng - Parallel logic language.  "Massively Parallel Implementation of
  3007	Flat GHC on the Connection Machine", M. Nilsson, Proc Intl Conf on 5th Gen
  3008	Comp Sys, 1988, pp.1031-1040.
  3009	
  3010	FLEX - 
  3011	
  3012	  1. Faster LEX.  (Faster and free.)  "The FLEX Scanner Generator", Vern
  3013	Paxson <vern@ee.lbl.gov>, Real Time Systems, LBL, CA.  (See Lex).
  3014	ftp: comp.sources.unix/Volume23
  3015	     liege.ics.uci.edu:pub/irus/aflex-ayacc_1.2a.tar.Z with Ada output
  3016	
  3017	  2. Real-time language for dynamic environments.  "FLEX: Towards Flexible
  3018	Real-Time Programs", K. Lin et al, Computer Langs 16(1):65-79 (Jan 1991).
  3019	
  3020	Flex 2 - ca. 1980.  A preprocessor designed to make FORTRAN look more like
  3021	Pascal.  DECUS?
  3022	 
  3023	FLIC - Functional Language Intermediate Code.  Intermediate language used
  3024	in the Chalmers LML compiler.  "FLIC - A Functional Language Intermediate
  3025	Code", S. Peyton Jones<simonpj@cs.ucl.ac.uk> et al., RR 148, U Warwick, Sep
  3026	1989.
  3027	
  3028	FLIP - 
  3029	
  3030	  1. Early assembly language on G-15.  Listed in CACM 2(5):16 (May 1959).
  3031	
  3032	  2. "FLIP User's Manual", G. Kahn, TR 5, INRIA 1981.
  3033	
  3034	  3. Formal LIst Processor.  Early language for pattern-matching on LISP
  3035	structures.  Similar to CONVERT.  "FLIP, A Format List Processor", W.
  3036	Teitelman, Memo MAC-M-263, MIT 1966.
  3037	
  3038	FLIP-SPUR - Early system on IBM 1103 or 1103A.  Listed in CACM 2(5):16 (May
  3039	1959).
  3040	
  3041	F-Logic - "F-Logic: A Higher-Order Language for Reasoning about Objects,
  3042	Inheritance and Scheme", ACM SIGMOD May 1989, pp.134-146.
  3043	
  3044	FLOP - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  3045	
  3046	FLOW-MATIC or FLOWMATIC - (originally B-0).  Remington Rand, 1958. 
  3047	Possibly the first English-like DP language.  For UNIVAC I.  Sammet 1969,
  3048	pp.316-324.
  3049	
  3050	FLPL - FORTRAN List Processing Language.  H. Gelernter et al, ca 1960. 
  3051	Package of FORTRAN subroutines for handling lists.  Sammet 1969, p.388.
  3052	
  3053	FMPL - Frobozz Magic Programming Language.  Experimental Computing
  3054	Facility, UC Berkeley.  A prototype-based object-oriented language with
  3055	functional features.  Event-driven.
  3056	ftp: xcf.berkeley.edu:src/local/fmpl
  3057	list: fmpl@xcf.berkeley.edu
  3058	
  3059	FOCAL -
  3060	
  3061	  1. FOrmula CALculator.  BASIC-style interpreter from DEC, designed 1969
  3062	for PDP-5/PDP-8's.  Versions: FOCAL-69, FOCAL-1971, FOCAL-11 (for PDP-11
  3063	under RT-11).
  3064	
  3065	  2. Forty-One CAlculator Language.  Programming language of the HP-41
  3066	calculator line.
  3067	
  3068	FOCUS - Hierarchical database language.  Information Builders Inc.
  3069	
  3070	FOIL - File Oriented Interpretive Language.  CAI language.  "FOIL - A File
  3071	Oriented Interpretive Language", J.C. Hesselbart, Proc ACM 23rd National
  3072	Conf (1968).
  3073	
  3074	foogol - Per Lindberg.  A tiny ALGOL-like language based on the VALGOL I
  3075	compiler, G.A. Edgar, DDJ May 1985.
  3076	ftp: comp.sources.unix/V8
  3077		wuarchive.wustl.edu: /systems/amiga/fish/fish/ff066
  3078	
  3079	FOOL - Fool's Lisp.  A small Scheme interpreter.
  3080	ftp: scam.berkeley.edu:src/local/fools.tar.Z
  3081	
  3082	FOOP - OBJ2 plus object-orientation.  "Extensions and Foundations for
  3083	Object-Oriented Programming", J. Goguen et al, in Research Directions in
  3084	Object-Oriented Programming, B. Shriver et al eds, MIT Press 1987.
  3085	 
  3086	FORC - Early system on IBM 704.  Listed in CACM 2(5):16 (May 1959).
  3087	
  3088	Force - dBASE dialect for MS-DOS.
  3089	
  3090	The Force - Data parallel language.  "The Force", H. Jordan in The
  3091	Characteristics of Parallel Algorithms, L. Jamieson et al eds, MIT Press
  3092	1987, pp.395-436.
  3093	
  3094	ForceOne - Andrew K. Wright.  "Polymorphism in the Compiled Language
  3095	ForceOne", G.V. Cormack et al, Proc 20th Annual Hawaii Intl Conf on System
  3096	Sciences, 1987, pp.284-292.  "Design of the Programming Language ForceOne",
  3097	A.K. Wright, MS Thesis, U Waterloo 1987.
  3098	
  3099	ForceTwo - Andrew K. Wright.  An unofficial successor to ForceOne.
  3100	
  3101	FORM - Jos Vermaseren <t68@nikhefh.nikhef.nl> 1989.  Designed for speedy
  3102	handling of very large-scale symbolic math calculations.  A descendant of
  3103	Schoonschip.  Available for many PC's and workstations.
  3104	ftp: acm.princeton.edu, nikhefh.nikhef.nl
  3105	info: form@can.nl
  3106	
  3107	FORMAC - FORmula MAnipulation Compiler.  J. Sammet & Tobey, IBM Boston APD,
  3108	1962.  Extension of FORTRAN for symbolic math.  "Introduction to FORMAC",
  3109	J.E. Sammet et al, IEEE Trans Elec Comp (Aug 1964).  Versions: PL/I-FORMAC
  3110	and FORMAC73.  Sammet 1969, pp.474-491.
  3111	
  3112	FORMAL -
  3113	
  3114	  1. FORmula MAnipulation Language.  An early FORTRAN extension for
  3115	symbolic math.  "FORMAL, A Formula Manipulation Language", C.K. Mesztenyi,
  3116	Computer Note CN-1, CS Dept, U Maryland (Jan 1971).
  3117	
  3118	  2. IBM LASC.  Data manipulation language for nonprogrammers.  "FORMAL: A
  3119	Forms-Oriented and Visual-Directed Application System", N.C. Shu, IEEE
  3120	Computer 18(8):38-49 (1985).
  3121	
  3122	FORMAT-FORTRAN - FORTRAN Matrix Abstraction Technique FORTRAN. 
  3123	Manipulation, printing and plotting of large matrices.  "FORMAT-FORTRAN
  3124	Matrix Abstraction Technique (Vol. V)" AFFDL-TR-66-207, Douglas Aircraft Co
  3125	(Oct 1968).
  3126	
  3127	Formes - Object-oriented language for music composition and synthesis,
  3128	written in VLISP.  "Formes: Composition and Scheduling of Processes", X.
  3129	Rodet & P. Cointe, Computer Music J 8(3):32-50 (Fall 1984).
  3130	
  3131	Formula - 
  3132	
  3133	  1. FORTH Music Language.  An extension of FORTH with concurrent note-
  3134	playing processes.  "Formula: A Programming Language for Expressive
  3135	Computer Music", D.P. Anderson et al Computer 24(7):12 (Jul 1991).  For Mac
  3136	and Atari ST, with MIDI output.
  3137	
  3138	  2. Preprocessor language for the Acorn Archimedes, allowing inline high-
  3139	level statements to be entered in an assembly program.  Written in nawk.
  3140	
  3141	Formula ALGOL - ALGOL extension for symolic math, strings and lists. 
  3142	Carnegie, CDC G-20, 1962.  A.J. Perlis & R. Iturriaga.  Sammet 1969, p.583. 
  3143	"An Extension of ALGOL for Manipulating Formulae", A.J. Perlis et al, CACM
  3144	7(2):127-130 (Feb 1964).
  3145	
  3146	Forsythe - An ALGOL-like language.  "Preliminary Design of the Programming
  3147	Language Forsythe", J.C. Reynolds, CMU-CS-88-159, 1988.
  3148	ftp: e.ergo.cs.cmu.edu
  3149	
  3150	FORTH - Fourth.  Charles H. Moore, 1960's.  An interactive extensible
  3151	language using postfix syntax and a data stack.  A program is a set of
  3152	recursive functions ("words") which are compiled by an outer interpreter
  3153	into bytecodes.  FORTH is small and efficient, but programs can be
  3154	difficult to read.  Used first to guide the telescope at NRAO, Kitt Peak. 
  3155	Versions include FORTH 79 and FORTH 83.  FORTH Interest Group, Box 1105,
  3156	San Carlos CA 94070.
  3157	
  3158	FORTRAN - FORmula TRANslator.  The first and still the most widely used
  3159	language for numerical calculations.  Nonrecursive, efficient.
  3160	
  3161	FORTRAN I - John Backus, IBM for the IBM 704.  Design begun 1954, compiler
  3162	released April 1957.
  3163	
  3164	FORTRAN II - 1958.  Added subroutines.
  3165	
  3166	FORTRAN III - This was only distributed to ca. 20 sites.  See Wexelblat.
  3167	
  3168	FORTRAN IV - IBM 1962.  For the IBM 7090/94.  Many implementations went
  3169	well beyond the original definition.
  3170	
  3171	FORTRAN V - Preliminary work on adding character handling facilities by IBM
  3172	ca. 1962.  This name never really used.
  3173	
  3174	FORTRAN VI - Internal IBM name for early PL/I work ca. 1963.  Sammet 1969,
  3175	p.540.
  3176	
  3177	FORTRAN 66 - FORTRAN IV standardized.  ASA X3.9-1966.
  3178	
  3179	FORTRAN 77 - Block IF, PARAMETER, SAVE statements added, still no WHILE. 
  3180	Fixed-length character strings, format-free I/O, arrays with lower bounds. 
  3181	ANSI X3.9-1978.
  3182	ftp: ux1.cso.uiuc.edu:amiga/fish/ff470/BCF for Amiga
  3183	
  3184	Fortran 90 - Previously Fortran 8x and Fortran Extended.  An extensive
  3185	enlargement of FORTRAN 77.  Derived types, assumed shape arrays, array
  3186	sections, functions returning arrays, case statement, module subprograms
  3187	and internal subprograms, optional and keyword subprogram arguments,
  3188	recursion, and dynamic allocation.  ISO 1539:1991, soon to be adopted by
  3189	ANSI.  "Fortran 90 Explained", M. Metcalf et al, Oxford University Press
  3190	1990.
  3191	
  3192	Fortran D - Ken Kennedy, Rice U.  A data-parallel Fortran.  TR 90-141, Rice
  3193	U.
  3194	
  3195	Fortran-Linda - Scientific Computer Assocs <linda@sca.com>.
  3196	
  3197	FORTRAN-Plus - FORTRAN for the DAP parallel machine, implements many
  3198	Fortran 90 features.
  3199	
  3200	FORTRANSIT - FORTRAN Internal Translator.  Subset of FORTRAN translated
  3201	into IT on the IBM 650.  Sammet 1969, p.141.
  3202	
  3203	FORTRUNCIBLE - A cross between FORTRAN and RUNCIBLE for the IBM 650. 
  3204	Listed in CACM 2(5):16 (May 1959).
  3205	
  3206	FOSIL - Fredette's Operating System Interface Language.  A portable job
  3207	control language, for IBM OS360, UNIVAC EXEC 8 and Honeywell GCOS. 
  3208	"Fredette's Operating System Interface Language (FOSIL)", G.N. Baird in
  3209	Command Languages, C. Unger ed, N-H 1973.
  3210	
  3211	FoxBASE+ - dBASE III+-like product from Fox Software, Perrysburg, OH.
  3212	
  3213	FoxPRO - dBASE IV-like product from Fox Software, Perrysburg, OH.
  3214	
  3215	FP - Functional Programming.  Backus.  Combinator based.  "Can Programming
  3216	be Liberated From the von Neumann Style?  A Functional Style and Its
  3217	Algebra of Programs", John Backus, 1977 Turing Award Lecture, CACM
  3218	21(8):165-180 (Aug 1978).  (See FFP, FL, IFP).
  3219	ftp: apple.com:ArchiveVol1/unix_lang
  3220	Berkeley FP - distributed with 4.2BSD
  3221	ftp: comp.sources.unix/Volume20: fpc translates FP programs to C.
  3222		comp.sources.unix/volume13: FP by Andy Valencia
  3223	
  3224	FP2 - Functional Parallel Programming.  Term rewrite rules used to specify
  3225	algebraic data types and parallel processes.  "Term Rewriting as a Basis
  3226	for the Design of a Functional and Parallel Programming Language.  A Case
  3227	Study: The Language FP2", Ph. Jorrand in Fundamentals of Artificial
  3228	Intelligence, LNCS 258, Springer 1986, pp.221-276.
  3229	
  3230	FP/M - An intermediate language for functional languages, used to implement
  3231	Hope.  "The Compilation of FP/M Programs into Conventional Machine Code",
  3232	A.J. Field, Imperial College, London, 1985.  "Functional Programming", A.J.
  3233	Field & M.C. Harrison, A-W 1988.
  3234	
  3235	FQL - Functional database language.  "An Implementation Technique for
  3236	Database Query Languages", O.P. Buneman et al, ACM Trans Database Sys
  3237	7(2):164-186 (June 1982).
  3238	
  3239	FrameKit - Frame language.  "The FrameKit User's Guide", E. Nyberg, TR CMU-
  3240	CMT-88-MEMO, CMU 1988.
  3241	
  3242	FRANK - "Using BINS for Interprocess Communication", P.C.J. Graham, SIGPLAN
  3243	Notices 20(2):32-41 (Feb 1985).
  3244	
  3245	Franz Lisp - (named for the Hungarian composer Franz Liszt (1811-1886)) R.
  3246	Fateman et al, UC Berkeley ca 1980.  A subdialect of MACLISP.  "The FRANZ
  3247	LISP Manual", J.K. Foderaro et al. UC Berkeley 1980.  Version: Opus 38.22. 
  3248	Liszt (the compiler) Version 8.08.
  3249	ftp: ted.cs.uidaho.edu:pub/hol/franz.tar.Z
  3250	
  3251	FRED - Robert Carr.  Language used by Framework, Ashton-Tate.
  3252	
  3253	Fresh - "Fresh: A Higher-Order Language Based on Unification", G. Smolka,
  3254	in Logic Programming: Functions, Relations and Equations", D. DeGroot et
  3255	al, P-H 1986, pp.469-524.
  3256	
  3257	FRINGE - C. Katz, GE, 1961.  Subcomponent of GE-255 GECOM system.  Sorting
  3258	and merging of data, reports and file maintenance.
  3259	
  3260	FRL - Frame Representation Language.  MIT.  "The FRL Manual", R. Roberts et
  3261	al, AI Memo 409, MIT AI Lab, 1977.
  3262	
  3263	FRMT-FTRN - Scientific language, listed [?] 1976.
  3264	
  3265	FSL - Formal Semantics Language.  Language for compiler writing.  "A Formal
  3266	Semantics for Computer Languages and its Application in a Compiler-
  3267	Compiler", J.A. Feldman, CACM 9(1) (Jan 1966).  Sammet 1969, p.641.
  3268	
  3269	Fugue - Music language, implemented in Xlisp.  "Fugue: A Functional
  3270	Language for Sound Synthesis", R.B. Dannenberg et al, Computer 24(7):36-41
  3271	(Jul 1991).
  3272	
  3273	Fun - A typed lambda-calculus, similar to SOL[2].  "On Understanding Types,
  3274	Data Abstractions and Polymorphism", L. Cardelli et al, ACM Comp Surveys
  3275	17(4) (Dec 1985).
  3276	
  3277	FUNLOG - Functional programming plus unification.  "Lazy" in the sense that
  3278	expressions are reduced only if they are not unifiable.  "FUNLOG: A
  3279	Computational Model Integrating Logic Programming and Functional
  3280	Programming", P.A. Subrahmanyam et al, in Logic Programming: Functions,
  3281	Relations and Equations, D. DeGroot et al eds, P-H 1986.
  3282	
  3283	FX-87 - Effects.  A polymorphic language based on Scheme, allowing side
  3284	effects and first-class functions.  Attempts to integrate functional and
  3285	imperative programming.  Expressions have types, side effects (e.g.
  3286	reading, writing or allocating) and regions (stating where the effects may
  3287	occur).  "The FX-87 Reference Manual", D.K. Gifford <gifford@lcs.mit.edu>
  3288	et al, MIT/LCS/TR-407, Oct 1987.  Version: FX-89.
  3289	ftp: brokaw.lcs.mit.edu
  3290	
  3291	FX-90 - Partial type and effect reconstruction and first-class modules.
  3292	
  3293	G - 
  3294	
  3295	  1. "G: A Functional Language with Generic Abstract Data Types", P.A.G.
  3296	Bailes, Computer Langs 12(2):69-94 (1987).
  3297	
  3298	  2. Oregon State U 1988.  Combines functional, object-oriented,
  3299	relational, imperative and logic programming (you name it we got it).  "The
  3300	Multiparadigm Language G", J. Placer, Computer Langs 16:235-258(1991).
  3301	
  3302	G++ - GNU's implementation of C++.
  3303	ftp: prep.ai.mit.edu:/pub/gnu/g++-1.39.0.tar.Z for Unix
  3304	
  3305	Gabriel - Graphical DSP language for simulation and real systems.  "A
  3306	Design Tool for Hardware and Software for Multiprocessor DSP Systems," E.A.
  3307	Lee, E. Goei, J. Bier & S. Bhattacharyya, DSP Systems, Proc ISCAS-89, 1989.
  3308	
  3309	GADS - Picture retrieval language.  "Integrated Geographical Databases: The
  3310	GADS Experience", P.E. Mantey et al, in Database Techniques for Pictorial
  3311	Applications, A. Blaser ed, pp.193-198.
  3312	
  3313	Gaelic - For automated test programs.  Used in military, essentially
  3314	replaced by ATLAS.
  3315	
  3316	Galaxy - An extensible language in the vein of EL/1 and RCC.  "Introduction
  3317	to the Galaxy Language", Anne F. Beetem et al, IEEE Software 6(3):55-62.
  3318	
  3319	Galileo - "Galileo: A Strongly Typed Interactive Conceptual Language", A.
  3320	Albano et al, ACM Trans Database Sys 10(2):230-260 (June 1985).
  3321	
  3322	Gambit - A variant of Scheme R3.99 supporting the 'future' construct of
  3323	Multilisp.  Implementation includes a compiler portable across 680x0
  3324	systems.  Version: 1.7.1.
  3325	ftp:acorn.cs.brandeis.edu:/dist
  3326	
  3327	GAMMA - 
  3328	
  3329	  1. language for matrices and generation of mathematical programming
  3330	reports.  "GAMMA 3.3 for MPS/MPSX, IBM System:/360", Bonnor & Moore Assocs
  3331	(Mar 1975).
  3332	
  3333	  2. A high-level parallel language.  Research Directions in High-Level
  3334	Parallel Languages, LeMetayer ed, Springer 1992.
  3335	
  3336	GAN - Generating and Analyzing Networks.  "GAN - A System for Generating
  3337	and Analyzing Acivity Networks", A. Schurmann, CACM 11(10) (Oct 1968).
  3338	
  3339	GAP - Groups Algorithms and Programming.  Johannes Meier, Alice Niemeyer,
  3340	Werner Nickel, Martin Schonert, Aachen 1988.  Symbolic math for
  3341	computational group theory.
  3342	ftp: math.ucla.edu, version for Sun.
  3343	
  3344	GAPLog - General Amalgamated Programming with Logic.  LOGPRO group,
  3345	Linkoping Sweden.  Restricted version of constraint loic programming, using
  3346	S-unification but not restricted to a single domain.  [Chapter in
  3347	forthcoming Springer book on ESPRIT]
  3348	
  3349	Gargoyle - For compiler writing.  J.V. Garwick, CACM 7(1):16-20, (Jan
  3350	1964).
  3351	
  3352	GARP - Graphical language for concurrent programming.  "Visual Concurrent
  3353	Programmint in GARP", S.K. Goering er al, PARLE '89 v.II, LNCS 366, pp.165-
  3354	180.
  3355	
  3356	GASP - Graph Algorithm and Software Package.  PL/I extension for
  3357	programming graph algorithms.  "GASP - Gprah Algorithm Software Package",
  3358	S. CHase, TR CS Dept, U Illinois, Dec 1969.
  3359	
  3360	GAT - Generalized Algebraic Translator.  Improved version of IT.  On IBM
  3361	650 RAMAC.  Sammet 1969, p.142.
  3362	
  3363	GATE - GAT Extended?  Based on IT.  Sammet 1969, p.139.
  3364	
  3365	GAWK - GNU's implementation of AWK.
  3366	ftp: prep.ai.mit.edu:pub/gnu/gawk-2.13.tar.Z
  3367	     archive.umich.edu:mac/utilities/developerhelps/macgawk2.11.cpt.hqx
  3368	
  3369	GCL - General Control Language.  A portable job control language.  "A
  3370	General Control Interface for Satellite Systems", R.J. Dakin in Command
  3371	Languages, C. Unger ed, N-H 1973.
  3372	
  3373	G-Code - 
  3374	
  3375	  1. Johnsson & Augustsson, Chalmers Inst Tech.  Intermediate language used
  3376	by the G-machine, an implementation of graph reduction based on
  3377	supercombinators.  "Efficient Compilation of Lazy Evaluation", T. Johnsson,
  3378	SIGPLAN Notices 19(6):58-69 (June 1984).
  3379	
  3380	  2. A machine-like language for the representation and interpretation of
  3381	attributed grammars.  Used as an intermediate language by the Coco compiler
  3382	generator.  "A Compiler Generator for Microcomputers", P. Rechenberg et al,
  3383	P-H 1989.
  3384	
  3385	GDPL - Generalized Distributed Programming Language.  "GDPL - A Generalized
  3386	Distributed Programming Language", K. Ng et al, Proc 4th Intl Conf Distrib
  3387	Comp Sys, IEEE 1984, pp.69-78.
  3388	
  3389	GEA - Graph Extended ALGOL.  Extension of ALGOL-60 for graph manipulation,
  3390	on UNIVAC 1108.  "A Language for Treating Graphs", S. Crespi-Reghizzi et
  3391	al, , CACM 13(5) (May 1970).
  3392	
  3393	GECOM - For the GE-255.  Somewhat akin to COBOL with some ALGOL features
  3394	added.  Comprised of ALGOL, COBOL, FRINGE and TABSOL.  FRINGE and TABSOL
  3395	may not have actually been implemented.  Sammet 1969, p.329.
  3396	
  3397	Gedanken - John Reynolds, 1970.  "GEDANKEN - A Simple Typeless Language
  3398	Based on the Principle of Completeness and the Reference Concept", J.C.
  3399	Reynolds, CACM 13(5):308-319 (May 1970).
  3400	
  3401	General Purpose Graphic Language - "A General Purpose Graphic Language",
  3402	H.E. Kulsrud, CACM 11(4) (Apr 1968).
  3403	
  3404	Gentleman's Portable Coroutine System - Coroutine package in FORTRAN.  "A
  3405	Portable Coroutine System", W.M. Gentleman, Info Proc 71, C.V. Freiman ed,
  3406	1972.
  3407	
  3408	GEPURS - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  3409	
  3410	Gerald - "Gerald: An Exceptional Lazy Functional Programming Language",
  3411	A.C. Reeves et al, in Functional Programming, Glasgow 1989, K. Davis et al
  3412	eds, Springer 1990.
  3413	
  3414	GHC - Guarded Horn Clauses.  K. Ueda.  Parallel logic language similar to
  3415	Parlog.  Guards and commited-choice nondeterminism.  (See FGHC, KL1).
  3416	
  3417	GIM-1 - Generalized Information Management Language.  Nelson, Pick,
  3418	Andrews.  Proc SJCC 29:169-73, AFIPS (Fall 1966).
  3419	
  3420	GIN - Special-purpose macro assembler used to build the GEORGE 3 operating
  3421	system for ICL1900 series machines.
  3422	
  3423	GIRL - Graph Information Retrieval Language.  Handling directed graphs. 
  3424	"Graph Information Retrieval Language", S. Berkowitz, Report 76-0085, Naval
  3425	Ship Res Dev Center, (Feb 1976).
  3426	
  3427	GKS - Graphical Kernel System.
  3428	
  3429	Glammar - A pattern transformation language for text-to-text translation,
  3430	Used for compiler writing and linguistics.
  3431	ftp: phoibos.cs.kun.nl:pub/GLASS/glammar.tar.Z
  3432	
  3433	GLASS - General LAnguage for System Semantics.  Esprit project at KU
  3434	Nijmegen.
  3435	ftp: phoibos.cs.kun.nl:pub/GLASS
  3436	
  3437	Glisp - Generalized LISP.  D.C. Smith, Aug 1990.  A coordinated set of
  3438	high-level syntaxes for Common LISP.  Contains Mlisp, Plisp and ordinary
  3439	LISP, with an extensible framework for adding others.  Written in Plisp.
  3440	ftp: bric-a-brac.apple.com:dts/mac/lisp
  3441	
  3442	GLOS - Graphics Language Object System.  Dan Johnston dan@cs.uq.oz.au> and
  3443	Brian Hicks <cs.uq.oz.au>, U Queensland, St. Lucia 1978.  Graphics objects
  3444	correspond to language statements (e.g. line, circle, polygon etc).  New
  3445	objects defined using procedures.  2-D Transformations are context
  3446	dependent and may be nested.
  3447	
  3448	GLOW - A POP-11 variant with lexical scope.  Reviewed in Byte's UK edition,
  3449	May 1992.  Available from Andrew Arnblaster, Bollostraat 6, B-3140
  3450	Keerbergen, Belgium, for Mac or MS-DOS.
  3451	
  3452	Glypnir - 1966.  An ALGOL-like language with parallel extensions.  Similar
  3453	to Actus.  "GLYPNIR - A Programming Language for the Illiac IV", D.H.
  3454	Lawrie et al, CACM 18(3) (Mar 1975).
  3455	
  3456	GMAP - GCOS Macro Assembler Program - Macro assembler for the GCOS 8
  3457	operating system on Honeywell/Bull DPS-8 machines.  "GCOS8 OS GMAP User's
  3458	Guide", Bull.
  3459	
  3460	Goedel - Declarative language for AI, based on many-sorted logic.  Strongly
  3461	typed, polymorphic, declarative, with a module system.  Supports bignums
  3462	and sets.  Partial implementation available on SISCtus Prolog.
  3463	ftp: ftp.cs.bris.ac.uk:/goedel
  3464	info: goedel@compsci.bristol.ac.uk
  3465	
  3466	Gofer - Mark Jones <mpj@prg.ox.ac.uk>, Oxford 1991.  An interpreted
  3467	language similar to Haskell 1.1.  Lazy evaluation, higher order functions,
  3468	pattern matching, and type classes.  Lambda, case, conditional and let
  3469	expressions, and wildcard, as and irrefutable patterns.  Lacks modules,
  3470	arrays, standard classes.  "Introduction to Gofer 2.20", M.P. Jones.
  3471	ftp: nebula.cs.yale.edu:ftp/pub/glasgow
  3472	
  3473	GOL - General Operating Language.  Subsystem of DOCUS.  Sammet 1969, p.678.
  3474	
  3475	GOM - Good Old MAD.  Don Boettner, U Mich.  MAD for the IBM 360.  Parts of
  3476	the MTS Time-sharing system were written in GOM.
  3477	
  3478	GOOD - Graph-Oriented Object Database.  A graph manipulation language for
  3479	use as a database query language.  "A Graph-Oriented Object Database
  3480	Model", M. Gyssens et al, Proc ACM Symp Princs of Database Sys, Mar 1990.
  3481	
  3482	GOSPL - Graphics-Oriented Signal Processing Language.  A graphical DSP
  3483	language for simulation.  "Graphic Oriented Signal Processing Language -
  3484	GOSPL", C.D. Covington et al, Proc ICASSP-87, 1987.
  3485	
  3486	GP - Early system on UNIVAC I or II.  Listed in CACM 2(5):16 (May 1959).
  3487	
  3488	GPL - 
  3489	
  3490	  1. Generalized Programming Language.  General purpose language akin to
  3491	ALGOL.  Sammet 1969, p.195.
  3492	
  3493	  2. "A Sample Management Application Program in a Graphical Data-driven
  3494	Programming language", A.L. Davis et al, Digest of Papers, Compcon Spring
  3495	81, Feb 1981, pp.162-167.
  3496	
  3497	GPM - General Purpose Macro-generator.  Early text-processing language
  3498	similar to TRAC, implemented on Atlas 2.  "A General Purpose
  3499	Macrogenerator", C. Strachey, Computer J 8(3):225-241 (Oct 1965).
  3500	
  3501	GPSS - General Purpose Systems Simulator.  Geoffrey Gordon, 1960.  Discrete
  3502	simulations.  "The Application of GPSS V to Discrete System Simulation", G.
  3503	Gordon, P-H 1975.  Versions include GPSS II (1963), GPSS III (1965),
  3504	GPS/360 (1967), and GPSS V (1970).
  3505	
  3506	GPX - Early system on UNIVAC II.  Listed in CACM 2(5):16 (May 1959).
  3507	
  3508	GRAAL - ("Grail")  General Recursive Applicative and Algorithmic Language. 
  3509	FP with polyadic combinators.  "Graal: A Functional Programming System with
  3510	Uncurryfied Combinators and its Reduction Machine", P. Bellot in ESOP 86,
  3511	G. Goos ed, LNCS 213, Springer 1986.
  3512	
  3513	GRAF - GRaphic Additions to FORTRAN.  FORTRAN plus graphic data types. 
  3514	"GRAF: Graphic Additions to FORTRAN", A. Hurwitz et al, Proc SJCC 30
  3515	(1967).  Sammet 1969, p.674.
  3516	
  3517	GRAIL - Graphical Input Language.  Flowchart language entered on a grphics
  3518	tablet.  "The GRAIL Language and Operations", T.O. Ellis et al, RM-6001-
  3519	ARPA, RAND, Sept 1969.
  3520	
  3521	GRAIN - Pictorial query language.  "Pictorial Information Systems", S.K.
  3522	Chang et al eds, Springer 1980.
  3523	
  3524	GRAM - An extension of BNF used by the SIS compiler generator.  "SIS -
  3525	Semantics Implementation System", P.D. Mosses, TR DAIMI MD-30, Aarhus U,
  3526	Denmark.
  3527	
  3528	Graphic ALGOL - Generation of shaded perspective picures in real time.
  3529	"An Extended ALGOL-60 for Shaded Computer Graphics", B. Jones, Proc ACM
  3530	Symp on Graphic Languages, Apr 1976.
  3531	
  3532	Graphic Language - For specifying graphic operations.  "A Problem Oriented
  3533	Graphic Language", P.J. Schwinn, proc ACM 22nd Natl Conf, 1967.  Sammet
  3534	1969, p.677.
  3535	
  3536	GRAPPLE - GRAPh Processing LanguagE.  1968.  "A Directed Graph
  3537	Representation for Computer Simulation of Belief Systems", L.G. Tesler et
  3538	al, Math Biosciences 2:19-40 (1968).
  3539	
  3540	GREEN - A proposed language to meet the DoD Ironman requirements which led
  3541	to Ada.  This language was the winner.  "On the GREEN Language Submitted to
  3542	the DoD", E.W. Dijkstra, SIGPLAN Notices 13(10):16-21 (Oct 1978).
  3543	
  3544	GRIND - GRaphical INterpretive Display.  Graphical input language for PDP-
  3545	9.  "GRIND: A Language and Translator for COmputer Graphics", A.P. Conn,
  3546	Dartmouth, June 1969.
  3547	
  3548	Groff - GNU's implementation of roff.  (See nroff, troff).
  3549	
  3550	GSBL - "GSBL: An Algebraic Specification Language Based on Inheritance", S.
  3551	Clerici et al in in ECOOP '88, S. Gjessing et al eds, LNCS 322, Springer
  3552	1988, pp.78-92.
  3553	
  3554	GSPL - Greenberg's System Programming Language.  Bernard Greenberg.
  3555	
  3556	GVL - Graphical View Language.  T.C.N. Graham & J.R. Cordy, Queen's U.
  3557	Canada.  A visual language for specifying interactive graphical output. 
  3558	"GVL: A Graphical, Functional Language for the Specification of Output in
  3559	Programming Languages", J.R. Cordy & T.C.N. Graham, Proc IEEE Intl Conf on
  3560	Comp Lang ICCL'90 (March 1990).
  3561	
  3562	GW-BASIC - "Gee Whiz" BASIC.  Microsoft's BASIC with graphic extensions.
  3563	
  3564	Gypsy - Specification and verification of concurrent systems software. 
  3565	Message passing using named mailboxes.  Separately compilable units:
  3566	routine (procedure, function, or process), type and constant definition,
  3567	each with a list of access rights. "Report on the Language Gypsy", A.L.
  3568	Ambler et al, UT Austin ICSCS-CMP-1 Aug 1976.
  3569	
  3570	HAL/S - Real-time language used by NASA for onboard shuttle software. 
  3571	"Two-Dimensional Characteristics of HAL, A Language for Spaceflight
  3572	Applications", J.S. Miller, SIGPLAN Notices 7(10) (Oct 1972).
  3573	
  3574	HALGOL - Hewlett-Packard.  A simple language for communicating with devices
  3575	such as modems and X.25 PADs.
  3576	
  3577	HALMAT - Intermediate language used by HAL/S.
  3578	
  3579	Haskell - (named for the logician Haskell B. Curry).  April 1990.  Designed
  3580	by a committee from the functional programming community.  A lazy purely
  3581	functional language largely derived from Miranda.  Static polymorphic
  3582	typing, higher-order functions, user-defined algebraic data types, and
  3583	pattern-matching list comprehensions.  Innovations include a class system,
  3584	operator overloading, functional I/O system, functional arrays, and
  3585	separate compilation.   "Report on the Programming Language Haskell Version
  3586	1.1", Paul Hudak & P. Wadler eds, CS Depts, U Glasgow and Yale U. (Aug
  3587	1991).  Version 1.2: SIGPLAN Notices 27(5) (Apr 1992).
  3588	list: haskell-request@cs.yale.edu, HASKLD-L@YALEVM.BITNET.
  3589	  Yale Haskell - beta 2.0, a full Haskell 1.2 system built on Common Lisp.
  3590	    ftp:nebula.cs.yale.edu:pub/haskell/yale
  3591	    info: haskell-request@cs.yale.edu
  3592	  Glasgow Haskell - Version 0.10 for Sun4's
  3593	    ftp: ftp.dcs.glasgow.ac.uk:pub/haskell/glasgow/ghc*
  3594		info: glasgow-haskell-request@dcs.glasgow.ac.uk
  3595	  Haskell B. - Haskell 1.2 implemented in LML, for Sun 3's and 4's,        
  3596		DECstation 3100 and Sequent Symmetry.
  3597	    ftp: animal.cs.chalmers.se:pub/haskell/chalmers/hbc*
  3598	    info: hbc@cs.chalmers.se
  3599	
  3600	HASL - SASL plus conditional unification.  "A Prological Definition of
  3601	HASL, A Purely Functional Language with Unification Based Conditional
  3602	Binding Expressions", H. Abramson in Logic Programming: Functions,
  3603	Relations and Equations, D. DeGroot et al eds, P-H 1986.
  3604	
  3605	HCLP - Hierarchical CLP.  "Constraint Hierarchies and Logic Programming",
  3606	A. Borning et al, in Proc Sixth Intl Logic Prog Conf, June 1989, pp. 149-
  3607	164.
  3608	
  3609	HCPRVR - "HCPRVR: An Interpreter for Logic Programs", D. Chester in Proc
  3610	First Natl Conf on AI, Stanford, 1980.
  3611	
  3612	HDFL - Single assignment language.  "Methods for Handling Structures in
  3613	Data-Flow Systems", J.L. Gaudiot, Proc 12th Intl Symp Comp Arch, June 1985.
  3614	
  3615	HDM - See SPECIAL.
  3616	
  3617	HELP - DEA.  Language for industrial robots.
  3618	
  3619	HEQS - E. Derman.  Constraint language for financial modeling.  Uses an
  3620	extension of the equation solver in IDEAL.  "A Simple Equation Solver and
  3621	Its Application to Financial Modeling", E. Derman et al, Soft Prac & Exp
  3622	14(12):1169-1181 (Dec 1984).
  3623	
  3624	HERAKLIT - A distributed object-oriented language.  "Definition einer
  3625	objektorientierten Programmiersprache mit hierarchischem Typkonzept", B.
  3626	Hindel, diss U Erlangen-Nuernberg, Dec 1987.
  3627	
  3628	Hermes - IBM, June 1990.  An imperative, strongly typed process-oriented
  3629	language for complex distributed systems.  A follow-on effort to NIL[2]. 
  3630	Threads, relational tables, typestate checking, capability-based access,
  3631	dynamic configuration.  "Hermes: A Language for Distributed Computing", R.
  3632	Strom et al, P-H 1991, ISBN 0-13-389537-8.
  3633	ftp: software.watson.ibm.com:pub/hermes 0.7alpha for Unix
  3634	info: hermes-request@watson.ibm.com
  3635	
  3636	HIBOL - A variant of DIBOL, used in Infotec computers.
  3637	
  3638	HiLog - W. Chen et al, Stony Brook, 1989.  Logic programming in higher
  3639	order logic.  "HiLog as a Platform for Database Languages (Or Why Predicate
  3640	Calculus is Not Enough)", W. Chen et al, 2nd Intl Workshop on Database Prog
  3641	Langs, Morgan Kaufmann, 1989.
  3642	ftp: sbcs.sunysb.edu:SB-hilog
  3643	
  3644	HINT - Hierarchical Information NeTs.  For CDC 3600.  "HINT: A Graph
  3645	Processing Language", R.D. Hart, Michigan State U, Apr 1970.
  3646	
  3647	HLISP - "Monocopy and Associative Algorithms in an Extended Lisp", E. Goto,
  3648	U Tokyo May 1974.
  3649	
  3650	HOL - Higher Order Logic.  A proof-generating system for higher order logic
  3651	based on LCF.  "HOL: A Machine Oriented Formulation of Higher Order Logic",
  3652	M.J.C. Gordon, Report 68, Comp Lab U Cambridge (1985).  "Introduction to
  3653	HOL", M.J.C. Gordon et al, Cambridge U Press 1993 ISBN 0-521-441897
  3654	HOL-88 built on ML, from Mike Gordon <mjcg@cl.cam.ac.uk>
  3655	ftp: ted.cs.uidaho.edu:pub/hol
  3656	list: info-hol@ted.cs.uidaho.edu
  3657	HOL-90 built on SML/NJ, from Brian Graham <graham@cpsc.ucalgary.ca>
  3658	ftp: fsa.cpsc.ucalgary.ca:pub/hol90.tar.Z for Sun 4
  3659	list: info-hol@clover.ucdavis.edu
  3660	
  3661	Honeywell-800 Business Compiler - Another name for FACT.  Sammet 1969,
  3662	p.327.
  3663	
  3664	HOOK - ? Object Oriented Kernel.  Delphia.  An object-oriented extension of
  3665	Delphia Prolog.
  3666	
  3667	Hope - ("springs eternal" and so forth.)  R.M. Burstall, U Edinburgh 1978. 
  3668	Functional language with polymorphic types and lazy lists.  First language
  3669	to use call-by-pattern.  "HOPE, an Experimental Applicative Language", R.M.
  3670	Burstall et al, Conf Record 1980 LISP Conf, p.136-143 (Aug 1980), "A HOPE
  3671	Tutorial", R. Bailey, BYTE Aug 1985, pp.235-258.  "Functional Programming
  3672	with Hope", R. Bailey, Ellis Horwood 1990.
  3673	ftp: brolga.cc.uq.oz.au:pub/hope.  PC Hope, plus a lazy variant for Unix,
  3674	Mac
  3675	
  3676	Hope+ - Alvey Flagship project, Imperial College.  An extension of Hope
  3677	with real numbers, vectors, call-by-WHNF.  "Hope+", N. Perry, Imperial
  3678	College, IC/FPR/LANG/2.5.1/7, 1988.
  3679	
  3680	Hope+C - Alvey Flagship project, Imperial College.  Further evolution of
  3681	Hope+ with continuation-based I/O, coroutines, and RFC's.  For Sun-3's with
  3682	Motorola FPU's.  (See Massey Hope).
  3683	info: John Darlington <jd@dic.ic.ac.uk>
  3684	
  3685	HOS-STPL - Hospital Operating System - STructured Programming Language.  A
  3686	FORTRAN-like language with structured extensions.  "HOS-STPL User Manual",
  3687	Health Services Research, US Public Health Service (Jan 1975).
  3688	
  3689	HPcode - Stack-based intermediate language used by HP in many of its
  3690	compilers for RISC and stack-based architectures.  Supports Fortran, Ada,
  3691	Pascal, COBOL and C++.  Descended from Stanford's U-code.
  3692	
  3693	HPCode-Plus - Descendant of HPcode with data types, developed to be an ANDF
  3694	language.  "ANDF: Finally an UNCOL After 30 Years", M.E. Benitez, Jack
  3695	Davidson <jwd@virginaia.edu> et al, CS TR-91-05 U Virginia (Mar 1991). 
  3696	(See ANDF).
  3697	
  3698	HP-GL - Hewlett-Packard Graphics Language.  Vector graphics language used
  3699	by HP plotters.
  3700	
  3701	HP-GL/2 - "HP-GL/2 Programmer's Guide", No. 5959-9733, HP.  (See PCL.)
  3702	
  3703	HPL - Language used in HP9825A/S/T "Desktop Calculators", 1978(?) and
  3704	ported to the early Series 200 family (9826 and 9836, MC68000).  Fairly
  3705	simple and standard, but with extensive I/O support for data acquisition
  3706	and control (BCD, Serial, 16 bit custom and IEEE-488 interfaces), including
  3707	interrupt handling.  Currently owned by Structured Software Systems.  "HPL
  3708	Operating Manual for Series 200, Models 216, 226 and 235\6", HP 98614-
  3709	90010, Jan 1984.
  3710	
  3711	HSL-FX - Hierarchical Specification Language - Function Extension.
  3712	
  3713	HUGO - Geac.  A bytecode-interpreted transaction handler.
  3714	
  3715	Hybrid - Concurrent object-oriented language.  "Active Objects in Hybrid",
  3716	O.M. Nierstrasz, SIGPLAN Notices 22(12):243-253 (OOPSLA '87) (Dec 1987).
  3717	
  3718	Hyperscript - Informix.  The object-based programming language for Wingz,
  3719	used for creating charts, graphs, graphics, and customized data entry.
  3720	
  3721	HyperTalk - The programming language for Macintosh HyperCard.
  3722	
  3723	HyTime - A hypermedia extension of SGML.  "The HyTime Hypermedia/Time-based
  3724	Document Structuring Language", S. Newcomb et al, CACM 34(11):67-83 (Nov
  3725	1991).
  3726	
  3727	IAL - International Algebraic Language.  Original name of ALGOL 58.
  3728	"Preliminary report - International Algebraic Language", CACM 1(12):8
  3729	(1958).
  3730	
  3731	IAM - Interactive Algebraic Manipulation.  Interactive symbolic math for
  3732	PDP-10.  "IAM, A System for Interactive Algebraic Manipulation", C.
  3733	Christensen et al, Proc Second Symp Symb Alg Manip, ACM Mar 1971.
  3734	
  3735	IBEX - Command language for Honeywell's CP-6 OS.
  3736	
  3737	ICES - Integrated Civil Engineering System.  Subsystems include COGO,
  3738	STRUDL, BRIDGE, LEASE, PROJECT, ROADS and TRANSET.  Internal langguages
  3739	include ICETRAN and CDL.  "An Integrated Computer System for Engineering
  3740	Problem Solving", D. Roos, Proc SJCC 27(2), AFIPS (Spring 1965).  Sammet
  3741	1969, pp.615-620.
  3742	
  3743	ICETRAN - An extension of FORTRAN IV.  Component of ICES.  Sammet 1969,
  3744	p.617.
  3745	
  3746	ici - Tim Long.  Similar to C.  Dynamic arrays, database features, screen
  3747	handling.
  3748	ftp: extro.ucc.su.edu.au:pub/ici.cpio.Z
  3749	
  3750	Icon - Griswold, 1970's.  A descendant of SNOBOL4 with Pascal-like syntax. 
  3751	Icon is a general-purpose language with special features for string
  3752	scanning.  Dynamic types.  The central theme of Icon is the generator: when
  3753	an expression is evaluated it may be suspended and later resumed, producing
  3754	a result sequence of values until it fails.  Resumption takes place
  3755	implicitly in two contexts: iteration which is syntactically loop-like
  3756	('every-do'), and goal-directed evaluation in which a conditional
  3757	expression automatically attempts to produce at least one result. 
  3758	Expressions that fail are used in lieu of Booleans.  Data backtracking is
  3759	supported by a reversible assignment.  Icon also has co-expressions, which
  3760	can be explicitly resumed at any time.  "The Icon Programming Language",
  3761	Ralph & Marge Griswold, 2nd ed P-H 1990.
  3762	ftp: cs.arizona.edu
  3763	list: icon-group@arizona.edu
  3764	
  3765	Iconicode - 1990-1992.  Visual dataflow language, token-based with
  3766	hierarchical, recursive and iterative constructs.  Version: IDF with
  3767	extensions for image processing.  "IDF: A Graphical Data Flow Programming
  3768	Language for Image Processing and Computer Vision", Neil Hunt, Proc IEEE
  3769	Conf on Systems Man & Cybernetics, IEEE, Nov 1990.  Available from Iconicon
  3770	<icon@teleos.com>.
  3771	
  3772	IC-Prolog - Clark & McCabe, Imperial College 1979.  Logic language with
  3773	coroutining.  "IC-Prolog Language Features", K.L. Clark <klc@doc.ic.ac.uk>
  3774	et al in Logic Programming, K.L. Clark et al eds, pp.253-266, Academic
  3775	Press 1982.
  3776	
  3777	IC Prolog ][ - Imperial College.  A Prolog with multithreading, TCP
  3778	primitives for interprocess communication, mailboxes, and an interface to
  3779	Parlog.  "IC Prolog ][: A Language for Implementing Multi-Agent Systems",
  3780	Y. Cosmadopoulos et al, in Tutorial and Workshop on Coperating Knowledge
  3781	Based Systems, Keele U 1992.
  3782	info: Y. Cosmadopoulos <yac@doc.ic.ac.uk>
  3783	      Damien Chew <dac@doc.ic.ac.uk>
  3784	ftp:doc.ic.ac.uk:computing/programming/languages/icprolog/pd-ICP-0.90.tar.Z
  3785	
  3786	Id - Irvine Dataflow.  Arvind & Gostelow.  Single assignment language, used
  3787	on MIT's Tagged-Token Dataflow Architecture (and soon on Motorola's
  3788	Monsoon).  Incrementally compiled, non-strict.  "An Asynchronous
  3789	Programming Language for a Large Multiprocessor Machine", Arvind et al,
  3790	TR114a, Dept ISC, UC Irvine, Dec 1978.  "The U-Interpreter", Arvind et al,
  3791	Computer 15(2):42-50 (1982).  (See Id Nouveau).
  3792	
  3793	IDAMS - Pictorial retrieval language, implemented in APL.  "Concept of the
  3794	Diagnostic Image Workstation", D. Meyer-Ebrecht, Proc 2nd Conf on Picture
  3795	Archiving (PACS II), SPIE 418, pp.180-183 (1983).
  3796	
  3797	IDEA - Interactive Data Entry/Access.  Data General.  A language in which
  3798	you designed the screen first, and then wrote the program around the
  3799	predefined fields.  Precursor to the DG COBOL Screen Section.
  3800	
  3801	IDEAL - Van Wyk, Stanford 1980.  Numerical constraint language for
  3802	typesetting graphics into documents.  Inspired partly by Metafont.  "A
  3803	High-Level Language for Specifying Pictures", C.J. Van Wyk, ACM Trans
  3804	Graphics 1(2):163-182 (Apr 1982).  Distributed as part of Troff.
  3805	
  3806	IDL -
  3807	
  3808	  1. Interactive Data analysis Language.  Xerox.  Built on Interlisp-D.
  3809	
  3810	  2. Interface Description Language.  Nestor, Lamb & Wulf, CMU 1981.
  3811	Description of data structures to be passed between the components of an
  3812	application, to provide a language-independent intermediate representation. 
  3813	"The Interface Description Language", R. Snodgrass, Computer Science Press
  3814	1989.  Also SIGPLAN Notices 22(11) (Nov 1987) special issue.
  3815	list: info-idl@sei.cmu.edu
  3816	
  3817	  3. Interface Definition Language.  Project DOE, SunSoft, Inc.  Part of an
  3818	effort to integrate distributed object technology into the Solaris OS.  IDL
  3819	provides the standard interface between objects, and is the base mechanism
  3820	for object interaction.
  3821	info: <idl-cfe@sun.com> or Mache Creeger, SunSoft Inc (415)336-5884.
  3822	ftp: omg.org:pub/omg_idl_cfe.tar.Z
  3823	
  3824	IDMS - Pictorial query language, an extension of Sequel2.  "A Management
  3825	System for an Integrated Database of Pictures and Alphanumeric Data", G.Y.
  3826	Tang, Computer Graphics Image Processing 16:270-286 (1981).
  3827	
  3828	Id Nouveau - Arvind <arvind@lcs.mit.edu> & Nikhil <nikhil@crl.dec.com>, LCS
  3829	MIT, ca. 1986.  Dataflow language, began as a functional language, added
  3830	streams, resource managers and I-structures (mutable arrays).  Loops are
  3831	syntactic sugar for tail recursion.  "Id Nouveau Reference Manual", R.S.
  3832	Nikhil, CS TR, MIT, March 1988.  "Id (Version 90.1) Reference Manual", R.S.
  3833	Nikhil, CSG Memo 284-2, LCS MIT, July 15, 1991.  (See Id).
  3834	
  3835	IDOL - Icon-Derived Object Language.  Object-oriented preprocessor for
  3836	Icon.  "Programming in Idol: An Object Primer", C.L. Jeffery, U Arizona CS
  3837	TR #90-10.
  3838	ftp: src.doc.ic.ac.uk:pub/languages/icon/idol.tar.Z
  3839	
  3840	IDS/I - Integrated Data Store.  Extension to COBOL involving "chains"
  3841	(circular lists), for GE computers.  "A General Purpose Programming System
  3842	for Random Access Memories", C.W. Bachman et al, Proc FJCC 26(1), AFIPS
  3843	(Fall 1964).  Sammet 1969, p.376.
  3844	
  3845	IF1 - Graph language used as an intermediate language for dataflow
  3846	hardware.  Used by the OSC SISAL compiler.  "The Manchester Prototype
  3847	Dataflow Computer", J.R. Gurd et al, CACM 28(1):34-52 (Jan 1985).
  3848	
  3849	IF2 - Graph language used by the OSC SISAL compiler.
  3850	
  3851	IFIP - Subset of ALGOL.  Sammet 1969, p.180.
  3852	
  3853	IFP - Illinois FP.  Arch Robinson.  Variant of FP with Algol-like syntax. 
  3854	"The Illinois Functional Programming Interpreter", A.D. Robison, Proc 1987
  3855	SIGPLAN Conf on Interpreters and Interpretive Techniques (June 1987). 
  3856	"Illinois Functional Programming: A Tutorial", A.D. Robison, BYTE Feb 1987.
  3857	ftp: a.cs.uiuc.edu:pub/ifp - Versions for Unix and MS-DOS
  3858	
  3859	IFX - "Type Reconstruction with First-Class Polymorphic Values", J. O'Toole
  3860	et al, SIGPLAN Notices 24(7):207-217 (Jul 1989).
  3861	
  3862	IGL - Interactive Graphic Language.  Used primarily by Physics Dept at
  3863	Brooklyn Poly, uses numerical methods on vectors to approximate continuous
  3864	function problems that don't have closed form solutions. [Is this being
  3865	confused with Tektronix's graphics library by the same name?]
  3866	
  3867	IIS - Idealized Instruction Set.  Assembly language for the Flagship
  3868	parallel machine.  "An Idealized Instruction Set for a Packet Rewrite
  3869	Machine", J. Sargeant, Manchester U, 1988.
  3870	
  3871	IITRAN - Simple PL/I-like language for students, on IBM 360.  "The IITRAN
  3872	Programming Language", R. Dewar et al, CACM 12(10):569-575 (Oct 1969).
  3873	
  3874	ILIAD - Real time language.  "On the Design of a Language for Programming
  3875	Real-Time Concurrent Processes", H.A. Schutz, IEEE Trans Soft Eng SE-
  3876	5(3):248-255 (May 1979).
  3877	
  3878	ILLIAC - Assembly language for the ILLIAC computer.  Listed in CACM
  3879	2(5):16, (May 1959) p.16.
  3880	
  3881	ILOC - Rice U.  Register-oriented intermediate language targeted to PC/RT. 
  3882	Source languages include FORTRAN and Russell.
  3883	
  3884	IMP -
  3885	
  3886	  1. IMProved Mercury Autocode.  Used to code the Edinburgh Multi Access
  3887	System (EMAS), one of the first OS's written in a high-level language,
  3888	apparently predating Unix.  References are in J British Computer Soc.  (See
  3889	Autocode).
  3890	
  3891	  2. Extensible dialect of ALGOL-60, on CDC 1604.  "Experience with an
  3892	Extensible Language", Edgar T. Irons, CACM 13(1):31-39 (Jan 1970).
  3893	
  3894	  3. Interpretive Menu Processor.  Used to implement much of the user
  3895	interface of the Alis office automation package from Applix, Inc.
  3896	
  3897	Ina Jo - [FDM?]  "The Ina Jo Specification Language Reference Manual", J.
  3898	Scheid et al, TR TM-(L)-6021/001/00, SDC Mar 1985.
  3899	
  3900	Info BASIC - Variant of Pick BASIC used with PRIME's PRIMOS.
  3901	
  3902	Information Algebra - Theoretical formalism for DP, never resulted in a
  3903	language.  Language Structure Group of CODASYL, ca. 1962.  Sammet 1969,
  3904	709.
  3905	
  3906	Inglish - English-like language used for Adventure games like "The Hobbit"
  3907	(could distinguish between "take the rope and axe" and "take the money and
  3908	run").
  3909	
  3910	InnovAda - Object-oriented extension to Ada, said to be LISP-like. 
  3911	Implemented as a preprocessor.
  3912	
  3913	INTCODE - Intermediate language used in the implementation of BCPL.  "BCPL
  3914	- The Language and its Compiler", Martin Richards & Colin Whitby-Stevens,
  3915	Cambridge U Press 1979.  (See OCODE).
  3916	
  3917	INTELLECT - Larry Harris, 1977.  A query language, close to natural
  3918	English.
  3919	
  3920	INTERCAL - (Allegedly stands for "Compiler Language With No Pronounceable
  3921	Acronym").  Woods & Lyon, Princeton U, May 26, 1972.  Claims to have
  3922	nothing in common with any other major programming language.  "The INTERCAL
  3923	Programming Language Reference Manual", Donald R. Woods & James M. Lyon. 
  3924	C-INTERCAL implementation as a C preprocessor by Eric Raymond.
  3925	ftp: ftp.white.toronto.edu, also comp.sources.misc/Volume16
  3926	
  3927	INTERCOM - Assembly language for the G-15.  Listed in CACM 2(5):16 (May
  3928	1959).
  3929	Versions: INTERCOM 101, INTERCOM 1000.
  3930	
  3931	INTERLISP - Once INTERLISP was one of two main branches of LISP (the other
  3932	being MACLISP).  In 1981 Common LISP was begun in an effort to combine the
  3933	best features of both.  INTERLISP includes a LISP programming environment. 
  3934	Dynamically scoped.  "INTERLISP Programming Manual", W. Teitelman, TR,
  3935	Xerox Rec Ctr 1975.  Version: INTERLISP-D.
  3936	
  3937	Intermediate Programming Language - Arthur W. Burks.  A very early attempt
  3938	to express machine language at a higher level of abstraction.  Like
  3939	Plankalkul, it used a right-handed style of assignment, in which the new
  3940	value appears on the right.
  3941	
  3942	Interpress - Xerox.  Interpretive FORTH-like graphics language, possibly
  3943	the first page description language, predating PostScript.  Both are
  3944	descendants of JaM.  Used on Xerox printers.  "Interpress, The Source
  3945	Book", Steven Harrington et al, P-H 1988.
  3946	
  3947	Iota - Specification language.  "The Iota Programming System", R. Nakajima
  3948	er al, Springer 1983.
  3949	
  3950	IPL - Information Processing Language.  Allen Newell, J.C. Shaw, H. Simon,
  3951	Carnegie ca. 1956.  Said to be the first list-processing language, also the
  3952	first language to support recursion.  Very low level.  Sammet 1969, pp.388-
  3953	400.  "Information Processing Language-V Manual", A. Newell ed, P-H 1965. 
  3954	Versions: IPL-I (never implemented), IPL-II (1957 for JOHNNIAC), IPL-III
  3955	(existed briefly), IPL-IV, IPL-V (1958, for IBM 650, 704, 7090, many
  3956	others.  Widely used), IPL-VI.
  3957	
  3958	IPS - Threaded language.  "IPS, An Unorthodox High Level Language", K.
  3959	Meinzer, BYTE pp.146-159 (Jan 1979).
  3960	
  3961	IQ - Pictorial query language, implemented in Ratfor.  "Structured
  3962	Implementation of an Image Query Language", Y.E. Lien et al, in Database
  3963	Techniques for Pictorial Applications, A. Blaser ed, pp.416-430.
  3964	
  3965	IRDATA - Industrial Robot DATA.  A standardized robot control code. 
  3966	"IRDATA, Industrial Robot Data", DIN 66313, Beuth-Verlag 1991.
  3967	
  3968	IRL - Industrial Robot Language.  A high-level language for programming
  3969	industrial robots.  "IRL, Industrial Robot Language", DIN 66312, Beuth-
  3970	Verlag 1992.
  3971	
  3972	Ironman - HOLWG, DoD, 1978.  Fourth of the series of DoD requirements that
  3973	led to Ada.  "Department of Defense Requirements for High Order Computer
  3974	Programming Languages", SIGPLAN Notices 12(12):39-54 (Dec 1977).  (See
  3975	Strawman, Woodenman, Tinman, Steelman).
  3976	
  3977	Isabelle-92 - A generic theorem prover, supporting a wide variety of
  3978	logics.  A system of type classes allows polymorphic object-logics with
  3979	overloading and automatic type inference.
  3980	ftp: ftp.cl.cam.ac.uk:/ml/92.tar.Z
  3981	
  3982	ISBL - Mathematical query language.
  3983	
  3984	ISETL - Interactive SETL.  Gary Levin <gary@clutx.clarkson.edu>, Clarkson
  3985	U.  "An Introduction to ISETL Version 1.9", G.M. Levin, Dept MCS, Clarkson
  3986	U.  Current version: 3.0.
  3987	ftp: sun.soe.clarkson.edu, for MS-DOS, Mac, Unix, VAX/VMS, and source.
  3988	
  3989	ISIS - 
  3990	
  3991	  1. Dialect of JOSS.  Sammet 1969, p.217.
  3992	
  3993	  2. Concurrent language?
  3994	
  3995	ISO Pascal - Pascal standard, ISO 7185-1982.  Changes from Jensen & Wirth's
  3996	Pascal include: name equivalence; names must be bound before they are used;
  3997	loop index must be local to the procedure; formal procedure parameters must
  3998	include their arguments; conformant array schemas.  
  3999	
  4000	ISP - Instruction Set Processor.  A family of languages for describing the
  4001	instruction sets of computers.  "Computer Structures: Readings and
  4002	Examples", D.P. Siewiorek et al, McGraw-Hill 1982.
  4003	
  4004	ISPL - Instruction Set Processor Language.  ca 1971.  Original ISP
  4005	language, written in BLISS.  "Computer Structures: Readings and Examples",
  4006	D.P. Siewiorek et al, McGraw-Hill 1982.
  4007	
  4008	ISPS - Instruction Set Processor Specifications.  Operational hardware
  4009	specification language.  Successor to ISPL.  IEEE Trans Computers, C-
  4010	30(1):24-80 (1981). [Bell, Newell, Siewiorek, Barbacci 1982?]
  4011	
  4012	ISWIM - If You See What I Mean.  Landin 1966.  ISWIM is purely functional,
  4013	a sugaring of lambda calculus, and the ancestor of most modern applicative
  4014	languages.  An ISWIM program is a single expression qualified by 'where'
  4015	clauses (auxiliary definitions including equations among variables),
  4016	conditional expressions and function definitions.  ISWIM was the first
  4017	language to use lazy evaluation, and introduced the offside rule for
  4018	indentation.  "The Next 700 Programming Languages", P.J. Landin, CACM
  4019	9(3):157-166 (Mar 1966).
  4020	
  4021	IT - Internal Translator.  A.J. Perlis et al, Carnegie Tech ca 1957.  Early
  4022	compiler for math originally for Burroughs 205, then IBM 650.  Forerunner
  4023	of RUNCIBLE, GATE, CORRELATE and GAT.  IT source code was converted to PIT,
  4024	thence to SPIT.  Sammet 1969, pp.139-141.  Versions: IT-2 produced machine
  4025	language directly, IT-3 developed at Carnegie added double-precision
  4026	floating point.  CACM 1(5):22 (1958).
  4027	
  4028	Ivan - A Diana-like language making up part of VHDL.  "VHDL - The Designer
  4029	Environment", A. Gilman, IEEE Design & Test 3, (Apr 1986).
  4030	
  4031	Iverson's Language - APL, which went unnamed for many years.  Sammet 1969,
  4032	p.770.
  4033	
  4034	IVTRAN - 1966.  Parallel FORTRAN for the Illiac IV.
  4035	
  4036	J - Derivative and redesign of APL.  Purely functional with lexical scope
  4037	and more conventional control structures, plus several new concepts such as
  4038	function rank and function arrays.  "APL\?"", Roger K.W. Hui et al, APL90
  4039	Conf Proc, Quote Quad 20(4):192-200.  Version 4.1 for MS-DOS, Sun, Mac,
  4040	Archimedes.  Source available in C from Iverson Software, (416)925-6096.
  4041	ftp: watserv1.waterloo.edu:languages/apl/j
  4042	
  4043	J3 - Dialect of JOVIAL.  "Military Standard JOVIAL (J3)", MIL-STD-1588
  4044	(USAF), June 1976.
  4045	
  4046	J73 - Yep, another JOVIAL dialect.  "Military Standard JOVIAL (J73)",
  4047	MIL-STD-1589 (USAF), Feb 1977.
  4048	
  4049	JACAL - JAffer's CAnonical ALgebra.  A. Jaffer<jaffer@zurich.ai.mit.edu>. 
  4050	Symbolic math program, written in Scheme.
  4051	ftp: altdorf.ai.mit.edu:archive/scm/jacal1a0.tar.Z
  4052	
  4053	Jade - 
  4054	
  4055	  1. U Washington, late 80's.  A strongly-typed language, object-oriented
  4056	but without classes.  For type research.  The compiler output is Smalltalk. 
  4057	[Submitter claimed that Jade has exactly one user!]
  4058	
  4059	  2. Implicit coarse-grained concurrency.  The constructs 'withth',
  4060	'withonly' and 'without' create tasks with specified side effects to shared
  4061	data objects.  Implemented as a C preprocessor.  "Coarse-Grain Parallel
  4062	Programming in Jade", M.S. Lam et al, SIGPLAN Notices 26(7):94-105 (Jul
  4063	1991).
  4064	
  4065	JaM - John and Martin.  J. Warnock & M. Newell, PARC 1978.  Interpretive
  4066	FORTH-like graphics language, forerunner of both Interpress and PostScript. 
  4067	Mentioned in PostScript Language reference Manual, Adobe Systems, A-W 1985.
  4068	
  4069	Janus - 
  4070	
  4071	  1. Distributed language with an ask/tell constraint system.  "Janus: A
  4072	Step Towards Distributed Constraint Programming", V. Saraswat
  4073	<saraswat@parc.xerox.com> et al in Logic Programming: Proc 1990 North Am
  4074	Conf, S. Debray et al eds, MIT Press 1990.
  4075	ftp: cs.arizona.edu:janus/qdjanus-1.2, a sequential implementation built on
  4076	SICStus Prolog.
  4077	
  4078	  2. "Experience with the Universal Intermediate Language Janus", B.K.
  4079	Haddon et al, Soft Prac & Exp 8(5):601-616 (Sep 1978).
  4080	
  4081	JAZ - Early system on LGP-30.  Listed in CACM 2(5):16 (May 1959).
  4082	
  4083	JCL - Job Control Language.  Batch language on IBM OS/360 systems. 
  4084	Notoriously difficult to program in.
  4085	
  4086	JCS-13 - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  4087	
  4088	JEAN - A dialect of JOSS.
  4089	
  4090	JOSS - JOHNNIAC Open Shop System.  Charles L. Baker, RAND 1964.  An early
  4091	simple interactive calculator language.  "JOSS Users' Reference Manual",
  4092	R.L. Clark, Report F-1535/9, RAND Corp (Jan 1975)  Sammet 1969, pp.217-226. 
  4093	Versions: JOSS I and JOSS II.
  4094	
  4095	JOVIAL - Jule's Own Version of IAL.  Jules I. Schwartz 1959-1960.  Based on
  4096	ALGOL 58, with extensions for large scale real-time programming.  Saw
  4097	extensive use by the US Air Force.  The data elements were items, entries
  4098	(records) and tables.  CACM 6(12):721 (Dec 1960)[?].  Versions include
  4099	JOVIAL I (IBM 709, 1960), JOVIAL II (IBM 7090, 1961) and JOVIAL 3 (1965). 
  4100	Dialects: J3, JOVIAL J73, JS, JTS.
  4101	
  4102	Joyce - Brinch Hansen.  Distributed language based on Pascal and CSP. 
  4103	"Joyce - A Programming Language for Distributed Systems", Per Brinch
  4104	Hansen, Soft Prac & Exp 17(1):29-50 (Jan 1987).
  4105	
  4106	JPL - JAM Programming Language.  Imperative string-based language, part of
  4107	the JAM tool for developing screen (non-window) applications.  JYACC Corp.
  4108	
  4109	JPLDIS - Jet Propulsion Laboratory Display Information System.  Jack
  4110	Hatfield, George Masters, W. Van Snyder, Jeb Long et al, JPL.  Query system
  4111	for UNIVAC 1108 [or PDP's?] written in FORTRAN, based on Tymshare's
  4112	"Retrieve".  Indirectly led to Vulcan[1] which led to dBASE II.
  4113	
  4114	JS - Dialect of JOVIAL.  Sammet 1969, p.639.
  4115	
  4116	JTS - Simple dialect of JOVIAL.  Sammet 1969, p.528.
  4117	
  4118	Juno - Numerical constraint-oriented language for graphics applications. 
  4119	Solves its constraints using Newton-Raphson relaxation.  Inspired partly by
  4120	Metafont.  "Juno, a Constraint-Based Graphics System", G. Nelson in
  4121	SIGGRAPH '85 Conf Readings, B.A. Barsky ed, Jul 1985, pp.235-243.
  4122	
  4123	Jym - Patrick Bellot, France.  A predecessor to Graal.
  4124	
  4125	K5 - Early system on Larc computer.  Listed in CACM 2(5):16 (May 1959).
  4126	
  4127	Kaleidoscope - Freeman-Benson <bnfb@cs.uvic.ca>, U Washington and
  4128	Universite de Nantes, 1989; U Victoria, 1992.  Object-oriented language
  4129	which mixes imperative and constraint-oriented features.  Similar to Siri. 
  4130	Vaguely related to Prose[2].  "Kaleidoscope: Mixing Objects, Constraints
  4131	and Imperative Programming", B.N. Freeman-Benson, SIGPLAN Notices
  4132	25(10):77-88 (OOPSLA/ECOOP '90) (Oct 1990).  "Constraint Imperative
  4133	Programming", B.N. Freeman-Benson, Ph.D. Thesis, TR 91-07-02, U Wash
  4134	(1991).  "Constraint Imperative Programming", Freeman-Benson et al, IEEE
  4135	Conf on Comp Lang, Apr 1992.  Versions: Kaleidoscope '90, Kaleidoscope '91.
  4136	
  4137	Kali - Data parallel language.  "Supporting Shared Data Structures on
  4138	Distributed Memory Architecures", C. Koelbel et al in Second ACM SIGPLAN
  4139	Symp on Princ and Prac of Parallel Programming, pp.177-186, Mar 1990.
  4140	
  4141	KAP - Kernel Andorra Prolog.  "Kernel Andorra Prolog and its Computation
  4142	Model", S. Haridi <seif@sics.se> et al, in Logic Programming: Proc 7th Intl
  4143	Conf, MIT Press 1990.  Predecessor to AKL.
  4144	
  4145	Karel - Language featured in Karel the Robot: A Gentle Introduction to
  4146	Computer Programming, Richard E. Pattis, Wiley 1981.
  4147	ftp: wuarchive.wustl.edu:/mirrors/unix-c/languages/pascal/karel.tar-z
  4148	
  4149	KBMS - Expert system.
  4150	
  4151	KCL - Kyoto Common LISP.  Compiles to ANSI C.  "Design and Implementation  
  4152	of Kyoto Common Lisp", T. Yuasa, J Info Proc 13(3):284-295 (1990).  "Kyoto
  4153	Common Lisp Report", T. Yuasa & M. Hagiya.
  4154	list: kcl@rascal.ics.utexas.edu
  4155	
  4156	KEE - Knowledge Engineering Environment.  Frame-based expert system. 
  4157	Supports dynamic inheritance, multiple inheritance, polymorphism.  Classes,
  4158	meta-classes and objects are all treated alike.  A class  is an instance of
  4159	a meta-class.  Can control rules for merging of each field when multiple
  4160	inheritance takes  place.  Methods  are  written  in LISP.  Actions  may 
  4161	be triggered when fields are accessed or modified.  Extensive GUI
  4162	integrates with objects.  Can  easily make  object updates  to be 
  4163	reflected on  display or display selections  to update fields.   This can 
  4164	in turn trigger other  methods or  inference rules  which may  then update 
  4165	other parts of the display.  Intellicorp, for TI Explorer.  "The Role of
  4166	Frame-Based Representation in Reasoning", R. Fikes et al, CACM 28(9):904-
  4167	920 (Sept 1985).
  4168	
  4169	Kernel Parlog - Modeless intermediate language for Parlog compilation. 
  4170	"Notes on the Implementation of Parlog", K.L. Clark et al, J Logic Prog
  4171	2(1):17-42 (1985).
  4172	
  4173	Kevo - S. Taivalsaari <antero@csr.uvic.ca> Prototype-based object-oriented
  4174	system.
  4175	info:kevo-interest@ursamajor.uvic.ca
  4176	ftp:ursamajor.uvic.ca:/ursa/kevo
  4177	
  4178	Kid - Kernel language for Id.  A refinement of P-TAC, used as an
  4179	intermediate language for Id.  Lambda-calculus with first-class let-blocks,
  4180	plus I-structures.  "A Syntactic Approach to Program Transformations", Z.
  4181	Ariola et al, SIGPLAN Notices 26(9):116-129 (Sept 1991).
  4182	
  4183	KISS - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  4184	
  4185	KL0 - Sequential logic language based on Prolog, for the ICOT project,
  4186	Japan.
  4187	
  4188	KL1 - Kernel Language 1.  An experimental AND-parallel version of KL0 for
  4189	the ICOT project, Japan.  An implementation of FGHC.  "Design of the Kernel
  4190	Language for the Parallel Inference Machine", U. Kazunori et al, Computer J
  4191	(Dec 1990).
  4192	
  4193	Klerer-May System - Columbia U.  Early system with special math symbols. 
  4194	Its reference manual was two pages long!  "Further Advances in Two-
  4195	Dimensional Input-Output by Typewriter Terminals", M. Klerer et al, Proc
  4196	FJCC 31 (1967).  Sammet 1969, pp.284-294.
  4197	
  4198	KL-ONE - Frame language.  "An Overview of the KL-ONE Knowledge
  4199	Representation System", R.J. Brachman and J. Schmolze, Cognitive Sci 9(2),
  4200	1985.
  4201	
  4202	KMODEL - An ancestor of Model-K.  "Preliminary Results on the BEHAVIOR
  4203	Specifications Language KMODEL-0", BEHAVIOR Memo 5-91, 1991, GMD, Sankt
  4204	Augustin, Germany
  4205	
  4206	KOMPILER - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  4207	Versions: KOMPILER 2 for IBM 701, KOMPILER 3 for IBM 704.
  4208	
  4209	K&R C - C as originally described in The C Programming Language, B.
  4210	Kernighan and D. Ritchie, in contrast to the proposed ANSI standard C.
  4211	
  4212	KRC - Kent Recursive Calculator.  Turner 1981.  Lazy functional language
  4213	based on SASL, with pattern matching, ZF expressions.  "Functional
  4214	Programming and its Applications", David A. Turner, Cambridge U Press 1982.
  4215	
  4216	KRL - Frame language.  "An Overview of KRL, a Knowledge Representation
  4217	Language", D.G. Bobrow and T. Winograd, Cognitive Sci 1:1 (1977).
  4218	
  4219	KRS - Frame-based language built on Common LISP.
  4220	
  4221	KRYPTON - Frame language.  "An Essential Hybrid Reasoning System: Knowledge
  4222	and Symbol Level Acounts of of KRYPTON", R.J. Brachman et al, Proc IJCAI-
  4223	85, 1985.
  4224	
  4225	ksh - Korn Shell command interpreter for Unix.
  4226	
  4227	L6 - Bell Telephone Laboratories Low-Level Linked List Language.  Ken
  4228	Knowlton, 1965.  List processing language, typeless.  "A Programmer's
  4229	Description of L6, Bell Telephone Laboratories' Low-Level Linked List
  4230	Language", K. Knowlton CACM 9(8):616-625 (Aug 1966).  Sammet 1969, pp.400-
  4231	405.
  4232	
  4233	LADY - "Key Concepts in the INCAS Multicomputer Project", J. Nehmer et al
  4234	IEEE Trans Soft Eng SE-13(8):913-923 (Aug 1987).
  4235	
  4236	Lakota - Scripting language, extends existing OS commands.
  4237	info: Richard Harter <rh@smds.UUCP> SMDS Inc.
  4238	
  4239	LAMBDA - A version of typed lambda calculus, used to describe semantic
  4240	domains.  "Outline of a Mathematical Theory of Computation", D.S. Scott, TM
  4241	PRG-2, PRG, Oxford U, 1971.
  4242	
  4243	lambda-Prolog - An extension of standard Prolog, in which terms are typed
  4244	lambda-terms.  Prolog/Mali compiler uses the MALI abstract memory system. 
  4245	ftp: ftp.irisa.fr:pm/pm.tar.Z
  4246	info: pm@irisa.fr
  4247	list: prolog-mali@irisa.fr
  4248	
  4249	LAMINA - Concurrent object-oriented language.  "Experiments with a
  4250	Knowledge-based System on a Multiprocessor", Third Intl Conf Supercomputing
  4251	Proc, 1988.  "ELINT in LAMINA, Application of a Concurent Object language",
  4252	Delagi et al, KSL-88-3, Knowledge Sys Labs, Stanford U.
  4253	
  4254	Language H - Early business-oriented language developed by NCR.
  4255	
  4256	Laning and Zierler - J.H. Laning Jr and N. Zierler, 1953-1954.  Possibly
  4257	the first true working algebraic compiler.  On MIT's Whirlwind computer. 
  4258	Sammet 1969, pp.131-132.
  4259	
  4260	LAP - LISP Assembly Program.  Assembly language embedded into early LISP. 
  4261	Sammet 1969, p.597.  Also used by the Liar compiler for MIT Scheme.
  4262	
  4263	LAP4 - Early assembly language for Linc-8 machine.
  4264	
  4265	LAPSE - Single assignment language for the Manchester dataflow machine.  "A
  4266	Single Assignment Language for Data Flow Computing", J.R.W. Glauert, M.Sc
  4267	Diss, Victoria U Manchester, 1978.
  4268	
  4269	Larch - The Larch Project develops aids for formal specifications.  Each
  4270	Larch specification has two components: an interface containing predicates
  4271	written in the LIL (Larch Interface Language) designed for the target
  4272	language and a 'trait' containing assertions about the predicates written
  4273	in LSL, the Larch Shared Language common to all.  "The Larch Family of
  4274	Specification Languages", J. Guttag et al, IEEE Trans Soft Eng 2(5):24-365
  4275	(Sep 1985).
  4276	
  4277	LARCH/CLU - Larch specification language for CLU.  Used in Abstraction and
  4278	Specification in Program Development, B. Liskov & J. Guttag, MIT Press
  4279	1986.
  4280	
  4281	LaTeX - see TeX.
  4282	
  4283	LAU - Langage a Assignation Unique.  Single assignment language for the LAU
  4284	dataflow machine, Toulouse.  "Pipelining, Parallelism and Asynchronism in
  4285	the LAU System", J.C. Syre et al, Proc 1977 Intl Conf Parallel Proc, pp.87-
  4286	92.
  4287	
  4288	LAURE - A language for knowledge representation combining object
  4289	orientation and logic programming.  Object-oriented exception handling and
  4290	a polymorphic type system.
  4291	info: Yves Caseau <caseau@france.bellcore.com>
  4292	
  4293	LAVA - A language for VLSI that deals with "sticks", i.e. wires represented
  4294	as lines with thickness.  R.J. Matthews et al, "A Target Language for
  4295	Silicon Compilers", IEEE COMPCON, 1982, pp.349-353.
  4296	
  4297	LAX - LAnguage eXample.  Toy language used to illustrate problems in
  4298	compiler design.  "Compiler Construction", W.M. Waite et al, Springer 1984.
  4299	
  4300	LCC - Language for Conversational Computing.  CMU 1960's.  Similar to JOSS,
  4301	with declarations, pointers and block structure from ALGOL-60.  Implemented
  4302	for IBM 360/370 under TSS.  "LCC Reference Manual", H.R. Van Zoeren, CMU
  4303	1969.
  4304	
  4305	LCL - 
  4306	
  4307	  1. The Larch interface language for ANSI standard C.  J.V. Guttag et al,
  4308	TR 74, DEC SRC, Palo Alto CA, 1991.
  4309	
  4310	  2. Liga Control Language.  Controls the attribute evaluator generator
  4311	LIGA, part of the Eli compiler-compiler.  "LCL: Liga Control Language", U.
  4312	Kastens, U Paderborn.
  4313	
  4314	LCS - Language for Communicating Systems.  Bernard Barthomieu.  A
  4315	concurrent SML with behaviors and processes, based upon higher order CCS. 
  4316	Implemented as a bytecode interpreter.  Version 3.1
  4317	ftp: laas.laas.fr:pub/lcs for Sun 3, Sun 4
  4318	info: Bernard Berthomieu <bernard@laas.laas.fr>
  4319	list: lcs@laas.laas.fr
  4320	
  4321	LDL - "LDL: A Logic-Based Data-Language", S. Tsur et al, Proc VLDB 1986,
  4322	Kyoto Japan, Aug 1986, pp.33-41.
  4323	
  4324	LDT - Logic Design Translator.  Computer system design analysis.  Sammet
  4325	1969, p.621.
  4326	
  4327	LE/1 - Langage External.  "An Evaluation of the LE/1 Network Command
  4328	Language Designed for the SOC Network", J. du Masle, in Command Languages,
  4329	C. Unger ed, N-H 1973.
  4330	
  4331	LEAF - 
  4332	
  4333	  1. LISP Extended Algebraic Facility.  "An Algebraic Extension to LISP",
  4334	P.H. Knowlton, Proc FJCC 35 (1969).
  4335	
  4336	  2. "LEAF: A Language which Integrates Logic, Equations and Functions", R.
  4337	Barbuti et al in Logic Programming, Functions Relations and Equations, D.
  4338	DeGroot et al eds, P-H 1986, pp.201-238.
  4339	
  4340	Lean - U Nijmegen and U East Anglia.  An experimental language based on
  4341	graph rewriting, useful as an intermediate language.  Descendant of Dactl0. 
  4342	"Towards an Intermediate Languae Based on Graph Rewriting", H.P. Barendregt
  4343	et al in PARLE: Parallel Architectures and Languages Europe, G. Goos ed,
  4344	LNCS 259, Springer 1987, pp.159-175.  (See Clean).
  4345	
  4346	LEAP - Language for the Expression of Associative Procedures.  ALGOL-based
  4347	formalism for sets and associative retrieval, for TX-2.  Became part of
  4348	SAIL.  "An ALGOL-based Associative Language", J.A. Feldman et al, CACM
  4349	12(8):439-449 (Aug 1969).
  4350	
  4351	LECOM - Version of COMIT on GE 225 ca. 1966.  Sammet 1969, p.419.
  4352	
  4353	LEDA - Combines imperative, object-oriented, and logic programming
  4354	language.  Tim Budd, Oregon State U. <budd@cs.orst.edu>.
  4355	
  4356	LeFun - MCC, Austin.  Integration of logic and functional programming. 
  4357	"LeFun: Logic, Equations and Functions", H. Ait-Kaci et al, Proc 1987 Symp
  4358	on Logic Programming, San Francisco.
  4359	
  4360	LEGOL - "Application of MP/3 to the Design and Implementation of LEGOL, A
  4361	Legally Oriented Language", S.H. Mandil et al, Intl Symp Programming, paris
  4362	1974.
  4363	
  4364	Le-Lisp - Jerome Chailloux and Emmanuel St James, INRIA, France.  A LISP
  4365	dialect close to Common Lisp, lexically scoped, with a CLOS-like object
  4366	system.  Uses both packages and modules.  "le-lisp: A Portable and
  4367	Efficient Lisp System", J. Chailloux et al, Proc 1984 ACM Symp on Lisp and
  4368	Functional Programming, ACM.  Version v.16, available from ILOG, France.
  4369	
  4370	Leo - General-purpose systems language, syntactically like Pascal and Y,
  4371	semantically like C.  "The Leo Programming Language", G. Townsend, CS TR
  4372	84-7, U Arizona 1984.
  4373	
  4374	Lex  - Input language to the Lex scanner generator.  "Lex - A Lexical
  4375	Analyzer Generator", M.E. Lesk, CS TR 39, Bell Labs (Oct 1975).  (See
  4376	Flex).
  4377	Implementation:
  4378	  ML-lex - Implementation and output in SML/NJ.
  4379	  ftp: research.att.com:dist/ml/75.tools.tar.Z
  4380	
  4381	LG - Simple language for analyic geometry, with graphic output.  "LG: A
  4382	Language for Analytic Geometry", J. Reymond, CACM 12(8) (Aug 1969). [???]
  4383	
  4384	LGDF - Large-Grain DataFlow.  "A Large-grain Data Flow Scheduler for
  4385	Parallel Processing on Cyberplus", R.G. Babb et al, Proc 1986 Intl Conf on
  4386	Paralllel Proc, Aug 1986.
  4387	
  4388	LGEN - Bell Labs.  A logic language for VLSI implementation.  S.C. Johnson,
  4389	"Code Generation for Silicon", Proc 10th POPL, 1983.
  4390	
  4391	LGN - Linear Graph Notation.  A linearized representation of TCOL trees. 
  4392	B.W. Leverett et al, "An Overview of the Production Quality Compiler-
  4393	Compiler Projects", TR CMU-CS-79-105, Carnegie Mellon 1979.  (See TCOL)
  4394	
  4395	LIDO - Input language for the attribute evaluator generator LIGA (a
  4396	successor of GAG and a subsystem of the Eli compiler-compiler).  LIDO is
  4397	derived from GAG's input language ALADIN.  "LIDO: A Specification Language
  4398	for Attribute Grammars", U. Kastens, Fab Math-Inf, U Paderborn (Oct 1989).
  4399	
  4400	LIFE - Logic of Inheritance, Functions and Equations.  Hassan Ait-Kacy
  4401	<hak@prl.dec.com> et al, MCC, Austin, 1987.  Object-oriented, functional,
  4402	and constraint-based.  Integration of ideas from LOGIN and LeFun.  "Is
  4403	There a Meaning to LIFE?", H. Ait-Kacy et al, Intl Conf on Logic Prog,
  4404	1991.
  4405	ftp: gatekeeper.dec.com:pub/plan/Life.tar.Z - Wild_LIFE interpreter from
  4406	Paradise project at DEC's Paris Research Lab
  4407	list: life-users@prl.dec.com
  4408	
  4409	Lila - Patrick Salle'<salle@geocub.greco-prog.fr>.  A small assembly-like
  4410	language used for implementation of Actor languages.  [Plasma perhaps?]
  4411	
  4412	LIMDEP - Linear programming language used by economists.
  4413	
  4414	LIMP - "Messages in Typed Languages", J. Hunt et al, SIGPLAN Notices
  4415	14(1):27-45 (Jan 1979).
  4416	
  4417	Linc - Burroughs/Unisys 4GL.  Designed in New Zealand.
  4418	
  4419	Lincoln Reckoner - ca 1965.  Interactive math including matrix operations,
  4420	on TX-2.  "The Lincoln Reckonere: An Operation-Oriented On-line Facility
  4421	with Distributed Control", A.N. Stowe et al, Proc FJCC 29 (1966).  Sammet
  4422	1969, pp.245-247.
  4423	
  4424	Linda - Yale.  A "coordination language", providing a model for concurrency
  4425	with communication via a shared tuple space.  Usually implemented as a
  4426	subroutine library for a specific base language.  "Generative Communication
  4427	in Linda", D. Gelernter <gelernter@cs.yale.edu> ACM TOPLAS 7(1):80-112
  4428	(1985).  "Linda in Context", N. Carreiro <carreiro@cs.yale.edu> et al, CACM
  4429	32(4):444-458 (Apr 1989).  (See C-Linda, Ease, Fortran-Linda, LindaLISP,
  4430	Lucinda, Melinda, Prolog-Linda).
  4431	
  4432	LindaLISP - Yep, you guessed it.
  4433	
  4434	Lingo - An animation scripting language.  MacroMind Director V3.0
  4435	Interactivity Manual, MacroMind 1991.
  4436	
  4437	LINGOL - LINguistics Oriented Language.  Natural language processing.  "A
  4438	Linguistics Oriented Programming Language", V.R. Pratt, Third Intl Joint
  4439	Conf on AI, 1973.
  4440	  
  4441	LIPL - Linear IPL.  A linearized (i.e. horizonal format) version of IPL-V. 
  4442	Sammet 1969, p.394.  R. Dupchak, "LIPL - Linear Information Processing
  4443	Language", Rand Memo RM-4320-PR, Feb 1965.
  4444	
  4445	LIS - Langage Implementation Systeme.  "The System Implementation Language
  4446	LIS", J.D. Ichbiah et al, CII Honeywell-Bull, TR 4549 E/EN, Louveciennes
  4447	France (Dec 1974).
  4448	
  4449	LISA - Statistical data analysis.  Similar to S.
  4450	ftp: dolphin.mit.edu.
  4451	
  4452	LISP - LISt Processing.  John McCarthy <jmc@sail.stanford.edu> et al, MIT
  4453	late 50's.  Symbolic functional recursive language based on lambda-
  4454	calculus, used especially for AI and symbolic math.  Many dialects.  Atoms
  4455	and lists.  Dynamic scope.  Both programs and data are represented as list
  4456	structures.  Versions include LISP 1 (Original version), LISP 1.5 (MIT
  4457	1959), LISP 1.75, LISP 1.9.
  4458	
  4459	LISP 2 - LISP 1.5 with an ALGOL60-like surface syntax.  Also optional type
  4460	declarations, new data types including integer-indexed arrays and character
  4461	strings, partial-word extraction/insertion operators and macros.  A
  4462	pattern-matching facility similar to COMIT was proposed.  "The LISP 2
  4463	Programming Language and System", P.W. Abrahams et al, Proc FJCC 29:661-
  4464	676, AFIPS (Fall 1966).
  4465	
  4466	LISP70 - LISP dialect, a descendant of MLISP and MLISP2.  Also known as
  4467	PLISP and VEL.  Useful for parsing.  Only the pattern-matching system was
  4468	published and fully implemented.  According to Alan Kay, LISP70 had an
  4469	influence on Smalltalk-72.  "The LISP70 Pattern Matching System, Larry
  4470	Tesler et al, IJCAI 73.
  4471	
  4472	LISP A - "LISP A: A LISP-like System for Incremental Computing", E.J.
  4473	Sandewall, Proc SJCC 32 (1968).
  4474	
  4475	Lispkit Lisp - Purely functional version of LISP.  "Functional Programming,
  4476	Application and Implementation", P. Henderson, P-H 1980.
  4477	
  4478	Lisp-Linda - P. Dourish, U Edinburgh 1988.
  4479	
  4480	LISP Machine LISP - Zetalisp.
  4481	
  4482	Lisptalk - "Concurrent Programming Language Lisptalk", C. Li, SIGPLAN
  4483	Notices 23(4):71-80 (Apr 1988).
  4484	
  4485	LITTLE - Typeless language used to produce machine-independent software. 
  4486	LITTLE has been used to implement SETL.  "Guide to the LITTLE Language", D.
  4487	Shields, LITTLE Newsletter 33, Courant Inst (Aug 1977).
  4488	
  4489	Little Smalltalk - A line-oriented near-subset of Smalltalk-80.  "A Little
  4490	Smalltalk", Timothy Budd, A-W 1987.
  4491	ftp: cs.orst.edu, source in C.
  4492	
  4493	LLM3 - J. Chailloux.  Assembly language for a virtual machine, the
  4494	implementation language for Le-Lisp.
  4495	
  4496	LM-Prolog - Lisp Machine Prolog.  K. Kahn et al, 1983.  "LM-Prolog User
  4497	Manual", M. Carlsson et al, Uppsala Dec 1983.
  4498	ftp: sics.se: archive/lm-prolog.tar.Z - Prolog interpreter in Zetalisp
  4499	
  4500	LM3 - The Larch interface language for Modula-3.  (See Larch).  "LM3: A
  4501	Larch/Modula-3 Interface Language", Kevin D. Jones, TR 72, DEC SRC, Palo
  4502	Alto CA.
  4503	
  4504	LML - 
  4505	
  4506	  1. Chalmers U Tech, Goteborg, Sweden.  Lazy, completely functional
  4507	variant of ML[2].  Implemented on the G-machine.
  4508	ftp: piggy.cs.chalmers.se
  4509	
  4510	  2. Logical ML.  Adds to Lazy ML a data type of 'theories' whose objects
  4511	represent logic programs.  "Logic Programming within a Functional
  4512	Framework", A. Brogi et al, in Programming Language Implementation and
  4513	Logic Programming, P. Deransart et al eds, LNCS 456, Springer 1990.
  4514	
  4515	LNF - "A Fully Lazy Higher Order Purely Functional Programming Language
  4516	With Reduction Semantics", K.L. Greene, CASE Center TR 8503, Syracuse U
  4517	1985.
  4518	
  4519	L&O - Logic and Objects.  Implemented as a front end for IC Prolog.  "Logic
  4520	and Objects", Frank McCabe, Prentice-Hall.
  4521	info: Zacharias Bobolakis <zb@doc.ic.ac.uk>
  4522	ftp: doc.ic.ac.uk:/computing/programming/languages/pd-ICP-0,90.tar.Z
  4523	
  4524	LO - Linear Objects.  Concurrent logic programming language based on
  4525	"linear logic", an extension of Horn logic with a new kind of OR-
  4526	concurrency.  "LO and Behold! Concurrent Structured Processes", J. Andreoli
  4527	et al, SIGPLAN Notices 25(10):44-56 (OOPSLA/ECOOP '90) (Oct 1990).
  4528	
  4529	LogC - C extension ncorporating rule-oriented programming, for AI
  4530	applications.  Production rules are encapsulated into functional components
  4531	called rulesets.  Uses a search network algorithm similar to RETE.  "LogC:
  4532	A Language and Environment for Embedded Rule Based Systems", F. Yulin et
  4533	al, SIGPLAN Notices 27(11):27-32 (Nov 1992).  Version: LogC 1.6.
  4534	
  4535	Logic Design Language - Language for computer design.  "A System
  4536	Description Language Using Parametric Text Generation", R.H. Williams, TR
  4537	02.487, IBM San Jose, Aug 1970.
  4538	
  4539	LOGIN - Integration of logic programming and inheritance.  "LOGIN: A Logic
  4540	Programming Language with Built-In Inheritance", H. Ait-Kaci et al, J Logic
  4541	Programming 3(3):185-215 (1986).
  4542	
  4543	LOGLAN - Inst Informatics, Warsaw U.  Object-oriented.  "LOGLAN '88 -
  4544	Report on the Programming Language", LNCS 414, Springer, ISBN 3-540-52325-
  4545	1.
  4546	
  4547	LOGLISP - Robertson & Sibert, Syracuse 1980.  A Prolog-like language called
  4548	LOGIC, embedded in LISP.  "LOGLISP: An Alternative to Prolog", J. Alan
  4549	Robinson et al in Machine Intelligence 10, D. Michie ed, Ellis Horwood
  4550	1982.
  4551	
  4552	LOGO - Developed 1966-1968 by a group at Bolt, Beranek & Newman headed by
  4553	Wally Fuerzeig <fuerzeig@bbn.com> and including Seymour Papert
  4554	<seymour@media.mit.edu>.  A LISP-like language aimed at children and other
  4555	beginning programmers, noted for its "turtle graphics" used to draw
  4556	geometric shapes.
  4557	ftp: anarres.cs.berkeley.edu:pub    Logo interpreters for Mac, Unix, PC, X
  4558	
  4559	LOGOL - Strings are stored on cyclic lists or 'tapes', which are operated
  4560	upon by finite automata.  J. Mysior et al, "LOGOL, A String manipulation
  4561	Language", in Symbol Manipulations Languages and Techniques, D.G. Bobrow
  4562	ed, N-H 1968, pp.166-177.
  4563	
  4564	LOLITA - Language for the On-Line Investigation and Transformation of
  4565	Abstractions.  Extension of Culler-Fried system for symbolic math.  "An On-
  4566	line Symbol Manipulation System", F.W. Blackwell, Proc ACM 22nd Natl Conf
  4567	(1967).  Sammet 1969, p.464.
  4568	
  4569	Lolli - (named for the "lollipop" operator "-o")  Based on linear logic, in
  4570	which clauses can be used exactly once.  All the operators of lambda-
  4571	Prolog plus linear variations.  Implemented in SML/NJ.  Josh Hodas et al,
  4572	"Logic Programming in a Fragment of Intuitionistic Linear Logic",
  4573	Information and Computation, to appear.
  4574	ftp: ftp.cis.upenn.edu:pub/Lolli/Lolli-0.7.tar.Z
  4575	
  4576	LOOK - Specification language.  "A Look at Algebraic Specifications", S.N.
  4577	Zilles et al, IBM RR, 1982.
  4578	
  4579	LOOKS - "LOOKS: Knowledge-Representation System for Designing Expert
  4580	Systems in a Logical Programming Framework", F. Mizoguchi, Proc Intl Conf
  4581	5th Gen Comp Sys, ICOT 1984.
  4582	
  4583	LOOPN - U Tasmania.  An object-oriented language for simulation of Petri
  4584	nets.
  4585	ftp: ftp.utas.edu.au/departments/computer_science/loopn.tar.Z
  4586	
  4587	LOOPS - Object-oriented LISP extension, used in development of knowledge-
  4588	based systems.  "The LOOPS Manual", D.G. Bobrow & M. Stefik, Xerox Corp
  4589	1983.  (See CommonLoops).
  4590	
  4591	Lore - Object-oriented language for knowledge representation.  "Etude et
  4592	Realisation d'un Language Objet: LORE", Y. Caseau, These, Paris-Sud, Nov
  4593	1987.
  4594	
  4595	LOTIS - LOgic, TIming, Sequencing.  Describes a computer via its data flow. 
  4596	Sammet 1969, p.620.
  4597	
  4598	LOTOS - Specification language based on temporal ordering.  "The Formal
  4599	Description Technique LOTOS", P.H.J. van Eijk et al eds, N-H 1989.
  4600	
  4601	Lout - J. Kingson <jeff@cs.su.oz.au>  The language embedded in the document
  4602	preparation system lout.
  4603	ftp: uunet.uu.net:tmp/lout.tar.Z
  4604	
  4605	LPC - ca 1988.  Variant of C used to program the LP MUDs, programmable
  4606	multi-user adventures.
  4607	
  4608	LPG - 
  4609	
  4610	  1. Linguaggio Procedure Grafiche (Italian for "Graphical Procedures
  4611	Language").  dott. Gabriele Selmi.  Roughly a cross between FORTRAN and
  4612	APL, with graphical-oriented extensions and several peculiarities. 
  4613	Underlies the products of CAD.LAB Spa.   "Graphical Procedure Language
  4614	User's Guide and Reference Manual", CAD.LAB , Bologna, Italy, 1989, order
  4615	code GO89/9.
  4616	
  4617	  2. Langage de Programmation Generique.  An applicative language, both
  4618	specification and functional.  Special emphasis on parametrized
  4619	declarations.  "Design and Implementation of a Generic, Logic and
  4620	Functional Programming Language",  D. Bert et al, ESOP 86, LNCS 213,
  4621	Springer 1986.
  4622	
  4623	LPL - List Programming Language.  LISP-like language with ALGOL-like
  4624	syntax, for IBM 360.  "LPL - LISP Programming Language", F.W. Blair et al,
  4625	RC 3062, IBM TJWRC, Sep 1970.
  4626	
  4627	LRLTRAN - Lawrence Radiation Laboratory TRANslator.  FORTRAN extension with
  4628	vector arithmetic and dynamic storage, used for scientific work and systems
  4629	programming, including the LTSS OS.  "The LRLTRAN Compiler", S.F.
  4630	Mendicino, CACM 11(11):747-775 (Nov 1969).
  4631	
  4632	LSL - 
  4633	
  4634	  1. Larch Shared Language.  An assertion language.  (See Larch).
  4635	
  4636	  2. Link and Selector Language.  Graphic query language.  "LSL: A Link and
  4637	Selector Language", D.C. Tsichritzis, Proc Intl Conf Management of Data,
  4638	ACM 1976, pp.123-134.
  4639	
  4640	LSYD - Language for SYstems Development.  PL/I-like language with data
  4641	structure and character extensions.  "Systems Programming Languages", R.D.
  4642	Bergeron et al, in Advances in Computers 1971, A-P.
  4643	
  4644	LT-2 - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  4645	
  4646	LTR - Langage Temps-Reel.  A French predecessor to Ada, Modula-like with a
  4647	set of special-purpose real-time constructs based on an event model. 
  4648	Mentioned in "An Overview of Ada", J.G.P. Barnes, Soft Prac & Exp 10:851-
  4649	887 (1980).
  4650	
  4651	LTR2 - 
  4652	
  4653	LTR3 - Parayre, France.  Saw wide use by French military and avionics. 
  4654	"The LTR3 Reference Manual", A. Parayre, Delegation Generale pour
  4655	l'Armement, France.
  4656	
  4657	LUCID -
  4658	
  4659	  1. Early query language, ca. 1965, System Development Corp, Santa Monica,
  4660	CA.  Sammet 1969, p.701.
  4661	
  4662	  2. Ashcroft & Wadge <wwadge@csr.uvic.ca>, 1981.  A dataflow language
  4663	descended from ISWIM, lazy but first-order.  Statements are regarded as
  4664	equations defining a network of processors and communication lines, through
  4665	which the data flows.   Every data object is thought of as an infinite
  4666	stream of simple values, every function as a filter.  Lucid has no data
  4667	constructors such as arrays or records.  Iteration is simulated with 'is
  4668	current' and 'fby' (concatenation of sequences).  "Lucid, the Dataflow
  4669	Programming Language", W. Wadge, Academic Press 1985.
  4670	
  4671	Lucinda - Combines Russell-like polymorphism with Linda-like concurrency. 
  4672	Implemented as a threaded interpreter written in C, for a Sun network and a
  4673	Meiko Computing Surface.  "Lucinda - An Overview", P. Butcher, U York
  4674	<paulb@minster.york.ac.uk> et al, SIGPLAN Notices 26(8):90-100 (Aug 1991).
  4675	
  4676	Lucy - Distributed constraint programming language.  An actor subset of
  4677	Janus.  "Actors as a Special Case of Concurrent Constraint Programming", K.
  4678	Kahn <kahn@parc.xerox.com> et al, SIGPLAN Notices 25(10):57-66 (OOPSLA/
  4679	ECOOP '90) (Oct 1990).
  4680	
  4681	LUSTRE - Real-time dataflow language for synchronous systems, especially
  4682	automatic control and signal processing.  A Lucid subset, plus timing
  4683	operators and user-defined clocks.  "Outline of a Real-Time Data-Flow
  4684	Language", J.-L. Bergerand et al, Proc IEE-CS Real Time Systems Symp, San
  4685	Diego, IEEE Dec 1985, pp.33-42.  "LUSTRE: A Declarative Language for
  4686	Programming Synchronous Systems", P. Caspi et al, Conf Rec 14th Ann ACM
  4687	Symp on Princ Prog Langs, 1987.
  4688	
  4689	LYaPAS - (Russian acronym for "Logical Language for the Representation of
  4690	Synthesis Algorithms").  For the URAL-1 computer.  Coded in octal! 
  4691	"LYaPAS: A Programming Language for Logic and Coding Algorithms", M.A.
  4692	Gavrilov et al eds, Academic Press 1969.
  4693	
  4694	LYNX - U Wisc 1984.  Language for large distributed networks, using remote
  4695	procedure calls.  "The Lynx Distributed Programming Language: Motivation,
  4696	Design and Experience", M.L. Scott, Computer Langs 16:209-233 (1991).
  4697	
  4698	LYRIC - Language for Your Remote Instruction by Computer.  CAI language
  4699	implemented as a FORTRAN preprocessor.  "Computer Assisted Instruction:
  4700	Specification of Attributes for CAI Programs and Programmers", G.M. Silvern
  4701	et al, Proc ACM 21st Natl Conf (1966).
  4702	
  4703	M - 
  4704	
  4705	  1. Alternative name for MUMPS.
  4706	
  4707	  2. Silicon Compiler Systems.  A C-like language for multilevel hardware
  4708	description.  Currently available in the GDT package from Mentor Graphics.
  4709	
  4710	M3 - Macro processor, forerunner of M4, for the AP-3 mini.
  4711	
  4712	M4 - Macro processor for Unix and GCOS.  "The M4 Macro Processor",
  4713	Kernighan & Ritchie, Jul 1977.
  4714	ftp: prep.ai.mit.edu:pub/gnu/m4-1.0.tar.Z
  4715	
  4716	M5 - A. Dain, U Cincinnati 1992.  Macro processor, a generalization of M4. 
  4717	For Unix and DOS.
  4718	ftp: thor.exe.u.edu:pub/dain/m5
  4719	
  4720	MAC - Early system on Ferranti Mercury.  Listed in CACM 2(5):16 (May 1959).
  4721	
  4722	Mac-1 - Assembly language used in Structured Computer Organization, A.S.
  4723	Tanenbaum, 3rd Edition, P-H 1989, Sect. 4.3.  [See Mic-1]
  4724	
  4725	MAC-360 - ca. 1967.  Solving numerical problems using equation-like input.
  4726	"User's Guide to MAC-360", Charles Stark Draper Lab, Cambridge MA (Aug
  4727	1973)  Sammet 1969, p.264.
  4728	
  4729	Macaulay - Mike Stillman <mike@mssun7.msi.cornell.edu> and Dave Bayer
  4730	<bayer@cunixa.columbia.edu> 1977.  Symbolic math package for commutative
  4731	algebra, algebraic geometry, cohomology.
  4732	ftp: zariski.harvard.edu, Version 3 for Sun, Mac and Amiga, source in C
  4733	
  4734	MACE - Concurrent object-oriented language.[?]
  4735	
  4736	Machiavelli - Peter Buneman & Atsushi Ohori, U Pennsylvania, 1989.  An
  4737	extension of Standard ML based on orthogonal persistence.  "Database
  4738	Programming in Machiavelli: A Polymorphic Language with Static Type
  4739	Inference", A. Ohori, Proc SIGMOD Conf, ACM, June 1989.
  4740	
  4741	MACL - Macintosh Allegro CL.
  4742	list: info-macl@cambridge.apple.com
  4743	
  4744	MACLISP - Project MAC.  Was once one of two main branches of LISP (the
  4745	other being INTERLISP).  In 1981 Common LISP was begun in an effort to
  4746	combine the best features of both.  "MACLISP Reference Manual", D.A. Moon
  4747	<moon@cambridge.apple.com>, TR Project MAC, MIT 1974.
  4748	
  4749	MACRO - 
  4750	
  4751	  1. Assembly language for VAX/VMS.
  4752	
  4753	  2. PL/I-like language with extensions for string processing.  "MACRO: A
  4754	Programming Language", S.R. Greenwood, SIGPLAN Notices 14(9):80-91 (Sep
  4755	1979).
  4756	
  4757	Macro SAP - Macro processing modification of SAP.  D.E. Eastwood and D.M.
  4758	McIlroy, unpublished memorandum, Bell Labs 1959.  Led to TRAC.
  4759	
  4760	MACSYMA - Project MAC's SYmbolic MAnipulator.  Joel Moses
  4761	<moses@larch.lcs.mit.edu> MIT 1969, later Symbolics, Inc.  The first
  4762	comprehensive symbolic math system, written in LISP. "MACSYMA - The Fifth
  4763	Year", J. Moses, SIGSAM Bulletin 8(3) (Aug 1974).  Versions: Symbolics
  4764	Macsyma, DOE Maxima (ANL), Vaxima.
  4765	info: macsyma-service@symbolics.com
  4766	ftp: rascal.ics.utexas.edu:pub/maxima-4-155.tar.Z   DOE Maxima in Common
  4767	LISP
  4768	
  4769	MAD - 
  4770	
  4771	  1. Michigan Algorithm Decoder.  Developed at U Michigan by R. Graham,
  4772	Bruce Arden <arden@hopper.ee.rochester.edu> and Bernard Galler
  4773	<Bernard_A._Galler@um.cc.umich.edu>, 1959.  Based on IAL.  For the IBM 704,
  4774	709 and 7090, later ported to Philco, Univac and CDC machines.  MAD was one
  4775	of the first extensible languages: the user could define his own operators
  4776	and data types.  "Michigan Algorithm Decoder (The MAD Manual)", U Michigan
  4777	Computing Center, 1966.  Sammet 1969, p.205.
  4778	
  4779	  2. Dataflow language.  "Implementation of Data Structures on a Data Flow
  4780	Computer", D.L. Bowen, Ph.D. Thesis, Victoria U Manchester, Apr 1981.
  4781	
  4782	Mad/1 - A later, much enhanced version of MAD, for the IBM 360.  Michigan's
  4783	answer to PL/I.
  4784	
  4785	MADCAP - Math and set problems, for the Maniac II and CDC 6600.  "MADCAP -
  4786	A Scientific Compiler for a Displayed Formula Texbook Language", M.B.
  4787	Wells, CACM 4(1):31-36 (Jan 1961).  Sammet 1969, pp.271-281.
  4788	
  4789	MADTRAN - Early preprocessor that translated FORTRAN to MAD, for gain in
  4790	speed.
  4791	
  4792	MAGIC - Early system on Midac computer.  Listed in CACM 2(5):16 (May 1959).
  4793	
  4794	Magic Paper - Early interactive symbolic math system.  Sammet 1969, p.510.
  4795	
  4796	Magma2 - Language that allows programmability of the control environment,
  4797	e.g. recursion, backtracking, coroutines, nondeterminism, etc.  "Magma2: A
  4798	Language Oriented Toward Experiments in Control", Franco Turini, ACM TOPLAS
  4799	6(4):468-486 (Oct 1984).
  4800	
  4801	MagmaLISP - Predecessor of Magma2.  "MagmaLISP: A Machine Language for
  4802	Artificial Intelligence", C. Mantagero et al, Proc 4th Intl Joint Conf
  4803	Artif Intell, 1975, pp.556-561.
  4804	
  4805	MAGNUM - Tymshare Inc, late 70's.  Database language for DEC-10's, used
  4806	internally by Tymshare.
  4807	
  4808	Magritte - J. Gosling.  Constraint language for interadctive graphical
  4809	layout.  Solves its constraints using algebraic transformations. 
  4810	"Algebraic Constraints", J. Gosling, PhD Thesis, TR CS-83-132, CMU, May
  4811	1983.
  4812	
  4813	MAINSAIL - MAchine INdependent SAIL.  From XIDAK, Palo Alto CA, (415) 855-
  4814	9271.
  4815	
  4816	Make - Language for the Unix file maintenance utility Make.  "Make - A
  4817	Program for Maintaining Computer Programs", A.I. Feldman, TR No 57, Bell
  4818	Labs Apr 1977.
  4819	
  4820	MAL - Micro Assembly Language - Microprogramming language with high-level
  4821	syntax, used in Structured Computer Organization, A.S. Tanenbaum, 3rd ed,
  4822	P-H 1989, Sect 4.4.  [See Mic-1, Mac-1].
  4823	
  4824	Manchester Autocode - Predecessor of Mercury Autocode.  "The Programming
  4825	Strategy Used with the Manchester University Mark I Computer", R.A.
  4826	Brooker, Proc IEE 103B Suppl:151-157, 1956.
  4827	
  4828	Mandala - ICOT, Japan.  A system based on Concurrent Prolog.  "Mandala: A
  4829	Logic Based Knowledge Programming System", K. Furukawa et al, Intl Conf 5th
  4830	Gen Comp Sys 1984.
  4831	
  4832	MAO - Early symbolic math system.  A. Rom, Celest Mech 1:309-319 (1969).
  4833	
  4834	MAP - Mathematical Analysis without Programming.  On-line system under CTSS
  4835	for math.  Sammet 1969, p.240.
  4836	
  4837	Maple - B. Char, K. Geddes, G. Gonnet, M. Monagan & S. Watt, U Waterloo,
  4838	Canada 1980.  Symbolic math system.  Waterloo Maple Software.  Current
  4839	version: Maple V.
  4840	info: wmsi@daisy.waterloo.edu
  4841	list: glabahn@daisy.waterloo.edu
  4842	
  4843	Marseille Prolog - One of the two main dialects of Prolog, the other being
  4844	Edinburgh Prolog.  The difference is largely syntax.  The original
  4845	Marseille Interpreter (1973) was written in FORTRAN.
  4846	
  4847	MARSYAS - MARshall SYstem for Aerospace Simulation.  Simulation of large
  4848	physical systems.  "MARSYAS - A Software System for the Digital Simulation
  4849	of Physical Systems", H. Trauboth et al, Proc SJCC, 36 (1970).
  4850	
  4851	MARY - Norwegian research language, somewhat ALGOL68-like.  No operator
  4852	precedence.  The back cover of the manual bears the (well-hidden) fragment:
  4853	MARY HAD A LITTLE LAMB - COERCION IMPOSSIBLE.
  4854	
  4855	MAS - Modula-2 Algebra System.  "Modula-2 Algebra System", H. Kredel, Proc
  4856	DISCO 90 Capri, LNCS 429, Springer 1990, pp270-271.
  4857	ftp: alice.fmi.uni-passau.de, for PC, Atari, Amiga
  4858	
  4859	MASM - Microsoft Assembler for MS-DOS.
  4860	
  4861	Massey Hope - Massey U, NZ.  Refinement of Hope+C with improved syntax, and
  4862	no stream I/O.
  4863	info: Nigel Perry <N.Perry@massey.ac.nz>
  4864	
  4865	Matchmaker - A language for specifying and automating the generation of
  4866	multi-lingual interprocess communication interfaces.  MIG is an
  4867	implementation of a subset of Matchmaker that generates C and C++ remote
  4868	procedure call interfaces for interprocess communication between Mach
  4869	tasks.  "MIG - The Mach Interface Generator", R.P. Draves et al, CS CMU, (4
  4870	Aug 1989).
  4871	
  4872	Mathcad - Symbolic math environment.
  4873	
  4874	Mathematica - (name suggested by Steve Jobs).  Wolfram Research, 1988. 
  4875	Symbolic math and graphics system.  The language emphasizes rules and
  4876	pattern-matching.  "Mathematica: A System for Doing Mathematics by
  4877	Computer", Stephen Wolfram, A-W 1988.
  4878	ftp: otter.stanford.edu, ftp.ncsa.uiuc.edu
  4879	list: mathgroup-request@yoda.ncsa.uiuc.edu
  4880	info: info@wri.com
  4881	
  4882	MATHLAB - Symbolic math system, MITRE, 1964.  Later version: MATHLAB 68
  4883	(PDP-6, 1967).  "The Legacy of MATHLAB 68", C. Engelman, Proc 2nd Symp on
  4884	Symbolic and Algebraic Manip, ACM (Mar 1971).  Sammet 1969, p.498.
  4885	
  4886	MATH-MATIC or MATHMATIC - Alternate name for AT-3.  Early, pre-FORTRAN
  4887	language for UNIVAC I or II.  Sammet 1969.
  4888	
  4889	Matrix Compiler - Early matrix computations on UNIVAC.  Sammet 1969, p.642.
  4890	
  4891	MATRIX MATH - Early system on UNIVAC I or II.  Listed in CACM 2(5):16 (May
  4892	1959).
  4893	
  4894	mawk - Mike Brennan <brennan@bcsaic.boeing.com> 1991.  An implementation of
  4895	nawk, distributed under GNU license but distinct from GNU's gawk.
  4896	ftp: oxy.edu:public/mawk
  4897	
  4898	MAXIMOP - "Job Control Languages: MAXIMOP and CAFE", J. Brandon, Proc BCS
  4899	Symp on Job Control Languages--Past Present and Future, NCC, Manchester,
  4900	ENgland 1974.
  4901	
  4902	MBASIC - Microsoft BASIC.
  4903	
  4904	MC - "Design and Implementation of a C-Based Language for Distributed Real-
  4905	Time Systems", A. Rizk et al, SIGPLAN Notices 22(6):83-96 (June 1987).
  4906	
  4907	McG360 - Interactive, similar to PAL[5], for IBM 360.  "McG360 Programmer's
  4908	Guide", RC 2693, IBM TJWRC, Nov 1969.
  4909	
  4910	MCL - Macintosh Common LISP.
  4911	
  4912	M-Code - 
  4913	
  4914	 1) Intermediate code produced by the Modula-2 compiler. [which one?]
  4915	
  4916	 2) Intermediate language for an SECD-like machine, used by the Concert
  4917	implementation of MultiLISP.
  4918	
  4919	MCS - Meta Class System.  A portable object-oriented extension of Common
  4920	LISP.
  4921	ftp: gmdzi.gmd.de:pub/lisp/mcs
  4922	
  4923	MDL - (originally "Muddle").   C. Reeve, C. Hewitt & G. Sussman, MIT ca.
  4924	1971.  Basically LISP 1.5 with data types and arrays.  Many of its features
  4925	were advanced at the time, and were incorporated into later LISP dialects. 
  4926	In the mid 80's there was an effort to use bytecoding to make the language
  4927	portable.  CLU was first implemented in MDL.  Infocom wrote Zork in MDL,
  4928	and used it as the basis for the ZIL interpreter.  "The MDL Programming
  4929	Language", S.W. Galley et al, Doc SYS.11.01, Project MAC, MIT (Nov 1975). 
  4930	Implementations exist for ITS, TOPS-20, BSD 4.3, Apollo Domain, SunOS and
  4931	A/UX.
  4932	
  4933	me too - Peter Henderson, 1984.  Functional language for executable
  4934	specifications.  Like LispKit Lisp, but with sets, maps and sequences to
  4935	describe the specification.  "Functional Programming, Formal Specification
  4936	and Rapid Prototyping", IEEE Trans Soft Eng, SE-12(2):241-250 (Feb 1986).
  4937	
  4938	MELD - Concurrent, object-oriented, dataflow, modular and fault-tolerant! 
  4939	Comparable to SR.  "MELDing Multiple Granularities of Parallelism", G.
  4940	Kaiser et al, ECOOP '89, pp.147-166, Cambridge U Press 1989.
  4941	
  4942	MeldC - Columbia U, 1990.  A C-based concurrent object-oriented
  4943	coordination language built on a reflective architecture.  A redesign of
  4944	MELD.  Version 2.0 or Sun4's and DECstations.
  4945	info: meldc@cs.columbia.edu
  4946	
  4947	Melinda - "Melinda: Linda with Multiple Tuple Spaces", S. Hupfer,
  4948	<hupfer-susanne@yale.edu> YALEU/DCS/RR-766, Yale U Feb 1990.
  4949	
  4950	Mentat - U Virginia.  Object-oriented distributed language, an extension of
  4951	C++, portable to a variety of MIMD architectures.  "Mentat: An Object-
  4952	Oriented Macro Data Flow System", A. Grimshaw <grimshaw@cs.virginia.edu> et
  4953	al, SIGPLAN Notices 22(12):35-47 (Dec 1987) (OOPSLA '87).  Available now
  4954	for Sun 3 & 4 and iPSC/2, and soon Mach, iPSC860, RS/6000 and Iris.
  4955	info: mentat@uvacs.cs.virginia.edu
  4956	
  4957	MENTOR - CAI language.  "Computer Systems for Teaching Complex Concepts",
  4958	Report 1742, BBN, Mar 1969.
  4959	
  4960	MENYMA/S - "A Message Oriented Language for System Applications", A. Koch
  4961	et al, Proc 3rd Intl Conf Distrib Comp Sys, IEEE 1982, pp.824-832.
  4962	
  4963	Mercury Autocode - Autocode for the Ferranti Mercury machine.  (See
  4964	Autocode).
  4965	
  4966	Mesa - Xerox PARC, ca 1977.  System and application programming for
  4967	proprietary hardware: Alto, Dolphin, Dorado and Dandelion.  Pascal-like
  4968	syntax.  Its modules with separately compilable definition and
  4969	implementation parts directly led to Wirth's design for Modula.  Threads,
  4970	coroutines (fork/join), exceptions, and monitors.  Type checking may be
  4971	disabled.  Originally for internal use, Mesa was released to a few
  4972	universitites in 1985.  "Mesa Language Manual", J.G. Mitchell et al, Xerox
  4973	PARC, CSL-79-3 (Apr 1979).  "Early Experience with Mesa", Geschke et al,
  4974	CACM 20(8):540-552 (Aug 1977).
  4975	
  4976	META - CDC, ca 1977.  Assembly language for the CYBER 200.  CDC Pub
  4977	60256020.
  4978	
  4979	META 5 - Early syntax-directed compiler-compiler, used for translating one
  4980	high-level language to another.  "META 5: A Tool to Manipulate Strings of
  4981	Data", D.K. Oppenheim et al, Proc 21st Natl Conf, ACM 1966.  Sammet 1969,
  4982	p.638.  Versions: META II, META-3.
  4983	
  4984	Meta-II - An early compiler-compiler.  "Meta-II: a Syntax Oriented Compiler
  4985	Writing Language", V. Schorre, Proc 19th ACM Natl Conf 1964.
  4986	
  4987	Meta-IV - "The Vienna Development Method: The Meta Language", D. Bjorner et
  4988	al, eds, LNCS 61 Springer 1978.
  4989	
  4990	Meta-Crystal - A language for transformations of Crystal programs. 
  4991	Implemented in T.  "Meta-Crystal- A Metalanguage for Parallel-Program
  4992	Optimization", J.A. Yang et al, TR YALEU/DCS/TR-786, Yale Apr 1990.  (See
  4993	Crystal).
  4994	
  4995	METAFONT - Knuth.  A system for the design of raster-based alphabets. 
  4996	Companion to TeX.  "The METAFONT Book," Donald Knuth, A-W 1986.  Version
  4997	2.0, March 1990.
  4998	
  4999	Meta-Vlisp - E. St.James <esj@litp.ibp.fr> France.  A Lisp dialect with
  5000	many innovations.
  5001	
  5002	METEOR - Successor to COMIT.  "METEOR - A List Interpreter for String
  5003	Transformation", D.G. Bobrow in The Programming Language LISP and its
  5004	Interpretation, E.D. and D.G. Bobrow eds, 1964.
  5005	
  5006	Methods - Digitalk, ca 1985.  Line-oriented Smalltalk for PC's, predecessor
  5007	of Smalltalk/V.
  5008	
  5009	MHDL - 
  5010	
  5011	  1. MIMIC Hardware Description Language.
  5012	
  5013	  2. Microwave Hardware Description Language.  Incorporates Haskell 1.2. 
  5014	Intermetrics.
  5015	info: David Barton <dlb@hudson.wash.inmet.com>
  5016	
  5017	Mic-1, Mic-2 - Microprogramming languages, used in Structured Computer
  5018	Organization, A.S. Tanenbaum, 3rd ed, P-H 1989, Sect 4.4, 4.5.  [See Mac-
  5019	1].
  5020	
  5021	microPLANNER - G.J. Sussman et al, MIT.  Subset of PLANNER, implemented in
  5022	LISP.  Superseded by Conniver.  Important features: goal-oriented, pattern-
  5023	directed procedure invocation, embedded knowledge base, automatic
  5024	backtracking.  "microPLANNER Reference Manual", G.J. Sussman et al, AI Memo
  5025	203, MIT AI Lab, 1970.
  5026	
  5027	MIDAS - Digital simulation language.  Sammet 1969, p.627.
  5028	
  5029	MIIS - ("Meese").  Interpreted.  One-letter keywords.  Similar to MUMPS?
  5030	
  5031	MILITRAN - Discrete simulation for military applications.  Sammet 1969,
  5032	p.657.
  5033	
  5034	MIMIC - J.H. Andrews, NIH 1967.  Early language for solving engineering
  5035	problems such as differential equations that would otherwise have been done
  5036	on an analog computer.  "MIMIC, An Alternative Programming Language for
  5037	Industrial Dynamics, N.D. Peterson, Socio-Econ Plan Sci. 6, Pergamon 1972.
  5038	
  5039	MIMOLA - Operational hardware specification language.  "A Retargetable
  5040	Compiler for a High-Level Microprogramming Language", 17th Ann Workshop on
  5041	Microprogramming, P. Marwedel, IEEE 1984, pp.267-274.
  5042	
  5043	Mini-ML - "A Simple Applicative Language: Mini-ML", D. Clement et al, Proc
  5044	1986 ACM Conf on LISP and Functional Prog, (Aug 1986).
  5045	
  5046	MINITAB II - Interactive solution of small statistical problems.  "MINITAB
  5047	Student Handbook", T.A. Ryan et al, Duxbury Press 1976.
  5048	
  5049	MINT - Mint Is Not TRAC.  Version of TRAC used as the extension language in
  5050	the Freemacs editor.
  5051	ftp: sun.soe.clarkson.edu:pub/freemacs
  5052	
  5053	Miracula - Stefan Kahrs <smk@ed.ac.uk>, LFCS.  An implementation of a
  5054	subset of Miranda, no modules or files.  Can be interactively switched
  5055	between eager and lazy evaluation.  Portable source in C from the author.
  5056	
  5057	Miranda - (latin for "admirable", also the heroine of Shakespeare's
  5058	Tempest).  David A. Turner <dat@ukc.ac.uk>, U Kent early 1980's.  Lazy,
  5059	purely functional.  A commercial descendant of SASL and KRC, with ML's type
  5060	system.  Terse syntax using the offside rule for indentation.  Type
  5061	declarations are optional.  Nested pattern-matching, list comprehensions,
  5062	modules.  Sections rather than lambda abstractions.  User types are
  5063	algebraic, may be constrained by laws.  Implemented by SKI reduction.  The
  5064	KAOS operating system is written entirely in Miranda.  "Miranda: A Non
  5065	Strict Functional Language with Polymorphic Types", D.A. Turner, in
  5066	Functional Programming Languages and Computer Architecture, LNCS 201,
  5067	Springer 1985.  "Functional Programming with Miranda", Holyer, Pitman Press
  5068	0-273-03453-7.  (See Miracula, Orwell).
  5069	info: Research Software Ltd, or mira-request@ukc.ac.uk
  5070	
  5071	MIRFAC - Mathematics in Recognizable Form Automatically Compiled.  Early
  5072	interactive system resembling BASIC, typewriter output with special math
  5073	symbols.  Sammet 1969, pp.281-284.
  5074	
  5075	MISHAP - Early system on IBM 1103 or 1103A.  Listed in CACM 2(5):16, (May
  5076	1959).
  5077	
  5078	MITILAC - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  5079	
  5080	MIXAL - MIX Assembly Language.  Assembly language for Knuth's hypothetical
  5081	MIX machine, used in The Art of Computer Programming v.1, Donald Knuth,
  5082	A-W 1969.
  5083	
  5084	MJS - Early system on UNIVAC I or II.  Listed in CACM 2(5):16 (May 1959).
  5085	
  5086	ML -
  5087	
  5088	  1.  Manipulator Language.  IBM language for handling robots.
  5089	
  5090	  2.  Meta Language.  R. Milner <rm@lfcs.edinburgh.ac.uk> et al, 1973.  A
  5091	strict higher-order functional language with statically-checked polymorphic
  5092	types, garbage collection and a formal semantics.  It began as the
  5093	metalanguage for the Edinburgh LCF proof assistant.  (LCF="Logic for
  5094	Computable Functions")  "A Metalanguage for Interactive Proof in LCF",
  5095	M.J.C. Gordon et al, 5th POPL, ACM 1978.  (See SML).  LCF ML was
  5096	implemented in Stanford LISP.  Cardelli's implementation (1981) in Pascal,
  5097	using the FAM.
  5098	
  5099	MLAB - Modeling LABoratory.  Interactive mathematical modeling.  "MLAB, An
  5100	On-Line Modeling Laboratory", NIH (Mar 1975).
  5101	
  5102	ML/I - Early macro translating system.  P.J. Brown, CACM 10(10):618-623,
  5103	(Oct 1967).
  5104	
  5105	MLISP - 
  5106	
  5107	  1. M-expression LISP.  J. McCarthy, 1962.  The original "meta-language"
  5108	syntax of LISP, intended for external use in place of the parenthesized S-
  5109	expression syntax.  "LISP 1.5 Programmer's Manual", J. McCarthy et al, MIT
  5110	Press 1962.
  5111	
  5112	  2. Meta-LISP.  D.C. Smith & H. Enea.  LISP variant with ALGOL-like
  5113	syntax.  Not just a surface syntax, a full language.  "MLISP", D.C. Smith,
  5114	TR CS-179, CS Dept, Stanford (Oct 1970).  Version: MLISP2.
  5115	
  5116	  3. A hybrid of M-expression LISP and Scheme.  "M-LISP: Its Natural
  5117	Semantics and Equational Logic", R. Muller, SIGPLAN Notices 26(9):234-242
  5118	(Sept 1991) (PEPM '91).
  5119	
  5120	ML-Linda - U Edinburgh, under development.
  5121	
  5122	ML Threads - Greg Morrisett <jgmorris@cs.cmu.edu>.  SML/NJ with mutual
  5123	exclusion primitives similar to those in Modula-2+ and Mesa.  Lightweight
  5124	threads are created using 'fork'.  They are pre-emptively scheduled, and
  5125	communicate via shared memory which can be protected by a 'mutex'
  5126	(monitor).  "Adding Threads to Standard ML", E. Cooper et al, CMU-CS-90-
  5127	186, CMU Dec 1990. Implementations for 68020, SPARC and MIPS, and also VAX-
  5128	 and MIPS-based multiprocessors.
  5129	
  5130	Mma - R. Fateman, 1991.  A fast Mathematica-like system, in Allegro CL.
  5131	ftp: peoplesparc.berkeley.edu:pub/mma.tar.Z
  5132	
  5133	MOBSSL-UAF - Merritt and Miller's Own Block-Structured Simulation
  5134	Language-Unpronounceable Acronym For.  Interactive continuous simulations. 
  5135	"MOBSSL - An Augmented Block Structured Continuous System Simulation
  5136	Language for Digital and Hybrid Computers", M.J. Merritt et al, Proc FJCC
  5137	35, AFIPS (Fall 1969).
  5138	
  5139	Mock Lisp - The LISP used by the Gosling Emacs editor.
  5140	
  5141	MODCAL - Version of HP-PASCAL enhanced with system programming constructs,
  5142	used internally by HP.
  5143	
  5144	Mode - Object-oriented.  "The Programming Language Mode: Language
  5145	Definition and User Guide", J. Vihavainen, C-1987-50, U Helsinki, 1987.
  5146	
  5147	MODEF - Pascal-like language with polymorphism and data abstraction. 
  5148	"Definition of the Programming Language MODEF", J. Steensgard-Madsen et al,
  5149	SIGPLAN Notices 19(2):92-110 (Feb 1984).
  5150	
  5151	MODEL - Pascal-like language with extensions for large-scale system
  5152	programming and interface with FORTRAN applications.  Generic procedures,
  5153	and a "static" macro-like approach to data abstraction.  Produced P-code. 
  5154	Used to implement DEMOS operating system on Cray-1.  "A Manual for the
  5155	MODEL Programming Language", J.B. Morris, Los Alamos 1976.
  5156	
  5157	MODSIM II - 1986.  Object-oriented modular language for discrete
  5158	simulation, with multiple inheritance, strong typing, integrated 2D and 3D
  5159	graphics.  Compiles to C.  CACI, La Jolla, (619) 457-9681.
  5160	list: palmer@world.std.com
  5161	
  5162	Modula - MODUlar LAnguage.  Wirth, 1977.  Predecessor of Modula-2, more
  5163	oriented towards concurrent programming but otherwise quite similar. 
  5164	"Modula - A Language for Modular Multiprogramming", N. Wirth, Soft Prac &
  5165	Exp 7(1):3-35 (Jan 1977).
  5166	
  5167	Modula-2 - Wirth, ETH 1978.  Developed as the system language for the
  5168	Lilith workstation.  The central concept is the module which may be used to
  5169	encapsulate a set of related subprograms and data structures, and restrict
  5170	their visibility from other portions of the program.  Each module has a
  5171	definition part giving the interface, and an implementation part.  The
  5172	language provides limited single-processor concurrency (monitors,
  5173	coroutines and explicit transfer of control) and hardware access (absolute
  5174	addresses and interrupts).  "Programming in Modula-2", N. Wirth, Springer
  5175	1985.
  5176	ftp:gatekeeper.dec.com:.1/DEC/Modula-2/m2.tar.Z
  5177	
  5178	Modula-2* - M. Philippsen <philipp@ira.uka.de>, U Karlsruhe.  Modula-2
  5179	extension.  Uses a superset of data parallelism, allowing both synchronous
  5180	and asynchronous programs, both SIMD and MIMD.  Parallelism may be nested
  5181	to any depth.  Version for MasPar and simulator for SPARC.
  5182	ftp: iraun1.ira.uka.de:pub/programming/modula2star
  5183	
  5184	Modula-2+ - DEC SRC, Palo Alto CA.  Exceptions and threads.  "Extending
  5185	Modula-2 to Build Large, Integrated Systems", P. Rovner, IEEE Software
  5186	3(6):46-57 (Nov 1986).
  5187	
  5188	Modula-3 - 1988.  A descendant of Modula-2+ and Cedar, designed for safety. 
  5189	Objects, threads, exceptions and garbage collection.  Modules are
  5190	explicitly safe or unsafe.  As in Mesa, any set of variables can be
  5191	monitored.  "Modula-3 Report", Luca Cardelli et al, TR 52, DEC SRC, and
  5192	Olivetti Research Center, Aug 1988.  "System Programming with Modula-3",
  5193	Greg Nelson ed, P-H 1991, ISBN 0-13-590464-1.  Version: SRC Modula-3 V1.5.
  5194	ftp: gatekeeper.dec.com
  5195	uucp: osu-cis
  5196	
  5197	Modula-P - "Modula-P: A Language for Parallel Programming Definition and
  5198	Implementation on a Transputer Network", R. Hoffart et al, IEEE Conf Comp
  5199	Langs 1992.
  5200	
  5201	Modula-Prolog - Adds a Prolog layer to Modula-2.  "Modula-Prolog: A
  5202	Software Development Tool", C. Muller IEEE Software pp.39-45 (Nov 1986).
  5203	
  5204	Modula/R - Modula with relational database constructs added.  LIDAS Group
  5205	(J. Koch, M. Mall, P. Putfarken, M. Reimer, J.W. Schmidt, C.A. Zehnder)
  5206	"Modula/R Report", LIDAS Memo 091-83, ETH Zurich, Sep 1983.
  5207	
  5208	Modular Prolog - An extension of SB-Prolog (version 3.1) extended with ML-
  5209	style modules.  For Sun-4.
  5210	ftp: ftp.dcs.ed.ac.uk:/pub/dts/mod-prolog.tar.Z
  5211	
  5212	Modulex - Based on Modula-2.  Mentioned by M.P. Atkinson & J.W. Schmidt in
  5213	a tutorial in Zurich, 1989.
  5214	
  5215	MooZ - Object-oriented extension of Z.  "Object Orientation in Z", S.
  5216	Stepney et al eds, Springer 1992.
  5217	
  5218	MOPS - Michael Hore.  A derivative of Neon.
  5219	
  5220	MORAL - Mentioned in "An Overview of Ada", J.G.P. Barnes, Soft Prac & Exp
  5221	10:851-887 (1980).
  5222	
  5223	MORTRAN - A public domain FORTRAN preprocessor for structured programming.
  5224	
  5225	Mouse - Peter Grogono, 1975.  A mighty small macro language.  "Mouse, A
  5226	Language for Microcomputers", P. Grogono <grogono@concour.cs.concordia.ca>
  5227	Petrocelli Books, 1983.
  5228	
  5229	Moxie - Language for real-time computer music synthesis, written in XPL. 
  5230	"Moxie: A Language for Computer Music Performance", D. Collinge, Proc Intl
  5231	Computer Music Conf, Computer Music Assoc 1984, pp.217-220.
  5232	
  5233	MP-1 - Assembly language for the MasPar machine.
  5234	
  5235	MPL - 
  5236	
  5237	  1. Early possible name for PL/I.  Sammet 1969, p.542.
  5238	
  5239	  2. MasPar.  A data-parallel version of C.
  5240	
  5241	  3. Motorola Programming Language.  A low-level PL/I-like language,
  5242	similar to PL/M, but for the Motorola 6800.
  5243	
  5244	  4. MicroProgramming Language.  Simple language for microprogramming. 
  5245	Statements on the same line represent register transfers caused by one
  5246	microinstruction, and are executed in parallel.  "Structured Computer
  5247	Organization", A.S. Tanenbaum, First Edition, P-H 1976. (replaced in later
  5248	editions by Mic-1)
  5249	
  5250	MPL II - Burroughs VMS MPL II Language Reference Manual.
  5251	
  5252	MPPL - Early possible name for PL/I.  Sammet 1969, p.542.
  5253	
  5254	M-Prolog - 
  5255	
  5256	  1. Marseille Prolog.
  5257	
  5258	  2. An extension to Prolog involving modules.  "The MProlog System", J.
  5259	Bendl et al, Proc Logic Prog Workshop, 1980.
  5260	
  5261	MPS III - Solving matrices and producing reports.  "MPS III DATAFORM User
  5262	Manual", Management Science Systems (1976).
  5263	
  5264	MPSX - Mathematical Programming System Extended.  Solution strategy for
  5265	mathematical programming.  "Mathematical Programming System Extended (MPSX)
  5266	Control Language User's Manual", SH20-0932, IBM.  Sammet 1978.
  5267	
  5268	MRS - An integration of logic programming into LISP.  "A Modifiable
  5269	Representation System", M. Genesereth et al, HPP 80-22, CS Dept Stanford U
  5270	1980.
  5271	
  5272	MSG.84 - "Analysis and Design in MSG.84: Formalizing Functional
  5273	Specifications", V. Berzins et al IEEE Trans Soft Eng SE-11(8):657-670 (Aug
  5274	1985).
  5275	
  5276	Muddle - Original name of MDL.
  5277	
  5278	muFP - Functional language for hardware design, predecessor to Ruby.
  5279	
  5280	Mul-T - An implementation of Multilisp built on T, for the Encore Multimax. 
  5281	"Mul-T: A High-Performance Parallel Lisp", SIGPLAN Notices 24(7):81-90 (Jul
  5282	1989).
  5283	
  5284	multiC - Wavetracer.  A data-parallel version of C.
  5285	
  5286	MultiLisp - Parallel extension of Scheme, with explicit concurrency.  The
  5287	form (future X) immediately returns a 'future', and creates a task to
  5288	evaluate X.  When the evaluation is complete, the future is resolved to be
  5289	the value.  "MultiLisp: A Language for Concurrent Symbolic Computation", R.
  5290	Halstead, TOPLAS pp.501-538 (Oct 1985).
  5291	
  5292	MultiScheme - An implementation of Multilisp built on MIT's C-Scheme, for
  5293	the BBN Butterfly.  "MultiScheme: A Paralled Processing System Based on MIT
  5294	Scheme", J. Miller, TR-402, MIT LCS, Sept 1987.
  5295	
  5296	MUMPS - Massachusetts General Hospital Utility Multi-Programming System.  A
  5297	database-oriented OS and the language that goes with it.  Used originally
  5298	for medical records.  Only data type is the character string.  Current
  5299	versions for IBM RT and R6000, DSM (Digital Standard Mumps) for DEC,
  5300	Datatree MUMPS for IBM PC, Unix MUMPS from PFCS <mumps@pfcs.com>.  "MUMPS
  5301	Language Standard", ANS X11.1-1977.  MUMPS User's Group, Box 208, Bedford
  5302	MA 01730.
  5303	list: MUMPS-L@UGA.BITNET.
  5304	
  5305	MU-Prolog - L. Naish, U Melbourne 1982.  Prolog with 'wait' declarations
  5306	for coroutining.  "Negation and Control in Prolog", L. Naish, TR 85/12, U
  5307	Melbourne (1985).  (See NU-Prolog).
  5308	
  5309	MuSimp - LISP variant used as the programming language for the PC symbolic
  5310	math package MuMath.
  5311	
  5312	Muse - OR-parallel logic programming.
  5313	
  5314	Music - Bell Labs, 60's.  A series of early languages for musical sound
  5315	synthesis.  Versions: Music I through Music V.  "An Acoustical Compiler for
  5316	Music and Psychological Stimuli", M.V. Mathews, Bell Sys Tech J 40 (1961).
  5317	
  5318	MUSL - Manchester University Systems Language.
  5319	
  5320	MYSTIC - Early system on IBM 704, IBM 650, IBM 1103 and 1103A.  Listed in
  5321	CACM 2(5):16 (May 1959).
  5322	
  5323	NASTRAN - NAsa STRess ANalysis program.  Large stress analysis problems. 
  5324	"The NASTRAN User's Manual", SP-222(C3), NASA.
  5325	
  5326	Napier - Atkinson & Morrison, St Andrews U; design began ca. 1985, first
  5327	implementation Napier88, 1988.  Based on orthogonal persistence, permits
  5328	definition and manipulation of namespaces.  "The Napier88 Reference
  5329	Manual", R. Morrison et al, CS Depts St Andrews U and U Glasgow, Persistent
  5330	Programming Research Report PPRR-77-89, 1989.
  5331	
  5332	NAPLPS - North American Presentation-Level-Protocol Syntax.  Language for
  5333	sending text and graphics over communication lines.  Used by videotex
  5334	systems.
  5335	
  5336	NAPSS - Numerical Analysis Problem Solving System.  Purdue ca. 1965. 
  5337	"NAPSS - A Numerical Analysis Problem Solving System", J.R. Rice et al,
  5338	Proc ACM 21st Natl Conf, 1966.  Sammet 1969, p.299.
  5339	
  5340	NASTRAN - Engineering language, listed [?] 1976.
  5341	
  5342	NATURAL - Integrated 4GL used by the database system ADABAS.  Menu-driven
  5343	version: SUPER/NATURAL.
  5344	
  5345	Natural English - Used to mean programming in normal, spoken English. 
  5346	Sammet 1969, p.768.
  5347	
  5348	Nawk - New AWK.  AT&T.  Pattern scanning and processing language.  An
  5349	enhanced version of AWK, with dynamic regular expressions, additional
  5350	built-ins and operators, and user-defined functions.
  5351	
  5352	NB - ("New B"?)  Original name of C.
  5353	
  5354	NDL- Network Definition Language.  Used to program the DCP (Data
  5355	Communications Processor) on Burroughs Large System.  Version: NDL II.
  5356	
  5357	Nebula - ICL.  Early business-oriented language for Ferranti Orion
  5358	computer.  "NEBULA - A Programming Language for Data Processing", T.G.
  5359	Braunholtz et al, Computer J 4(3):197-201 (1961).
  5360	
  5361	NELIAC - Navy Electronics Laboratory International ALGOL Compiler.  1958-
  5362	1959.  Numeric and logical computations, based on IAL.  "Neliac - A Dialect
  5363	of Algol", H.D. Huskey et al, CACM 3(8):463-468 (Aug 1960).  Version:  BC
  5364	NELIAC.
  5365	
  5366	Neon - Charles Duff.  An object-oriented extension of FORTH, for the Mac. 
  5367	Inheritance, SANE floating point, system classes and objects for Mac
  5368	interfacing, overlays.  Sold by Kriya Systems, 1985-1988.  Modified, made
  5369	PD and renamed Yerk.
  5370	
  5371	NETL - Semantic network language, for connectionist architectures.
  5372	
  5373	NEWP - NEW Programming language.  Replaced ESPOL on Burroughs Large System.
  5374	
  5375	NewsClip - Clarinet article filter language.
  5376	
  5377	Newspeak - J.K. Foderaro.  Inspired by Scratchpad.  "The Design of a
  5378	Language for Algebraic Computation", Ph.D. Thesis, UC Berkeley, 1983.
  5379	
  5380	Newsqueak - "Newsqueak: A Language for Communicating with Mice", R. Pike
  5381	CSTR143, Bell Labs (March 1989).
  5382	
  5383	Newton - ALGOL-like language used for undergraduate teaching at Federal
  5384	Tech U Lausanne (EPFL).  "Programming in Newton", Wuetrich and Menu, EPFL
  5385	1982.
  5386	
  5387	Nexpert Object - Expert system.
  5388	
  5389	NFQL - "NFQL: The Natural Forms Query Language", D. Embley, Trans Database
  5390	Sys 14(2):168-211 (June 1989).
  5391	
  5392	NGL - Dialect of IGL.
  5393	
  5394	NIAL - Nested Interactive Array Language.  Queen's U, Canada.  High-level
  5395	array-oriented language, based on Array Theory as developed by Trenchard
  5396	More Jr.  (Papers on this subject are available from the IBM Cambridge
  5397	Scientific Center, Cambridge MA.)  "Programming Styles in NIAL", M.A.
  5398	Jenkins et al, IEEE Software 3(1):46-55 (Jan 1986).  (See Q'NIAL).
  5399	
  5400	NICOL I - 
  5401	
  5402	  1. Small subset of PL/I by (Massachusetts) Computer Assoc, ca. 1965. 
  5403	Version: NICOL II (1967).  Sammet 1969, p.542.
  5404	
  5405	  2. ICL, 1968. [same as 1?]
  5406	
  5407	NIKL - Frame language.  "Recent Developments in NIKL", T.R. Kaczmarek et
  5408	al, Proc AAAI-86, 1986.
  5409	
  5410	NIL -
  5411	
  5412	  1. A forerunner of Common LISP.  "NIL: A Perspective", Jon L. White,
  5413	MACSYMA Users' Conf Proc, 1979.
  5414	
  5415	  2. Network Implementation Language.  Strom & Yemini, TJWRC, IBM. 
  5416	Implementation of complex networking protocols in a modular fashion.  "NIL:
  5417	An Integrated Language and System for Distributed Programming", R. Strom et
  5418	al, SIGPLAN Notices 18(6):73-82 (June 1983).
  5419	
  5420	NJCL - Network Job Control Language.  "NJCL - A Network Job Control
  5421	Language", J. du Masle et al, IFIP Congress 1974.
  5422	
  5423	Noddy - A simple (hence the name) language to handle text and interaction
  5424	on the Memotech home computer.  Has died with the machine.
  5425	
  5426	nML - Specification language for instruction sets, based on attribute
  5427	grammars, for back-end generators.  "The nML Machine Description
  5428	Formalism", M. Freericks <mfx@cs.tu-berlin.de> TR TU Berlin, FB20, Bericht
  5429	1991/15.
  5430	
  5431	NOMAD - Database language.  "NOMAD Reference Manual", Form 1004, National
  5432	CSS Inc (Dec 1976).  Version: NOMAD2, Must Software Intl.
  5433	list: NOMAD2-L@TAMVM1.BITNET
  5434	
  5435	Nonpareil - One of five pedagogical languages based on Markov algorithms,
  5436	used in "Nonpareil, a Machine Level Machine Independent Language for the
  5437	Study of Semantics", B. Higman, ULICS Intl Report No ICSI 170, U London
  5438	(1968).  (cf. Brilliant, Diamond, Pearl[3], Ruby[2]).
  5439	
  5440	NORC COMPILER - Early system on NORC machine.  Listed in CACM 2(5):16 (May
  5441	1959).
  5442	
  5443	NORD PL - Intermediate language for Norsk Data computers.  Sintran III (OS
  5444	of the ND 10, late 70's) was written in NORD PL.  "NORD PL User's Guide",
  5445	ND-60.047.03.
  5446	
  5447	Nother - Parallel symbolic math.
  5448	info: karhu@cs.umu.se
  5449	
  5450	NPL -
  5451	
  5452	  1. New Programming Language.  IBM's original (temporary) name for PL/I,
  5453	changed due to conflict with England's "National Physical Laboratory."  MPL
  5454	and MPPL were considered before settling on PL/I.  Sammet 1969, p.542.
  5455	
  5456	  2. Burstall, 1977.  A predecessor of HOPE.  Pattern matching and set
  5457	comprehensions.
  5458	
  5459	  3. NonProcedural Language.  1980.  A relational database language.  "An
  5460	Introduction to Nonprocedural Languages Using NPL", T.D. Truitt et al,
  5461	McGraw-Hill 1983.  Versions for Apple II, MS-DOS.
  5462	
  5463	NPPL - Network Picture Processing Language.  Interactive language for
  5464	manipulation of digraphs.  "A Graph Manipulator for On-line Network Picture
  5465	Processing", H.A. DiGiulio, Proc FJCC 35 (1969).
  5466	
  5467	N-Prolog - Prolog extended with explicit negation.  Dov Gabbay, J Logic
  5468	Programming.
  5469	
  5470	Nqthm - Language[?] used in the Boyer-Moore theorem prover.  "Proving
  5471	Theorems About LISP Functions", R.S. Boyer et al JACM 22(1):129-144 (Jan
  5472	1975).
  5473	
  5474	Nroff - Text formatting language/interpreter, based on Unix roff.  (See
  5475	Troff, Groff.)
  5476	
  5477	NUCLEOL - List processing language, influenced by EOL.  J. Nievergelt,
  5478	Computer J 13(3) (Aug 1970).
  5479	
  5480	Nuprl - (pronounced "new pearl")  Nearly Ultimate PRL.  Interactive
  5481	creation of formal mathematics, including definitions and proofs.  An
  5482	extremely rich type system, including dependent functions, products, sets,
  5483	quotients and universes.  Types are first-class citizens.  Built on Franz
  5484	Lisp and Edinburgh ML.  "Implementing Mathematics in the Nuprl Proof
  5485	Development System", R.L. Constable et al, P-H 1986.
  5486	
  5487	NU-Prolog - L. Naish, U Melbourne.  A Prolog with 'when' declarations, the
  5488	successor to MU-Prolog.  Type-checked.  "NU-Prolog Reference Manual -
  5489	Version 1.3", J.A. Thom et al eds, TR 86/10, U Melbourne (1988).  Available
  5490	(but not free).
  5491	info: jas@mulga.oz.au
  5492	
  5493	NYAP - Early system on IBM 704.  Listed in CACM 2(5):16 (May 1959).
  5494	
  5495	NYU OMNIFAX - Early system on UNIVAC I or II.  Listed in CACM 2(5):16 (May
  5496	1959).
  5497	
  5498	O2 - ("Object-Oriented").  Object-oriented database language used in the
  5499	Altair project.  Implemented as an interpreter.  GIP Altair, Versailles,
  5500	France.  Francois Bancilhon et al, in Advances in Object-Oriented Database
  5501	Systems, K.R. Dittrich ed, LNCS 334, Springer 1988.  (See CO2).
  5502	
  5503	Oaklisp - K. Lang and B. Perlmutter.  A portable object-oriented Scheme,
  5504	syntactically a Scheme superset.  Based on generic operations rather than
  5505	functions.  Anonymous classes.  "Oaklisp: An Object-Oriented Scheme with
  5506	First-Class Types", K. Lang et al, SIGPLAN Notices 21(11):30-37 (Nov 1986)
  5507	(OOPSLA '86).
  5508	ftp: f.gp.cs.cmu.edu:usr/bap/oak/ftpable
  5509	     ux1.cso.uiuc.edu:pub/amiga/fish/ff519 for Amiga
  5510	
  5511	OBE - Office By Example.  Moshe Zloof, IBM, early 1980's.  Sequel to QBE,
  5512	descriptions published but apparently never implemented.
  5513	
  5514	Oberon - Wirth, 1988.  A descendant of Modula-2 eliminating many things:
  5515	variant records, enumeration types, subranges, lower array indices and
  5516	'for' loops.  Additions are extensible record types, multidimensional open
  5517	arrays and garbage collection.  "The Programming Language Oberon", N.
  5518	Wirth, Soft Prac & Exp 18(7):671-690 (July 1988).
  5519	ftp: neptune.inf.ethz.ch for MacII, MS-DOS
  5520	     wuarchive.wustl.edu:/mirrors/msdos/pgmutl/oberonm11.zip for MS-DOS
  5521	     ux1.cso.uiuc.edu:pub/amiga/fish/ff380 for Amiga
  5522	
  5523	Oberon-2 - H. Moessenboeck, 1991.  A superset of Oberon-1 to include
  5524	object-orientation.  A redesign of Object Oberon.  Type-bound procedures
  5525	(equivalent to methods), read-only export of variables and record fields,
  5526	open array variables, and a 'with' statement with variants.  The 'for'
  5527	statement is reintroduced.  Second Intl Modula-2 Conf, Sept 1991.
  5528	ftp: neptune.inf.ethz.ch for SPARC, DECstation, RS/6000, DOS386, MacII
  5529	doc: neptune.inf.ethz.ch:/Oberon/Docu/Oberon2Report.ps.Z
  5530	
  5531	OBJ - Joseph Goguen 1976.  A family of declarative "ultra high level"
  5532	languages.  Abstract types, generic modules, subsorts (subtypes with
  5533	multiple inheritance), pattern-matching modulo equations, E-strategies
  5534	(user control over laziness), module expressions (for combining modules),
  5535	theories and views (for describing module interfaces).  For the massively
  5536	parallel RRM (Rewrite Rule Machine).  "Higher-Order Functions Considered
  5537	Unnecessary for Higher-Order Programming", J.A. Goguen, in Research TOpics
  5538	in Functional Programming.
  5539	OBJ0 - Tardo.  Based on unsorted equational logic.
  5540	OBJT - Tardo.  Error algebras plus an image construct.
  5541	OBJ1 - 
  5542	
  5543	OBJ2 - Clear-like parametrized modules.  A functional system based on
  5544	equations.  "Principles of OBJ2", K. Futatsugi et al, 12th POPL, ACM 1985,
  5545	pp.52-66.
  5546	
  5547	OBJ3 - Based on order-sorted rewriting.  Agent-oriented.  "Introducing
  5548	OBJ3", J. Goguen et al, SRI-CSL-88-9, SRI Intl (1988).  Runs on AKCL.
  5549	info: obj3sys@crl.sri.com
  5550	      obj3dist@csl.sri.com
  5551	
  5552	Object CHILL - "Object CHILL - An Object Oriented Language for Systems
  5553	Implementation", J. Winkler et al, ACM Comp Sci Conf 1992, pp.139-147.
  5554	
  5555	ObjectLOGO - A variant of LOGO with object-oriented extensions.  Lexical
  5556	scope.  Version 2.6, for the Mac.  Paradigm Software
  5557	<paradigm@applelink.apple.com> (617)576-7675.
  5558	
  5559	Object Oberon - H. Moessenboeck & J. Templ, 1989.  Adds classes and methods
  5560	to Oberon.  "Object Oberon - An Object-Oriented Extension of Oberon", H.
  5561	Moessenboeck et al, ETH TR 109 (Apr 1990).  "Object Oberon - A Modest
  5562	Object-Oriented Language", H. Moessenboeck & J. Templ, in Structured
  5563	Programming 10(4), 1989.  (See Oberon-2).
  5564	
  5565	Object-Oriented Turing - under development.  Adds objects and classes to
  5566	Turing Plus.
  5567	info: <distrib@turing.toronto.edu>
  5568	
  5569	Object Pascal - Developed jointly by Apple Computer and Niklaus Wirth.  An
  5570	object-oriented Pascal.  "Object Pascal Report", Larry Tesler, Structured
  5571	Language World 9(3):10-17 (1985).
  5572	
  5573	Object Z - U Queensland.  "Object Orientation in Z", S. Stepney et al eds,
  5574	Springer 1992.
  5575	
  5576	Objective C - Brad Cox, Productivity Products.  An object-oriented superset
  5577	of ANSI C, incorporating many ideas from Smalltalk.  Implemented as a
  5578	preprocessor for C.  No operator overloading, no multiple inheritance, no
  5579	class variables.  Does have run-time binding.  Used as the system
  5580	programming language on the NeXT.  "Object-Oriented Programming: An
  5581	Evolutionary Approach", Brad Cox, A-W 1986.  Versions for MS-DOS, Macs, VMS
  5582	and Unix workstations.  Language versions by Stepstone, NeXT and GNU are
  5583	slightly different.  Stepstone Corp, (203) 426-1875.
  5584	
  5585	Objective Turing - 
  5586	
  5587	Objlog - CNRS, Marseille.  Frame-based language combining objects and
  5588	Prolog II.  "The Inheritance Processes in Prolog", C. Chouraki et al,
  5589	GRTC/187bis/Mars 1987 (CNRS).
  5590	
  5591	info:somebody@grtc.cnrs-mrs.fr
  5592	
  5593	ObjVlisp - 1984.  An object-oriented extension of Vlisp.  Reflective
  5594	architecture.  "Metaclasses are First Class: The ObjVlisp Model", P.
  5595	Cointe, SIGPLAN Notices 22(121):156-167 (Dec 1987) (OOPSLA '87).
  5596	
  5597	ObjVProlog - Logic programming and object-orientation, an adaptation of the
  5598	ObjVlisp model to Prolog.  "ObjVProlog: Metaclasses in Logic", J.
  5599	Malenfant, ECOOP '89, Cambridge U Press 1989, pp.257-269.
  5600	
  5601	Oblog - Object-oriented extension to Prolog.  Small, portable.
  5602	info: Margaret McDougall, EdCAAD, Dept Arch, U Edinburgh, EH1 1JZ.
  5603	
  5604	OBSCURE - "A Formal Description of the Specification Language OBSCURE", J.
  5605	Loeckx, TR A85/15, U Saarlandes, Saarbrucken, 1985.
  5606	
  5607	Oc - ("Oh see!")  Parallel logic language.  "Self-Description of Oc and its
  5608	Applications", M. Hirata, Proc 2nd Natl Conf Japan Soc Soft Sci Tech,
  5609	pp.153-156 (1984).
  5610	
  5611	OCAL - On-Line Cryptanalytic Aid Language.  "OCAS: On-line Cryptanalytic
  5612	Aid System", D.J. Edwards, MAC-TR-27, MIT Project MAC, May 1966.  Sammet
  5613	1969, p.642.
  5614	
  5615	occam - (named for the English philosopher William of Occam (1300-1349))
  5616	Now known as "occam 1".  David May et al, 1982.  Concurrent algorithms,
  5617	based on CSP and EPL.  Designed for the INMOS transputer and vice versa. 
  5618	Expressions are processes, which may be combined in serial and parallel. 
  5619	Processes communicate via named unidirectional channels.  There is no
  5620	operator precedence.  "Occam", D. May, SIGPLAN Notices 18(4):69-79 (1983).
  5621	ftp: watserv1.waterloo.edu, simulator for VAX, Tahoe
  5622	list: occam@sutcase.case.syr.edu
  5623	
  5624	occam 2 - 1987.  An extension of occam1.  Occam 2 adds floating point,
  5625	functions and a type system.  "occam 2 Reference Manual", INMOS, P-H 1988,
  5626	ISBN 0-13-629312-3.
  5627	
  5628	OCL - Operator Control Language.  Batch language for the IBM System/36, 
  5629	used specifically with the RPG II compiler.  (See CL).
  5630	
  5631	OCODE - Intermediate language used by the Cambridge BCPL compiler.  "The
  5632	Portability of the BCPL Compiler", M. Richards, Soft Prac & Exp 1(2)
  5633	(1971).
  5634	
  5635	OIL - 
  5636	
  5637	  1. "The Architecture of the FAIM-1 Synbolic Multiprocessing System", A.
  5638	Davis et al, 9th Intl Joint Conf in Artif Intell, 1985, pp.32-38.
  5639	
  5640	  2. Operator Identification Language.  Used for overload resolution by the
  5641	Eli compiler-writing system.  
  5642	
  5643	OLC - On-Line Computer system.  UCSB ca. 1966.  Predecessor of Culler-Fried
  5644	System.  Sammet 1969, p.253.
  5645	
  5646	OLDAS - On-line Digital Analog Simulator.  Interactive version of MIMIC,
  5647	for IBM 360.  "OLDAS: An On-line Continuous System Simulation Language",
  5648	R.P. Cullen, in Interactive Systems for Experimental Applied Mathematics,
  5649	A-P 1968.
  5650	
  5651	Omega - Prototype-based object-oriented language.  "Type-Safe Object-
  5652	Oriented Programming with Prototypes - The Concept of Omega", G. Blaschek,
  5653	Structured Programming 12:217-225 (1991).
  5654	
  5655	OMNICODE - Thompson, 1956.  Ran on IBM 650.  Sammet 1969, p.5.
  5656	
  5657	OMNIFAX - Alternate name for NYU OMNIFAX?  Early system on UNIVAC I or II. 
  5658	Listed in CACM 2(5):16 (May 1959).
  5659	
  5660	OMNITAB - Statistical analysis and desk calculator.  "OMNITAB II User's
  5661	Reference Manual", NBS Tech Note 552 (Oct 1971).  Sammet 1969, pp.296-299. 
  5662	Version: OMNITAB II.
  5663	
  5664	Ondine - "Concurrency Introduction to an Object-Oriented Language System
  5665	Ondine", T. Ogihara et al, 3rd Natl Conf Record A-5-1, Japan Soc for Soft
  5666	Sci Tech, Japan 1986.
  5667	
  5668	Ontic - Object-oriented language for an inference system.  LISP-like
  5669	appearance, but based on set theory.  "Ontic: A Knowledge Representation
  5670	System for Mathematics", D.A. McAllester, MIT Press 1989.
  5671	
  5672	OOF - Object-Oriented Fortran.  Data items can be grouped into objects,
  5673	which can be instantiated and executed in parallel.  Available now for
  5674	Suns, Iris, iPSC, soon for nCUBE.
  5675	info: dreese@erc.msstate.edu
  5676	
  5677	OOPS - "OOPS: A Knowledge Representation Language", D. Vermeir, Proc 19th
  5678	Intl Hawaii Conf on System Sciences, IEEE (Jan 1986) pp.156-157.
  5679	
  5680	OOZE - Object oriented extension of Z.  "Object Orientation in Z", S.
  5681	Stepney et al eds, Springer 1992.
  5682	
  5683	Opal -
  5684	
  5685	  1. DSP language.  "OPAL: A High Level Language and Environment for DSP
  5686	boards on PC", J.P. Schwartz et al, Proc ICASSP-89, 1989.
  5687	
  5688	  2. Language of the object-oriented database GemStone.  "Making Smalltalk
  5689	a Database System", G. Copeland et al, Proc SIGMOD'84, ACM 1984, pp.316-
  5690	325.
  5691	
  5692	  3. Simulation language with provision for stochastic variables.  An
  5693	extension of Autostat.  "C-E-I-R OPAL", D. Pilling, Internal Report,
  5694	C.E.I.R. Ltd (1963).
  5695	
  5696	  4. Language for compiler testing said to be used internally by DEC.
  5697	
  5698	OPS -
  5699	
  5700	  1. On-line Process Synthesizer.  M. Greenberger, MIT ca. 1964.  Discrete
  5701	simulation under CTSS.  Sammet 1969, p.660.  Versions: OPS-3, OPS-4.  "On-
  5702	line Computation and Simulation: The OPS-3 System", M. Greenberger et al,
  5703	MIT Press 1965.
  5704	
  5705	  2. Official Production System.  CMU, 1970.  The first production-system
  5706	(i.e. rule-based) programming language, used for building expert systems. 
  5707	Written originally in Franz Lisp, later ported to other LISP dialects.
  5708	
  5709	OPS5 - Charles L. Forgy.  1977 version of OPS[2], publicly available from
  5710	the author <forgy@cs.cmu.edu>.  "Programming Expert Systems in OPS5", L.
  5711	Brownston et al, A-W 1985.  Other versions: OPS4, OPS5+, OPS83
  5712	ftp: wuarchive.wustl.edu:/mirrors/unix-c/languages/ops5 an OPS5 interpreter
  5713	in Common LISP.
  5714	C5 - An OPS5 implementation in C.  "Rule-Based Programming in the Unix
  5715	System", G.T. Vesonder, AT&T Tech J 67(1), 1988.
  5716	ftp: gatekeeper.dec.com:comp.sources.unix/volume12 OPS5 in Common LISP
  5717	
  5718	Orca - Vrije Universiteit, Amsterdam, 1986.  Similar to Modula-2, but with
  5719	support for distributed programming using shared data objects, like Linda. 
  5720	A 'graph' data type removes the need for pointers.  Version for the Amoeba
  5721	OS, comes with Amoeba.  "Orca: A Language for Distributed Processing", H.E.
  5722	Bal <bal@cs.vu.nl> et al, SIGPLAN Notices 25(5):17-24 (May 1990).
  5723	
  5724	Orient84/K - Y. Ishikawa, Keio U, Yokohama.  "A Concurrent Object-Oriented
  5725	Knowledge Representation Language Orient84/K", Y. Ishikawa et al, SIGPLAN
  5726	Notices 21(11):232-241 (OOPSLA '86) (Nov 1986).
  5727	
  5728	ORTHOCARTAN - A. Krasinski, Warsaw, early 80's.  Symbolic math, especially
  5729	General Relativity.  
  5730	
  5731	Orwell - Lazy functional language, Miranda-like.  List comprehensions and
  5732	pattern matching.  "Introduction to Orwell 5.00", P.L. Wadler et al,
  5733	Programming Research Group, Oxford U, 1988.
  5734	
  5735	OSCAR - 
  5736	
  5737	  1. Oregon State Conversational Aid to Research.  Interactive numerical
  5738	calculations, vectors, matrices, complex arithmetic, string operations, for
  5739	CDC 3300.  "OSCAR: A User's Manual with Examples", J.A. Baughman et al, CC,
  5740	Oregon State U.
  5741	
  5742	  2. Object-oriented language used in the COMANDOS Project.  "OSCAR:
  5743	Programming Language Manual", TR, COMANDOS Project, Nov 1988.
  5744	
  5745	OSSL - Operating Systems Simulation Language.  "OSSL - A Specialized
  5746	Language for Simulating Computer Systems", P.B. Dewan et al, Proc SJCC 40,
  5747	AFIPS (Spring 1972).
  5748	
  5749	Ottawa Euclid - Variant of Euclid.
  5750	
  5751	OWHY - Functional?  "A Type-Theoretical Alternative to CUCH, ISWIM, OWHY",
  5752	Dana Scott, Oxford U 1969.
  5753	
  5754	Owl - Original name of Trellis.
  5755	
  5756	P+ - "Experience with Remote Procedure Calls in a Real-Time Control
  5757	System", B. Carpenter et al, Soft Prac & Exp 14(9):901-907 (Sep 1984).
  5758	
  5759	P4 - Rusty Lusk <lusk@antares.mcs.anl.gov>.  A macro/subroutine package for
  5760	parallel programming, using monitors on shared memory machines, message
  5761	passing on distributed memory machines.  Implemented as a subroutine
  5762	library for C and Fortran.  An enhancement of the "Argonne macros",
  5763	PARMACS.
  5764	ftp: info.mcs.anl.gov:pub/p4t1.2.tar.Z
  5765	
  5766	PACT I - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959). 
  5767	Version: PACT IA for IBM 704.
  5768	
  5769	PACTOLUS - Digital simulation.  Sammet 1969, p.627.
  5770	
  5771	Paddle - Language for transformations leading from specification to
  5772	program.  Used in POPART, a grammar-driven programming environment
  5773	generator.  "POPART: Producer of Paddles and Related Tools, System
  5774	Builders' Manual", D.S. Wile TR RR-82-21, ISI, Marina del Rey, CA 1982.
  5775	
  5776	PAGE - Typesetting language.  "Computer Composition Using PAGE-1", J.L.
  5777	Pierson, Wiley 1972.
  5778	
  5779	PaiLisp - Parallel Lisp built on Scheme.  1986.  "A Parallel Lisp Language
  5780	PaiLisp and its Kernel Specification", T. Ito et al, in Parallel Lisp:
  5781	Languages and Systems, T. Ito et al eds, LNCS 441, Springer 1989.
  5782	
  5783	PAISley - Bell Labs.  Operational specification language.  "An Operational
  5784	Approach to Requirements Specification for Embedded Systems", P. Zave, IEEE
  5785	Trans Soft Eng SE-8(3):250-269 (May 1982).
  5786	
  5787	PAL - 
  5788	
  5789	  1. Paradox Application Language.  Language for Paradox, Borland's
  5790	relational database.
  5791	
  5792	  2. For the AVANCE distributed persistent OS.  "PAL Reference Manual", M.
  5793	Ahlsen et al, SYSLAB WP-125, Stockholm 1987.  "AVANCE: An Object Management
  5794	System", A. Bjornerstedt et al, SIGPLAN Notices 23(11):206-221 (OOPSLA '88)
  5795	(Nov 1988).
  5796	
  5797	  3. Object-oriented Prolog-like language.  "Inheritance Hierarchy
  5798	Mechanism in Prolog", K. Akama, Proc Logic Prog '86, LNCS 264, Springer
  5799	1986, pp.12-21.
  5800	
  5801	  4. PDP Assembly Language.  Assembly language for PDP-8 and PDP-11.
  5802	
  5803	  5. Pedagogic Algorithmic Language.  "PAL - A Language for Teaching
  5804	Programming Linguistics", A. Evans Jr, Proc ACM 23rd Natl Conf,
  5805	Brandon/Systems Press (1968).
  5806	
  5807	Pam - Toy ALGOL-like language used in "Formal Specification of Programming
  5808	Languages:  A Panoramic Primer", F.G. Pagan, P-H 1981.
  5809	
  5810	Pandora - Parlog extended to allow "don't-know" non-determinism.  "Pandora:
  5811	Non-Deterministic Parallel Logic Programming", R. Bahgat et al, Proc 6th
  5812	Intl Conf Logic Programming, MIT Press 1989 pp.471-486.
  5813	
  5814	PANON - A family of pattern-directed string processing languages based on
  5815	generalized Markov algorithms.  "String Processing Languages and
  5816	Generalized Markov Algorithms", A. C. Forino, Proc IFIP Working Conf on
  5817	Symb Manip Languages, pp.141-206, Amsterdam 1968.  PANON-1, based on Simple
  5818	GMA's and PANON-2 based on Conditional Functional GMA's.
  5819	
  5820	Paragon - IEEE Software (Nov 1991). [?]
  5821	
  5822	Paralation - PARALlel reLATION.  Sabot, MIT 1987.  A framework for parallel
  5823	programming.  A "field" is an array of objects, placed at different sites. 
  5824	A paralation is a group of fields, defining nearness between field
  5825	elements.  Operations can be performed in parallel on every site of a
  5826	paralation.  "The Paralation Model: Architecture Independent Programming",
  5827	G.W. Sabot <gary@think.com>, MIT Press 1988.
  5828	
  5829	Paralation LISP - Embeds the paralation model in Common LISP.  Available
  5830	from MIT Press, (800)356-0343.
  5831	
  5832	Paralation C - Paralation embedded in C.  Under development.
  5833	
  5834	ParAlfl - Hudak, Yale.  Parallel functional language, a superset of Alfl. 
  5835	Used by the Alfalfa system on Intel iPSC and Encore Multimax.  "Para-
  5836	Functional Programming", P. Hudak, Computer 19(8):60-70 (Aug 1986). 
  5837	"Alfalfa: Distributed Graph Reduction on a Hypercube Multiprocessor", B.
  5838	Goldberg & P. Hudak, TR, Yale U, Nov 1986.
  5839	
  5840	Parallaxis - U Stuttgart.  Data-parallel (SIMD) language, based on Modula-
  5841	2.  "User Manual for Parallaxis Version 2.0", T. Braunl, U Stuttgart. 
  5842	Simulator for workstations, Mac and PC.
  5843	ftp: ftp.informatik.uni-stuttgart.de:pub/parallaxis
  5844	info: engelhar@informatik.uni-stuttgart.de
  5845	
  5846	Parallel C - Never implemented, but influenced the design of C*.
  5847	
  5848	Parallel FORTH - For the MPP.
  5849	
  5850	Parallel Pascal - Data-parallel language, similar to Actus and Glypnir. 
  5851	"Parallel Pascal: An Extended Pascal for Parallel Computers", A. Reeves, J
  5852	Parallel Dist Computing 1:64-80 (1984).
  5853	
  5854	Parallel SML - "Parallel SML: A Functional Language and its Implementation
  5855	in Dactl", Kevin Hammond, Pitman Press 1990.
  5856	
  5857	Pari - Symbolic math, especially number theory.  Version 1.37 for Unix,
  5858	Macintosh, MS-DOS, Amiga.
  5859	info: <pari@alioth.greco-prog.fr>
  5860	ftp: math.ucla.edu:pub/pari
  5861	
  5862	Paris - PARallel Instruction Set.  Low-level language for the Connection
  5863	Machine.
  5864	
  5865	Parlance - Concurrent language.  "Parallel Processing Structures:
  5866	Languages, Schedules, and Performance Results", P.F. Reynolds, PhD Thesis,
  5867	UT Austin 1979.
  5868	
  5869	Parlog - Clark & Gregory, Imperial College 1983.  An AND-parallel Prolog,
  5870	with guards and committed choice [=don't care] nondeterminism.  Shallow
  5871	backtracking only.  "Parlog: A Parallel Logic Programming Language", K.L.
  5872	Clark and S. Gregory, Imperial College, London, May 1983.  ("Parlog83", in
  5873	which the ouput mechanism was assignment).  "Parallel Logic Programming in
  5874	PARLOG, The Language and Its Implementation", S. Gregory, A-W 1987. 
  5875	("Parlog86", in which the output mechanism was unification, as in GHC). 
  5876	(See Strand). Implementations: MacParlog and PC-Parlog from Parallel Logic
  5877	Programming Ltd, Box 49 Twickenham TW2 5PH, UK.
  5878	ftp: nuri.inria.fr
  5879	info: parlog@doc.ic.ac.uk
  5880	
  5881	Parlog++ - Andrew Davison <ad@cs.mu.oz.au>, then Imperial College now U
  5882	Melbourne.  Object orientation plus parallel logic, built on top of
  5883	MacParlog.  "Parlog++: A Parlog Object-Oriented Language", A. Davison,
  5884	Parlog Group, Imperial College 1988.  Sold by PLP Ltd.  
  5885	info: parlog@doc.ic.ac.uk
  5886	
  5887	PARMACS - Argonne Natl Lab.  The "Argonne macros".  A package of macros
  5888	written in m4 for portable parallel programming, using monitors on shared
  5889	memory machines, and message passing on distributed memory machines.  E.
  5890	Lusk et al, "Portable Programs for Parallel Processors", HRW 1987.  (See
  5891	p4.)
  5892	ftp: research.att.com:netlib/parmacs
  5893	
  5894	ParMod - "Parallel Programming with ParMod", S. Eichholz, Proc 1987 Intl
  5895	Conf on Parallel Proc, pp.377-380.
  5896	
  5897	PARSEC - Extensible language with PL/I-like syntax, derived from PROTEUS. 
  5898	"PARSEC User's Manual", Bolt Beranek & Newman (Dec 1972).
  5899	
  5900	PARULEL - "The PARULEL Parallel Rule Language", S. Stolfo et al, Proc 1991
  5901	Intl Conf Parallel Proc, CRC Press 1991, pp.36-45.
  5902	
  5903	Pascal - (named for the French mathematician Blaise Pascal (1623-1662))  N.
  5904	Wirth, ca. 1970.  Designed for simplicity, in reaction to the complexity of
  5905	ALGOL 68, and intended as a teaching language.  Innovations: enumeration
  5906	types, subranges, sets, variant records, case statement.  Missing from
  5907	standard Pascal: strings, adjustable arrays, abstract data types,
  5908	random-access files, and separate compilation.  Pascal has been extremely
  5909	influential in programming language design, and has led to a great number
  5910	of variations and descendants.  "PASCAL User Manual and Report", K. Jensen
  5911	& N. Wirth, Springer 1975.  BS 6192, "Specification for Computer
  5912	Programming Language Pascal", British Standards Institute 1982.
  5913	
  5914	Pascal- - Pascal subset used in Brinch Hansen on Pascal Compilers, P.
  5915	Brinch Hansen, P-H 1985.
  5916	
  5917	Pascal-2 - [?]
  5918	
  5919	Pascal-80 - A successor of Platon.  Developed at RC International for
  5920	systems programming.  Later it was renamed Real-Time Pascal.  "PASCAL80
  5921	Report", J. Staunstrup, RC Intl, Denmark Jan 1980.
  5922	
  5923	Pascal+CSP - "Pascal+CSP, Merging Pascal and CSP in a Parallel Processing
  5924	Oriented Language", J. Adamo, Proc 3rd Intl Conf Distrib Comp Sys, IEEE
  5925	1982, pp.542-547.
  5926	
  5927	Pascal-F - Pascal extended to include fixed-point arithmetic.  E. Nelson,
  5928	"Pascal-F: Programming Language for Real-Time Automotive Control", IEEE
  5929	ElectroTechnol. Rev. (USA), 2:39, 1968.
  5930	
  5931	Pascal-FC - Derived from Pascal-S, provides several types of concurrency:
  5932	semaphores, monitors, both occam/CSP-style and Ada-style rendezvous.  "The
  5933	Teaching Language Pascal-FC", G.L. Davies et al, Computer J 33(2):147-154
  5934	(Apr 1990).
  5935	
  5936	Pascal/L - A SIMD parallel extension of Pascal.  "Implementation of an
  5937	Array and Vector Processing Language", C. Fernstrom, Intl Conf Parallel
  5938	Proc, IEEE, pp.113-127 (1982)
  5939	
  5940	Pascal-Linda - Ian Flockhart, U Edinburgh, 1991.  Under development.
  5941	
  5942	Pascal-m - "Pascal-m: A Language for Loosely Coupled Distributed Systems",
  5943	S. Abramsky et al in Distributed Computing Systems, Y. Paker et al eds,
  5944	Academic Press 1986, pp.163-189.
  5945	
  5946	Pascal-P - Variant of Pascal used by the UCSD p-system environment. 
  5947	Extended string and array operations, random access files, separate
  5948	compilation, etc.  Available from Pecan.
  5949	
  5950	Pascal Plus - Jim Welsh & D. Bustard, Queens U, Belfast.  Pascal with
  5951	extensions for object-oriented multiprogramming, uses an 'envelope'
  5952	construct for both packages and classes.  "Pascal Plus - Another Language
  5953	for Modular Multiprogramming", J. Welsh et al, Soft Prac & Exp 9:947
  5954	(1979).  "Sequential Program Structures", J. Welsh et al, P-H ISBN 0-13-
  5955	806828-3.
  5956	
  5957	Pascal/R - Pascal with relational database constructs added.  The first
  5958	successful integrated database language.  "Pascal/R Report", J.W. Schmidt
  5959	et al, U Hamburg, Fachbereich Informatik, Report 66, Jan 1980.
  5960	
  5961	Pascal-S - Simplified Pascal.  Source for a complete Pascal-S compiler is
  5962	in "Pascal-S: A Subset and Its Implementation", N. Wirth in Pascal
  5963	- The Language and Its Implementation, by D.W. Barron, Wiley 1979.
  5964	
  5965	Pascal-SC - ESPRIT DIAMOND Project.  An extension of Pascal for numerical
  5966	analysis, with controlled rounding, overloading, dynamic arrays and
  5967	modules.  "PASCAL-SC, A Computer Language for Scientific Computation", G.
  5968	Bohlender et al, Academic Press 1987.
  5969	
  5970	PASRO - PAScal for RObots.  "PASRO - Pascal for Robots", C. Blume et al,
  5971	Springer 1985.
  5972	
  5973	PAT - Personalized Array Translator.  Small subset of APL.  Sammet 1969,
  5974	p.252.
  5975	
  5976	Path Pascal - Parallel extension of Pascal.  Processes have shared access
  5977	to data objects.  Constraints on their synchronization are specified in a
  5978	path expression.  "An Overview of Path Pascal's Design", R.H. Campbell,
  5979	SIGPLAN Notices 15(9):13-24 (Sep 1980).
  5980	
  5981	pc - Parallel C.  U Houston.
  5982	ftp: karazm.math.uh.edu:pub/Parallel/Tools/pc.1.1.1.tar.Z
  5983	
  5984	PCF - Simply typed, functional.  "Fully Abstract Translations Between
  5985	Functional Languages", J. Riecke, 18th POPL, pp.245-254 (1991).  "LCF
  5986	Considered as a Programming Language", Theor CS 5:223 (1977).
  5987	
  5988	PCL - 
  5989	
  5990	  1. Printer Control Language.  Document description language used by
  5991	Hewlett-Packard Laserjet printers, a superset of HP-GL/2.  LaserJet
  5992	III/IIID Printer Technical Reference Manual, HP 33459-90903.  Versions: PCL
  5993	3, PCL 5.
  5994	
  5995	  2. Portable CommonLoops.  Started out as an implementation of
  5996	CommonLoops.  Is now being converted to CLOS, but currently implements only
  5997	a subset of the CLOS specification.
  5998	
  5999	  3. Peripheral Control Language.  Command language for I/O on the CP-V OS.
  6000	
  6001	  4. "PCL - A Process Oriented Job Control Language", V. Lesser et al, Proc
  6002	1st Intl Conf Distrib Comp Sys, IEEE 1979, pp.315-329.
  6003	
  6004	PCN - Program Composition Notation.  A specification language.
  6005	info: <foster@mcs.anl.gov>
  6006	
  6007	P-code - The intermediate code produced by the Pascal-P compiler.  Assembly
  6008	language for a hypothetical stack machine, the P-machine, said to have been
  6009	an imitation of the instruction set for the Burroughs Large System.  The
  6010	term was first used in Algorithms + Data Structures = Programs, N. Wirth,
  6011	P-H 1976.  A series of Byte articles about writing a Pascal Compiler in
  6012	Northstar BASIC (ca Aug 1978) also used the term.  Later used in Apple
  6013	Pascal, and as the intermediate language in the UCSD P-system.  "A
  6014	Comparison of PASCAL Intermediate Languages", P.A. Nelson, SIGPLAN Notices
  6015	14(8):208-213 (Aug 1979).  Variants: P-2 P-code, P-4 P-code, UCSD P-code,
  6016	LASL P-code.
  6017	info: USUS, Box 1148, La Jolla, CA 92038
  6018	
  6019	PC-TILES - A visual language.
  6020	
  6021	PCLIPS - Parallel CLIPS - U Lowell.  Concurrent independent CLIPS expert
  6022	systems.  They use 'rassert' (remote assert) to enter facts into each
  6023	other's database.  "PCLIPS: A Distributed Expert System Environment", R.
  6024	Miller, CLIPS Users Group Conf, Aug 1990.
  6025	info: dragon.ulowell.edu:pub/PClips
  6026	
  6027	PDEL - Partial Differential Equation Language.  Preprocessor for PL/I. 
  6028	"PDEL - A Language for Partial Diferential Equations", A.F. Cardenas, CACM
  6029	13(3):184-191 (Mar 1970).
  6030	
  6031	PDELAN - Partial Differential Equation LANguage.  "An Extension of FORTRAN
  6032	Containing Finite Difference Operators", J. Gary et al, Soft Prac & Exp
  6033	2(4) (Oct 1972).
  6034	
  6035	PDL2 - Process Design Language.  Developed for the TI ASC computer.  "Texas
  6036	Instruments Process Design Methodology - Design Specification: Process
  6037	Design Language", Volume I (Sep 1976).  Mentioned in "An Overview of Ada"
  6038	J.G.P. Barnes, Soft Prac & Exp 10:851-887 (1980).
  6039	
  6040	PDS/MaGen - Problem Descriptor System.  Generation of matrices and reports
  6041	for mathematical programming and operations research.  "PDS MaGen User
  6042	Information Manual", Haverly Systems (Dec 1977).
  6043	
  6044	PEARL -
  6045	
  6046	  1. Constable, Cornell U, 80's.  Constructive mathematics.
  6047	
  6048	  2. Process and Experiment Automation Real-Time Language.  A real-time
  6049	language for programming process control systems, widely used in Europe. 
  6050	Size and complexity comparable to Ada.  DIN 66253 Teil 2,
  6051	"Programmiersprache PEARL", Beuth-Verlag, Nov 1980.
  6052	
  6053	  3. One of five pedagogical languages based on Markov algorithms, used in
  6054	"Nonpareil, a Machine Level Machine Independent Language for the Study of
  6055	Semantics", B. Higman, ULICS Intl Report No ICSI 170, U London (1968). 
  6056	(cf. Brilliant, Diamond, Nonpareil, Ruby[2]).
  6057	
  6058	Pebble - Polymorphic.  "A Kernel Language for Abstract Data Types and
  6059	Modules", R.M. Burstall & B. Lampson, in Semantics of Data Types, LNCS 173,
  6060	Springer 1984.
  6061	
  6062	Pebbleman - DoD requirements that led to APSE.
  6063	
  6064	PECOS - Constraint-based language, built on the object-oriented module of
  6065	Le-Lisp.  "Pecos Reference Manual", ILOG, 1990.  ILOG, 12 av Raspail, BP 7,
  6066	F94251 Gentilly, France.
  6067	
  6068	PEEL - Used to implement version of EMACS on PRIME computer. [?]
  6069	
  6070	PENCIL - Pictorial ENCodIng Language.  On-line system to display line
  6071	structures.  Sammet 1969, 675.
  6072	
  6073	Pepper - Chris Dollin <kers@hplb.hpl.hp.com>.  Variant of POP-11.
  6074	
  6075	PEPsy - Prolog extended with parallel modules within which explicit OR-
  6076	parallelism can be used.  "PEPsy: A Prolog for Parallel Processing", M.
  6077	Ratcliffe et al, ECRC TR CA-17, 1986.
  6078	
  6079	Perl - Practical Extraction and Report Language.  Larry Wall <lwall@jpl-
  6080	devvax.jpl.nasa.gov>  An AWK-like scripting language for scanning text and
  6081	printing reports.  "Programming Perl", Larry Wall et al, O'Reilly & Assocs.
  6082	ftp: jpl-devvax.jpl.nasa.gov:pub/perl.4.0 for Unix, MS-DOS, Amiga
  6083	     rascal.utexas.edu:programming/Perl_402_MPW_CPT_bin for Mac
  6084	uucp: osu-cis
  6085	
  6086	pf - Parallel Fortran.  U Houston.  Under development.
  6087	info: <scott@uh.edu>
  6088	
  6089	PFL - Holmstrom, Matthews.  A concurrent extension of ML, using CCS.  "PFL:
  6090	A Functional Language for Parallel Programming", S. Holmstrom in Proc
  6091	Declarative Language Workshop, London 1983.
  6092	
  6093	PHOCUS - Object-oriented Prolog-like language.  "PHOCUS: Production Rules,
  6094	Horn Clauses, Objects and Contexts in a Unification Based System", D. Chan
  6095	et al, Actes du Sem Prog et Logique, Tregastel (May 1987), pp.77-108.
  6096	
  6097	PIC - Brian Kernighan.  Graphics meta-language for textually describing
  6098	pictures, for use with troff.  Featured in Jon Bentley's "More Programming
  6099	Pearls."  "PIC - A Language for Typesetting Graphics", B.W. Kernighan, Soft
  6100	Prac & Exp 12(1):1-21 (Jan 1982).  "PIC - A Graphics Language for
  6101	Typesetting, Revised User Manual", Bell Labs TR 116, Dec 1984.
  6102	
  6103	Pick BASIC - see Data/BASIC.
  6104	
  6105	PIE - CMU.  Similar to Actus.
  6106	
  6107	PIL - Procedure Implementation Language, subsytem of DOCUS.  Sammet 1969,
  6108	p.678.
  6109	
  6110	PIL/I - Variant of JOSS.  Sammet 1969, p.217.
  6111	
  6112	PILE - 
  6113	
  6114	  1. Polytechnic's Instructional Language for Educators.  Similar in use to
  6115	an enhanced PILOT, but structurally more like Pascal with Awk-like
  6116	associative arrays (optionally stored on disk).  Distributed to about 50
  6117	sites by Initial Teaching Alphabet Foundation for Apple II and CP/M.  "A
  6118	Universal Computer Aided Instruction System," Henry G. Dietz & Ronald J
  6119	Juels, Proc Natl Educ Computing Conf '83, pp.279-282.
  6120	
  6121	  2. "PILE _ A Language for Sound Synthesis", P. Berg, Comput Music J 3,1
  6122	(1979).
  6123	
  6124	PILOT - Programmed Inquiry Learning Or Teaching.  CAI language, many
  6125	versions.  "Guide to 8080 PILOT", J. Starkweather, Dr Dobb's J (Apr 1977).
  6126	
  6127	PINBOL - Decision table language for controlling pinball machines used at
  6128	Atari.  Included a multi-tasking executive and an interpreter that worked
  6129	on data structures compiled from condition:action lists.
  6130	
  6131	PIRL - Pattern Information Retrieval Language.  Language for digraph
  6132	manipulation, embeddable in FORTRAN or ALGOL, for IBM 7094.  "PIRL -
  6133	Pattern Information Retrieval Language", S. Berkowitz, Naval Ship Res Dev
  6134	Ctr, Wash DC.
  6135	
  6136	PIT - Language for IBM 650.  (See IT).
  6137	
  6138	PL-11 - High-level machine-oriented language for the PDP-11.  (May have
  6139	been from CERN.)
  6140	
  6141	PL/360 - Assembly language for IBM 360 and 370, with a few high-level
  6142	constructs.  "PL/360, A Programming Language for the 360 Computers", N.
  6143	Wirth, J ACM 15(1):37-74 (Jan 1968).
  6144	
  6145	PL-6 - PL/I-like system language for the Honeywell OS CP-6.
  6146	
  6147	PL.8 - A systems dialect of PL/I, developed originally for the IBM 801 RISC
  6148	mini, later used internally for IBM RT and R/6000 development.  "An
  6149	Overview of the PL.8 Compiler", M. Auslander et al, Proc SIGPLAN '82 Symp
  6150	on Compiler Writing.
  6151	
  6152	Pla - High-level music programming language, written in SAIL.  Includes
  6153	concurrency based on message passing.  "Pla: A Composer's Idea of a
  6154	Language", B. Schottstaedt, Computer Music J 7(1):11-20 (Winter 1983).
  6155	
  6156	PLACE - Programming Language for Automatic Checkout Equipment.  "The
  6157	Compiler for the Programming Language for Automatic Chekcout Equipment
  6158	(PLACE)", AFAPL TR-68-27, Battelle Inst, Columbus, May 1968.
  6159	
  6160	PLAIN - Programming LAnguage for INteraction.  Pascal-like, with extensions
  6161	for database, string handling, exceptions and pattern matching.  "Revised
  6162	Report on the Programming Language PLAIN", A. Wasserman, SIGPLAN Notices
  6163	6(5):59-80 (May 1981).
  6164	
  6165	PLAN - Assembly language for ICL1900 series machines.
  6166	
  6167	Planet - "An Experiment in Language Design for Distributed Systems", D.
  6168	Crookes et al, Soft Prac & Exp 14(10):957-971 (Oct 1984).
  6169	
  6170	PLANIT - Programming LANguage for Interaction and Teaching.  CAI language. 
  6171	"PLANIT - A Flexible Language Designed for Computer-Human Interaction",
  6172	S.L. Feingold, Proc FJCC 31, AFIPS (Fall 1967)  Sammet 1969, p.706.
  6173	
  6174	Plankalkul - Konrad Zuse, ca. 1945.  The first programming language, never
  6175	implemented.  Included arrays and records.  Much of his work may have been
  6176	either lost or confiscated in the aftermath of WWII.  "The Plankalkul of
  6177	Konrad Zuse", F.L. Bauer et al, CACM 15(7):678-685 (Jul 1972).
  6178	
  6179	PLANNER - C. Hewitt <hewitt@ai.mit.edu> MIT 1967.  A language for writing
  6180	theorem provers.  Never fully implemented, see microPLANNER.  "PLANNER: A
  6181	Language for Proving Theorems in Robots", Carl Hewitt, Proc IJCAI-69, Wash
  6182	DC, May 1969.
  6183	
  6184	PLANS - Programming Language for Allocation and Network Scheduling.  A PL/I
  6185	preprocessor, used for developing scheduling algorithms.  "A User's Guide
  6186	to the Programming Language for Allocation and Network Scheduling", H.R.
  6187	Ramsey et al, TR SAI-77-068-DEN, Science Applications Inc (Jun 1977).
  6188	
  6189	Plasma - Carl Hewitt, 1976.  The first actor language.  "Viewing Control
  6190	Structures as Patterns of Passing Messages", C. Hewitt, AI Memo 410, MIT
  6191	1976.
  6192	
  6193	Platon - Distributed language based on asynchronous message passing. 
  6194	"Message Passing Communication Versus Procedure Call Communication", J.
  6195	Staunstrup, Soft Prac & Exp 12(3):223-234 (Mar 1982).  "Platon Reference
  6196	Manual", S. Soerensen et al, RECAU, U Aarhus, Denmark.
  6197	
  6198	PLAY - 1977.  Language for real-time music synthesis.  "An Introduction to
  6199	the Play Program", J. Chadabe ete al, Computer Music J 2,1 (1978).
  6200	
  6201	Playground - A visual language for children, developed for Apple's Vivarium
  6202	Project.  OOPSLA 89 or 90?
  6203	
  6204	PL/C - Subset of PL/I for student use.  "User's Guide to PL/C", S. Worona
  6205	et al, Cornell, June 1974.  "PL/C - A High Performance Compiler" H.L.
  6206	Morgan et al, Proc SJCC, AFIPS 38:503-510 (1971).
  6207	
  6208	PL/I - Programming Language I.  George Radin, 1964.  Oriinally named NPL. 
  6209	An attempt to combine the best features of FORTRAN, COBOL and ALGOL 60. 
  6210	Result is large but elegant.  One of the first languages to have a formal
  6211	semantic definition, using the Vienna Definition Language.  EPL, a dialect
  6212	of PL/I, was used to write almost all of the Multics OS.  PL/I has no
  6213	reserved words.  Types are fixed, float, complex, character strings with
  6214	max length, bit strings, and label variables.  Arrays have lower bounds,
  6215	and may be dynamic. Summation, multi-level structures, structure
  6216	assignment, untyped pointers, side effects, aliasing.  Control flow goto,
  6217	do-end groups, do-to-by-while-end loops, external procedures and internal
  6218	nested procedures and blocks, procedures may be declared recursive. 
  6219	Generic procedures.  Many implementations support concurrency ('call task'
  6220	and 'wait(event)' amount to fork/join) and compile-time statements. 
  6221	Exception handling.  "A Structural View of PL/I", D. Beech, Computing
  6222	Surveys, 2,1 33-64 (1970).  ANS X3.53-1976, X3.74-1981.  PL/I is still
  6223	widely used internally at IBM.
  6224	list: PL1-L@UIUCVMD.BITNET
  6225	ftp: wuarchive.wustl.edu:/mirrors/msdos/pli/runpli1a.arc, PL/I interpreter
  6226	version: LPI for PC's and workstations <rcg@lpi.liant.com>
  6227	
  6228	PL/I SUBSET - Early 70's version of PL/I for minis.
  6229	
  6230	PL/I Subset G - The commercial PL/I subset (i.e., what was actually
  6231	implemented by most vendors).
  6232	
  6233	PL/I-FORMAC - Variant of FORMAC.  "The PL/I-FORMAC Interpreter", J.
  6234	Xenakis, Proc 2nd Symp Symbolic and Algebraic Manip, ACM (Mar 1971). 
  6235	Sammet 1969, p.486.
  6236	
  6237	Plisp - Pattern LISP.  1990.  A pattern-matching rewrite-rule language,
  6238	optimized for describing syntax translation rules.  (See LISP70).
  6239	
  6240	PLITS - Programming Language In The Sky.  A computational model for
  6241	concurrency with communication via asynchronous message-passing.  "High
  6242	Level Programming for Distributed Computing", J.A. Feldman, CACM 22(6):353-
  6243	368 (Jun 1979).
  6244	
  6245	PL/M - Programming Language/Microcomputers.  MAA (later Digital Research)
  6246	for Intel, 1972.  A very low level language incorporating ideas from PL/I,
  6247	ALGOL and XPL.  Integrated macro processor.  Originally the implementation
  6248	language for CP/M.  "PL/M-80 Programming Manual", Doc 98-268B, Intel 1976. 
  6249	"A Guide to PL/M Programming for Microcomputer Applications", D. McCracken,
  6250	A-W 1978.  Versions: PL/M-80, PL/M-86, PL/M-286.
  6251	
  6252	PL/P - Programming Language, Prime.  Russ Barbour, PRIME Computer, late
  6253	70's.  Subset of PL/I used internally for implementation of PRIMOS.  (See
  6254	SPL[4]).
  6255	
  6256	PL/PROPHET - PL/I-like language for the PROPHET system, used by
  6257	pharmacologists.  "The Implementation of the PROPHET System", P.A.
  6258	Castleman et al, NCC 43, AFIPS (1974).
  6259	
  6260	PL/S - Programming Language/Systems.  IBM late 60's.  Apparently a hybrid
  6261	of PL/I and ASM.  Much of IBM/360 OS/MFT/MVT/SVS/MVS was written in it. 
  6262	Documented by various IBM internal ZZ-? publications.  Versions: PLS1,
  6263	PLSII.
  6264	
  6265	PL/Seq - Programming Language for Sequences.  A DSP language.  "A General
  6266	High Level Language for Signal Processors", J. Skytta & O. Hyvarinen,
  6267	Digital Signal Processing 84, Proc Intl Conf, Fiorence, Italy, Sep 1984,
  6268	pp.217-221.
  6269	
  6270	PLUSS - Proposition of a Language Useable for Structured Specifications. 
  6271	Algebraic specification language, built on top of ASL.  "A First
  6272	Introduction to PLUSS", M.C. Gaudel, TR, U Paris Sud, Orsay 1984.
  6273	
  6274	PM - "PM, A System for Polynomial Manipulations", G.E. Collins, CACM
  6275	9(8):578-589 (Aug 1966).
  6276	
  6277	PLZ - [?]
  6278	
  6279	PML - Parallel ML.  "Synchronous Operations as First-Class Values", J.H.
  6280	Reppy <jhr@research.att.com>, Proc SIGPLAN 88 Conf Prog Lang Design and
  6281	Impl, June 1988, pp.250-259.
  6282	
  6283	POGO - Early system on G-15.  Listed in CACM 2(5):16 (May 1959).
  6284	
  6285	Polka - Object orientation plus parallel logic, built on top of Parlog. 
  6286	"Polka: A Parlog Object-Oriented Language", Andrew Davison
  6287	<ad@mullauna.cs.mu.oz.au>, TR, Parlog Group, Imperial College, London 1988.
  6288	info: parlog@doc.ic.ac.uk
  6289	
  6290	Poly - 
  6291	
  6292	  1. D.C.J. Matthews, Cambridge, early 80's.  Polymorphic,
  6293	block-structured.  "An Overview of the Poly Programming Language", D.C.J.
  6294	Matthews <djcm@cl.cam.ac.uk>, in Data Types and Persistence, M.P. Atkinson
  6295	et al eds, Springer 1988.
  6296	
  6297	  2. St Andrews U, Scotland.  Software Prac & Exp, Oct 1986.[?]
  6298	
  6299	  3. Polymorphic language used in Polymorphic Programming Languages, David
  6300	M. Harland, Ellis Horwood 1984.
  6301	
  6302	POLYGOTH - Distributed language integrating classes with a parallel block
  6303	structure, including multiprocedures and fragments.  "Operational Semantics
  6304	of a Distributed Object-Oriented Language and its Z Formal Specification",
  6305	M. Benveniste <mbenveni@irisa.irisa,fr>, TR532, IRISA/INRIA-Rennes.
  6306	
  6307	Ponder - Jon Fairbairn, <jf@cl.cam.ac.uk>.  Polymorphic, non-strict
  6308	functional language.  Has a type system similar to Girard's System F
  6309	("Proofs and Types", J-Y. Girard, Cambridge U Press 1989), also known as
  6310	Lambda-2 or the polymorphic lambda calculus.  Ponder adds extra recursive
  6311	'mu' types to those of F, allowing more general recursion.  "Ponder and its
  6312	Type System", J. Fairbairn, TR 31, Cambridge U Computer Lab, Nov 1982. 
  6313	Also "Subtyping in Ponder", V. Paiva, TR 203.
  6314	
  6315	POOL2 - Parallel Object-Oriented Language.  Philips Research Labs, 1987. 
  6316	Strongly typed, synchronous message passing, designed to run on DOOM (DOOM
  6317	= Decentralized Object-Oriented Machine).  "POOL and DOOM: The Object-
  6318	Oriented Approach", J.K. Annot, PAM den Haan, in Parallel Computers,
  6319	Object-Oriented, Functional and Logic, P. Treleaven ed.  "Issues in the
  6320	Design of a Parallel Object-Oriented Language", P. America, Formal Aspects
  6321	of Computing 1(4):366-411 (1989).  
  6322	
  6323	POOL-I - Latest in the line of POOL languages.  "A Parallel Object-Oriented
  6324	Language with Inheritance and Subtyping", P. America et al, SIGPLAN Notices
  6325	25(10):161-168 (OOPSLA/ECOOP '90) (Oct 1990).
  6326	
  6327	POOL-T - Object-oriented, concurrent, synchronous.  Predecessor of POOL2. 
  6328	"Definition of the Programming Language POOL-T", Esprit Project 415, Doc.
  6329	0091, Philips Research Labs, Eindhoven, Netherlands, June 1985.
  6330	
  6331	POP-1 - Package for On-Line Programming.  1966.  First of the POP family of
  6332	languages.  Used reverse Polish notation.  EPU-R-17, U Edinburgh (Jul
  6333	1966).
  6334	
  6335	POP-2 - Robin POPplestone, Edinburgh 1967.  An innovative language
  6336	incorporating many of Landin's ideas, including streams, closures, and
  6337	functions as first-class citizens.  The first implementation was named
  6338	Multi-POP.  "POP-2 Papers", R.M. Burstall et al, Oliver & Boyd 1968. 
  6339	"Programming in POP-2", R.M. Burstall et al, Edinburgh U Press 1971.
  6340	
  6341	POP-10 - Julian Davies, 1973.  Descendant of POP-2, for the PDP-10.  "POP-
  6342	10 User's Manual", D.J.M. Davies, CS R25, U West Ontario, 1976.
  6343	
  6344	POP-11 - Robin POPplestone, 1975.  Originally for the PDP-11.  In some
  6345	ways, POP is like FORTH (stack-oriented, extensible, efficient).  It's also
  6346	like LISP (functional, dynamically typed, interactive, garbage-collected). 
  6347	And the syntax is like Pascal (block-structured).  "Programming in POP-11",
  6348	J. Laventhol <jcl@deshaw.com>, Blackwell 1987.  Implementations: AlphaPop
  6349	for Mac (Computable Functions Inc, 413-253-7637).  PopTalk [?]  POPLOG (U
  6350	Sussex) available for VAX/VMS and most workstations.
  6351	info: Robin Popplestone <pop@cs.umass.edu> (413)253-7637
  6352	
  6353	POP-9X - Proposed BSI standard for POP-11.
  6354	
  6355	POP++ - An extension of POPLOG.  Available from Integral Solutions.
  6356	
  6357	POPCORN - AI system built on POP-2.  "The POPCORN Reference Manual", S.
  6358	Hardy, Essex U, Colchester, 1973.
  6359	
  6360	Poplar - Morris, 1978.  A blend of LISP with SNOBOL4 pattern matching and
  6361	APL-like postfix syntax.  Implicit iteration over lists, sorting primitive.
  6362	"Experience with an Applicative String-Processing Language", J.H. Morris et
  6363	al, 7th POPL, ACM 1980, pp.32-46.
  6364	
  6365	POPLER - A PLANNER-type language for the POP-2 environment.  "Popler 1.6
  6366	Reference Manual", D. Davies et al, U Edinburgh, TPU Report No 1 (May
  6367	1973).
  6368	
  6369	POPLOG - U Sussex.  Language for the two-stack virtual machine (PVM) which
  6370	underlies the POPLOG interactive environment.  POPLOG supports POP-11,
  6371	LISP, Prolog and ML via shared data structures and incremental compilation. 
  6372	"POPLOG's Two-Level Virtual Machine Support for Interactive Languages", R.
  6373	Smith et al, in Research Directions in Cognitive Science, v.5 (1992).
  6374	
  6375	PopTalk - A commercial object-oriented derivative of POP, used in the
  6376	Expert System MUSE.  Cambridge Consultants.
  6377	
  6378	Port - Waterloo Microsystems (now Hayes Canada) ca. 1979.  Imperative
  6379	language descended from Zed.  "Port Language" document in the Waterloo Port
  6380	Development System.
  6381	
  6382	Portable Standard Lisp - "A Portable Lisp System", M.L. Griss et al, Proc
  6383	1982 ACM Symp on Lisp and Functional Prog, Aug 1982.
  6384	
  6385	PORTAL - Process-Oriented Real-Time Algorithmic Language.  "PORTAL - A
  6386	Pascal-based Real-Time Programming Language", R. Schild in Algorithmic
  6387	Languages, J.W. deBakker et al eds, N-H 1981.
  6388	
  6389	Port Language - "Communicating Parallel Processes", J. Kerridge et al, Soft
  6390	Prac & Exp 16(1):63-86 (Jan 1986).
  6391	
  6392	POSE - 1967.  An early query language.  "POSE: A Language for Posing
  6393	Problems to Computers", S. Schlesinger et al, CACM 10:279-285 (May 1967).
  6394	
  6395	POSTQUEL - POSTGRES QUERy Language.  Language used by the database system
  6396	POSTGRES.  "The Design of POSTGRES", M. Stonebraker et al, Proc ACM SIGMOD
  6397	Conf, June 1986.
  6398	ftp: postgres.berkeley.edu:pub/postgresv4r0.tar.Z    Version 4.0
  6399	
  6400	PostScript - J. Warnock et al, Adobe Systems, ca. 1982.  Interpretive
  6401	FORTH-like language used as a page description language by Apple
  6402	LaserWriter, and now many laser printers and on-screen graphics systems. 
  6403	"PostScript Language Reference Manual" ("The Red Book"), Adobe Systems, A-W
  6404	1985.
  6405	
  6406	POSYBL - PrOgramming SYstem for distriButed appLications.  Ioannis
  6407	Schoinas.  A Linda implementation for Unix networks.
  6408	ftp: ariadne.csi.forth.gr:pub/POSYBL.TAR.Z
  6409	info: sxoinas@csd.uch.gr
  6410	
  6411	PowerFuL - Combines functional and logic programming, using "angelic
  6412	Powerdomains".
  6413	
  6414	PPL - Polymorphic Programming Language.  Harvard U.  Interactive and
  6415	extensible, based on APL.  "Some Features of PPL - A Polymorphic
  6416	Programming Language", T.A. Standish, SIGPLAN Notices 4(8) (Aug 1969).
  6417	
  6418	PPLambda - Essentially the first-order predicate calculus superposed upon
  6419	the simply-typed polymorphic lambda-calculus.  The object language for LCF. 
  6420	"Logic and Computation: Interactive Proof with Cambridge LCF", L. Paulson,
  6421	Cambridge U Press, 1987.
  6422	
  6423	P-Prolog - Parallel logic language.  "P-Prolog: A Parallel Logic Language
  6424	Based on Exclusive Relation", R. Yang et al, Third Intl Conf on Logic Prog,
  6425	1986, pp.255-269.
  6426	
  6427	pre-cc - PREttier Compiler Compiler.
  6428	ftp:ftp.comlab.ox.ac.uk:Programs
  6429	
  6430	PREP - PRogrammed Electronics Patterns.  Language for designing integrated
  6431	circuits.  "Computer Assisted Mask Production", R.L. Rosenfeld, Proc IEEE
  6432	57(9) Sep 1969.
  6433	
  6434	PRESTO - Bershad et al, U Washington 1987.  A parallel language for shared-
  6435	memory multiprocessors, built on top of C++.  Provides classes for threads
  6436	and spinlocks.  Also Mesa-style monitors and condition variables.  "PRESTO:
  6437	A Kernel for Parallel Programming Environments", B.N. Bershad et al, U Wash
  6438	CS TR, Jan 1987.
  6439	info: presto@cs.washington.edu
  6440	ftp: cs.washington.edu:pub/presto1.0.tar.Z
  6441	
  6442	PRINT - PRe-edited INTerpreter.  Early math for IBM 705.  Sammet 1969,
  6443	p.134.
  6444	
  6445	PRINT I - Early system on IBM 705.  Listed in CACM 2(5):16 (May 1959).
  6446	
  6447	PRISM - Distributed logic language.  "PRISM: A Parallel Inference System
  6448	for Problem Solving", S. Kasif et al, Proc 1983 Logic Prog Workshop,
  6449	pp.123-152.
  6450	
  6451	PRL - Proof Refinement Logic.  "PRL: Proof Refinement Logic Programmer's
  6452	Manual",  CS Dept, Cornell, 1983.  Versions: micro-PRL, lambda-PRL, nu-PRL.
  6453	(See NUPRL).
  6454	
  6455	Probe - Object-oriented logic language based on ObjVlisp.  "Proposition
  6456	d'une Extension Objet Minimale pour Prolog", Actes du Sem Prog en Logique,
  6457	Tregastel (May 1987), pp.483-506.
  6458	
  6459	PROC - Job control language used in the Pick OS.  "Exploring the Pick
  6460	Operating System", J.E. Sisk et al, Hayden 1986.
  6461	
  6462	PROCOL - J. Van Den Bos, Erasmus U, Rotterdam.  Constraints and distributed
  6463	delegation.  "PROCOL: A Parallel Object Language with Protocols", J. Van
  6464	Den Bos et al, SIGPLAN Notices 24(10):95-102 (OOPSLA '89) (Oct 1989).
  6465	
  6466	PROFILE - Simple language for matching and scoring data.  "User's Manual
  6467	for the PROFILE System", Cambridge Computer Assoc (May 1974).
  6468	
  6469	PROGENY - 1961.  Report generator for UNIVAX SS90.
  6470	
  6471	Prograph - Technical U, Halifax.  Visual language, a blend of dataflow and
  6472	object orientation.  Available for Mac.  TGS Systems (902) 429-5642.
  6473	
  6474	PROJECT - Subsystem of ICES.  Sammet 1969, p.616.
  6475	
  6476	Prolog - PROgrammation en LOGique.  (Original name: SYSTEM Q).  Alain
  6477	Colmerauer and Phillipe Roussel, U Aix-Marseille 1971.  First implemented
  6478	in ALGOL-W in 1972.  Designed originally for natural-language processing. 
  6479	LUSH (or SLD) resolution theorem proving based on the unification alorithm. 
  6480	No user-defined functions, and no control structure other than the built-in
  6481	depth-first search with backtracking.  "Programming in Prolog", W.F.
  6482	Clocksin & C.S. Mellish, Springer 1985.  Early collaboration between
  6483	Marseille and R. Kowalski at U Edinburgh continued until about 1975.  (See
  6484	LM-Prolog, SB-Prolog).  Draft ISO standard.
  6485	ftp: cpsc.ucalgary.ca:pub/prolog1.1 - Prolog interpreter in Scheme
  6486	     aisun1.ai.uga.edu:ai.prolog/eslpdpro.zip ESL Prolog for MS-DOS
  6487	     aisun1.ai.uga.edu:ai.prolog/?  Open Prolog for Mac
  6488		cs.utah.edu:pub/frolic.tar.Z - Prolog interpreter in Common LISP.
  6489	
  6490	Prolog-2 - An implementation of Edinburgh Prolog.  "An Advanced Logic
  6491	Programming Language", Anthony Dodd.
  6492	info: Nick Henfrey, ESL (Expert Systems Ltd, Magdalen Centre, Oxford
  6493	Science Park, Oxford, OX4 4GA, tel 0865 784474).
  6494	
  6495	Prolog-II - Prolog with two new predicates: 'dif' for coroutines and
  6496	'freeze' for delayed evaluation.  "Prolog II Reference Manual and
  6497	Theoretical Model", A. Colmerauer, Internal Report, GroupeIA, U Aix-
  6498	Marseille (Oct 1982).  Available from ExperIntelligence, Santa Barbara CA.
  6499	
  6500	Prolog-III - A. Colmerauer, U Aix-Marseille, ca 1984.  Marseille Prolog,
  6501	with unification replaced by constraint resolution.  [deferred goals too?] 
  6502	(Not to be confused with Prolog 3, a commercial product.)  "Opening the
  6503	Prolog-III Universe", BYTE 12(9):177-182 (Aug 1987).  "An Introduction to
  6504	Prolog III", A. Colmerauer, CACM 33(7):69-90 (1990).
  6505	
  6506	Prolog++ - Phil Vasey, Logic Programming Associates.  Prolog with object-
  6507	oriented features added.  For MS-DOS and X-windows.  Distributed by AI Intl
  6508	Ltd in England and Quintus (800)542-1283.
  6509	
  6510	Prolog-D-Linda - Embeds the Linda parallel paradigm into SISCtus Prolog.
  6511	ftp: ftp.cs.uwa.au
  6512	info: geoff@cs.uwa.edu.au
  6513	
  6514	Prolog-Linda - 
  6515	
  6516	  1. Prolog extended with Linda-style parallelism.  Proc 4th Australian
  6517	Conf on Artif Intell.
  6518	ftp: bison.cs.uwa.oz.au
  6519	
  6520	  2. Neil MacDonald, U Edinburgh 1989.  Another Prolog extended with Linda,
  6521	implemented on a Computing Surface.
  6522	
  6523	PROMAL - Computer Language, Mar 1986, pp.128-134. [?]
  6524	
  6525	Pronet - "The Design of a Programming Language Based on Connectivity
  6526	Networks", R. LeBlanc et al, Proc 3rd Intl Conf Distrib Comp Sys, IEEE
  6527	1982, pp.532-541.
  6528	
  6529	Proposal Writing - Extension of FORTRAN for proposal writing.  Sammet 1969,
  6530	p.170.
  6531	
  6532	PROSE - 
  6533	
  6534	  1. PROblem Solution Engineering.  Numerical problems including
  6535	differentiation and integration.  "Computing in Calculus", J. Thames,
  6536	Research/Development 26(5) (May 1975).
  6537	
  6538	  2. A constraints-and-sequencing system similar to Kaleidoscope. 
  6539	"Reflexive Constraints for Dynamic Knowledge Bases", P. Berlandier et al in
  6540	Proc First Intl CS Conf '88: AI: Theory and Appls, Dec 1988.
  6541	
  6542	PROSPER - "PROSPER: A Language for Specification by Prototyping", J.
  6543	Leszczylowski, Comp Langs 14(3):165-180 (1989).
  6544	
  6545	ProTalk - Quintus.  An object-oriented Prolog.
  6546	
  6547	PROTEUS - Extensible language, core of PARSEC.  "The Design of a Minimal
  6548	Expandable Computer Language", J.R. Bell, PhD Thesis, CS, Stanford U (Dec
  6549	1968).
  6550	
  6551	Protosynthex - Query system for English text.  Sammet 1969, p.669.
  6552	
  6553	PS-ALGOL - Persistent Algol.  ca 1981, released 1985.  A derivative of S-
  6554	Algol.  Database capability derived from the longevity of data.  "The PS-
  6555	Algol Reference Manual", TR PPR-12-85, CS Dept, U Glasgow 1985.  IBM PC
  6556	version available from CS Dept, U Strathclyde, Glasgow.
  6557	
  6558	Psather - Parallel version of Sather, under development.
  6559	
  6560	PSML - Processor System Modeling Language.  Simulating computer systems
  6561	design.  A preprocessor to SIMSCRIPT.  "Processor System Modeling - A
  6562	Language and Simulation System", F. Pfisterer, Proc Symp on Simulation of
  6563	Computer Systems (Aug 1976).
  6564	
  6565	P-TAC - Parallel Three Address Code.  "P-TAC: A Parallel Intermediate
  6566	Language", Z. Ariola et al, Fourth Intl Conf Func Prog Langs and Comp Arch,
  6567	ACM Sept 1989.  (See Kid).
  6568	
  6569	PUB - PUBlishing.  1972.  An early text-formatting language for TOPS-10,
  6570	with syntax based on SAIL.  Inluenced TeX and Scribe.  "PUB: The Document
  6571	Compiler", Larry Tesler, Stanford AI Proj Op Note, Sept 1972.
  6572	
  6573	PUFFT - "The Purdue University Fast FORTRAN Translator", Saul Rosen et al,
  6574	CACM 8(11):661-666 (Nov 1965).
  6575	
  6576	PVM - Concurrent language?
  6577	
  6578	Python - 
  6579	
  6580	  1. Guido van Rossum <guido@cwi.nl> 1991.  A high-level interpreted
  6581	language combining ideas from ABC, C, Modula-3, Icon, etc.  Intended for
  6582	prototyping or as an extension language for C applications.  Modules,
  6583	classes, user-defined exceptions.  "Linking a Stub Generator (AIL) to a
  6584	Prototyping Language (Python)", Guido van Rossum et al, Proc 1991 EurOpen
  6585	Spring Conf.  Available for Unix, Amoeba and Mac.  Version 0.9.8.
  6586	ftp: ftp.cwi.nl:pub/python
  6587	list: python-list@cwi.nl
  6588	
  6589	  2. Compiler for CMU Common LISP.
  6590	
  6591	Q'NIAL - Queen's U, Canada.  A portable incremental compiler for NIAL,
  6592	written in C.  "The Q'NIAL Reference Manual", M.A. Jenkins, Queen's U
  6593	Report, Dec 1983.  Versions for Unix and MS-DOS, from NIAL Systems Ltd,
  6594	Ottawa Canada, (613)234-4188.
  6595	
  6596	QA4 - Question-answering language.  A procedural calculus for intuitive
  6597	reasoning.  A LISP-based pattern-matching language for theorem proving. 
  6598	"QA4, A Language for Writing Problem-Solving Programs", J.F. Rulifson et
  6599	al, Proc IFIP Congress 1968.
  6600	
  6601	QBE - Query By Example.  Moshe Zloof, IBM 1975.  A user-friendly query
  6602	language.  "QBE: A Language for Office and Business Automation", M.M.
  6603	Zloof, Computer pp.13-22 (May 1981).
  6604	
  6605	Qlambda - "Queue-based Multi-processing Lisp", R. Gabriel & J. McCarthy,
  6606	Proc 1984 Symp Lisp and Functional Prog, pp.25-44.
  6607	
  6608	QLISP - 
  6609	
  6610	  1. SRI 1973.  General problem solving, influenced by PLANNER.  QA4
  6611	features merged with INTERLISP.  "QLISP - A Language for the Interactive
  6612	Development of Complex Systems", E. Sacerdoti et al, NCC 45:349-356, AFIPS
  6613	(1976).
  6614	
  6615	  2. A parallel LISP.  "Qlisp", R. Gabriel et al in Parallel Computation
  6616	and Computers for AI, J. Kowalik ed, 1988, pp.63-89.
  6617	
  6618	QLOG - An integration of logic programming into LISP.  "QLOG - The
  6619	Programming Environment for Prolog in LISP", H.J. Komorowski in Logic
  6620	Prgramming, K.L. Clark et al eds, Academic Press 1982.
  6621	
  6622	QPE - Two-dimensional pictorial query language.  "Pictorial Information
  6623	Systems", S.K. Chang et al eds, Springer 1980.
  6624	
  6625	QUEASY - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  6626	
  6627	QUEL - Query language used by the database management system INGRES.
  6628	
  6629	Quest - 
  6630	
  6631	  1. A language designed for its simple denotational semantics.  "The
  6632	Denotational Semantics of Programming Languages", R. Tennent, CACM
  6633	19(8):437-453 (Aug 1976).
  6634	
  6635	  2. Language with a sophisticated type system.  Written in Modula-3. 
  6636	"Typeful Programming", Luca Cardelli <luca@src.dec.com>, RR 45, DEC SRC
  6637	1989.
  6638	ftp:gatekeeper.dec.com:.1/DEC/Quest/quest12A.tar.Z
  6639	
  6640	QUICK - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  6641	
  6642	Quicksilver - dBASE-like compiler for MS-DOS from WordTech, Orinda, CA.
  6643	
  6644	QUIKTRAN - FORTRAN-like, interactive with debugging facilities.  Sammet
  6645	1969, p.226.
  6646	
  6647	QUIN - Pyle 1965.  Interactive language.  Sammet 1969, p.691.
  6648	
  6649	Quintec-Objects - Based on Quintec (not Quintus) Prolog.  British.
  6650	
  6651	Quty - Functional plus logic.  "Quty: A Functional Language Based on
  6652	Unification", M. Sato et al, in Conf Fifth Gen Computer Systems, ICOT 1984,
  6653	pp.157-165.
  6654	
  6655	QX - (meaning "OK", from E.E. Smith SF books).  Richard Gillmann,  SDC,
  6656	Santa Monica.  Language for digital signal processing of digitized speech. 
  6657	Was part of SDC's speech recognition project.
  6658	
  6659	Raddle - "On the Design of Large Distributed Systems", I.R. Forman, Proc
  6660	1st IEEE Intl Conf Comp Langs, pp.25-27 (Oct 1986).
  6661	
  6662	RAIL - Automatix.  High-level language for industrial robots.
  6663	
  6664	RAISE - Rigorous Approach to Industrial Software Engineering.  A
  6665	specification and design language.  ESPRIT project 315, CRI A/S, Denmark.
  6666	
  6667	RAL - Expert system.
  6668	
  6669	RAMIS II - Rapid Access Management Information System.  Database system. 
  6670	On-Line Software Intl.
  6671	
  6672	Rapidwrite - Method for translating set of abbreviations into the much more
  6673	verbose COBOL code.  Sammet 1969, p.338.
  6674	
  6675	RAPT - "An Interpreter for a Language for Describing Assemblies", R.J.
  6676	Popplestone et al, Artif Intell 14:79-107 (1980).
  6677	
  6678	RASP - "RASP - A Language with Operations on Fuzzy Sets", D.D. Djakovic,
  6679	Comp Langs 13(3):143-148 (1988).
  6680	
  6681	RATEL - Raytheon Automatic Test Equipment Language.  For analog and digital
  6682	computer controlled test centers.  "Automatic Testing via a Distributed
  6683	Intelligence Processing System", S.J. Ring, IEEE AUTOTESTCON 77 (Nov 1977).
  6684	
  6685	RATFIV - Successor to RATFOR.
  6686	
  6687	RATFOR - RATional FORTRAN.  Kernighan.  FORTRAN preprocessor to allow
  6688	programming with C-like control flow.  "Ratfor - A Preprocessor for a
  6689	Rational Fortran", B.W. Kernighan, Soft Prac & Exp 5:395-406 (Oct 1975). 
  6690	Featured in Software Tools, B.W. Kernighan & P.J. Plauger, A-W 1976.
  6691	ftp: wuarchive.wustl.edu: mirrors/unix-c/languages/ratfor.tar-z
  6692	
  6693	RAWOOP-SNAP - Early system on IBM 1103 or 1103A.  Listed in CACM 2(5):16
  6694	(May 1959).
  6695	
  6696	R:BASE - MS-DOS 4GL from Microrim.  Based on Minicomputer DBMS RIM.  Was
  6697	Wayne Erickson the author?
  6698	
  6699	RBCSP - "A Communicating Sequential Process Language and Implementation",
  6700	T. Roper & J. Barter, Soft Prac & Exp 11(11):1215-1234 (Nov 1981).
  6701	
  6702	rc - Tom Duff.  AT&T Plan 9 shell.  Lookalike by Byron Rakitzis
  6703	<byron@archone.tamu.edu>
  6704	ftp: archone.tamu.edu
  6705	
  6706	RCC - An extensible language. [?]
  6707	
  6708	RCL - Reduced Control Language.  A simplified job control language for
  6709	OS360, translated to IBM JCL.  "Reduced Control Language for Non-
  6710	Professional Users", K. Appel in Command Languages, C. Unger ed, N-H 1973.
  6711	
  6712	RDL - Requirements and Development Language.  "RDL: A Language for Software
  6713	Development", H.C. Heacox, SIGPLAN Notices 14(9):71-79 (Sep 1979).
  6714	
  6715	Real-Time Euclid - Real-time language, restriction to time-bounded
  6716	constructs.  "Real-Time Euclid: A Language for Reliable Real-Time Systems",
  6717	E. Kligerman et al, IEEE Trans Software Eng SE-12(9):941-949 (Sept 1986).
  6718	
  6719	Real-Time Mentat - An extension of C++.  "Real-Time Mentat: A Data-Driven
  6720	Object-Oriented System", A.S. Grimshaw et al, Proc IEEE Globecom, Nov 1989
  6721	pp.232-241.
  6722	
  6723	Real-Time Pascal - Later name for Pascal-80 by RC Intl, Denmark.
  6724	
  6725	REC - Regular Expression Converter.  See CONVERT.
  6726	
  6727	Recital - dBASE-like language/DBMS from Recital Corp.  Versions include
  6728	VAX/VMS.
  6729	
  6730	RECOL - REtrieval COmmand Language.  CACM 6(3):117-122 (Mar 1963).
  6731	
  6732	RED - (Also "REDL").  Intermetrics.  A language proposed to meet the
  6733	Ironman requirements which led to Ada.  "On the RED Language Submitted to
  6734	the DoD", E.W. Dijkstra, SIGPLAN Notices 13(10):27 (Oct 1978).
  6735	
  6736	REDCODE - Proposed as a language for "battle programs" in corewars.  (See
  6737	Computer Recreations column in Scientific American.)
  6738	
  6739	RediLisp - R.M. Keller, U Utah.  Dialect of Lisp used on the Rediflow
  6740	machine, a derivative of FEL.
  6741	
  6742	REDUCE - Anthony Hearn, 1963.  Symbolic math, ALGOL-like syntax, written in
  6743	LISP.  "REDUCE, Software for Algebraic Computation", G. Rayna, Springer
  6744	1987.  Version: Reduce 2, based on Portable Standard LISP.
  6745	list: REDUCE-L@DEARN.BITNET
  6746	info: reduce@rand.org
  6747	server: reduce-netlib@rand.org
  6748	
  6749	REF-ARF - "REF-ARF: A System for Solving Problems Stated as Procedures",
  6750	R.E. Fikes, Artif Intell J 1(1) (Spring 1970).
  6751	
  6752	REFINE - "Research on Knowledge-Based Software Environments at Kestrel
  6753	Institute", D.R. Smith et al, IEEE Trans Soft Eng, SE-11(11) (1985).
  6754	info: maria@kestrel.edu
  6755	
  6756	Refined C (RC) - An extension of C to directly specify data access rights
  6757	so that flow analysis, and hence automatic parallelization, is more
  6758	effective.  Research implementations only.  "Refining A Conventional
  6759	Language For Race-Free Specification Of Parallel Algorithms," H.G. Dietz et
  6760	al, Proc 1984 Intl Conf Parallel Proc, pp.380-382.
  6761	
  6762	Refined Fortran (RF) - Similar to Refined C.  Research implementations
  6763	only.  "Refined FORTRAN: Another Sequential Language for Parallel
  6764	Programming," H.G. Dietz et al, Proc 1986 Intl Conf Parallel Proc,
  6765	pp.184-191.
  6766	
  6767	REG-SYMBOLIC - Early system on IBM 704.  Listed in CACM 2(5):16 (May 1959).
  6768	
  6769	Relational Language.  Clark & Gregory.  First parallel logic language to
  6770	use the concept of committed choice.  Forerunner of PARLOG.  "A Relational
  6771	Language for Parallel Programming", K.L. Clark et al, Proc ACM Conf on
  6772	Functional Prog Langs and Comp Arch, pp.171-178, ACM 1981.
  6773	
  6774	RELATIVE - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  6775	
  6776	RELCODE - Early system on UNIVAC I or II.  Listed in CACM 2(5):16 (May
  6777	1959).
  6778	
  6779	REL English - Rapidly Extensible Language, English.  A formal language
  6780	based on English.  "Practical Natural Language Processing: The REL System
  6781	as Prototype", Adv in Computers 13, Academic Press 1975.
  6782	
  6783	RenderMan Shading Language.  "The RenderMan Companion", S. Upstill, A-W
  6784	1989, chaps 13-15.
  6785	
  6786	RENDEZVOUS - Query language, close to natural English.  "Seven Steps to
  6787	Rendezvous with the Casual User", E. Codd in Data Base Management, J.W.
  6788	Klimbie et al eds, N-H 1974, pp.179-199.
  6789	
  6790	REPL - Restricted EPL.  A subset of EPL (the efficient part) used to write
  6791	the core of Multics.
  6792	
  6793	Required-COBOL - 1961.  Minimal subset of COBOL.  Later dropped entirely. 
  6794	Sammet 1969, p.339.
  6795	
  6796	Retrieve - Tymshare Corp, 1960's.  Query language, inspired JPLDIS which
  6797	lead to Vulcan[1] and then to dBASE II.
  6798	
  6799	Revised ALGOL 60 - Alternate name for ALGOL 60 Revised.  Sammet 1969,
  6800	p.773.
  6801	
  6802	REXX - Restructured EXtended eXecutor.  Cowlishaw, IBM ca. 1979.  (Original
  6803	name: REX.  They also call it "System Product Interpreter").  Scripting
  6804	language for IBM VM and MVS systems, replacing EXEC2.  "Modern Programming
  6805	Using REXX", R.P. O'Hara et al, P-H 1985.  "The REXX Language: A Practical
  6806	Approach to Programming", M.F. Cowlishaw, 1985.  Versions: PC-Rexx for MS-
  6807	DOS, and AREXX for Amiga.
  6808	list: REXX-L@UIUCVMD.BITNET.
  6809	ftp: arexx.uwaterloo.ca:pub/freerexx    REXX interpreters for Unix
  6810	
  6811	RIGAL - Language for compiler writing.  Data strucures are atoms,
  6812	lists/trees.  Control based on pattern-matching.  "Programming Language
  6813	RIGAL as a Compiler Writing Tool", M.I. Augustson, Inst of Math and CS of
  6814	Latvia U, 1987.
  6815	
  6816	Rigel - Database language?  Based on Pascal.  Listed by M.P. Atkinson &
  6817	J.W. Schmidt in a tutorial presented in Zurich, 1989.
  6818	
  6819	RLL - Representation Language Language.  A frame language.  "A
  6820	Representation Language Language", R. Greiner and D.B. Lenat, Proc AAAI-80,
  6821	1980.
  6822	
  6823	RMAG - Recursive Macro Actuated Generator.  Robert A. Magnuson, NIH ca
  6824	1970.  Stand-alone macroprocessor for IBM 360/370 under VS or OS. Many
  6825	built-in features and a library of several hundred macros.  Several large
  6826	systems were written in RMAG to generate source code for languages such as
  6827	IBM JCL, IBM assembly language, COBOL.  There was also a system (SLANG:
  6828	Structured Language Compiler) which would generate 370 assembly language
  6829	from a pseudo-structured-programming language, based on Michael Kessler's
  6830	structure programming macros developed at IBM.  "Project RMAG--RMAG22
  6831	User's Guide", R.A. Magnuson, NIH-DCRT-DMB-SSS-UG103, NIH, DHEW, Bethesda,
  6832	MD 20205 (1977).
  6833	
  6834	ROADS - Subsystem of ICES.  Sammet 1969, p.616.
  6835	
  6836	ROBEX - ROBot EXapt.  Aachen Tech College.  Based on EXAPT.  Version:
  6837	ROBEX-M for micros.
  6838	
  6839	Roff - Text formatting language/interpreter associated with Unix.  (See
  6840	groff, nroff, troff).
  6841	
  6842	ROME - Experimental object-oriented language.  "The Point of View Notion
  6843	for Multiple Inheritance", B. Carre et al, SIGPLAN Notices 25(10):312-321
  6844	(OOPSLA/ECOOP '90) (Oct 1990).
  6845	
  6846	Rossette - MCC.  Concurrent object-oriented language.
  6847	
  6848	RPG - Report Program Generator.  IBM 1965.  For easy production of
  6849	sophisticated large system reports.  Versions: RPG II, RPG III, RPG/400 for
  6850	the IBM AS/400.  MS-DOS versions by California Software and Lattice.  (See
  6851	CL, OCL).
  6852	
  6853	RPL-1 - Data reduction language.  Proc SJCC 30:571-575, AFIPS (Spring
  6854	1967).
  6855	
  6856	RPL - Reverse Polish LISP.  Language used by HP-28 and HP-48 calculators.
  6857	
  6858	RTC++ - Real-time extension of C++.  "Object-Oriented Real-Time Language
  6859	Design: Constructs for Timing Constraints", Y. Ishikawa et al, SIGPLAN
  6860	Notices 25(10):289-298 (OOPSLA/ECOOP '90) (Oct 1990).
  6861	
  6862	RT-CDL - Real-Time Common Design Language.  Real-time language for the
  6863	design of reliable reactive systems.  "RT-CDL: A Real-Time Description
  6864	Language and Its Semantics", L.Y. Lin et al, 11th World Computer Congress
  6865	IFIP '89 pp.19-26 (Sep 1989).
  6866	
  6867	RTL - Register Transfer Language.  Chris Fraser <cwf@research.att.com> & J.
  6868	Davidson, U Arizona early 80's.  Intermediate code for a machine with an
  6869	infinite number of registers, used for machine-independent optimization. 
  6870	The GNU C compiler gcc uses a version of RTL with LISP-like syntax.  RTL is
  6871	also incorporated into Davidson's VPCC (Very Portable C compiler) at U
  6872	Virginia.
  6873	
  6874	RTL/1 - Real Time Language.  Barnes, ICI 1971.  A real-time language, the
  6875	predecessor of RTL/2.  "Real Time Languages for Process Control, J.G.P.
  6876	Barnes, Computer J 15(1):15-17 (Feb 1972).
  6877	
  6878	RTL/2 - Barnes, ICI 1972.  Small real-time language based on ALGOL 68, with
  6879	separate compilation.  A program is composed of separately compilable
  6880	'bricks' (named modules) which may be datablock, procedure, or stack.  A
  6881	stack is a storage area for use as a workspace by a task.  The language is
  6882	block-structured and weakly typed.  Simple types are byte, int, frac and
  6883	real, no Boolean.  Compound types may be formed from arrays, records and
  6884	refs (pointers).  There are no user-defined types.  Control consists of if-
  6885	then-elseif-else-end, for-to-by-do-rep, block-endblock, switch, goto, and
  6886	label variables.  "RTL/2: Design and Philosophy", J.G.P. Barnes, Hayden &
  6887	Son, 1976.
  6888	
  6889	Ruby -
  6890	
  6891	  1. Hardware description language.  "Ruby - A Language of Relations and
  6892	Higher-Order Functions", M. Sheeran, Proc 3rd Banff Workshop on Hardware
  6893	Verification, Springer 1990.
  6894	
  6895	  2. One of five pedagogical languages based on Markov algorithms, used in
  6896	"Nonpareil, a Machine Level Machine Independent Language for the Study of
  6897	Semantics", B. Higman, ULICS Intl Report No ICSI 170, U London (1968). 
  6898	(cf. Brilliant, Diamond, Nonpareil, Pearl[3]).
  6899	
  6900	RUFL - Rhodes University Functional Language.  Rhodes U, Grahamstown, South
  6901	Africa.  Miranda-like.
  6902	
  6903	RUNCIBLE - Early system for math on IBM 650.  Listed in CACM 2(5):16 (May
  6904	1959).
  6905	
  6906	RUSH - Remote Use of Shared Hardware.  ca 1966.  Interactive dialect of
  6907	PL/I, related to CPS[1].  "Introduction to RUSH", Allen-Babcock Computing
  6908	1969.  Sammet 1969, p.309.
  6909	
  6910	Russell - (named for the British mathematician Bertrand Russell (1872-
  6911	1970))  A. Demers & J. Donahue.  A compact, polymorphically typed
  6912	functional language, with bignums and continuations.  Types are themselves
  6913	first-class values and may be passsed as arguments.  "An Informal
  6914	Description of Russell", H. Boehm et al, Cornell CS TR 80-430, 1980.
  6915	ftp: parcftp.xerox.com:pub/russell/russell.tar.Z
  6916	
  6917	RUTH - Harrison <D.A.Harrison@newcastle.ac.uk>.  Real-time language based
  6918	on LispKit.  Uses timestamps and real-time clocks.  "RUTH: A Functional
  6919	Language for Real-Time Programming", D. Harrison in PARLE: Parallel
  6920	Architectures and Languages Europe, LNCS 259, Springer 1987,
  6921	pp.297-314.
  6922	
  6923	S - AT&T.  Statistical analysis.  "S: An Interactive Environment for Data
  6924	Analysis and Graphics", Richard A. Becker, Wadsworth 1984.
  6925	
  6926	S3 - ALGOL-like system language for the ICL 2900 computer.
  6927	
  6928	SAC - Early system on Datatron 200 series.  Listed in CACM 2(5):16 (May
  6929	1959).
  6930	
  6931	SAC-1 - G.E. Collins.  Early symbolic math system, written in FORTRAN. 
  6932	Proc 2nd Symp Symb Alg Manip pp.144-152 (1971).
  6933	
  6934	SAC2 - Symbolic math system, compiles to FORTRAN or Common LISP. 
  6935	<jma@poly.polytechnique.fr>
  6936	  
  6937	SAD SAM - Query language by Lindsay.  Sammet 1969, p.669.
  6938	
  6939	SAFARI - ON-line text editing system by MITRE.  Sammet 1969, p.685.
  6940	
  6941	SAIL -
  6942	
  6943	  1. Early system on Larc computer.  Listed in CACM 2(5):16 (May 1959).
  6944	
  6945	  2. Stanford Artificial Intelligence Language.  Dan Swinehart & Bob
  6946	Sproull,  Stanford AI Project, 1970.  A large ALGOL-60-like language for
  6947	the DEC-10 and DEC-20.  Its main feature is a symbolic data system based
  6948	upon an associative store (originally called LEAP).  Items may be stored as
  6949	unordered sets or as associations (triples).  Processes, events and
  6950	interrupts, contexts, backtracking and record garbage collection.  Block-
  6951	structured macros.  "Recent Developments in SAIL - An ALGOL-based Language
  6952	for Artificial Intelligence", J. Feldman et al, Proc FJCC 41(2), AFIPS
  6953	(Fall 1972).  (See MAINSAIL).
  6954	
  6955	SAINT - Symbolic Automatic INTegrator.  J. Slagle, MIT 1961.  Written in
  6956	LISP.  Sammet 1969, p.410.
  6957	
  6958	SAL - 
  6959	
  6960	  1. Single Assignment Language.
  6961	
  6962	  2. Simple Actor Language.  A minimal actor language, used for pedagogical
  6963	purposes in Actors, A Model of Concurrent Computation in Distributed
  6964	Systems, G. Agha, MIT Press 1986.
  6965	
  6966	SALEM - "SALEM - A Programming System for the Simulation of Systems
  6967	Described by Partial Differential Equations", S.M. Morris et al, Proc SJCC
  6968	33(1), 1968.
  6969	
  6970	S-Algol - Orthogonal data structures on Algol-60.  "S-Algol Language
  6971	Reference Manual", R. Morrison, TR CS/79/1 U St Andrews, 1979.  "An
  6972	Introduction to Programming with S-Algol", A.J. Cole & R. Morrison,
  6973	Cambridge U Press 1982.
  6974	
  6975	SALT -
  6976	
  6977	  1. Symbolic Assembly Language Trainer.  Assembly-like language
  6978	implemented in BASIC by Kevin Stock, now at Encore in France.
  6979	
  6980	  2. Sam And Lincoln Threaded language.  A threaded extensible variant of
  6981	BASIC.  "SALT", S.D. Fenster et al, BYTE (Jun 1985) p.147.
  6982	
  6983	SAM76 - Claude Kagan.  Macro language, a descendant of TRAC.  Version for
  6984	CP/M.  Dr Dobbs J ca 1977.
  6985	
  6986	Sandman - DoD requirements that led to APSE.
  6987	
  6988	SAP - Symbolic Assember Program.  IBM 704 assembly language, late 50's.
  6989	
  6990	SAS - Statistical Analysis System.  Statistical and matrix language,
  6991	PL/I-like syntax.  "A User's Guide to SAS", A.J. Barr, SAS Inst 1976.
  6992	
  6993	SASL - Saint Andrews Static Language.  Turner, 1976.  A derivative of ISWIM
  6994	with infinite data structures.  Fully lazy and weakly typed.  Designed for
  6995	teaching functional programming, with very simple syntax.  A version of the
  6996	expert system EMYCIN has been written in SASL.  "A New Implementation
  6997	Technique for Applicative Languages", D.A. Turner, Soft Prac & Exp 8:31-49
  6998	(1979).
  6999	ftp: a.cs.uiuc.edu:/uiuc/kamin.distr/distr/sasl.p
  7000	
  7001	SASL+LV - Unifies logic and functional programming.  A more complete
  7002	version of FGL+LV, in SASL syntax.  "Combinator Evaluations of Functional
  7003	Programs with Logical Variables", G. Bage et al, TR UUCS-87-027, U Utah,
  7004	Oct 1987.
  7005	
  7006	SASL-YACC - Simon Peyton-Jones.  A version of Yacc written in SASL. [?]
  7007	
  7008	Sather - (named for the Sather Tower at UCB, as opposed to the Eiffel
  7009	Tower)  Steve M. Omohundro, ICSI, Berkeley.  Eiffel-like, but smaller and
  7010	faster.  Clean and simple syntax, parameterized classes, multiple
  7011	inheritance, strong typing, garbage collection.  Compiles to C code.
  7012	ftp: icsi-ftp.berkeley.edu
  7013	list: sather-admin@icsi.berkeley.edu
  7014	
  7015	SB-Prolog - Stony Brook Prolog.  PD Prolog implementation for Unix.
  7016	ftp: sbcs.sunysb.edu: pub/sbprolog/v3.0
  7017	     ux1.cso.uiuc.edu: amiga/fish/ff140 and ff141  Version 2.3.2 for Amiga
  7018	
  7019	SCAN - 
  7020	
  7021	  1. "A Parallel Implementation of the SCAN Language", N.G. Bourbakis, Comp
  7022	Langs 14(4):239-254 (1989).
  7023	
  7024	  2. DEC. A real-time language.  [same as 1?]
  7025	
  7026	SCEPTRE - Designing and analyzing circuits.  "SCEPTRE: A Computer Program
  7027	for Circuit and Systems Analysis", J.C. Bowers et al, P-H 1971.
  7028	
  7029	Scheme - G.L. Steele & G.J. Sussman, 1975.  A LISP dialect, small and
  7030	uniform, with clean semantics.  Scheme is applicative-order and lexically
  7031	scoped, and treats both functions and continuations as first-class objects. 
  7032	"The Revised^4 Report on the Algorithmic Language Scheme", W. Clinger et
  7033	al, MIT (Nov 1991) (ftp from altdorf.ai.mit.edu).
  7034	Implementations: Scheme84 (Indiana U), MacScheme (Semantic Microsystems),
  7035	PC Scheme (TI).  (See T).
  7036	"Orbit: An Optimizing Compiler for Scheme", D.A. Kranz et al, SIGPLAN
  7037	Notices 21(7):281-292 (Jul 1986).
  7038	ftp: altdorf.ai.mit.edu:archive/scm/scm4a2.tar.Z (SCM, Aubrey Jaffer       
  7039	         <jaffer@zurich.ai.mit.edu>) in C for Amiga, Atari-ST, Mac, MS-DOS, 
  7040	         NOS/VE, VMS, Unix.  Conforms to Revised^4 Report and IEEE P1178
  7041	     altdorf.ai.mit.edu:archive/scheme-7.1 (MIT-Scheme, Liar compiler)
  7042	     gatekeeper.dec.com:pub/comp.sources.misc/volume8/elk (for Suns)
  7043	     acorn.cs.brandeis.edu:dist/gambit1.51-tar.Z (compiler for 68K's)
  7044	     world.std.com:/src/lisp/siod-v2.8-shar (Scheme In One Defun, George   
  7045	         Carrette <gjc@mitech.com>)
  7046	list: scheme@mc.lcs.mit.edu
  7047	repository: nexus.yorku.ca:pub/scheme
  7048	
  7049	Scheme-Linda - Ulf Dahlen, U Edinburgh, 1990.  On the Computing Surface and
  7050	the Symmetry.  "Scheme-Linda", U. Dahlen et al, EPCC-TN-90-01 Edinburgh
  7051	1990.
  7052	
  7053	Schoonschip - (Dutch for "beautiful ship")  M. Veltman, CERN, 1964. 
  7054	Symbolic math, especially High Energy Physics.  Algebra only, no
  7055	derivatives.  Originally implemented in CDC-6600 and 7600 assembly
  7056	language, currently in 680x0 assembly language.  Latest versions (Oct 1991)
  7057	include Amiga, Atari ST, Sun 3/60, NeXT.
  7058	info: David Williams <dnw@williams.physics.lsa.umich.edu>
  7059	ftp: archive.umich.edu:physics/schip
  7060	
  7061	SCL - Systems Control Language.  ICL2900 VME/B O/S command shell.  Block
  7062	structured, strings, superstrings (lists of strings), int, bool, array
  7063	types.  Can trigger a block whenever a condition on a variable value
  7064	occurs.  Macros supported.  Commands are treated like procedure calls. 
  7065	Default arguments.  "VME/B SCL Syntax", Intl Computers Ltd 1980.
  7066	
  7067	Scode - Internal representation used by the Liar compiler for MIT Scheme.
  7068	
  7069	SCOOP - Structured Concurrent Object-Oriented Prolog.  "SCOOP, Structured
  7070	Concurrent Object-Oriented Prolog", J. Vaucher et al, in ECOOP '88, S.
  7071	Gjessing et al eds, LNCS 322, Springer 1988, pp.191-211.
  7072	 
  7073	SCOOPS - Scheme Object-Oriented Programming System.  TI, 1986.  Multiple
  7074	inheritance, class variables.
  7075	ftp: altdorf.ai.mit.edu:archive/scheme-library/unsupported/CScheme
  7076	
  7077	Scratchpad I - Richard Jenks, Barry Trager, Stephen M. Watt & Robert S.
  7078	Sutor, IBM Research, ca 1971.  General-purpose language originally for
  7079	interactive symbolic math.  It features abstract parametrized datatypes,
  7080	multiple inheritance and polymorphism.  Implementations for VM/CMS and AIX. 
  7081	"Scratchpad User's Manual", RA 70, IBM (June 1975).  Version: Scratchpad
  7082	II.  "Scratchpad II Programming Language Manual", R.D. Jenks et al, IBM,
  7083	1985.  (See AXIOM.)
  7084	Scratchpad II Newsletter: Computer Algebra Group, TJWRC, Box 218, Yorktown
  7085	Hts, NY 10598.
  7086	
  7087	Screenwrite - Simple query language.  Honeywell late 70's, Level 6 minis.
  7088	
  7089	Scribe - Brian Reid.  A text-formatting language.
  7090	
  7091	SCRIPT - 
  7092	
  7093	  1. Early system on IBM 702.  Listed in CACM 2(5):16 (May 1959).
  7094	
  7095	  2. Real-time language.  "A Communication Abstraction Mechanism and its
  7096	Verification", N. Francez et al, Sci Comp Prog 6(1):35-88 (1986).
  7097	
  7098	SCROLL - String and Character Recording Oriented Logogrammatic Language. 
  7099	"SCROLL - A Pattern Recording Language", M. Sargent, Proc SJCC 36 (1970).
  7100	
  7101	SDL -
  7102	
  7103	  1. System Software Development Language.  System software for the B1700. 
  7104	"System Software Development Language Reference Manual", 1081346, Burroughs
  7105	Corp (Dec 1974).
  7106	
  7107	  2. Specification and Description Language.  CCITT.  Specification
  7108	language for discrete interactive systems such as industrial process
  7109	control or traffic control.  Said to have a visual component?  Proc Plenary
  7110	Assembly, Melbourne 14-25 Nov 1988, Fasc X.1, CCITT.   "Telecommunications
  7111	Systems Engineering Using SDL", R. Saracco et al, N-H 1989.  (See XDL).
  7112	
  7113	  3. Shared Dataspace Language.  "A Shared Dataspace Language Supporting
  7114	Large-Scale Concurrency", G. Roman et al, Proc 8th Intl Conf Distrib Comp
  7115	Sys, IEEE 1988, pp.265-272.
  7116	
  7117	  4. Structure Definition Language.  A tool used internally by DEC to
  7118	define and generate the symbols used for VMS internal data structures in
  7119	various languages.
  7120	
  7121	SDMS - Query language.
  7122	
  7123	Sed - Stream editor.  The Unix stream editor.
  7124	
  7125	SEESAW - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  7126	
  7127	Sel - 
  7128	
  7129	  1. Self-Extensible Language.  "SEL - A Self-Extensible Programming
  7130	Language", G. Molnar, Computer J 14(3):238-242 (Aug 1971).
  7131	
  7132	  2. Bharat Jayaraman.  "Towards a Broader Basis for Logic Programming", B.
  7133	Jayaraman, TR CS Dept, SUNY Buffalo, 1990.  "Set Abstraction in Functional
  7134	and Logic Programming", F.S.K. Silbermann <fs@cs.tulane.edu> et al, ACM
  7135	Proc [?] 1989.
  7136	
  7137	Self - Small, dynamically-typed object-oriented language, based purely on
  7138	prototypes and delegation.  Allows objects to inherit state, and to
  7139	dynamically change their patterns of inheritance.  Threads.  "Self: The
  7140	Power of Simplicity", David Ungar <ungar@sun.eng.com> et al, SIGPLAN
  7141	Notices 22(12):227-242 (OOPSLA '87) (Dec 1987).  Version: 2.0
  7142	ftp: self.stanford.edu
  7143	list: self-interest@self.stanford.edu
  7144	request: self-request@self.stanford.edu
  7145	
  7146	Seneca - R. Griesemer, 1990.  Descendant of Oberon designed for numerical
  7147	applications on supecomputers, especially vector or pipelined
  7148	architectures.  Includes a standard COMPLEX type and special aray
  7149	expressions.  Still under development.  "Seneca - A Language for Numerical
  7150	Applications on Vectorcomputers", Proc CONPAR 90 - VAPP IV Conf.
  7151	
  7152	SEPIA - Standard ECRC Prolog Integrating Applications.  Prolog with many
  7153	extensions including attributed variables ("metaterms") and declarative
  7154	coroutining.  "SEPIA", Micha Meier <micha@ecrc.de> et al, TR-LP-36 ECRC,
  7155	March 1988.  Version 3.1 available for Suns and VAX.  (See ECRC-Prolog).
  7156	info: sepia-request@ecrc.de
  7157	
  7158	Seque - "Seque: A Programming Language for Manipulating Sequences", R.E.
  7159	Griswold et al, Comp Langs 13(1):13-22 (1988).
  7160	
  7161	Sequel - Precursor to SQL.  "System R: Relational Approach to Database
  7162	Management", IBM Res Lab, San Jose, reprinted in Readings in Database
  7163	Systems.
  7164	
  7165	SETL - SET Language.  Courant Inst, early 70's.  A very high level
  7166	set-oriented language.  Data types include sets (unordered collections),
  7167	tuples (ordered collections) and maps (collections of ordered pairs). 
  7168	Expressions may include quantifiers ('for each' and 'exists').  The first
  7169	Ada translator was written in SETL.  "Programming With Sets - An
  7170	Introduction to SETL", Jacob T. Schwartz et al, Springer 1986.
  7171	
  7172	SETL2 - SETL with more conventional Ada-like syntax, lexical scoping, full
  7173	block structure, first-class functions and a package and library system. 
  7174	Kirk Snyder <snyder@spunky.cs.nyu.edu>.  "The SETL2 Programming Language",
  7175	W. Kirk Snyder, Courant Inst TR 490, Jan 1990.
  7176	ftp: cs.nyu.edu, for MS-DOS, OS/2, Mac, Unix workstations
  7177	
  7178	SETL/E - U Essen.  Another derivative of SETL with Ada-like syntax. 
  7179	"SETL/E, A Prototyping System Based on Sets", E.E. Doberkat et al, in
  7180	Tagungsband TOOL90, W. Zorn ed, pp.109-118, U Karlsruhe, Nov 1990.
  7181	
  7182	SETS - Set Equation Transformation System.  Symbolic manipulation of
  7183	Boolean equations.  "Efficient Ordering of Set Expressions for Symbolic
  7184	Expansion", R.G. Worrell et al, J ACM 20(3):482-488 (Jul 1973).
  7185	
  7186	SEXI - String EXpression Interpreter.  Early name of SNOBOL.
  7187	
  7188	SFD-ALGOL - System Function Description-ALGOL.  Extension of ALGOL for
  7189	synchronous systems.  Sammet 1969, p.625.
  7190	
  7191	SFL - "SFL Language Definition Manual", TR 6413, Intl Computers Ltd.
  7192	
  7193	SFLV - Unifies logic and functional programming.  SASL+LV with unification
  7194	moved from actual/formal parameter matching to equational clauses.  "Static
  7195	Analysis of Functional Programs with Logical Variables", G. Lindstrom in
  7196	Programming Languages Implementation and Logic Programming, P. Deransart et
  7197	al eds, LNCS 348, Springer 1988.
  7198	
  7199	SGML - Standard Generalized Markup Language.  "SGML - The User's Guide to
  7200	ISO 8879", J.M. Smith et al, Ellis Harwood, 1988.  ISO/IEC 8879-1986.
  7201	ftp: star.cs.vu.nl:Sgml  an SGML parser
  7202	     mailer.cc.fsu.edu:pub/sgml  another SGML parser
  7203	
  7204	sh - (or "Shellish").  S.R. Bourne.  Command shell interpreter and script
  7205	language for Unix.  "Unix Time-Sharing System: The Unix Shell", S.R.
  7206	Bourne, Bell Sys Tech J 57(6):1971-1990 (Jul 1978).
  7207	
  7208	SHACO - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  7209	
  7210	SHADOW - Barnett & Futrelle, 1962.  Syntax-directed compiler.  Predecessor
  7211	to SNOBOL?  Sammet 1969, p.448, 605.
  7212	
  7213	Sharp APL - "A Dictionary of the APL Language", K. Iverson, Pub 0402, Sharp
  7214	Assocs, Toronto, 1985.
  7215	ftp: watserv1.waterloo.edu:languages/apl/sharp.apl
  7216	
  7217	SHEEP - Symbolic math, especially tensor analysis and General Relativity. 
  7218	Inge Frick, Stockholm, late 70's to early 80's.  Implemented in DEC-10
  7219	assembly language, then in several LISPs.  Current version for Sun-3, based
  7220	on Portable Standard LISP.
  7221	info: Tevian Dray <tevian@math.ors.edu>
  7222	
  7223	SHELL - Early system on Datatron 200 series.  Listed in CACM 2(5):16 (May
  7224	1959).
  7225	
  7226	Short Code or SHORTCODE - John Mauchly, 1949.  Pseudocode interpreter for
  7227	math problems, on Eckert and Mauchly's BINAC, later on UNIVAC I and II. 
  7228	Possibly the first attempt at a higher level language.  Sammet 1969, p.129.
  7229	
  7230	Show-And-Tell - Visual dataflow language designed for use by elementary
  7231	school children.  "A Visual Language for Keyboardless Programming", T.
  7232	Kimura et al, TR WUCS-86-6, CS Dept Washington U, Mar 1986.  "Show and
  7233	Tell: A Visual Language", T.D. Kimura et al in Visual Programming
  7234	Environments: Paradigms and Systems, E.P. Glinert ed, IEEE Comp Sci Press,
  7235	1990, pp.397-404.
  7236	
  7237	SICStus Prolog - SICS (Swedish Inst of Comp Sci), Sweden.
  7238	info: sicstus-request@sics.se
  7239	list: sicstus-users@sics.se
  7240	
  7241	SIFT - SHARE Internal FORTRAN Translator.  Translation utility designed for
  7242	converting FORTRAN II to FORTRAN IV.  The word "sift" was often used as a
  7243	verb to describe converting code from one language to another.  Sammet
  7244	1969, p.153.
  7245	
  7246	Sig - Signal Processing, Analysis, and Display program.  This is an
  7247	environment with an associated programming language. Jan Carter, Argonne
  7248	Natl Lab, (312)972-7250.
  7249	
  7250	SIGLA - SIGma LAnguage.  Olivetti.  Language for industrial robots. 
  7251	"SIGLA: The Olivetti Sigma Robot Programming Language", M. Salmon, Proc 8th
  7252	Intl Symp on Industrial Robots, 1978, pp.358-363.
  7253	
  7254	SIGNAL - Synchronous language.  Le Guernic et al, INRIA.  "SIGNAL - A Data
  7255	Flow-Oriented Language for Signal Processing," P. le Guernic, IEEE Trans
  7256	Acoustics Speech & Signal Proc, ASSP-34(2):362-374 Apr 1986.
  7257	
  7258	SIL - "SIL - A Simulation Language", N. Houbak, LNCS 426, Springer 1990.
  7259	
  7260	Sil/2 - Language for implementation of portable interpreters.  "The Design
  7261	of Transportable Interpreters", F. Druseikis, SNOBOL4 Project Document
  7262	S4D49, U Arizona (Feb 1975).
  7263	
  7264	Silage - Synchronous DSP specification language.  "Silage Reference Manual,
  7265	Draft 1.0", D.R. Genin & P.N. Hilfinger,  Silvar-Lisco, Leuven 1989.
  7266	
  7267	Simone - A. Hoare et al.  Simulation language based on Pascal. 
  7268	"Quasiparallel Programming", W.H. Kaubisch et al, Soft Prac & Exp 6:341-356
  7269	(1976).
  7270	
  7271	SIMPLE - Early system on Datatron 200 series.  Listed in CACM 2(5):16 (May
  7272	1959).
  7273	
  7274	SIMPL-T - Base language for a family of languages and compilers. 
  7275	"SIMPL-T, A Structured Programming Language", V.R. Basili, Paladin House
  7276	1976.
  7277	
  7278	SIMSCRIPT - Rand Corp 1963.  Large discrete simulations, influenced Simula. 
  7279	"SIMSCRIPT: A Simulation Programming Language", P.J. Kiviat et al, CACI
  7280	1973.  Versions: SIMSCRIPT I.5, SIMSCRIPT II, SIMSCRIPT II.5.  CACI,
  7281	(619)457-9681.
  7282	
  7283	SIMULA - SIMUlation LAnguage.  Kristen Nygaard & Ole-Johan Dahl, designed
  7284	1962, implemented 1964.  Extension to ALGOL for discrete simulation. 
  7285	Sammet 1969, p.659.
  7286	
  7287	SIMULA 67 - Introduced the class concept, leading the way to data
  7288	abstraction and object-oriented programming.  Also coroutines.  Simula
  7289	a.s., Postboks 4403 - Torshov, N-0402 Oslo 4, Norway, versions for DOS,
  7290	OS/2 and UNIX/386.
  7291	ftp: rascal.ics.utexas.edu, Mac version
  7292	
  7293	Simulating Digital Systems - FORTRAN-like language for describing computer
  7294	logic design.  Sammet 1969, p.622.
  7295	
  7296	SINA - "An Implementation of the Object-Oriented Concurrent Programming
  7297	Language SINA", A. Tripathi et al, Soft Prac & Exp 19(3):235-256 (1989).
  7298	
  7299	SIPLAN - SIte PLANning computer language.  Interactive language for space
  7300	planning.  "Formal Languages for Site Planning", C.I. Yessios in Spatial
  7301	Synthesis for Computer-Aided Design, C. Eastman ed, Applied Science Publ
  7302	1976.
  7303	
  7304	Siprol - Signal Processing Language.  A DSP language.  "SIPROL: A High
  7305	Level Language for Digital Signal Processing", H. Gethoffer, Proc
  7306	ICASSP-80, 1980, pp.1056-1059.
  7307	
  7308	SIR - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  7309	
  7310	Siri - Horn <Bruce.Horn@n3.sp.cs.cmu.edu>, CMU 1991.  Object-oriented
  7311	constraint language using a single abstraction mechanism.  A conceptual
  7312	blend of BETA and Bertrand.  Similar to Kaeidoscope.  "Constraint Patterns
  7313	as a Basis for Object-Oriented Constraint Programming", B. Horn, OOPSLA '92
  7314	(Sept 1992).
  7315	
  7316	SISAL - Streams and Iteration in a Single Assignment Language.  James
  7317	McGraw et al, U Manchester, Lawrence Livermore, DEC and CSU 1983.  Single
  7318	assignment language with strict semantics, automatic parallelization,
  7319	efficient execution.  Outputs a dataflow graph in IF1 (Intermediary Form
  7320	1).  Derived from VAL, adds recursion and finite streams.  Pascal-like
  7321	syntax.  Designed to be a common high-level language for numerical programs
  7322	on a variety of multiprocessors.  "A Report on the SISAL Language Project",
  7323	J.T. Feo et al, J Parallel and Distrib Computing 10(4):349-366 (Dec 1990). 
  7324	Implementations exist for Cray X-MP, Y-MP, Cray-2, Sequent, Encore Alliant,
  7325	dataflow architectures, transputers and systolic arrays.
  7326	contact: David Cann <cann@lll-crg.llnl.gov>, Rod Oldehoeft
  7327	<rro@cs.colostate.edu>.
  7328	ftp: sisal.llnl.gov:pub/sisal
  7329	
  7330	Sketchpad - I. Sutherland, 1963.  Computer-aided design.  Constraints using
  7331	value inference.  Introduced the "ring" list structure.  "Sketchpad: A Man-
  7332	Machine Graphical Communication System", I.E. Sutherland, MIT Lincoln Lab,
  7333	TR 296 (Jan 1963).  Sammet 1969, p.678.
  7334	
  7335	Skim - Alain Deutsch <deutsch@poly.polytechnique.fr> et al, France.  Scheme
  7336	implementation with packages and other enhancements.
  7337	
  7338	SKOL - FORTRAN pre-processor for COS (Cray Operating System).
  7339	
  7340	SL5 - String and list processing language with expression-oriented syntax. 
  7341	Coroutines.  "An Overview of SL5", Ralph E. Griswold, SIGPLAN Notices
  7342	12(4):40-50 (Apr 1977).
  7343	
  7344	SLANG - 
  7345	
  7346	  1. R.A. Sibley.  CACM 4(1):75-84 (Jan 1961).
  7347	
  7348	  2. Set LANGuage.  Jastrzebowski, ca 1990.  A C extension with set-
  7349	theoretic data types and garbage collection.  "The SLANG Programming
  7350	Language Reference Manual, Version 3.3", W. Jastrzebowski
  7351	<wojtek@loml.math.yale.edu>, 1990.
  7352	
  7353	  3. Structured LANGuage.  Michael Kessler, IBM.  A language based on
  7354	structured programming macros for IBM 370 assembly language.  "Project
  7355	RMAG: SLANG (Structured Language) Compiler", R.A. Magnuson, NIH-
  7356	DCRT-DMB-SSS-UG105, NIH, DHEW, Bethesda, MD 20205 (1980).
  7357	
  7358	  4. "SLANG: A Problem Solving Language for Continuous-Model Simulation and
  7359	Optimization", J.M. Thames, Proc 24th ACM Natl Conf 1969.
  7360	
  7361	  5. Embedded language in the JED editor.
  7362	info: John E. Davis <davis@amy.tch.harvard.edu>
  7363	
  7364	SLIM - A VLSI language for translating DFA's into circuits.  J.L. Hennessy,
  7365	"SLIM: A Simulation and Implementation Language for VLSI Microcode",
  7366	Lambda, Apr 1981, pp.20-28.
  7367	
  7368	SLIP - Symmetric LIst Processsor.  J. Weizenbaum, early-60's.  List
  7369	processing subroutine package for FORTRAN, later also embedded in MAD and
  7370	ALGOL.  "Symmetric List Processor", J. Weizenbaum CACM 6:524-544(1963). 
  7371	Sammet 1969, p.387.
  7372	
  7373	SLIPS - "An Interpreter for SLIPS - An Applicative Language Based on
  7374	Lambda-Calculus", V. Gehot et al, Comp Langs 11(1):1-14 (1986).
  7375	
  7376	SLLIC - Intermediate language developed at HP.  An infinite-register
  7377	version of the Precision Architecture instruction set?
  7378	
  7379	Sloop - "Parallel Programming in a Virtual Object Space", S. Lucco, SIGPLAN
  7380	Notices 22(12):26-34 (OOPSLA '87) (Dec 1987).
  7381	
  7382	SMALGOL - SMall ALGOL.  Subset of ALGOL 60.  "SMALGOL-61", G.A. Bachelor et
  7383	al CACM 4(11):499-502 (Nov 1961).  Sammet 1969.
  7384	
  7385	SMALL - 
  7386	
  7387	  1. Functional, lazy, untyped.  "SMALL - A Small Interactive Functional
  7388	System", L. Augustsson, TR 28, U Goteborg and Chalmers U, 1986.
  7389	
  7390	  2. A toy language used to illustrate denotational semantics.  "The
  7391	Denotational Description of Programming Languages", M.J.C. Gordon, Springer
  7392	1979.
  7393	
  7394	Small-C - A subset of C.  Compiler source in C producing 8080 code in Dr
  7395	Dobb's J, May 1980 and Dec 1982.  "The Small-C Handbook," James Hendrix,
  7396	Reston 1984.
  7397	ftp: apple.com:ArchiveVol1/unix_lang
  7398	
  7399	Smalltalk - Software Concepts Group, Xerox PARC, led by Alan Kay, early
  7400	70's.  Took the concepts of class and message from Simula-67 and made them
  7401	all-pervasive, the quintessential object-oriented language.  Innovations
  7402	included the bitmap display, windowing system and use of mouse.  Early
  7403	versions: Smalltalk-72, Smalltalk-74, Smalltalk-76 (inheritance taken from
  7404	Simula, and concurrency), and Smalltalk-78.  "The Smalltalk-76 Programming
  7405	System Design and Implementation", D.H. Ingalls, 5th POPL, ACM 1978, pp.9-
  7406	16.
  7407	
  7408	Smalltalk-80 - "Smalltalk-80: The Language and Its Implementation" ("The
  7409	Blue Book"), Adele Goldberg et al, A-W 1983.  BYTE 6(8) (Aug 1981).
  7410	archive: st.cs.uiuc.edu:pub/ISA
  7411	ftp: prep.ai.mit.edu:pub/gnu  GNU Smalltalk v1.1
  7412	archive: st.cs.uiuc.edu:pub/MANCHESTER
  7413	mail server: goodies-lib@r5.cs.man.ac.uk
  7414	
  7415	Smalltalk/V - First widely available version of Smalltalk, for PC, Mac. 
  7416	Digitalk, 1986.
  7417	
  7418	SmallWorld - Object-oriented language.  "SW 2 - An Object-based Programming
  7419	Environment", M.R. Laff et al, IBM TJWRC, 1985.
  7420	
  7421	SMART - For MS-DOS?
  7422	
  7423	SMIL - Machine language for a Swedish computer.
  7424	ftp: wuarchive.wustl.edu:mirrors/info-mac/lang/smil-emulator.hqx
  7425	
  7426	SML - 
  7427	
  7428	 1. Standard ML.  R. Milner <rm@lfcs.edinburgh.ac.uk> ca. 1984.  Aimed to
  7429	unify the dialects of ML, has evolved into a robust general-purpose
  7430	language.  Functional, with imperative features.  Environment based,
  7431	strict.  Adds to ML the call-by-pattern of Hope, recursive data types,
  7432	reference types, typed exceptions, and modules.  (The "core" language
  7433	excludes the modules.)  "A Proposal for Standard ML", R. Milner, ACM Symp
  7434	on LISP and Functional Prog 1984, pp.184-197.
  7435	Implementations:
  7436	  SML/NJ - Standard ML of New Jersey, Version 0.75 ftp: cs.yale.edu:pub/ml
  7437	and research.att.com:dist/ml
  7438	  POPLOG ML - U Sussex.  For the Poplog system.
  7439	  Poly/ML - Implemented in Poly[1], for MC68020 and SPARC.  Abstract
  7440	Hardware Ltd <ahl@ahl.co.uk>.
  7441	  Edinburgh SML - Core language only.  Byte-code interpreter in C.
  7442	info: <lfcs@ed.ac.uk>
  7443	ftp: ftp.informatik.uni-muenchen.de:/pub/sml/ibmpc   EdML V 0.44
  7444	  ANU ML - Aust Natl U.  For MC68020, VAX and Pyramid.
  7445	  Micro ML - U Umea, Sweden.  Interpreter of an ML subset, for MS-DOS.
  7446	list: sml-request@cs.cmu.edu
  7447	ftp: sbcs.sunysb.edu, a lazy version
  7448	  sml2c - portable, written in SML.  Language extensions include first-
  7449	class continuations, asynchronous signal handling.
  7450	info: <david.tarditi@cs.cmu.edu>
  7451	ftp: dravido.soar.cs.cmu.edu:/usr/nemo/sml2c:sml2c.tar.Z
  7452	
  7453	  2. Small Machine Language.  Barnes, ICI 1969.  Real-time language, an
  7454	ALGOL variant, and the predecessor of RTL.  "SML User's Guide", J.G.P.
  7455	Barnes, ICI, TR JGPB/69/35 (1969).
  7456	
  7457	SML/NJ - Standard ML of New Jersey.  An implementation of SML by Andrew
  7458	Appel at Princeton <Appel@princeton.edu> and Dave MacQueen at AT&T
  7459	<dbm@research.att.com>.  "Standard ML of New Jersey", A. Appel et al, "Proc
  7460	Third Intl Symp on Prog Lang Impl and Logic Programming", LNCS Springer
  7461	1991.  Versions for Unix, Mac
  7462	ftp: research.att.com
  7463		
  7464	SMoLCS - Specification metalanguage used for a formal definition of Ada. 
  7465	"An Introduction to the SMoLCS Methodology", E. Astesiano, U Genova 1986.
  7466	
  7467	SMP - Steven Wolfram's earlier symbol manipulation program, before he
  7468	turned to Mathematica.  "SMP Handbook", C. Cole, S. Wolfram et al, Caltech
  7469	1981.
  7470	
  7471	SNAP - 
  7472	
  7473	  1. Early interpreted text-processing language for beginners, close to
  7474	basic English.  "Computer Programming in English", M.P. Barnett, Harcourt
  7475	Brace 1969.
  7476	
  7477	  2. "Some Proposals for SNAP, A Language with Formal Macro Facilities",
  7478	R.B. Napper, Computer J 10(3):231-243 (1967). [same as 1?]
  7479	
  7480	SNOBOL - StriNg Oriented symBOlic Language.  David Farber, Ralph Griswold &
  7481	I. Polonsky, Bell Labs 1962-3.  String processing language for text and
  7482	formula manipulation.  "SNOBOL, A String Manipulating Language", R.
  7483	Griswold et al, J ACM 11(1):21 (Jan 1964).
  7484	
  7485	SNOBOL3 - 1965.  SNOBOL with user-defined functions.  "The SNOBOL3
  7486	Programming Language", D.J. Farber et al, Bell Sys Tech J 45(6):895-944
  7487	(Jul 1966).
  7488	
  7489	SNOBOL4 - Griswold et al, 1967.  Quite distinct from its predecessors. 
  7490	Declarative with dynamic scope.  Patterns are first-class data objects that
  7491	can be constructed by concatenation and alternation.  Success and failure
  7492	used for flow control.  Delayed (unevaluated) expressions can be used to
  7493	implement recursion.  Table data type.  Strings generated at run-time can
  7494	be treated as programs and executed.  "The SNOBOL4 Programming Language",
  7495	Ralph E. Griswold et al, P-H 1971.
  7496	ftp: apple.com:ArchiveVol1/unix_lang
  7497	
  7498	FASBOL - "FASBOL. A SNOBOL4 Compiler", P.J. Santos, Memo ERL-M134, UC
  7499	Berkeley 1971.
  7500	
  7501	SITBOL - "SITBOL Version 3.0", J.F. Gimpel, TRS4D30b, Bell Labs 1973.
  7502	
  7503	SNOOPS - Craske, 1988.  An extension of SCOOPS with meta-objects that can
  7504	redirect messages to other objects.  "SNOOPS: An Object-Oriented language
  7505	Enhancement Supporting Dynamic Program Reeconfiguration", N. Craske,
  7506	SIGPLAN Notices 26(10): 53-62 (Oct 1991).
  7507	
  7508	SO 2 - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  7509	
  7510	SOAP - Symbolic Optimal Assembly Program.  IBM 650 assembly language. 
  7511	"Optimal" refers to rearranging instructions on slowly rotating drum
  7512	memory.  Listed in CACM 2(5):16 (May 1959). Versions: SOAP I, SOAP II, CASE
  7513	SOAP III.
  7514	
  7515	SOAR - State, Operator And Result.  A. Newell, early 80's.  A general
  7516	problem-solving production system architecture, intended as a model of
  7517	human intelligence.  Originally implemented in LISP and OPS5, currently in
  7518	Common Lisp.  "Soar: An Architecture for General Intelligence", J.E. Laird
  7519	et al, Art Intell 33(1) (1987).  Version: Soar6
  7520	info: soar@cs.cmu.edu
  7521	doc: soar-doc@cs.cmu.edu
  7522	
  7523	SOCRATIC - [Not a language?]  Bolt, Beranek & Newman.  Early interactive
  7524	learning system.  Sammet 1969, p.702.
  7525	
  7526	SODAS - D.L. Parnas & J.A. Darringer.  Proc FJCC 31:449-474, AFIPS (Fall
  7527	1967).
  7528	
  7529	SOHIO - Early system on IBM 705.  Listed in CACM 2(5):16 (May 1959).
  7530	
  7531	SOL - 
  7532	
  7533	  1. Simulation Oriented Language.  Discrete simulation.  Sammet 1969,
  7534	p.656.
  7535	
  7536	  2. Second-Order Lambda calculus.  A typed lambda calculus.  "Abstract
  7537	Types have Existential Type", J. Mitchell et al, 12th POPL, ACM 1985,
  7538	pp.37-51.
  7539	
  7540	Solve - Parallel object-oriented language.  "Message Pattern
  7541	Specifications: A New Technique for Handling Errors in Parallel Object-
  7542	Oriented Systems", J.A. Purchase et al, SIGPLAN Notices 25(10):116-125
  7543	(OOPSLA/ECOOP '90) (Oct 1990).
  7544	
  7545	SP - Simplicity and Power.  Prolog-like.  "Simplicity and Power -
  7546	Simplifying Ideas in Computing", J.G. Wolff, Computer J 33(6):518-534 (Dec
  7547	1990).
  7548	
  7549	SPADE - Specification Processing And Dependency Extraction.  Specification
  7550	language.  G.S. Boddy, ICL Mainframes Div, FLAG/UD/3DR.003
  7551	
  7552	SPAR - Early system on Datatron 200 series.  Listed in CACM 2(5):16 (May
  7553	1959).
  7554	
  7555	SPARKS - FORTRAN superset, used in Fundamentals of Data Structures, E.
  7556	Horowitz & S. Sahni, Computer Science Press 1976.
  7557	
  7558	Speakeasy - Simple array-oriented language with numerical integration and
  7559	differentiation, graphical output, aimed at statistical analysis. 
  7560	"Speakeasy", S. Cohen, SIGPLAN Notices 9(4), (Apr 1974).  "Speakeasy-3
  7561	Reference Manual", S. Cohen et al. 1976.
  7562	
  7563	Spec - Specification language.  Expresses black-box interface
  7564	specifications for large distributed systems with real-time constraints. 
  7565	It incorporates conceptual models, inheritance and the event model.  A
  7566	descendant of MSG.84.  "An Introduction to the Specification Language
  7567	Spec", V. Berzins et al, IEEE Software 7(2):74-84 (Mar 1990).
  7568	
  7569	SPECIAL - SRI specification language.  [HDM?]  "SPECIAL - A Specification
  7570	and Assertion Language", L. Robinson et al, TR CSL-46, SRI, Jan 1987.
  7571	
  7572	SPECOL - "SPECOL - A Computer Enquiry Language for the Non-Programmer",
  7573	B.T. Smith, Computer J 11:121 (1968).
  7574	
  7575	SPEED - Early system on LGP-30.  Listed in CACM 2(5):16 (May 1959).
  7576	
  7577	Speedcoding - John Backus, 1953.  A pseudocode interpreter for math on IBM
  7578	701, IBM 650.  Sammet 1969, p.130.
  7579	
  7580	Speedcoding 3 - Listed in CACM 2(5):16 (May 1959).
  7581	
  7582	SPEEDEX - Early system on IBM 701.  Listed in CACM 2(5):16 (May 1959).
  7583	
  7584	SP/k - Subset PL/I, k=1..8.  A series of PL/I subsets, simplified for
  7585	student use.  "SP/k: A System for Teaching Computer Programming", R.C. Holt
  7586	et al, CACM 20(5):301-309 (May 1977).
  7587	
  7588	SPG - System Program Generator.  A compiler-writing language.  "A System
  7589	Program Generator", D. Morris et al, Computer J 13(3) (1970).
  7590	
  7591	SPIT - Language for IBM 650.  (See IT).
  7592	
  7593	SPITBOL - SPeedy ImplemenTation of snoBOL.  "Macro SPITBOL - A SNOBOL4
  7594	Compiler", R.B.K. Dewar et al, Soft Prac & Exp 7:95-113, 1971.  Current
  7595	versions: SPITBOL-68000, Sparc SPITBOL from Catspaw Inc, (719)539-3884.
  7596	
  7597	SPL -
  7598	
  7599	  1. Synchronous Programming Language.  A DSP language.  "Introduction to
  7600	the SPL Compiler", Computalker Consultants, 1986.
  7601	
  7602	  2. Space Programming Language.  For spaceflight and aerospace software. 
  7603	Similar to JOVIAL.  Aka SPL/J6.  A subset is known as CLASP.  "Space
  7604	Programming Language Development", SAMSO TP 70-325, System Development Corp
  7605	(Sep 1970).
  7606	
  7607	  3. System Programming Language.  HP, 1977.  An ALGOL-like language for
  7608	the HP3000 computer allowing inline assembly code.  MPE, the OS for the
  7609	HP3000 was written in SPL.  Pub.No.30000-90024, HP.
  7610	
  7611	  4. Systems Programming Language.  PRIME Computer, 80's.  A variant of
  7612	PL/I used on PRIME computers.  PL/I subset G, less I/O plus a few
  7613	extensions.  SPL User's Reference Guide, Prime.  (See PL/P.)
  7614	
  7615	SPLash! - 
  7616	
  7617	  1. Software Research Northwest, 1987.  Compiler for SPL[3].
  7618	
  7619	  2. Systems Programming LAnguage for Software Hackers.  Mentioned in TeX
  7620	for the Impatient, Paul W. Abrahams, A-W 1990.
  7621	
  7622	SPL/I - Signal Processing Language I.  Intermetrics.  General language
  7623	designed for acoustic signal processing.  Graphics and multiprocessing
  7624	features.  "SPL/I Language Reference Manual", M.S. Kosinski, Intermetrics
  7625	Report 172-1 (July 1976).
  7626	
  7627	SPLINTER - PL/I interpreter with debugging features.  Sammet 1969, p.600.
  7628	
  7629	SPLX - Specification Language for Parallel cross-product of processes and
  7630	sequential modules.  "Parallel Module Specification on SPLX", C.F. Nourani,
  7631	SIGPLAN Notices 27(1):114-115 (Jan 1992).
  7632	
  7633	Spool - Object-oriented logic.  "An Experience with a Prolog Based
  7634	Language", K. Fukunaga et al, SIGPLAN Notices 21(11):224-231 (Nov 1986)
  7635	(OOPSLA '86).
  7636	
  7637	SPRING - String PRocessING language.  "From SPRING to SUMMER: Design,
  7638	Definition and Implementation of Programming Languages for String
  7639	Manipulation and Pattern Matching", Paul Klint, Math Centre, Amsterdam
  7640	1982.
  7641	
  7642	SPRINT - List processing language involving stack operations.  "SPRINT - A
  7643	Direct Approach to List Processing Languages", C.A. Kapps, Proc SJCC 30
  7644	(1967).  Sammet 1969, p 462.
  7645	
  7646	SPS - Symbolic Programming System.  Assembly language for IBM 1620.
  7647	
  7648	SPSS - Statistical Programs for the Social Sciences.  "SPSS X User's
  7649	Guide", SPSS Inc. 1986.
  7650	
  7651	SPUR - Early system on IBM 650.  Listed in CACM 2(5):16 (May 1959).
  7652	
  7653	SQL - Structured Query Language.  IBM, 1970's, for use in System R.  The de
  7654	facto standard relational database interface language, often embedded in
  7655	other programming languages.  "A Guide to the SQL Standard," C.J. Date, A-W
  7656	1987.
  7657	
  7658	Square - Query language, precursor to SQL.  "Specifying Queries as
  7659	Relational Expressions: The SQUARE Data Sublanguage", R.E. Boyce et al,
  7660	CACM 18(11):621-628 (Nov 1975).
  7661	
  7662	Squeak - "Squeak: A Language for Communicating with Mice", L. Cardelli et
  7663	al, Comp Graphics 19(3):199-204 (July 1985) (See Newsqueak).
  7664	
  7665	SR - Synchronizing Resources.  A programming language for distributed
  7666	systems.  A 'resource' is the encapsulation of a process and its variables
  7667	in two parts: specification and body.  Processes interact via the
  7668	rendezvous, in which one calls an 'operation' in the other.  The call can
  7669	be either blocking or nonblocking.  The operation names can be changed
  7670	dynamically.  "An Overview of the SR Language and Implementation", G.
  7671	Andrews, ACM TOPLAS 10:51-86 (Jan 1988).  "The SR Programming Language:
  7672	Concurrency in Practice", G.R. Andrews et al, Benjamin/Cummings 1993, ISBN
  7673	0-8053-0088-0.
  7674	
  7675	ftp: cs.arizona.edu, watserv1.waterloo.edu.
  7676	
  7677	SRC Modula-3 - From DEC/SRC, Palo Alto, CA.  "Modula-3 Report (revised)"
  7678	Luca Cardelli et al.
  7679	ftp: gatekeeper.dec.com
  7680	
  7681	SRDL - Small algebraic specification language, allows distfix operators. 
  7682	"A Constructive Method for Abstract Algebraic Software Specification", H.
  7683	Klaeren, Theor Computer Sci 30, pp.134-204, 1984.
  7684	 
  7685	Srl -
  7686	
  7687	  1. Bharat Jayaraman.  "Towards a Broader Basis for Logic Programming", B.
  7688	Jayaraman, TR CS Dept, SUNY Buffalo, 1990.
  7689	
  7690	  2. Schema Representation language.  "SRL/2 Users Manual", J.M. Wright et
  7691	al, Robotics Inst, CMU, 1984.
  7692	
  7693	  3. Structured Robot Language.  C. Blume & W. Jacob, U Karlsruhe.
  7694	
  7695	SSL - 
  7696	
  7697	  1. Synthesizer Specification Language.  The definition language for the
  7698	Cornell Program Synthesizer Generator.  "Generating Language Based
  7699	Environments", T. Reps, MIT Press 1984.
  7700	
  7701	  2. Syntax Semantic Language.  R.C. Holt & J. Cordy.  A specification
  7702	language for recursive descent parsers.  "An Introduction to S/SL:
  7703	Syntax/Semantic Language", R.C. Holt et al, ACM TOPLAS 4(2):149-178 (Apr
  7704	1982).
  7705	ftp: ftp.cs.toronto.edu:pub/ssl.tar.Z
  7706	
  7707	STAB-11 - "The Translation and Interpretation of STAB-11", A.J.T. Colin et
  7708	al, Soft Prac & Exp 5(2):123-138 (Apr 1975).
  7709	
  7710	STAGE2 - Macro language.
  7711	
  7712	Standard ML - See SML.
  7713	
  7714	STAR 0 - Early system on Datatron 200 series.  Listed in CACM 2(5):16 (May
  7715	1959).
  7716	
  7717	StarLISP - See *LISP.
  7718	
  7719	StarMOD - See *MOD.
  7720	
  7721	Steelman - DoD, 1979.  Fifth and last of the series of DoD requirements
  7722	that led to Ada.  "Requirements for High Order Programming Languages,
  7723	'Steelman'", June 1978.  SIGPLAN Notices 13(12) (Dec 1978).  (See Strawman,
  7724	Woodenman, Tinman, Ironman).
  7725	
  7726	STENSOR - L. Hornfeldt, Stockholm, mid-80's.  Symbolic math, especially
  7727	General Relativity.  Implemented on top of SHEEP and MACSYMA.
  7728	
  7729	Sticks&Stones - Hardware description language.  Functional, polymorphic,
  7730	loosely based on ML.  "An Algebraic Approach to Hardware Description and
  7731	Verification", L. Cardelli, Thesis, Edinburgh U, 1982.  "Sticks&Stones II:
  7732	A Functional Language VLSI Layout Generation Tool", Andrew Butterfield
  7733	<butrfeld@cs.tcd.ie>, Thesis, Trinity College, 1990.
  7734	
  7735	STIL - STatistical Interpretive Language.  "STIL User's Manual", C.F.
  7736	Donaghey et al, Indust Eng Dept, U Houston (Aug 1969).
  7737	
  7738	STOIC - STring Oriented Interactive Compiler.  Smithsonian Astrophysical
  7739	Observatory.  Similar to FORTH for strings, includes many VAX-specific
  7740	items.
  7741	
  7742	Stoneman - HOLWG, DoD, Feb 1980.  DoD requirements that led to APSE, the
  7743	Ada Programming Support Environment.
  7744	
  7745	STP4 - Statistical language.
  7746	
  7747	Strand - 
  7748	
  7749	  1. AND-parallel logic programming language.  Essentially flat Parlog83
  7750	with sequential-and and sequential-or eliminated.  "Strand: New Concepts on
  7751	Parallel Programming", Ian Foster et al, P-H 1990.  Strand88, available
  7752	commerically from Strand Software, Beaverton, OR.
  7753	info: strand88@sstl.co.uk
  7754	
  7755	  2. Query language, implemented on top of INGRES (an RDBMS).  "Modelling
  7756	Summary Data", R. Johnson, Proc ACM SIGMOD Conf 1981.
  7757	
  7758	Strawman - HOLWG, DoD, 1975.  The first of the series of DoD requirements
  7759	that led to Ada.  (See Woodenman, Tinman, Ironman, Steelman).
  7760	
  7761	STREAM - "STREAM: A Scheme Language for Formally Describing Digital
  7762	Circuits", C.D. Kloos in PARLE: Parallel Architectures and Languages
  7763	Europe, LNCS 259, Springer 1987.
  7764	
  7765	STRESS - STRuctual Engineering Systems Solver.  Structural analysis
  7766	problems in Civil Engineering.  Superceded by STRUDL.  "STRESS: A User's
  7767	Manual", S.J. Fenves et al, MIT Press 1964.  Sammet 1969, p.612.
  7768	
  7769	STROBES - Shared Time Repair of Big Electronic Systems.  Computer testing. 
  7770	Sammet 1969, p.699.
  7771	
  7772	STRUDL - STRUctured Design Language.  Dynamic and finite-element analysis,
  7773	steel and concrete structures.  Subsystem of ICES.  "ICES STRUDL-II
  7774	Engineering User's Manual", R68-91, CE Dept MIT (Nov 1968) Sammet 1969,
  7775	p.613.
  7776	
  7777	STSC APL - Implementation of APL by Scientific Time-Sharing Corp.
  7778	
  7779	STUDENT - D.G. Bobrow 1964.  Early query system.  Sammet 1969, p.664.
  7780	
  7781	SuccessoR - Language for distributed computing derived from SR. 
  7782	"SuccessoR: Refinements to SR", R.A. Olsson et al, TR 84-3, U Arizona 1984.
  7783	
  7784	SUGAR - Westfield College, U London.  Simple lazy functional language used
  7785	in Principles of Functional Programming, Hugh Glaser et al, P-H 1984.
  7786	
  7787	SUIF - Stanford University Intemediate Format.  Register-oriented
  7788	intermediate language.
  7789	
  7790	SUMMER - Klint & Sint, CWI late 70's.  String manipulation and pattern
  7791	matching.  Recently used as the input and implementation language for the
  7792	Dataflow Compiler Project at CWI.  "An Overview of the SUMMER Programming
  7793	Language", Paul Klint, 7th POPL, ACM 1980, pp.47-55.
  7794	
  7795	SUMMER SESSION - Early system on MIT's Whirlwind.  Listed in CACM 2(5):16
  7796	(May 1959).
  7797	
  7798	SUPER - Successor to LOGLISP, based on LNF.  "New Generation Knowledge
  7799	Processing: Final Report on the SUPER System", J Alan Robinson et al, CASE
  7800	Center TR 8707, Syracuse U, 1987.
  7801	
  7802	SUPERMAC - General-purpose macro language, embeddable in existing languages
  7803	as a run-time library.  "SUPERMAC - A Macro Facility That can be Added to
  7804	Existing Compilers", P.J. Brown, Soft Prac & Exp 10(6):431-434.
  7805	
  7806	Super Pascal - Pascal variant used in Data Structures and Algorithms, A.
  7807	Aho, Hopcroft & Ullman, A-W 1983.  Adds nonnumeric labels, return
  7808	statement, expressions as names of types.
  7809	
  7810	SuperTalk - Silicon Beach Software.  A superset of HyperTalk used in
  7811	SuperCard.
  7812	
  7813	Sure - Bharat Jayaraman.  "Towards a Broader Basis for Logic Programming",
  7814	B. Jayaraman, TR CS Dept, SUNY Buffalo, 1990.
  7815	
  7816	SURGE - Sorter, Updater, Report Generator, Etc.  IBM 704, 1959.  Sammet
  7817	1969, p.8.
  7818	
  7819	SweetLambda - Sugared lambda-calculus?
  7820	
  7821	SYGMA - "SYGMA, A Symbolic Generator and Macroassembler", A.P. Ershov et
  7822	al, in Symbol Manipulation Languages and Techniques, D.G. Bobrow ed, N-H
  7823	1968, pp.226-246.
  7824	
  7825	Sylvan - [Distributed language?]
  7826	
  7827	SYMBAL - SYMbolic ALgebra.  Max Engeli, late 60's.  Symbolic math language
  7828	with ALGOL-like syntax.  Implemented for CDC6600.  "User's Manual for the
  7829	Formula Manipulation Language SYMBAL", M. Engeli, TRM-8.00, Comp Ctr UT
  7830	Austin, June 1968.
  7831	
  7832	SymbMath - Small symbolic math package for MS-DOS.  Has the ability to
  7833	learn new facts.  Version 2.1.1
  7834	ftp: simtel20:calculator/sm14a.zip
  7835	
  7836	SYMBOLANG - Lapidus & Goldstein, 1965.  Symbol manipulating FORTRAN
  7837	subroutine package for IBM 7094, later CDC6600.  "Some Experiments in
  7838	Algebraic Manipulation", CACM 8:501-508 (1965).
  7839	
  7840	SYMBOLIC ASSEMBLY - Early system on IBM 705.  Listed in CACM 2(5):16 (May
  7841	1959).
  7842	
  7843	Symbolic Mathematical Laboratory - On-line system under CTSS for symbolic
  7844	math.  Used display screen and light pen.  Sammet 1969, p.514.
  7845	
  7846	Symmetric LISP - A parallel LISP in which environments are first-class
  7847	objects.  Implemented in Common LISP.  "Parallelism, Persistence and Meta-
  7848	Cleanliness in the Symmetric Lisp Processor", D. Gelernter et al, SIGPLAN
  7849	Notices 22(7):274-282 (July 1987).
  7850	
  7851	SYMPL -  SYsteMs Programming Language.  CDC.  A derivative of Jovial. 
  7852	Non-reentrant block structured language with extensive bit manipulation
  7853	facilities and linkable with FORTRAN.  Major parts of CDC systems during
  7854	the 70's were written in SYMPL.
  7855	
  7856	T - 
  7857	
  7858	  1. True.  Rees, 1982.  LISP dialect with static scope, a near-superset of
  7859	Scheme.  "The T Manual", Johnathan A. Rees <jar@zurich.ai.mit.edu> et al,
  7860	Yale U, 1984.  Maintained by David Kranz <kranz@masala.lcs.mit.edu>.
  7861	ftp: ftp.ai.mit.edu:pub/systems/t3.1    Unix source
  7862	
  7863	  2. Functional.  "T: A Simple Reduction Language Based on Combinatory Term
  7864	Rewriting", Ida et al, Proc of Prog Future Generation Computers, 1988.
  7865	
  7866	TABLET - Query language.  "Human Factor Comparison of a Procedural and a
  7867	Non-procedural Query Language", C. Welty et al, ACM Trans Database Sys
  7868	6(4):626-649 (Dec 1981).
  7869	
  7870	TABSOL - T.F. Kavanaugh.  Early system oriented language.  Proc FJCC
  7871	18:117-136, AFIPS (Fall 1960).  (See GECOM).
  7872	
  7873	TAC - Translator Assembler-Compiler.  For Philco 2000.
  7874	
  7875	TACL - Tandem Advanced Command Language.  Tandem, about 1987.  The shell
  7876	language used in Tandem computers.
  7877	
  7878	TACPOL - PL/I-like language used by US Army for command and control.
  7879	
  7880	TAL - Tandem Application Language.  A cross between C and Pascal.  Primary
  7881	system programming language on Tandem computers.  (Tandem has no assembler
  7882	and until recently did not have C or Pascal.)   Derived from SPL[3]?
  7883	
  7884	TALL - TAC List Language.  "TALL - A List Processor for the Philco 2000",
  7885	J. Feldman, CACM 5(9):484-485 (Sep 1962).
  7886	
  7887	TAO - Lisp dialect with concurrency, object-orientation and logic. 
  7888	"Concurrent Programming in TAO - Practice and Experience", I. Takeuchi in
  7889	Parallel Lisp: Languages and Systems, T. Ito et al eds, LNCS 441, Springer
  7890	1989, pp.271-299.
  7891	
  7892	TARTAN - A simpler proposed language to meet the Ironman requirements. 
  7893	"TARTAN - Language Design for the Ironman Requirement", Mary Shaw et al,
  7894	SIGPLAN Notices 13(9):36 (Sep 1978).
  7895	
  7896	TASM - Turbo Assembler.  MS-DOS assembler from Borland.
  7897	
  7898	TASS - Template ASSembly language.  Intermediate language produced by the
  7899	Manchester SISAL compiler.
  7900	
  7901	TAWK - Tiny AWK.
  7902	
  7903	Taxis - "A Language Facility for Designing Database-Intensive
  7904	Applications", J. Mylopoulos et al, ACM Trans Database Sys 5(2):185-207
  7905	(June 1980).
  7906	
  7907	TBIL - Tiny Basic Interpreter Language.  Inner interpreter of Tom Pittman's
  7908	set of Tiny Basics in Dr Dobb's J.
  7909	
  7910	Tbl - M.E. Lesk.  Language for laying out tables.
  7911	
  7912	tcl - 
  7913	
  7914	  1. ("tickle")  Tool Command Language.  John Ousterhout, UCB.
  7915	<ouster@sprite.berkeley.edu>  A string language for issuing commands to
  7916	interactive programs.  Each application can extend tcl with its own set of
  7917	commands.    "Tcl: An Embeddable Command Language", J. Ousterhout, Proc
  7918	1990 Winter USENIX Conf.
  7919	ftp: ucbvax.berkeley.edu
  7920	
  7921	  2. Terminal Control Language.  The command language used in the Pick OS. 
  7922	"Exploring the Pick Operating System", J.E. Sisk et al, Hayden 1986.
  7923	
  7924	  3. Tymshare Conversational Language.  "Interactive Languages: Design
  7925	Criteria and a Proposal", R.K. Moore et al, Proc FJCC 33(1) (1968).
  7926	
  7927	Tcode - Intermediate language used by the Spineless Tagless G-machine (an
  7928	abstract machine based on graph reduction) designed as a target for
  7929	compilation of non-strict functional languages.  "The Spineless tagless G-
  7930	machine", S. Peyton Jones et al, Fourth Intl Conf Func Prog Langs and Comp
  7931	Arch pp.184-201, ACM Sept 1989.
  7932	
  7933	TCOL - CMU.  Tree-based intermediate representation produced by the PQCC
  7934	compiler generator.  "An Overview of the Production Quality Compiler-
  7935	Compiler Projects", B.W. Leverett et al, IEEE Computer 13(8): 38-49 (Aug
  7936	1980).  (See LG).
  7937	
  7938	TCOL.Ada - CMU, 1980.  An intermediate representation for Ada, was merged
  7939	with AIDA to form Diana.  "TCOL.Ada: Revised Report on an Intermediate
  7940	Representation for the DOD Standard Programming Language", J.M. Newcomer et
  7941	al, CMU-CS-79-128 (June 1979).
  7942	
  7943	tcsh - Command language for Unix, a dialect of csh.
  7944	
  7945	Tcsim - Time (Complex) Simulator.  Complex arithmetic version of Tsim. 
  7946	ZOLA Technologies, ZOLA@Applelink.Apple.com.
  7947	
  7948	TDF - Intermediate language, a close relative of ANDF.  A TDF program is an
  7949	ASCII stream describing an abstract syntax tree.  "TDF Specification",
  7950	Defence Research Agency/Electronics Division, Great Malvern, England, +44
  7951	684 895314.
  7952	info: Nic Peeling <peeling@hermes.mod.uk>
  7953	
  7954	TECO - Text Editor and COrrector.  (Originally "Tape Editor and
  7955	COrrector").  Macro language for text editing, screen handling and keyboard
  7956	management.  Has a reputation for being cryptic and hard to learn.  (TECO
  7957	programs are said to resemble line noise.)  The first EMACS editor was
  7958	written in TECO.
  7959	ftp: usc.edu, for VAX/VMS, Unix, MS-DOS, Mac, Amiga
  7960	
  7961	TELCOMP - Variant of JOSS.  Sammet 1969, p.217.
  7962	
  7963	Telon - by Panasophic [?]
  7964	
  7965	TELOS - 
  7966	
  7967	  1. The EuLisp Object System.  The object-oriented core of EuLisp. 
  7968	Incorporates ideas from CLOS, ObjVLisp and OakLisp.  Total merging of types
  7969	with classes, and message-passing with normal function application.  (See
  7970	EuLisp).
  7971	
  7972	  2. Pascal-based AI language.  "Design Rationale for TELOS, a Pascal-based
  7973	AI Language", Travis et al, SIGPLAN Notices 12(8) (Aug 1977).
  7974	
  7975	TELSIM - Busch, ca 1966.  Digital simulation.  Sammet 1969, p.627.
  7976	
  7977	TempLog - A clausal subset of first-order temporal logic, with discrete
  7978	time.  "Temporal Logic in Programming", M. Abadi et al, INtl Symp Logic
  7979	Prog pp.4-16 (1987).
  7980	
  7981	TEMPO - Simple syntax and semantics.  Designed for teaching semantic and
  7982	pragmatic aspects of programming languages.  "TEMPO: A Unified Treatment of
  7983	Binding Time and Parameter Passing Concepts in Programming Languages", N.D.
  7984	Jones et al, LNCS 66, Springer 1978.
  7985	
  7986	Tempura - Language based on temporal logic.  "Executing Temporal Logic
  7987	Programs", B. Moszkowski, Camb U Press 1986.
  7988	
  7989	Ten15 - A universal intermediate language, predecessor to TDF. 
  7990	Polymorphic?  "Ten15: An Overview", P. Core et al, Royal Signals Radar
  7991	Establishment TR 3977 (Sept 1986).
  7992	
  7993	TERMAC - Interactive matrix language.  "Users Guide to TERMAC", J.S. Miller
  7994	et al, MIT Dec 1968.
  7995	
  7996	Terse - Language for decription of hardware logic.  "Hardware Logic
  7997	Simulation by Compilation", C. Hansen, 25th ACM/IEEE Design Automation
  7998	Conf, 1988.
  7999	
  8000	TeX - Donald Knuth, 1978.  Language for formatting and typesetting text,
  8001	expecially mathematical formulas.  Macro extensible.  Version 3.0, March
  8002	1990.
  8003	  TeX-78 - The original version of TeX.
  8004	  TeX-82 - The version of TeX described in The TeXbook, Donald Knuth,
  8005	A-W 1984.
  8006	ftp: labrea.stanford.edu:/tex/TeX3.14.tar.Z
  8007	Well-known extensions to TeX:
  8008	  BibTeX - for bibliographies.  Distributed with LaTeX.
  8009	  LaTeX - Lamport TEX.  Incorporates document styles.  "LaTeX, A Document
  8010	Preparation System", Leslie Lamport <lamport@gatekeeper.dec.com>, A-W 1986.
  8011	  MuTeX - for typesetting music.
  8012	ftp: nic.stolaf.edu:/pub/mutex/MuTeX.tar.Z 
  8013	  PiCTeX - for pictures.
  8014	ftp: june.cs.washington.edu:/tex/PiCTeX.tar.Z
  8015	  SliTeX - for slide preparation.  Distributed with LaTeX.
  8016	
  8017	TFDL - "TFDL : A Task-level Dataflow Language", P.A. Suhler et al, J
  8018	Parallel and Distrib Comput 9:103-115 (1990).
  8019	
  8020	TGS-II - Translator Generator System.  Contained TRANDIR.  Sammet 1969,
  8021	p.640.
  8022	
  8023	THEO - Frame language.  "Theo: A Framework for Self-Improving Systems",
  8024	Mitchell et al, in Architectures for Intelligence, K. VanLehn ed, Erlbaum,
  8025	1989.
  8026	
  8027	Theseus - Based on Euclid, never implemented.  "Theseus - A Programming
  8028	Language for Relational Databases", J.E. Shopiro, ACM Trans Database Sys
  8029	4(4):493-517 (Mar 1979).
  8030	
  8031	ThingLab - Simulation system written in Smalltalk-80.  Solves constraints
  8032	using value inference.  "The Programming Language Aspects of ThingLab, A
  8033	Constraint-Oriented Simulation Laboratory", A. Borning, ACM TOPLAS
  8034	3(4):353-387 (Oct 1981).  Version: ThingLab II.
  8035	
  8036	Tinman - HOLWG, DoD, 1976.  Third of the series of DoD requirements that
  8037	led to Ada.  (See Strawman, Woodenman, Ironman, Steelman).
  8038	
  8039	TINT - Interpreted version of JOVIAL.  Sammet 1969, p.528.
  8040	
  8041	Tiny - Concurrency through message-passing to named message queues.
  8042	
  8043	TIP - TI Pascal.
  8044	
  8045	TIPL
  8046	
  8047	  1.  Teach IPL.  Interpretive IPL teaching system.  Sammet 1969, p.393.
  8048	
  8049	  2.  Dialect of IGL.[?]
  8050	
  8051	TK!Solver - Software Arts 1983.  Numerical constraint-oriented language. 
  8052	"The TK!Solver Book", M. Konopasek et al, McGraw-Hill 1984.
  8053	
  8054	TL0 - Thread Language Zero.  The instruction set of the TAM (Threaded
  8055	Abstract Machine), used to implement Id.  "Fine-grain Parallelism with
  8056	Minimal Hardware Support", David Culler et al, SIGPLAN Notices 26(4):164-
  8057	175 (ASPLOS-IV Proc) (Apr 1991).
  8058	
  8059	TMDL - Target-Machine Description Language.  Machine-desription language
  8060	used in the Graham-Glanville code generator.  "Table-Driven Code
  8061	Generation", S.L. Graham, IEEE Computer 13(8):25-34 (Aug 1980).
  8062	
  8063	TMG - Transmogrifier.  Language for an early compiler-compiler.  Macro'd
  8064	from the IBM 1604 to the 709 to the 7094 to the GE635, where it was used to
  8065	write the EPL compiler for Multics development.  "TMG - A Syntax-Directed
  8066	Compiler", R.M. McClure, Proc ACM 20th Natl Conf (1965).  Sammet 1969,
  8067	p.636.
  8068	
  8069	TOK - Referred to in Ursula K. LeGuin's "Always Coming Home."  Seems to be
  8070	similar to the original BASIC.
  8071	
  8072	Toronto Euclid - The standard dialect of Euclid, as compared to Ottawa
  8073	Euclid.
  8074	
  8075	TPL - 
  8076	  1. Table Producing Language.  "The Bureau of Labor Statistics Table
  8077	Producing Language (TPL)", R.C. Mendelssohn, Proc ACM Annual Conf (1974).
  8078	
  8079	  2. Fleming Nielson.  Concurrent, functional. [?]
  8080	
  8081	  3. Terminal Programming Language.  Texas Inst, late 70's.  Used on the
  8082	TI-990/1 Small Business Computer and the TI-771 Intelligent Terminal.
  8083	
  8084	TPS - Tree Pruning System.  "An Adaptive Tree Pruning System: A Language
  8085	for Programming Heuristic Tree Searches", E.W. Kozdrowicki, Proc ACM 23rd
  8086	Natl Conf 1968.
  8087	
  8088	TPU - Text Processing Utility.  DEC.  Language for creation of text-
  8089	processing interfaces, used to implement DEC's Extensible VAX Editor (EVE).
  8090	
  8091	TRAC - Text Reckoning And Compiling.  Calvin N. Mooers and Peter Deutsch
  8092	<Deutsch@SMLI.Eng.Sun.Com>.  An interactive macrogenerator language for
  8093	string manipulation.  Derived ideas from Macro SAP.  "TRAC: A Procedure-
  8094	Describing Language for the Reactive Typewriter", Calvin N. Mooers, CACM
  8095	9(3):215-219 (Mar 1966).  Rockford Research Inst, 1972.  Sammet 1969,
  8096	pp.448-454.  Macro Processors, A.J. Cole, Cambridge U Press.  Versions for
  8097	PDP-1, PDP-8, PDP-10, PDP-11 (See MINT, SAM76)
  8098	info: Preston Briggs <preston@rice.edu>
  8099	
  8100	Trafola-H - A specification language for program transformations. 
  8101	Functional, statically typed, polymorphic, with extended constructs for
  8102	pattern-matching.  "Trafola-H Reference Manual", R. Heckmann et al, U
  8103	Saarlandes, Saarbrucken 1991.
  8104	
  8105	TRANDIR - TRANslation DIRector.  A language for syntax-directed compiling. 
  8106	Sammet 1969, p.640.
  8107	
  8108	TRANQUIL - 1966.  ALGOL-like language with sets and other extensions, for
  8109	the Illiac IV.  "TRANQUIL: A Language for an Array Processing Computer",
  8110	N.E. Abel et al, Proc SJCC 34 (1969). 
  8111	
  8112	TRANS - TRAffic Network Simulation Language.  "A Model for Traffic
  8113	Simulation and a Simulation Language for the General Transportation
  8114	Problem", Proc FJCC 37 (1970).
  8115	
  8116	TRANS-USE - Early system on IBM 1103 or 1103A.  Listed in CACM 2(5):16 (May
  8117	1959).
  8118	
  8119	TRANSCODE - Early system on Ferut computer.  Listed in CACM 2(5):16 (May
  8120	1959).
  8121	
  8122	TRANSIT - Subsystem of ICES.  Sammet 1969, p.616.
  8123	
  8124	TREET - E.C. Haines, 1964.  An experimental variant of LISP1.5, implemented
  8125	on the STRETCH computer.  Basic structure was a trinary tree.  "The TREET
  8126	Time-Sharing System", H.A. Bayard et al, Proc 2nd Symp Symb and Alg Manip,
  8127	ACM (Mar 1971).  Sammet 1969, pp.457-461.
  8128	
  8129	TREETRAN - FORTRAN IV subroutine package for tree manipulation.
  8130	
  8131	Trellis - (formerly named Owl).  DEC.  Object-oriented, with static type-
  8132	checking and encapsulation.  "Persistent and Shared Objects in
  8133	trellis/owl", P. O'Brien et al, Proc 1986 IEEE Workshop on Object-Oriented
  8134	Database Systems, IEEE, NY 1986.
  8135	info: Jerry Smith <smith@pipe.enet.dec.com>
  8136	
  8137	TRIGMAN - Symbolic math, especially Celestial Mechanics.
  8138	
  8139	Trilogy - Paul Voda, UBC, 1988.  Logic programming language with numerical
  8140	constraint-solving over the natural numbers.  Syntactically a blend of
  8141	Prolog, LISP and Pascal.  Contains three types of clauses: predicates
  8142	(backtracking but no assignable variables), procedures (if-then-else but no
  8143	backtracking; assignable variables), and subroutines (like procedures, but
  8144	with input and system calls; callable only from top level or from other
  8145	subroutines).  "The Constraint Language Trilogy: Semantics and
  8146	Computations", P. Voda <voda@vanbc.wimsey.bc.ca>, Complete Logic Systems,
  8147	741 Blueridge Ave, North Vancouver BC, V7R 2J5.  Papers by Voda, and BYTE
  8148	review.[?]
  8149	
  8150	Troff - Text formatting language/interpreter, a variant of Unix roff.  (See
  8151	groff, nroff).
  8152	
  8153	TROLL - Array language for continuous simulation, econometric modeling,
  8154	statistical analysis.  "TROLL Reference Manual", D0062, Info Proc Services,
  8155	MIT (1973-76).
  8156	
  8157	True BASIC - John Kemeny & Thomas E. Kurtz.  A compiled BASIC requiring no
  8158	line numbers.
  8159	
  8160	Tsim - Time Simulator.  Stack-based simulation language.  ZOLA
  8161	Technologies, ZOLA@Applelink.Apple.com.
  8162	
  8163	TSL-1 - Task Sequencing Language.  Language for specifying sequences of
  8164	tasking events in Ada programs.  "Task Sequencing Language for Specifying
  8165	Distributed Ada Systems", D.C. Luckham et al in PARLE: Parallel
  8166	Architectures and Langs Europe, LNCS 259, Springer 1987, pp.444-463.
  8167	
  8168	Tui - Functional.  "Tui Language Manual", B. Boutel, TR CSD-8-021, Victoria
  8169	U of Wellington, 1988.
  8170	
  8171	Tuki - An intermediate code for functional languages.  "Another
  8172	Implementation Technique for Applicative Languages", H. Glaser et al,
  8173	ESOP86, LNCS 213, Springer 1986.
  8174	
  8175	Tuple Space Smalltalk - "Using Tuple Space Communication in Distributed
  8176	Object-Oriented Languages", S. Matsuoka et al, SIGPLAN Notices 23(11):276-
  8177	284 (Nov 1988).
  8178	
  8179	Turbo Pascal - Borland Intl's Pascal.  Perhaps the first integrated
  8180	development environment for MS-DOS.
  8181	Versions 1.0-3.0: standard Pascal with a few extensions
  8182	Versions 4.0 (1987) and 5.0: separate compilation
  8183	Version 5.5: object-oriented facilities
  8184	Version 6.0: Turbo Vision OOP library
  8185	
  8186	Turbo Prolog - 1986.  A Prolog-like language with strong typing and user-
  8187	defined domains.  Programs are arranged in sections: DOMAINS, CLAUSES,
  8188	PREDICATES, DATABASE and GOAL.  Currently known as PDC Prolog, and
  8189	distributed by Prolog Development Center, Atlanta (404)873-1366
  8190	<pdc@mcimail.com>?
  8191	
  8192	Turing - R.C. Holt & J.R. Cordy <cordy@qucis.queensu.ca>, U Toronto, 1982. 
  8193	Descendant of Concurrent Euclid, an airtight super-Pascal.  "Turing
  8194	Language Report", R.C. Holt & J.R. Cordy, Report CSRI-153, CSRI, U Toronto,
  8195	Dec 1983.  "The Turing Programming Language", R.C. Holt & J.R. Cordy, CACM
  8196	31(12) (Dec 1988).  Available from Holt Software Assocs, Toronto.  Versions
  8197	for Sun, VAX/VMS, MS-DOS, Mac, VM/CMS.
  8198	info: <distrib@turing.toronto.edu>
  8199	
  8200	Turing Plus - Systems programming language, a concurrent descendant of
  8201	Turing.  "The Turing Plus Report", R.C. Holt & J.R. Cordy, CSRI, U Toronto,
  8202	Feb 1987.  Available from Holt Software Assocs, Toronto
  8203	<distrib@hsa.on.ca>.
  8204	
  8205	Turtle - The subset of LOGO dealing directly with turtle graphics.
  8206	
  8207	TUTOR - Scripting language on PLATO systems from CDC.  "The TUTOR
  8208	Language", Bruce Sherwood, Control Data, 1977.
  8209	
  8210	Twentel - Functional.  "The TWENTEL System (Version 1).", H. Kroeze, CS
  8211	Dept TR, U Twente, 1986.
  8212	
  8213	TWIG - Tree-Walking Instruction Generator.  A code-generator language. 
  8214	"Twig Language Manual", S.W.K. Tijang, CS TR 120, Bell Labs, 1986.  A
  8215	variant, ML-Twig in SML by Jussi Rintanen <jur@cs.hut.fi> comes with
  8216	SML/NJ.
  8217	
  8218	TXL - Tree Transformation Language.  J.R. Cordy et al, Queens U, Canada,
  8219	1988.  A general language for implementing source-to-source translation and
  8220	program transformation tasks.  "TXL: A Rapid Prototyping System for
  8221	Programming Language Dialects", J.R. Cordy et al, Comp Langs 16(1) (Jan
  8222	1991).  Specification and Automatic Prototype Implementation of Polymorphic
  8223	Objects in Turing Using the TXL Dialect Processor", J.R. Cordy & E.M.
  8224	Promislow, Proc IEEE Intl Conf on Comp Lang ICCL'90 (Mar 1990).
  8225	ftp: qusuna.qucis.queensu.ca, Vers 5.3, source in ANSI C
  8226	
  8227	Typed Smalltalk - Ralph Johnson, U Illinois <johnson@speedy.cs.uiuc.edu>.
  8228	
  8229	TYPOL - A specialized logic programming language.  "TYPOL: A Formalism to
  8230	Implement Natural Semantics", T. Despeyroux, RR 94, INRIA, 1988.
  8231	
  8232	UAN - User Action Notation.  VPI.  A notation for representation of
  8233	graphical user interfaces, e.g. mice and icons, H. Hartson et al, ACM Trans
  8234	on Info Sys, July 1990.
  8235	
  8236	UBASIC - Y. Kida <kida@rkmath.rikkyo.ac.jp>.  Extension of BASIC oriented
  8237	for symbolic math and number theory.  Includes bignums, fractions, complex
  8238	numbers and polynomials, integer factorization.  Version for MS-DOS,
  8239	written in assembly language.  Reviewed by W.D. Neumann, Notices of AMS
  8240	(Mar 1991).
  8241	ftp: wsmr-simtel20.army.mil
  8242	     shape.mps.ohio-state.edu:pub/msdos/ubasic
  8243	
  8244	uC++ - Micro-C++.  U Waterloo.  A concurrent extension of C++ with
  8245	coroutines and mutual exclusion.  Soft Prac & Exp (Feb 1992).  Version
  8246	3.4.4 for Unix using GCC.
  8247	ftp: watmsg.uwaterloo.edu:pub/uSystem/u++-3.4.4.tar.Z
  8248	
  8249	UCSD Pascal - see Pascal-P.
  8250	
  8251	U-Code - Universal Pascal Code.  Intermediate language, a generalization of
  8252	P-code for easier optimization.  Developed originally for the Los Alamos
  8253	Cray-1 and the Lawrence Livermore S-1.  A refined version currently used by
  8254	MIPS compilers is descended from one at Stanford U.  "Machine Independent
  8255	Pascal Code Optimization", D.R. Perkins et al, SIGPLAN Notices 14(8): 201-
  8256	201 (1979).  "A Transporter's Guide to the Stanford U-Code Compiler
  8257	System", P. Nye et al, TR CSL Stanford U, June 1983.  (See HPcode).
  8258	
  8259	UHELP - Linear programming.  "UHELP User's Manual", D. Singh, Indus Eng
  8260	Dept, U Houston (Oct 1969).
  8261	
  8262	UGLIAC - Early system on Datatron 200 series.  Listed in CACM 2(5):16 (May
  8263	1959).
  8264	
  8265	UHELP - Mathematical language, listed [?] 1976.
  8266	
  8267	ULP - Small structured language for use in microprocessors.  "User's Guide
  8268	to the ULP Language for the PDP-11", CS TR 536, U Maryland (May 1977).
  8269	
  8270	uML - Micro ML.  An interpreter for a subset of SML that runs on MS-DOS.
  8271	ftp: ftp.cs.umu.se:/pub/umlexe01.zoo
  8272	
  8273	UNCOL -  UNiversal Computer Oriented Language.  A universal intermediate
  8274	language, discussed but never implemented.  "A First Version of UNCOL",
  8275	T.B. Steel, Proc JCC 19:371-378 (Winter 1961).  Sammet 1969, p.708.
  8276	
  8277	UNICODE - Pre-FORTRAN on the IBM 1103, similar to MATH-MATIC.  Sammet 1969,
  8278	p.137.
  8279	
  8280	UNIQUE - A portable job control language, used.  "The UNIQUE Command
  8281	Language - Portable Job Control", I.A. Newman, Proc DATAFAIR 73, 1973,
  8282	pp.353-357.
  8283	
  8284	UNISAP - Early system on UNIVAC I or II.  Listed in CACM 2(5):16 (May
  8285	1959).
  8286	
  8287	UNITY - A high-level parallel language.  "Parallel Program Design", K.M.
  8288	Chandry et al, A-W 1988.
  8289	
  8290	USE - Early system on IBM 1103 or 1103A.  Listed in CACM 2(5):16 (May
  8291	1959).
  8292	
  8293	USL - Query language, close to natural English.
  8294	
  8295	USSA - B. Burshteyn, Pyramid, 1992.  Object-oriented state language.
  8296	doc: primost.cs.wisc.edu:/pub/ussa.ps.Z
  8297	
  8298	utility-coder - Data manipulation and report generation.  "User's Manual
  8299	for utility-coder", Cambridge Computer Assoc (Jul 1977).
  8300	
  8301	V - Wide-spectrum language used in the knowledge-based environment CHI. 
  8302	"Research on Knowledge-Based Software Environments at Kestrel Inst", D.R.
  8303	Smith et al, IEEE Trans Soft Eng SE-11(11):1278-1295 (1985).
  8304	
  8305	VAL -
  8306	
  8307	  1. Value-oriented Algorithmic Language.  J.B. Dennis, MIT 1979.  Single
  8308	assignment language, designed for MIT dataflow machine.  Based on CLU, has
  8309	iteration and error handling, lacking in recursion and I/O.  "A Value-
  8310	Oriented Algorithmic Language", W.B. Ackermann et al, MIT LCS TR-218, June
  8311	1979.  "The VAL Language: Description and Analysis", J.R. McGraw, TOPLAS
  8312	4(1):44-82 (Jan 1982).
  8313	
  8314	  2. Variable Assembly Language.  Unimation.  Language for industrial
  8315	robots.  Version: VAL II - "VAL II: A New Robot Control System for
  8316	Automatic Manufacturing", B.E. Shimano et al, Proc IEEE Intl Conf on
  8317	Robotics 1984, pp.278-292.
  8318	
  8319	  3. VHDL Annotation Language.  Stanford.
  8320	ftp: wilbur.stanford.edu:pub/valbin-sun3-4.0-0.1.3.tar.Z
  8321	source in Ada available from Larry M. Augustin <lma@sierra.stanford.edu>
  8322	
  8323	Valid - Dataflow language.  "A List-Processing-Oriented Data Flow Machine
  8324	architecture", Makoto Amamiya et al, AFIPS NCC, June 1982, pp.143-151.
  8325	
  8326	VDM - Specification method based on predicate logic, an outgrowth of VDL. 
  8327	"The Vienna Development Method: The Meta-Language", D. Bjorner et al eds,
  8328	LNCS 61, Springer 1978.  Version: BSI/VDM.  Jones's books, 1980, 1986.[?]
  8329	
  8330	Vector C - CMU?  Variant of C similar to ACTUS.
  8331	
  8332	VECTRAN - FORTRAN with array extensions.  "The VECTRAN Language: An
  8333	Experimental Language for Vector/Matrix Array Processing, Report G320-
  8334	3334, IBM (Aug 1975).
  8335	
  8336	Verdi - (named for the Italian composer Giuseppe Verdi (1813-1901)) 
  8337	Provable systems language.  Descendant of Ottawa Euclid.
  8338	
  8339	VEL - See LISP70.
  8340	
  8341	Verilog - Cadence Design Systems.  A hardware description language.  "The
  8342	Verilog Hardware Description Language", Donald E. Thomas & Philip Moorby,
  8343	Kluwer 1991.
  8344	info: kmd@cadence.com
  8345	
  8346	VGQF - Query language.
  8347	
  8348	VHDL - VHSIC Hardware Description Language.  (VHSIC = Very High Speed
  8349	Integrated Circuit)  The DoD standard for hardware description.  "VHSIC
  8350	Hardware Description Language", M.R. Shahdad et al, IEEE Computer 18(2):94-
  8351	103 (Feb 1985).
  8352	
  8353	Vienna Definition Language - IBM Vienna Labs.  A language for formal
  8354	definition via operational semantics.  Used to specify the semantics of
  8355	PL/I.  "The Vienna Definition Language", P. Wegner, ACM Comp Surveys
  8356	4(1):5-63 (Mar 1972).
  8357	
  8358	Vienna Fortran - Hans Zima, U Vienna.  Data-parallel.
  8359	
  8360	Views - A Smalltalk extension for computer algebra.  "An Object Oriented
  8361	Approach to Algebra System Design", K. Abdali et al, in Symp Symb Alg
  8362	Manip, ACM 1986, pp.24-30.
  8363	
  8364	Viron - "Five Paradigm Shifts in Programming Language Design and Their
  8365	Realization in Viron, a Dataflow Programming Environment", V. Pratt, 10th
  8366	POPL, ACM 1983, pp.1-9.
  8367	
  8368	VITAL - Semantics language using FSL.  Mondshein, 1967.  Sammet 1969,
  8369	p.641.
  8370	
  8371	VIVID - Numerical constraint-oriented language.  "VIVID: The Kernel of a
  8372	Knowledge Representation Environment Based on the Constraints Paradigm of
  8373	Computation", J. Maleki, Proc 20th Annual Hawaii Intl Conf on System
  8374	Sciences (Jan 1987) pp.591-597.
  8375	
  8376	viz - Visual language for specification and programming.  "viz: A Visual
  8377	Language Based on Functions", C.M. Holt, 1990 IEEE Workshop on Visual
  8378	Langs, Oct 1990, pp.221-226.
  8379	
  8380	Vlisp - Patrick Greussay <pg@litp.ibp.fr> ca 1973.  Lisp dialect widely
  8381	used in France.  (See ObjVlisp).
  8382	
  8383	VPL - Dataflow language for interactive image processing.  "VPL: An Active,
  8384	Declarative Visual Programming System, D. Lau-Kee et al, 1991 IEEE Workshop
  8385	on Vis Langs, Oct 1991, pp.40-46.
  8386	
  8387	VULCAN -
  8388	
  8389	  1. Wayne Ratliff ca. 1980.  CP/M port of JPLDIS which evolved into dBASE
  8390	II.
  8391	
  8392	  2. The dBASE-like interpreter and compiler sold by RSPI with their
  8393	Emerald Bay product. [same as 1?]
  8394	
  8395	  3. Early string manipulation language.  "VULCAN - A String Handling
  8396	Language with Dynamic Storage Control", E.P. Storm et al, Proc FJCC 37,
  8397	AFIPS (Fall 1970).
  8398	
  8399	  4. Kahn et al, Xerox PARC.  Concurrent object orientation and logic
  8400	programming.  An object-oriented preprocessor for FCP.  "Vulcan: Logical
  8401	Concurrent Objects", K. Kahn et al in Research Directions in Object-
  8402	Oriented Programming, A.B. Shriver et al eds, MIT Press 1987.
  8403	
  8404	WAFL - WArwick Functional Language.  Warwick U, England.  LISP-like.
  8405	
  8406	WAM - Intermediate language for compiled Prolog, used by the Warren
  8407	Abstract Machine.  "An Abstract Prolog Instruction Set", D.H.D. Warren, TR
  8408	309, SRI 1983.
  8409	
  8410	WATBOL - WATerloo COBOL, for MVS.
  8411	
  8412	WATFIV - WATerloo Fortran IV.  U Waterloo, Canada.  Student-friendly
  8413	variant of FORTRAN IV.
  8414	
  8415	WATFOR - WATerloo FORtran.  U Waterloo, Canada.  Student-friendly variant
  8416	of FORTRAN.  "WATFOR - The University of Waterloo FORTRAN IV Compiler",
  8417	P.W. Shantz et al, CACM 10(1):41-44 (Jan 1967).
  8418	
  8419	WAVE - Robotics language.  "WAVE: A Model-Based Language for Manipulator
  8420	Control", R.P. Paul, Ind Robot 4(1):10-17 (1979).
  8421	
  8422	WEB - Knuth's self-documenting brand of programming, with algorithms and
  8423	documentation intermixed in one file.  They can be separated using Weave
  8424	and Tangle.  Versions exist for Pascal, C etc.  Spiderweb can be used to
  8425	create versions for other languages (ftp princeton.edu).  "Literate
  8426	Programming", D.E. Knuth, Computer J 27(2):97-111 (May 1984).  
  8427	
  8428	WFL - Work Flow Language.  Burroughs, ca 1973.  A job control language for
  8429	the B6700/B7700 under MCP.  WFL was a compiled block-structured language
  8430	similar to ALGOL-60, with subroutines and nested begin-end's.  "Work Flow
  8431	Management User's Guide", Burroughs Manual 5000714 (1973).  "Burroughs
  8432	B6700/B7700 Work Flow Language", R.M. Cowan in Command Languages, C. Unger
  8433	ed, N-H 1975.
  8434	
  8435	Wisp - "An Experiment with a Self-Compiling Compiler for a Simple List-
  8436	Processing Language", M.V. Wilkes, Ann Rev Automatic Programming 4:1-48
  8437	(1964).
  8438	
  8439	Woodenman - HOLWG, DoD, 1975.  Second of the series of DoD requirements
  8440	that led to Ada.  (See Strawman, Tinman, Ironman, Steelman).
  8441	
  8442	WOOL - Colas Nahaboo <colas@sophia.inria.fr>  Small Common Lisp-like
  8443	extension language.  Claims to be the fastest interpreted language in C
  8444	with run-time types.  Version 1 used by the GWM window manager.  Version 2
  8445	has an object system.
  8446	
  8447	WPOP - WonderPop.  Robert Rae <rhr@aiai.ed.ac.uk>, Edinburgh 1976.  An
  8448	implementation of POP for the PDP-10 that used cages for different data
  8449	types.  Introduced processes, properites, and some typed identifiers 
  8450	
  8451	WRITEACOURSE - CAI language, for IBM 360.  "WRITEACOURSE: An Educational
  8452	Programming Language", E. Hunt et al, Proc FJCC 33(2) (1968).
  8453	
  8454	WSFN - Which Stands For Nothing.  Atari 1983.  Beginner's language with
  8455	emphasis on graphics, for Atari home computers.  Version: Advanced WSFN.
  8456	
  8457	WSL - Waterloo Systems Language.  A C-like systems programming language. 
  8458	"Waterloo Systems Language:  Tutorial and Language Reference", F.D.
  8459	Boswell, WATFAC Publications Ltd, Waterloo, Canada.  ISBN 0-919884-00-8.
  8460	
  8461	X-1 - Early system on UNIVAC I or II.  Listed in CACM 2(5):16 (May 1959).
  8462	
  8463	Xbase - Generic term for the dBASE family of languages.  Coined in response
  8464	to threatened litigation over use of the copyrighted trademark "dBASE."
  8465	
  8466	XC - Declarative extension of C++.  "XC - A Language for Embedded Rule
  8467	Based Systems", E. Nuutila et al, SIGPLAN Notices 22(9):23-32 (Sep 1987).
  8468	
  8469	XDL - An object-oriented extension to CCITT's SDL[2].  "XDL: An Object-
  8470	Oriented Extension to SDL", S.J. Ochuodho et al in [?]
  8471	
  8472	Xfun - S. Dalmas <dalmas@sophia.inria.fr>, INRIA, 1991.  A cross between
  8473	SML and Russell, intended for computer algebra.  "A Polymorphic Functional
  8474	language Applied to Symbolic Computation", S. Dalmas, Proc Intl Symp Symb
  8475	Alg Comp, Berkeley 1992.
  8476	
  8477	Xi - VLSI design language.  "The Circuit Design Language Xi", S.I. Feldman,
  8478	unpublished memo, Bell Labs, 1982.  Mentioned in Computational Aspects of
  8479	VLSI, J.D. Ullman, CS Press 1984.
  8480	
  8481	XLISP - eXperimental LISP.  David Betz.  LISP variant with object-oriented
  8482	extensions, source in C.  Versions exist for most PC's.  BYTE article.
  8483	ftp: glia.biostr.washington.edu:pub/xlisp/xlisp21e.tar.Z
  8484	
  8485	XPC - eXplicitly Parallel C.  Dialect of Parallel C which is mode
  8486	independent, i.e. efficiently compilable to both SIMD and MIMD
  8487	architectures.  "Toward Semantic Self-Consistency in Explicitly Parallel
  8488	Languages," M.J. Phillip & H.G. Dietz, Proc 4th Intl Conf on
  8489	Supercomputing, Santa Clara, CA, May 1989, v.1, pp.398-407.  Research
  8490	implementations only.
  8491	
  8492	XPL - Stanford, 1967-69.  Dialect of PL/I used for compiler writing.  "A
  8493	Compiler Generator," W.M. McKeeman et al, P-H 1970.  Also JCC, AFIPS 1968.
  8494	
  8495	XPOP - Extensible macro assembly language with user-redefinable grammar,
  8496	for use with FAP.  "XPOP: A Meta-language Without Metaphysics", M.I.
  8497	Halpern, Proc FJCC 25:57-68, AFIPS (Fall 1964).
  8498	
  8499	XScheme - David Betz.  Scheme with object-oriented extensions.  Source in
  8500	C.  Versions for PC, Macintosh, Atari, Amiga.
  8501	ftp: labrea.stanford.edu
  8502	     comp.sources.amiga/volume90, version 0.28 for Amiga
  8503	
  8504	XTRAN - FORTRAN-like, interactive.
  8505	
  8506	Y - General purpose systems language, syntactically falls between RATFOR
  8507	and C.  "The Y Programming Language", D.R. Hanson, SIGPLAN Notices
  8508	16(2):59-68 (Feb 1981).
  8509	
  8510	y++ - "YACC Meets C++", S.C. Johnson, USENIX Spring '88 Conf.
  8511	
  8512	Yaa - Yet Another Assembler - Macro assembler for GCOS 8 and Mark III on
  8513	Bull DPS-8 machines.  Available from Bull as part of U Waterloo Tools
  8514	package (maintained by <pjf@thinkage.on.ca>).
  8515	
  8516	Yacc - Yet Another Compiler Compiler.  Language used by the Yacc LALR
  8517	parser generator.  "YACC - Yet Another Compiler Compiler", S.C. Johnson, CS
  8518	TR 32, Bell Labs (Jul 1975). 
  8519	Implementations:
  8520	 ayacc - UC Irvine.  written in Ada, produces Ada output
  8521	  ftp: liege.ics.uci.edu:pub/irus/aflex-ayacc_1.2a.tar.Z
  8522	 Bison - from GNU
  8523	  ftp: prep.ai.mit.edu:pub/gnu/bison-1.14.tar.Z
  8524	 Bison++ - produces C++ output.
  8525	  ftp: psuvax1.cs.psu.edu:pub/src/gnu/bison++-1.04.tar.Z
  8526	 perl-byacc - produces perl output
  8527	  ftp:sparky.sterling.com:local-src/perl-byacc1.8.tar.Z
  8528	 SASL-Yacc - "Yacc in SASL - An Exercise in Functional Programming", Simon
  8529	Peyton-Jones, Software Prac & Exp 15:807-820 (1985).  Mentions also a BCPL
  8530	implementation.
  8531	 Yacc++ - 1990.  An object-oriented rewrite of yacc, supports regular exp-
  8532	ressions, produces an LR(1) parser.  Chris Clark, Compiler Resources Inc,
  8533	<compres!bz@crackers.clearpoint.com> (508) 435-5016.
  8534	 MLYACC - Implementation and output in SML/NJ
  8535	  ftp: research.att.com:dist/ml/75.tools.tar.Z
  8536	
  8537	YAPS - Yet Another Production System?  College Park Software.  A commercial
  8538	production rule language, simpler than OPS5.  Allows knowledge bases to be
  8539	attached to instances of CLOS objects.
  8540	info: Liz Allen <liz@grian.cps.altadena.cs.us>
  8541	
  8542	Yay - Yet Another Yacc - An extension of Yacc with LALR(2) parsing. 
  8543	Available from Bull as part of U Waterloo Tools package (maintained by
  8544	<pjf@thinkage.on.ca>).
  8545	
  8546	YELLOW - A language proposed by SRI to meet the Ironman requirements which
  8547	led to Ada. "On the YELLOW Language Submitted to the DoD", E.W. Dijkstra,
  8548	SIGPLAN Notices 13(10):22-26 (Oct 1978).
  8549	
  8550	Yerk - (named for Yerkes Observatory)  A public domain reincarnation of
  8551	Neon.
  8552	ftp: oddjob.uchicago.edu:pub/Yerk
  8553	info: Bob Lowenstein <rfl@oddjob.uchicago.edu>
  8554	
  8555	Z -
  8556	
  8557	  1. Programming Research Group, Oxford U, ca 1980.  A specification
  8558	language based on axiomatic set theory and first order logic.  Must be
  8559	written in LaTeX?  Used in the IBM CICS project?  "Understanding Z", J.M.
  8560	Spivey, Cambridge U Press 1988.
  8561	
  8562	  2. A stack-based, complex arithmetic simulation language.  ZOLA
  8563	Technologies, ZOLA@Applelink.Apple.com.
  8564	
  8565	Z++ - Object-oriented extension of Z.  "Z++, an Object-Oriented Extension
  8566	to Z", Lano, Z User Workshop, Oxford 1990, Springer Workshops in Computing,
  8567	1991, pp.151-172.
  8568	
  8569	ZAP - Language for expressing transformational developments.  "A System for
  8570	Assisting Program Transformation", M.S. Feather, ACM TOPLAS 4(1):1-20 (Jan
  8571	1982).
  8572	
  8573	Zed - 1978.  Software Portability Group, U Waterloo.  Eh, with types added. 
  8574	Similar to C.  Implementation language for the Thoth realtime operating
  8575	system.  Added a few simple types for greater efficiency on byte-addressed
  8576	machines.  String constants in case statements.  Enforces the naming
  8577	convention: MANIFESTS, Externals and locals.  "Porting the Zed Compiler",
  8578	G.B. Bonkowski et al, SIGPLAN Notices 14(8):92-97 (Aug 1979).
  8579	
  8580	ZENO - Euclid with asynchronous message-passing.  "Preliminary ZENO
  8581	Language Description", J.E. Ball et al, SIGPLAN Notices 14(9):17-34 (Sep
  8582	1979).
  8583	
  8584	ZERO - Object oriented extension of Z.  "Object Orientation in Z", S.
  8585	Stepney et al eds, Springer 1992.
  8586	
  8587	ZEST - Object oriented extension of Z.  "Object Orientation in Z", S.
  8588	Stepney et al eds, Springer 1992.
  8589	
  8590	ZetaLisp - MACLISP dialect used on the LISP Machine.  The many extensions
  8591	to MACLISP include vectors, closures, flavors, stack groups, locatives and
  8592	invisible pointers.  "LISP Machine Manual", D. Weinreb and D. Moon, MIT AI
  8593	Lab, 1981.
  8594	
  8595	ZIL - Zork Implementation Language.  Language used by Infocom's Interactive
  8596	Fiction adventure games.  zmachine is an interpreter, for Unix and Amiga.
  8597	ftp: plains.nodak.edu:Minix/st.contrib.Infocom.tar.Z
  8598	
  8599	zsh - Sh with list processing and database enhancements.
  8600	ftp: cs.ucsd.edu:/pub/zsh/zsh2.1.0.tar.Z
  8601	
  8602	ZOPL - Geac.  A low-level Pascal.
  8603	
  8604	ZUG - Geac.  A low-level Awk?
  8605	
  8606	Zuse - (named for Konrad Zuse, the designer of the first modern programming
  8607	language Plankalkul.)  Christian Collberg <collberg@dna.lth.se>, PhD thesis
  8608	1991.  A descendant of Ada, Modula-2, Mesa and Oberon-1 supporting several
  8609	levels of information hiding.  The Zuse type system includes fully hidden
  8610	types (similar to Modula-2 opaque types but wihout any implementation
  8611	restriction), semi-open pointer types (same as Modula-2 opaque types),
  8612	extensible record types (similar to Oberon-1 public projection types but
  8613	without the compiler hint), enumeration types, extensible enumeration
  8614	types, and extensible subrange types.  A type can also be protected by
  8615	specifying the operations that particular modules may perform (similar to
  8616	C++ friend classes and Ada private types).  Zuse also includes hidden and
  8617	extensible constants and hidden inline procedures.  In order to support the
  8618	higher levels of information hiding the implementation employs partial
  8619	intermediate code linking.  Version for Sun-3.
  8620	
  8621	
  8622	
  8623	APPENDIX A
  8624	
  8625	
  8626	Selected Works on Computer Language History and Design
  8627	======================================================
  8628	
  8629	AFIPS (American Federation of Information Processing Societies), SJCC
  8630	(Spring Joint Computer Conference) and FJCC (Fall Joint Computer
  8631	Conference), replaced after 1972 by the NCC (National Computer Conference). 
  8632	TK7885 .A1 J6
  8633	
  8634	Andrews, G.R. and F.B. Schneider, "Concepts and Notations for Concurrent
  8635	Programming", ACM Comp Surveys 15(1):1-43 (Mar 1983).
  8636	
  8637	Bal, H.E., "Programming Languages for Distributed Systems", ACM Comp
  8638	Surveys 21(3):261-322 (Sep 1989).
  8639	
  8640	Blume, Christian, "Programming Languages for Industrial Robots", Springer
  8641	1986.
  8642	
  8643	Bobrow, D.G. & Raphael, "New Programming Languages for Artificial
  8644	Intelligence Research", ACM Comp Surveys 6:155 (Nov 1974).
  8645	
  8646	Computer Languages  QA 76.7 .C647  ISSN 0096-0551
  8647	
  8648	Conference Record of the 19XX ACM Symposium on Lisp and Functional
  8649	Programming, QA 76.73 .L23 A26
  8650	
  8651	Horowitz, Ellis, "Programming Languages, A Grand Tour", 3rd ed, Springer
  8652	1987.  QA76.7 .P78
  8653	
  8654	Hudak, Paul, "Conception, Evolution and Application of Functional
  8655	Programming Languages", ACM Comp Surveys 21(3):359-411 (Sep 1989).
  8656	
  8657	IEEE Transactions on Software Engineering, QA76 .I33x
  8658	
  8659	POPL - Conference Record of the [Nth] Annual ACM Symposium on Principles of
  8660	Programming Languages.  QA 76.7 .A25a
  8661	
  8662	Sammet, Jean E., <sammet@vtvm1.cc.vt.edu> "Programming Languages:  History
  8663	and Fundamentals",  P-H 1969.  QA76.5 .S213.  The definitive work on early
  8664	computer language development.
  8665	
  8666	Sammet, Jean E., "Programming Languages: History and Future", CACM
  8667	15(7):601-610 (Jul 1972).
  8668	
  8669	Sammet, Jean E., "Roster of Programming Languages"
  8670		Computers & Automation 16(6):80-82 (June 1967)
  8671		Computers & Automation 17(6):120-123 (June 1968)
  8672		Computers & Automation 18(7):153-158 (June 1969)
  8673		Computers & Automation 19(6B):6-11 (Nov 30, 1970)
  8674		Computers & Automation 20(6B):6-13 (June 30, 1971)
  8675		Computers & Automation 21(6B) (Aug 30, 1972)
  8676		Computing Reviews 15(4): 147-160 (April 1974)
  8677		CACM 19(12):655-669 (Dec 1976)
  8678		SIGPLAN Notices 13(11):56 (Nov 1978).
  8679	
  8680	Shapiro, E., "The Family of Concurrent Logic Programming Languages", ACM
  8681	Comp Surveys, 21(3):413-510 (Sep 1989).
  8682	
  8683	ACM SIGPLAN Notices, QA76.7 .A13
  8684	
  8685	Software: Practice and Experience, QA 76.5 .S653
  8686	
  8687	ACM TOPLAS (Transactions on Programming Languages and Systems) QA76.7 .A16
  8688	
  8689	Wexelblat, R.L. ed, "Proceedings: ACM SIGPLAN History of Programming
  8690	Languages Conference"  (Los Angeles, July 1978).  758 pp.  Academic Press
  8691	1981.  An entertaining account of the history of roughly 15 major
  8692	programming languages.  Jean Sammet co-organized the conference.  ACM No
  8693	548780.  ACM Order Dept: (800)342-6626.  QA76.7 .H56
  8694	
  8695	
  8696	
  8697	APPENDIX B
  8698	
  8699	A Chronology of Influential Computer Languages
  8700	==============================================
  8701	
  8702	Konrad Zuse in Nazi Germany may have developed the first real computer
  8703	programming language, "Plankalkul" ca. 1945.  This is mentioned in the 1978
  8704	ACM History of Programming Languages FORTRAN session.
  8705	
  8706	According to Sammet, over 200 programming languages were developed between
  8707	1952 and 1972, but she considered only about 13 of them to be significant.
  8708	
  8709	1957    FORTRAN
  8710	1958    ALGOL
  8711	1960    LISP
  8712	1960    COBOL
  8713	1962    APL
  8714	1962    SIMULA
  8715	1964    BASIC
  8716	1964    PL/I
  8717	1966    ISWIM
  8718	1970    Prolog
  8719	1972    C
  8720	1975    Pascal
  8721	1975    Scheme
  8722	1978    CSP
  8723	1978    FP
  8724	1979    Modula-2
  8725	1980    dBASE II
  8726	1983    Smalltalk-80
  8727	1983    Ada
  8728	1983    Parlog
  8729	1984    Standard ML
  8730	1986    C++
  8731	1986    CLP(R)
  8732	1986    Eiffel
  8733	1988    Mathematica
  8734	1988    CLOS
  8735	1990    Haskell
  8736	
  8737	-- 
  8738	--Bill Kinnersley
  8739	  billk@hawk.cs.ukans.edu
  8740	 